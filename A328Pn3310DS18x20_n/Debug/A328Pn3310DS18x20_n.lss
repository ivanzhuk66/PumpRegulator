
A328Pn3310DS18x20_n.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800100  00005b94  00005c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b94  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000045d  008002a2  008002a2  00005e0a  2**0
                  ALLOC
  3 .eeprom       00000037  00810000  00810000  00005e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  00005e41  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         00000510  00000000  00000000  00005e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000021  00000000  00000000  00006354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      0000005c  00000000  00000000  00006375  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004d0  00000000  00000000  000063d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006bd8  00000000  00000000  000068a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001983  00000000  00000000  0000d479  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001ccc  00000000  00000000  0000edfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001068  00000000  00000000  00010ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001499  00000000  00000000  00011b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005a73  00000000  00000000  00012fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004a8  00000000  00000000  00018a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__ctors_end>
       4:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__vector_1>
       8:	0c 94 c3 25 	jmp	0x4b86	; 0x4b86 <__vector_2>
       c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      10:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      14:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      18:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__vector_6>
      1c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      20:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      24:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__vector_9>
      28:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      2c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      30:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      34:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      38:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      3c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      40:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      44:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      48:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__vector_18>
      4c:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__vector_19>
      50:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      54:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__vector_21>
      58:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      5c:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__vector_23>
      60:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      64:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__bad_interrupt>
      68:	f5 0e       	add	r15, r21
      6a:	08 0f       	add	r16, r24
      6c:	08 0f       	add	r16, r24
      6e:	08 0f       	add	r16, r24
      70:	08 0f       	add	r16, r24
      72:	08 0f       	add	r16, r24
      74:	08 0f       	add	r16, r24
      76:	08 0f       	add	r16, r24
      78:	08 0f       	add	r16, r24
      7a:	08 0f       	add	r16, r24
      7c:	08 0f       	add	r16, r24
      7e:	08 0f       	add	r16, r24
      80:	08 0f       	add	r16, r24
      82:	08 0f       	add	r16, r24
      84:	a8 0e       	add	r10, r24
      86:	b0 0e       	add	r11, r16
      88:	b8 0e       	add	r11, r24
      8a:	c0 0e       	add	r12, r16
      8c:	c8 0e       	add	r12, r24
      8e:	d5 0e       	add	r13, r21
      90:	dd 0e       	add	r13, r29
      92:	e5 0e       	add	r14, r21
      94:	ed 0e       	add	r14, r29
      96:	15 0f       	add	r17, r21
      98:	46 10       	cpse	r4, r6
      9a:	c5 11       	cpse	r28, r5
      9c:	2f 12       	cpse	r2, r31
      9e:	64 13       	cpse	r22, r20
      a0:	40 16       	cp	r4, r16
      a2:	17 16       	cp	r1, r23
      a4:	90 12       	cpse	r9, r16
      a6:	b2 0f       	add	r27, r18
      a8:	09 17       	cp	r16, r25
      aa:	78 13       	cpse	r23, r24
      ac:	b3 13       	cpse	r27, r19
      ae:	ee 13       	cpse	r30, r30
      b0:	29 14       	cp	r2, r9
      b2:	64 14       	cp	r6, r4
      b4:	9f 14       	cp	r9, r15
      b6:	da 14       	cp	r13, r10
      b8:	15 15       	cp	r17, r5
      ba:	be 15       	cp	r27, r14
      bc:	c2 15       	cp	r28, r2
      be:	50 15       	cp	r21, r0
      c0:	6c 15       	cp	r22, r12

000000c2 <__trampolines_end>:
      c2:	20 61       	ori	r18, 0x10	; 16
      c4:	74 20       	and	r7, r4
      c6:	25 30       	cpi	r18, 0x05	; 5
      c8:	32 64       	ori	r19, 0x42	; 66
      ca:	3a 25       	eor	r19, r10
      cc:	30 32       	cpi	r19, 0x20	; 32
      ce:	64 3a       	cpi	r22, 0xA4	; 164
      d0:	25 30       	cpi	r18, 0x05	; 5
      d2:	32 64       	ori	r19, 0x42	; 66
	...

000000d5 <__c.3162>:
      d5:	20 61 74 20 25 30 32 64 3a 25 30 32 64 3a 25 30      at %02d:%02d:%0
      e5:	32 64 00                                            2d.

000000e8 <__c.3160>:
      e8:	25 64 3a 20 00                                      %d: .

000000ed <__c.3135>:
      ed:	0a 25 69 2d 25 53 00                                .%i-%S.

000000f4 <__c.3133>:
      f4:	0a 25 69 2d 25 53 00                                .%i-%S.

000000fb <__c.3131>:
      fb:	0a 25 69 2d 25 53 00                                .%i-%S.

00000102 <__c.3129>:
     102:	0a 25 69 2d 25 53 00                                .%i-%S.

00000109 <__c.3127>:
     109:	0a 25 53 20 25 53 00                                .%S %S.

00000110 <__c.3094>:
     110:	0a 20 25 53 3a 20 25 69 00                          . %S: %i.

00000119 <__c.3092>:
     119:	0a 20 25 53 3a 20 25 69 00                          . %S: %i.

00000122 <__c.3090>:
     122:	0a 20 25 53 3a 20 25 69 00                          . %S: %i.

0000012b <__c.3088>:
     12b:	0a 20 25 53 3a 20 25 69 00                          . %S: %i.

00000134 <__c.3086>:
     134:	20 20 25 30 32 64 3a 25 30 32 64 3a 25 30 32 64       %02d:%02d:%02d
     144:	0a 00                                               ..

00000146 <__c.3076>:
     146:	25 53 00                                            %S.

00000149 <__c.3027>:
     149:	20 20 00                                              .

0000014c <__c.3024>:
     14c:	0a 25 53 3a 00                                      .%S:.

00000151 <__c.3021>:
     151:	0a 25 53 3a 00                                      .%S:.

00000156 <__c.3017>:
     156:	0a 25 53 3a 00                                      .%S:.

0000015b <__c.3013>:
     15b:	0a 25 30 32 64 3a 25 30 32 64 3a 25 30 32 64 00     .%02d:%02d:%02d.

0000016b <__c.3010>:
     16b:	0a 56 61 6c 75 65 20 69 73 3a 25 69 00              .Value is:%i.

00000178 <__c.3006>:
     178:	0a 25 53 44 20 25 53 21 00                          .%SD %S!.

00000181 <__c.3003>:
     181:	25 53 20 25 53 3f 0a 00                             %S %S?..

00000189 <__c.3000>:
     189:	20 25 53 3a 00                                       %S:.

0000018e <__c.2998>:
     18e:	20 25 53 25 53 0a 00                                 %S%S..

00000195 <__c.2996>:
     195:	25 53 20 25 53 0a 00                                %S %S..

0000019c <__c.2993>:
     19c:	20 25 53 3a 00                                       %S:.

000001a1 <__c.2991>:
     1a1:	20 25 53 25 53 0a 00                                 %S%S..

000001a8 <__c.2989>:
     1a8:	25 53 20 25 53 0a 00                                %S %S..

000001af <__c.2986>:
     1af:	20 25 53 3a 00                                       %S:.

000001b4 <__c.2984>:
     1b4:	20 25 53 25 53 0a 00                                 %S%S..

000001bb <__c.2982>:
     1bb:	25 53 20 25 53 0a 00                                %S %S..

000001c2 <__c.2979>:
     1c2:	20 25 53 3a 00                                       %S:.

000001c7 <__c.2977>:
     1c7:	20 25 53 25 53 0a 00                                 %S%S..

000001ce <__c.2975>:
     1ce:	25 53 20 25 53 0a 00                                %S %S..

000001d5 <__c.2972>:
     1d5:	20 25 53 3a 00                                       %S:.

000001da <__c.2970>:
     1da:	20 25 53 25 53 0a 00                                 %S%S..

000001e1 <__c.2968>:
     1e1:	25 53 20 25 53 0a 00                                %S %S..

000001e8 <__c.2965>:
     1e8:	20 25 53 3a 00                                       %S:.

000001ed <__c.2963>:
     1ed:	20 25 53 25 53 0a 00                                 %S%S..

000001f4 <__c.2961>:
     1f4:	25 53 20 25 53 0a 00                                %S %S..

000001fb <__c.2958>:
     1fb:	20 25 53 3a 00                                       %S:.

00000200 <__c.2956>:
     200:	20 25 53 25 53 0a 00                                 %S%S..

00000207 <__c.2954>:
     207:	25 53 20 25 53 0a 00                                %S %S..

0000020e <__c.2950>:
     20e:	20 25 53 3a 00                                       %S:.

00000213 <__c.2948>:
     213:	20 25 53 25 53 0a 00                                 %S%S..

0000021a <__c.2946>:
     21a:	25 53 20 25 53 0a 00                                %S %S..

00000221 <__c.2942>:
     221:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

0000022a <__c.2940>:
     22a:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000233 <__c.2938>:
     233:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

0000023c <__c.2936>:
     23c:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000245 <__c.2934>:
     245:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

0000024e <__c.2932>:
     24e:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000257 <__c.2930>:
     257:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000260 <__c.2928>:
     260:	25 53 25 53 3a 25 69 00                             %S%S:%i.

00000268 <__c.2925>:
     268:	0a 20 20 20 25 53 00                                .   %S.

0000026f <__c.2923>:
     26f:	0a 25 53 25 69 20 2d 20 25 53 00                    .%S%i - %S.

0000027a <__c.2921>:
     27a:	0a 25 53 25 69 20 2d 20 25 53 00                    .%S%i - %S.

00000285 <__c.2919>:
     285:	0a 25 53 25 69 20 2d 20 25 53 00                    .%S%i - %S.

00000290 <__c.2917>:
     290:	25 53 25 69 20 2d 20 25 53 00                       %S%i - %S.

0000029a <__c.2914>:
     29a:	20 20 20 20 25 53 00                                    %S.

000002a1 <__c.2909>:
     2a1:	25 53 00                                            %S.

000002a4 <__c.2905>:
     2a4:	20 20 20 00                                            .

000002a8 <__c.2903>:
     2a8:	0a 20 25 53 3a 25 30 32 58 00                       . %S:%02X.

000002b2 <__c.2897>:
     2b2:	20 25 53 20 25 53 3a 0a 00                           %S %S:..

000002bb <__c.2895>:
     2bb:	25 53 20 25 53 0a 00                                %S %S..

000002c2 <__c.2892>:
     2c2:	20 25 53 20 25 53 3a 0a 00                           %S %S:..

000002cb <__c.2890>:
     2cb:	25 53 20 25 53 0a 00                                %S %S..

000002d2 <__c.2887>:
     2d2:	20 25 53 20 25 53 3a 0a 00                           %S %S:..

000002db <__c.2885>:
     2db:	25 53 20 25 53 0a 00                                %S %S..

000002e2 <__c.2881>:
     2e2:	20 25 53 20 25 53 3a 0a 00                           %S %S:..

000002eb <__c.2879>:
     2eb:	25 53 20 25 53 0a 00                                %S %S..

000002f2 <__c.2874>:
     2f2:	0a 25 53 44 20 25 53 21 00                          .%SD %S!.

000002fb <__c.2871>:
     2fb:	0a 25 73 00                                         .%s.

000002ff <__c.2869>:
     2ff:	0a 25 53 25 53 3f 00                                .%S%S?.

00000306 <__c.2865>:
     306:	25 53 20 25 53 3a 0a 00                             %S %S:..

0000030e <__c.2860>:
     30e:	25 69 2e 25 53 20 25 53 00                          %i.%S %S.

00000317 <__c.2858>:
     317:	25 69 2e 25 53 20 25 53 0a 00                       %i.%S %S..

00000321 <__c.2856>:
     321:	25 69 2e 25 53 20 25 53 0a 00                       %i.%S %S..

0000032b <__c.2854>:
     32b:	25 69 2e 25 53 0a 00                                %i.%S..

00000332 <__c.2852>:
     332:	25 69 2e 25 53 20 25 53 2d 25 53 0a 00              %i.%S %S-%S..

0000033f <__c.2850>:
     33f:	25 69 2e 25 53 20 25 53 0a 00                       %i.%S %S..

00000349 <__c.2848>:
     349:	25 69 2e 25 53 20 25 53 73 0a 00                    %i.%S %Ss..

00000354 <__c.2846>:
     354:	25 69 2e 25 53 20 25 53 0a 00                       %i.%S %S..

0000035e <__c.2827>:
     35e:	0a 20 20 20 25 53 00                                .   %S.

00000365 <__c.2825>:
     365:	0a 20 20 20 25 53 73 00                             .   %Ss.

0000036d <__c.2823>:
     36d:	0a 20 20 20 20 25 53 00                             .    %S.

00000375 <__c.2821>:
     375:	0a 20 20 20 25 53 00                                .   %S.

0000037c <__c.2819>:
     37c:	0a 20 20 20 25 53 3a 25 30 31 69 00                 .   %S:%01i.

00000388 <__c.2817>:
     388:	0a 20 20 20 20 25 53 00                             .    %S.

00000390 <__c.2809>:
     390:	25 53 00                                            %S.

00000393 <__c.2807>:
     393:	25 53 00                                            %S.

00000396 <__c.2788>:
     396:	43 00                                               C.

00000398 <__c.2786>:
     398:	20 00                                                .

0000039a <notReadyStr>:
     39a:	30 32 2d 4e 6f 74 52 65 61 64 79 00                 02-NotReady.

000003a6 <startPowerGoneStr>:
     3a6:	30 31 2d 50 6f 77 65 72 20 47 6f 6e 65 21 00        01-Power Gone!.

000003b5 <startRegulatorStr>:
     3b5:	30 30 2d 52 65 67 75 6c 61 74 6f 72 20 53 74 61     00-Regulator Sta
     3c5:	72 74 65 64 21 00                                   rted!.

000003cb <telStr>:
     3cb:	50 48 4f 4e 45 00                                   PHONE.

000003d1 <EXT>:
     3d1:	2d 45 58 54 00                                      -EXT.

000003d6 <PAR>:
     3d6:	2d 50 41 52 00                                      -PAR.

000003db <DS1822>:
     3db:	2d 44 53 31 38 32 32 00                             -DS1822.

000003e3 <DS18B20>:
     3e3:	2d 44 53 31 38 42 32 30 00                          -DS18B20.

000003ec <DS18S20>:
     3ec:	2d 44 53 31 38 53 32 30 00                          -DS18S20.

000003f5 <Sensorsfound>:
     3f5:	20 53 65 6e 73 6f 72 73 66 6f 75 6e 64 00            Sensorsfound.

00000403 <temperStr>:
     403:	54 2d 45 44 47 45 53 00                             T-EDGES.

0000040b <missingStr>:
     40b:	4d 49 53 53 49 4e 47 00                             MISSING.

00000413 <absenceStr>:
     413:	41 42 53 45 4e 43 45 00                             ABSENCE.

0000041b <sensorStr>:
     41b:	53 65 6e 73 6f 72 00                                Sensor.

00000422 <alarmStr>:
     422:	41 4c 41 52 4d 00                                   ALARM.

00000428 <secondStr>:
     428:	53 45 43 4f 4e 44 00                                SECOND.

0000042f <hourStr>:
     42f:	48 4f 55 52 00                                      HOUR.

00000434 <minuteStr>:
     434:	4d 49 4e 55 54 45 00                                MINUTE.

0000043b <timeStr>:
     43b:	54 49 4d 45 00                                      TIME.

00000440 <saveStr>:
     440:	53 41 56 45 00                                      SAVE.

00000445 <toeepromStr>:
     445:	54 4f 20 45 45 50 52 4f 4d 00                       TO EEPROM.

0000044f <diffStr>:
     44f:	44 49 46 46 00                                      DIFF.

00000454 <tempStr>:
     454:	54 45 4d 50 00                                      TEMP.

00000459 <maxStr>:
     459:	4d 41 58 00                                         MAX.

0000045d <minStr>:
     45d:	4d 49 4e 00                                         MIN.

00000461 <assignStr>:
     461:	41 53 53 49 47 4e 73 00                             ASSIGNs.

00000469 <viewStr>:
     469:	56 49 45 57 00                                      VIEW.

0000046e <setStr>:
     46e:	53 45 54 00                                         SET.

00000472 <checksumStr>:
     472:	43 48 45 43 4b 53 55 4d 00                          CHECKSUM.

0000047b <nsupdownStr>:
     47b:	4e 73 2d 55 50 53 49 44 45 2d 44 4f 57 4e 00        Ns-UPSIDE-DOWN.

0000048a <returnStr>:
     48a:	52 45 54 55 52 4e 00                                RETURN.

00000491 <supplyStr>:
     491:	53 55 50 50 4c 59 00                                SUPPLY.

00000498 <outdoorStr>:
     498:	4f 55 54 44 4f 4f 52 00                             OUTDOOR.

000004a0 <indoorStr>:
     4a0:	49 4e 44 4f 4f 52 00                                INDOOR.

000004a7 <snStr>:
     4a7:	53 4e 00                                            SN.

000004aa <nextStr>:
     4aa:	2a 2d 4e 45 58 54 00                                *-NEXT.

000004b1 <exitStr>:
     4b1:	23 2d 45 58 49 54 00                                #-EXIT.

000004b8 <helloStr2>:
     4b8:	52 45 47 55 4c 41 54 4f 52 00                       REGULATOR.

000004c2 <helloStr1>:
     4c2:	50 55 4d 50 00                                      PUMP.

000004c7 <okStr>:
     4c7:	4f 4b 00                                            OK.

000004ca <font>:
     4ca:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     4da:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     4ea:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     4fa:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     50a:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     51a:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     52a:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     53a:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     54a:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     55a:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     56a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     57a:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     58a:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     59a:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     5aa:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     5ba:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     5ca:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     5da:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     5ea:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     5fa:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     60a:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     61a:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     62a:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     63a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     64a:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     65a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     66a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     67a:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     68a:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     69a:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     6aa:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     6ba:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     6ca:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     6da:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     6ea:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     6fa:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     70a:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     71a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     72a:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     73a:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx
     74a:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     75a:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     76a:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     77a:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     78a:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     79a:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     7aa:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     7ba:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     7ca:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     7da:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     7ea:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     7fa:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     80a:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     81a:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     82a:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     83a:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     84a:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     85a:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     86a:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     87a:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     88a:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     89a:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     8aa:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     8ba:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     8ca:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     8da:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     8ea:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     8fa:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     90a:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     91a:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     92a:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     93a:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     94a:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     95a:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     96a:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     97a:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     98a:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     99a:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     9aa:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     9ba:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

000009c5 <__c.2382>:
     9c5:	41 54 2b 43 4d 47 44 3d 00                          AT+CMGD=.

000009ce <__c.2354>:
     9ce:	22 0a 00                                            "..

000009d1 <__c.2352>:
     9d1:	41 54 2b 43 4d 47 53 3d 22 00                       AT+CMGS=".

000009db <__c.2334>:
     9db:	0a 00                                               ..

000009dd <__c.2332>:
     9dd:	41 54 2b 43 4d 47 52 3d 00                          AT+CMGR=.

000009e6 <__ctors_end>:
     9e6:	11 24       	eor	r1, r1
     9e8:	1f be       	out	0x3f, r1	; 63
     9ea:	cf ef       	ldi	r28, 0xFF	; 255
     9ec:	d8 e0       	ldi	r29, 0x08	; 8
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	cd bf       	out	0x3d, r28	; 61

000009f2 <__do_copy_data>:
     9f2:	12 e0       	ldi	r17, 0x02	; 2
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	b1 e0       	ldi	r27, 0x01	; 1
     9f8:	e4 e9       	ldi	r30, 0x94	; 148
     9fa:	fb e5       	ldi	r31, 0x5B	; 91
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <__do_copy_data+0x10>
     9fe:	05 90       	lpm	r0, Z+
     a00:	0d 92       	st	X+, r0
     a02:	a2 3a       	cpi	r26, 0xA2	; 162
     a04:	b1 07       	cpc	r27, r17
     a06:	d9 f7       	brne	.-10     	; 0x9fe <__do_copy_data+0xc>

00000a08 <__do_clear_bss>:
     a08:	26 e0       	ldi	r18, 0x06	; 6
     a0a:	a2 ea       	ldi	r26, 0xA2	; 162
     a0c:	b2 e0       	ldi	r27, 0x02	; 2
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <.do_clear_bss_start>

00000a10 <.do_clear_bss_loop>:
     a10:	1d 92       	st	X+, r1

00000a12 <.do_clear_bss_start>:
     a12:	af 3f       	cpi	r26, 0xFF	; 255
     a14:	b2 07       	cpc	r27, r18
     a16:	e1 f7       	brne	.-8      	; 0xa10 <.do_clear_bss_loop>
     a18:	0e 94 3a 0c 	call	0x1874	; 0x1874 <main>
     a1c:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <_exit>

00000a20 <__bad_interrupt>:
     a20:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a24 <IntAdc>:
;
.global IntAdc
IntAdc:
;	in rKey,ADCH ; read AD converter MSB

	push	R16
     a24:	0f 93       	push	r16
	push	R15
     a26:	ff 92       	push	r15
	lds	r15,SREG
     a28:	f0 90 5f 00 	lds	r15, 0x005F
	lds R16,_SFR_MEM_ADDR(KeyPressed)
     a2c:	00 91 01 01 	lds	r16, 0x0101
	cli
     a30:	f8 94       	cli
	or	R16,R16
     a32:	00 2b       	or	r16, r16
	brne	IntAdcExit
     a34:	61 f4       	brne	.+24     	; 0xa4e <IntAdcExit>
	lds	R16,ADCH
     a36:	00 91 79 00 	lds	r16, 0x0079
	sts	AdcVal,R16
     a3a:	00 93 00 01 	sts	0x0100, r16
	ldi	R16,0x1
     a3e:	01 e0       	ldi	r16, 0x01	; 1
	sts _SFR_MEM_ADDR(KeyPressed),R16
     a40:	00 93 01 01 	sts	0x0101, r16
	cli
     a44:	f8 94       	cli
	eor	R1,R1
     a46:	11 24       	eor	r1, r1
	sts _SFR_MEM_ADDR(TimeKeyPressed),R1
     a48:	10 92 80 03 	sts	0x0380, r1
	sei
     a4c:	78 94       	sei

00000a4e <IntAdcExit>:
IntAdcExit:
	ldi R16,0b00000000 ; stop ADC
     a4e:	00 e0       	ldi	r16, 0x00	; 0
	sts ADCSRA,R16 ;
     a50:	00 93 7a 00 	sts	0x007A, r16
	sei
     a54:	78 94       	sei
	sts	SREG,R15
     a56:	f0 92 5f 00 	sts	0x005F, r15
	pop	R15
     a5a:	ff 90       	pop	r15
	pop	R16
     a5c:	0f 91       	pop	r16
	reti ; return from interrupt
     a5e:	18 95       	reti

00000a60 <IntAnalogComp>:
;
.global IntAnalogComp
IntAnalogComp:
	push	R16
     a60:	0f 93       	push	r16
	push	R17
     a62:	1f 93       	push	r17
	lds	r17,SREG
     a64:	10 91 5f 00 	lds	r17, 0x005F
	cli
     a68:	f8 94       	cli
	ldi R16,0b11110111 ; Start ADC
     a6a:	07 ef       	ldi	r16, 0xF7	; 247
	sts ADCSRA,R16
     a6c:	00 93 7a 00 	sts	0x007A, r16
	ori	R16,(1<<ADIE)
     a70:	08 60       	ori	r16, 0x08	; 8
	sts ADCSRA,R16 ;  Enable ADC and ADC Interrupt
     a72:	00 93 7a 00 	sts	0x007A, r16
	sei
     a76:	78 94       	sei
	sts	SREG,R17
     a78:	10 93 5f 00 	sts	0x005F, r17
	pop	R17
     a7c:	1f 91       	pop	r17
	pop	R16
     a7e:	0f 91       	pop	r16
	reti
     a80:	18 95       	reti

00000a82 <InitAnalogComp>:
;
.global InitAnalogComp
InitAnalogComp:
	push	R16
     a82:	0f 93       	push	r16
;	push	R17
	ldi	R16, (1<<AIN0D) | (1<<AIN1D)			//Disable the digital input on D6 (AIN0), and on D7 (AIN1)
     a84:	03 e0       	ldi	r16, 0x03	; 3
	sts	DIDR1,R16
     a86:	00 93 7f 00 	sts	0x007F, r16
	ldi	R16,(1<<ACI) |	(1<<ACIS1) | (1<<ACIS0)
     a8a:	03 e1       	ldi	r16, 0x13	; 19
	sts	ACSR,R16
     a8c:	00 93 50 00 	sts	0x0050, r16
	ori	R16,(1<<ACIE)			//Enable the comparator interrupt and capture on a rising edge
     a90:	08 60       	ori	r16, 0x08	; 8
	//ldi	R16,(1<<ACIE) |	(1<<ACIS1) | (1<<ACIS0) | (1<<ACBG)	//Enable the comparator interrupt and capture on a rising edge
	sts	ACSR,R16
     a92:	00 93 50 00 	sts	0x0050, r16
;	pop	R17
	pop	R16
     a96:	0f 91       	pop	r16
	ret
     a98:	08 95       	ret

00000a9a <InitAdc>:
;
; Start AD converter with interrupt
;

InitAdc:
	push	R16
     a9a:	0f 93       	push	r16
	push	R17
     a9c:	1f 93       	push	r17
	andi r24,0x0F
     a9e:	8f 70       	andi	r24, 0x0F	; 15
	; ADC{R24} is used for the conversion
	; disconnect the PB3 digital driver, saves supply current
	mov R17,R24
     aa0:	18 2f       	mov	r17, r24
	subi R17,0x06
     aa2:	16 50       	subi	r17, 0x06	; 6
	brge	AdcInitSkip
     aa4:	6c f4       	brge	.+26     	; 0xac0 <AdcInitSkip>
	ldi R17,0b00000000
     aa6:	10 e0       	ldi	r17, 0x00	; 0
	mov	R16,R24
     aa8:	08 2f       	mov	r16, r24

00000aaa <AdcInitLoop>:
AdcInitLoop:
	or	R16,R16
     aaa:	00 2b       	or	r16, r16
	breq	AdcPineDisconnected
     aac:	21 f0       	breq	.+8      	; 0xab6 <AdcPineDisconnected>
	lsl	R17
     aae:	11 0f       	add	r17, r17
	dec	R16
     ab0:	0a 95       	dec	r16
	jmp	AdcInitLoop
     ab2:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <AdcInitLoop>

00000ab6 <AdcPineDisconnected>:
AdcPineDisconnected:
	lds	R16,DIDR0
     ab6:	00 91 7e 00 	lds	r16, 0x007E
	or	R16,R17
     aba:	01 2b       	or	r16, r17
	sts	DIDR0,R16		; disconnect the digital driver, saves supply current
     abc:	00 93 7e 00 	sts	0x007E, r16

00000ac0 <AdcInitSkip>:
AdcInitSkip:
;
	ldi R16,(1<<REFS0)|(1<<ADLAR) 		; ADMUX channel in com, AREF from AVCC
     ac0:	00 e6       	ldi	r16, 0x60	; 96
										; Reference = supply voltage, Left-adjust the result
	or R16,R24
     ac2:	08 2b       	or	r16, r24
	sts ADMUX,R16
     ac4:	00 93 7c 00 	sts	0x007C, r16
	; select autostart option
	ldi R16,0b00000000 //free-running conversion (autostart)
     ac8:	00 e0       	ldi	r16, 0x00	; 0
	sts ADCSRB,R16
     aca:	00 93 7b 00 	sts	0x007B, r16
	; ADC, allow interrupt, select clock divider - will bei in IntAnalogComp
	ldi R16,0b01101111 	; ADC, autostart,
     ace:	0f e6       	ldi	r16, 0x6F	; 111
	sts ADCSRA,R16 		;  Int Enable, clock divider to 128
     ad0:	00 93 7a 00 	sts	0x007A, r16
; initiation complete
	pop	R17
     ad4:	1f 91       	pop	r17
	pop	R16
     ad6:	0f 91       	pop	r16
	ret
     ad8:	08 95       	ret

00000ada <GetKeyCode>:
; Converting a AD result to a key code
;
.global GetKeyCode ;
GetKeyCode:
	; if the AD result can change in between, the result must be copied first
	push	R0
     ada:	0f 92       	push	r0
	push	R1
     adc:	1f 92       	push	r1
	push	ZH
     ade:	ff 93       	push	r31
	push	ZL
     ae0:	ef 93       	push	r30
	eor	R24,R24
     ae2:	88 27       	eor	r24, r24
	lds	R1,_SFR_MEM_ADDR(KeyPressed)
     ae4:	10 90 01 01 	lds	r1, 0x0101
	or	R1,R1
     ae8:	11 28       	or	r1, r1
	breq GetKeyCodeExit		; No key pressed
     aea:	99 f0       	breq	.+38     	; 0xb12 <GetKeyCodeExit>
	lds R1,_SFR_MEM_ADDR(AdcVal) ; copy AD result to R1
     aec:	10 90 00 01 	lds	r1, 0x0100
	ldi ZH,hi8(_SFR_MEM_ADDR(KeyTable)) ; Z points to conversion table
     af0:	fb e0       	ldi	r31, 0x0B	; 11
	ldi ZL,lo8(_SFR_MEM_ADDR(KeyTable))
     af2:	e8 e2       	ldi	r30, 0x28	; 40

00000af4 <GetKeyCode1>:
GetKeyCode1:
	lpm ; read one table value from flash ram
     af4:	c8 95       	lpm
	cp R1,R0 ; compare AD result with table value
     af6:	10 14       	cp	r1, r0
	brcs GetKeyCode2 ; less than table value, key identified
     af8:	20 f0       	brcs	.+8      	; 0xb02 <GetKeyCode2>
	inc R0 ; test, if table end is reached
     afa:	03 94       	inc	r0
	breq GetKeyCode2 ; reached end of table
     afc:	11 f0       	breq	.+4      	; 0xb02 <GetKeyCode2>
	adiw ZL,2 ; point to next table entry
     afe:	32 96       	adiw	r30, 0x02	; 2
	rjmp GetKeyCode1 ; go on comparing next entry
     b00:	f9 cf       	rjmp	.-14     	; 0xaf4 <GetKeyCode1>

00000b02 <GetKeyCode2>:
GetKeyCode2:
	adiw ZL,1 ; point to MSB = key code
     b02:	31 96       	adiw	r30, 0x01	; 1
	lpm ; read key code to R0
     b04:	c8 95       	lpm
	mov	R24,R0
     b06:	80 2d       	mov	r24, r0
	eor	R1,R1
     b08:	11 24       	eor	r1, r1
	cli
     b0a:	f8 94       	cli
	sts	_SFR_MEM_ADDR(KeyPressed),R1
     b0c:	10 92 01 01 	sts	0x0101, r1
	sei
     b10:	78 94       	sei

00000b12 <GetKeyCodeExit>:
GetKeyCodeExit:
	pop	ZL
     b12:	ef 91       	pop	r30
	pop	ZH
     b14:	ff 91       	pop	r31
	pop	R1
     b16:	1f 90       	pop	r1
	pop	R0
     b18:	0f 90       	pop	r0
	ret
     b1a:	08 95       	ret

00000b1c <resetKbd>:
;
.global resetKbd
resetKbd:
	eor	R1,R1
     b1c:	11 24       	eor	r1, r1
	cli
     b1e:	f8 94       	cli
	sts	_SFR_MEM_ADDR(KeyPressed),R1
     b20:	10 92 01 01 	sts	0x0101, r1
	sei
     b24:	78 94       	sei
	ret
     b26:	08 95       	ret

00000b28 <KeyTable>:
     b28:	07 00       	.word	0x0007	; ????
     b2a:	12 31       	cpi	r17, 0x12	; 18
     b2c:	1c 32       	cpi	r17, 0x2C	; 44
     b2e:	2a 33       	cpi	r18, 0x3A	; 58
     b30:	40 34       	cpi	r20, 0x40	; 64
     b32:	5b 35       	cpi	r21, 0x5B	; 91
     b34:	79 36       	cpi	r23, 0x69	; 105
     b36:	9c 37       	cpi	r25, 0x7C	; 124
     b38:	b9 38       	cpi	r27, 0x89	; 137
     b3a:	cf 39       	cpi	r28, 0x9F	; 159
     b3c:	e1 2a       	or	r14, r17
     b3e:	ed 30       	cpi	r30, 0x0D	; 13
     b40:	ff 23       	and	r31, r31

00000b42 <search_sensors_n>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#ifdef MAXIM_SEARCH_ENABLE

uint8_t search_sensors_n()
{
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
#ifdef DEBUG
	uart_puts_P( NEWLINESTR "Scanning Bus for DS18X20" NEWLINESTR );
#endif

#ifdef DS_PWR_PIN
	       DS_PWR_OUT_LOW();
     b50:	5d 98       	cbi	0x0b, 5	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b52:	8a e0       	ldi	r24, 0x0A	; 10
     b54:	8a 95       	dec	r24
     b56:	f1 f7       	brne	.-4      	; 0xb54 <search_sensors_n+0x12>
     b58:	03 e0       	ldi	r16, 0x03	; 3

	k = 3;	// Try three times

	do {
	   // find ALL devices
	   nSenss = 0;
     b5a:	d1 2c       	mov	r13, r1
     b5c:	c9 e8       	ldi	r28, 0x89	; 137
     b5e:	d3 e0       	ldi	r29, 0x03	; 3
     b60:	0f 2e       	mov	r0, r31
     b62:	f1 e8       	ldi	r31, 0x81	; 129
     b64:	ef 2e       	mov	r14, r31
     b66:	f3 e0       	ldi	r31, 0x03	; 3
     b68:	ff 2e       	mov	r15, r31
     b6a:	f0 2d       	mov	r31, r0
	   rslt = OWFirst();
     b6c:	0e 94 40 1b 	call	0x3680	; 0x3680 <OWFirst>
	   while (rslt)
     b70:	88 23       	and	r24, r24
     b72:	f9 f0       	breq	.+62     	; 0xbb2 <search_sensors_n+0x70>

	k = 3;	// Try three times

	do {
	   // find ALL devices
	   nSenss = 0;
     b74:	1d 2d       	mov	r17, r13
	   rslt = OWFirst();
	   while (rslt)
	   {
		   if(OWVerify()){
     b76:	0e 94 4c 1b 	call	0x3698	; 0x3698 <OWVerify>
     b7a:	88 23       	and	r24, r24
     b7c:	a9 f0       	breq	.+42     	; 0xba8 <search_sensors_n+0x66>
			for ( i=0; i < OW_ROMCODE_SIZE && nSenss < MAXSENSORS ; i++ )
     b7e:	14 30       	cpi	r17, 0x04	; 4
     b80:	80 f4       	brcc	.+32     	; 0xba2 <search_sensors_n+0x60>
     b82:	f7 01       	movw	r30, r14
				gSensorIDs[nSenss][i] = ROM_NO[i];
     b84:	a1 2f       	mov	r26, r17
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	aa 0f       	add	r26, r26
     b8a:	bb 1f       	adc	r27, r27
     b8c:	aa 0f       	add	r26, r26
     b8e:	bb 1f       	adc	r27, r27
     b90:	aa 0f       	add	r26, r26
     b92:	bb 1f       	adc	r27, r27
     b94:	a4 55       	subi	r26, 0x54	; 84
     b96:	bd 4f       	sbci	r27, 0xFD	; 253
     b98:	91 91       	ld	r25, Z+
     b9a:	9d 93       	st	X+, r25
	   nSenss = 0;
	   rslt = OWFirst();
	   while (rslt)
	   {
		   if(OWVerify()){
			for ( i=0; i < OW_ROMCODE_SIZE && nSenss < MAXSENSORS ; i++ )
     b9c:	ec 17       	cp	r30, r28
     b9e:	fd 07       	cpc	r31, r29
     ba0:	d9 f7       	brne	.-10     	; 0xb98 <search_sensors_n+0x56>
				gSensorIDs[nSenss][i] = ROM_NO[i];

				if(++nSenss >= MAXSENSORS ) break;
     ba2:	1f 5f       	subi	r17, 0xFF	; 255
     ba4:	14 30       	cpi	r17, 0x04	; 4
     ba6:	30 f4       	brcc	.+12     	; 0xbb4 <search_sensors_n+0x72>
		   }
	      rslt = OWNext();
     ba8:	0e 94 49 1b 	call	0x3692	; 0x3692 <OWNext>

	do {
	   // find ALL devices
	   nSenss = 0;
	   rslt = OWFirst();
	   while (rslt)
     bac:	81 11       	cpse	r24, r1
     bae:	e3 cf       	rjmp	.-58     	; 0xb76 <search_sensors_n+0x34>
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <search_sensors_n+0x72>

	k = 3;	// Try three times

	do {
	   // find ALL devices
	   nSenss = 0;
     bb2:	1d 2d       	mov	r17, r13
     bb4:	01 50       	subi	r16, 0x01	; 1
		   }
	      rslt = OWNext();
	   }

		k--;
	} while (k > 0);
     bb6:	d1 f6       	brne	.-76     	; 0xb6c <search_sensors_n+0x2a>

#ifdef DS_PWR_PIN
       DS_PWR_OUT_HIGH();
     bb8:	5d 9a       	sbi	0x0b, 5	; 11
#endif
return nSenss;

}
     bba:	81 2f       	mov	r24, r17
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <LcdPutTemp>:
}

#endif

void LcdPutTemp(int16_t decicelsius)
{
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	2a 97       	sbiw	r28, 0x0a	; 10
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
	char s[10];
	DS18X20_format_from_decicelsius( decicelsius, s, 10 );
     be0:	4a e0       	ldi	r20, 0x0A	; 10
     be2:	be 01       	movw	r22, r28
     be4:	6f 5f       	subi	r22, 0xFF	; 255
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <DS18X20_format_from_decicelsius>
	LCD_FSTR(FONT_1X,(const char*)PSTR(" "));
     bec:	88 e9       	ldi	r24, 0x98	; 152
     bee:	93 e0       	ldi	r25, 0x03	; 3
     bf0:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_draw_string3>
	LCD_STR(FONT_1X, s);
     bf4:	ce 01       	movw	r24, r28
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	0e 94 9e 20 	call	0x413c	; 0x413c <LCD_draw_string2>
	LCD_FSTR(FONT_1X,(const  char*)PSTR("C"));
     bfc:	86 e9       	ldi	r24, 0x96	; 150
     bfe:	93 e0       	ldi	r25, 0x03	; 3
     c00:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_draw_string3>
}
     c04:	2a 96       	adiw	r28, 0x0a	; 10
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <ShutOffADC>:
/*
 *  ShutOffADC      shut down the ADC and prepare for power reduction
 */
void  ShutOffADC(void)
{
    ACSR = (1<<ACD);                        // disable A/D comparator
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	80 bf       	out	0x30, r24	; 48
    ADCSRA = (0<<ADEN);                     // disable A/D converter
     c1a:	10 92 7a 00 	sts	0x007A, r1
    DIDR0 = 0x3f;                           // disable all A/D inputs (ADC0-ADC5)
     c1e:	8f e3       	ldi	r24, 0x3F	; 63
     c20:	80 93 7e 00 	sts	0x007E, r24
    DIDR1 = 0x03;                           // disable AIN0 and AIN1
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	80 93 7f 00 	sts	0x007F, r24
     c2a:	08 95       	ret

00000c2c <getSleep>:
	getSleep();
}
//
void getSleep(){

	ShutOffADC();
     c2c:	0e 94 0b 06 	call	0xc16	; 0xc16 <ShutOffADC>
    cli();
     c30:	f8 94       	cli
    sleep_enable();    // enables the sleep bit in the mcucr register
     c32:	83 b7       	in	r24, 0x33	; 51
     c34:	81 60       	ori	r24, 0x01	; 1
     c36:	83 bf       	out	0x33, r24	; 51
                             // so sleep is possible. just a safety pin

    SleepTime = TIME_TO_SLEEP;
     c38:	8c e2       	ldi	r24, 0x2C	; 44
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	90 93 a9 02 	sts	0x02A9, r25
     c40:	80 93 a8 02 	sts	0x02A8, r24
    extstate = 0;
     c44:	10 92 3b 03 	sts	0x033B, r1
    ExtInt0Enable();
     c48:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <ExtInt0Enable>
   do {
	 sei();
     c4c:	78 94       	sei
	 sleep_bod_disable();
     c4e:	85 b7       	in	r24, 0x35	; 53
     c50:	80 66       	ori	r24, 0x60	; 96
     c52:	85 bf       	out	0x35, r24	; 53
     c54:	8f 7d       	andi	r24, 0xDF	; 223
     c56:	85 bf       	out	0x35, r24	; 53
	 sleep_cpu();            // here the device is actually put to sleep!!
     c58:	88 95       	sleep
	...
                             // THE PROGRAM CONTINUES FROM HERE AFTER
//WAKING UP
       asm volatile(
     c62:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c64:	2f e7       	ldi	r18, 0x7F	; 127
     c66:	88 e3       	ldi	r24, 0x38	; 56
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	21 50       	subi	r18, 0x01	; 1
     c6c:	80 40       	sbci	r24, 0x00	; 0
     c6e:	90 40       	sbci	r25, 0x00	; 0
     c70:	e1 f7       	brne	.-8      	; 0xc6a <getSleep+0x3e>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <getSleep+0x48>
     c74:	00 00       	nop
      "   nop                    \n"
      "   nop                    \n"
      "   nop                    \n"
    ::);
       _delay_ms(50);
       if(extstate > 0)
     c76:	80 91 3b 03 	lds	r24, 0x033B
     c7a:	81 11       	cpse	r24, r1
     c7c:	0c c0       	rjmp	.+24     	; 0xc96 <getSleep+0x6a>
    	   break;
      SleepTime --;
     c7e:	80 91 a8 02 	lds	r24, 0x02A8
     c82:	90 91 a9 02 	lds	r25, 0x02A9
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	90 93 a9 02 	sts	0x02A9, r25
     c8c:	80 93 a8 02 	sts	0x02A8, r24
   } while (SleepTime > 0);
     c90:	18 16       	cp	r1, r24
     c92:	19 06       	cpc	r1, r25
     c94:	dc f2       	brlt	.-74     	; 0xc4c <getSleep+0x20>

   sleep_disable();         // first thing after waking from sleep:
     c96:	83 b7       	in	r24, 0x33	; 51
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	83 bf       	out	0x33, r24	; 51
                             // disable sleep...
   ExtInt0Disable();
     c9c:	0e 94 98 25 	call	0x4b30	; 0x4b30 <ExtInt0Disable>
   InitAdc(ADC_CHANNEL);
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <InitAdc>
   InitAnalogComp();
     ca6:	0e 94 41 05 	call	0xa82	; 0xa82 <InitAnalogComp>
     caa:	08 95       	ret

00000cac <sleepPWS>:

	}
}
//
void sleepPWS(){
	 extstate = 0;
     cac:	10 92 3b 03 	sts	0x033B, r1
	 set_sleep_mode(SLEEP_MODE_PWR_SAVE);   // sleep mode is set here
     cb0:	83 b7       	in	r24, 0x33	; 51
     cb2:	81 7f       	andi	r24, 0xF1	; 241
     cb4:	86 60       	ori	r24, 0x06	; 6
     cb6:	83 bf       	out	0x33, r24	; 51
	 getSleep();
     cb8:	0e 94 16 06 	call	0xc2c	; 0xc2c <getSleep>
     cbc:	08 95       	ret

00000cbe <sleepPWRDown>:
}
//
void sleepPWRDown(){
	extstate = 0;
     cbe:	10 92 3b 03 	sts	0x033B, r1
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);   // sleep mode is set here
     cc2:	83 b7       	in	r24, 0x33	; 51
     cc4:	81 7f       	andi	r24, 0xF1	; 241
     cc6:	84 60       	ori	r24, 0x04	; 4
     cc8:	83 bf       	out	0x33, r24	; 51
	getSleep();
     cca:	0e 94 16 06 	call	0xc2c	; 0xc2c <getSleep>
     cce:	08 95       	ret

00000cd0 <test_SN_sensors>:
    DIDR1 = 0x03;                           // disable AIN0 and AIN1
}
//
#ifndef DEBUG

int8_t test_SN_sensors(){
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
	int8_t i, k;
	int8_t retcode;
	for ( k = 0; k < MAXSENSORS; k++ ) {
	 retcode = 1;
	 for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[k],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
     cda:	c0 91 69 03 	lds	r28, 0x0369
     cde:	d0 91 6a 03 	lds	r29, 0x036A
#ifndef DEBUG

int8_t test_SN_sensors(){
	int8_t i, k;
	int8_t retcode;
	for ( k = 0; k < MAXSENSORS; k++ ) {
     ce2:	00 e0       	ldi	r16, 0x00	; 0
	 retcode = 1;
	 for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[k],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	f1 2c       	mov	r15, r1
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <test_SN_sensors+0x1c>
     cea:	1f 2d       	mov	r17, r15
     cec:	28 e0       	ldi	r18, 0x08	; 8
     cee:	02 02       	muls	r16, r18
     cf0:	c0 01       	movw	r24, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	48 e0       	ldi	r20, 0x08	; 8
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	be 01       	movw	r22, r28
     cfa:	28 e0       	ldi	r18, 0x08	; 8
     cfc:	12 02       	muls	r17, r18
     cfe:	60 0d       	add	r22, r0
     d00:	71 1d       	adc	r23, r1
     d02:	11 24       	eor	r1, r1
     d04:	84 55       	subi	r24, 0x54	; 84
     d06:	9d 4f       	sbci	r25, 0xFD	; 253
     d08:	0e 94 8a 29 	call	0x5314	; 0x5314 <memcmp>
     d0c:	89 2b       	or	r24, r25
     d0e:	29 f0       	breq	.+10     	; 0xd1a <test_SN_sensors+0x4a>
int8_t test_SN_sensors(){
	int8_t i, k;
	int8_t retcode;
	for ( k = 0; k < MAXSENSORS; k++ ) {
	 retcode = 1;
	 for ( i = 0; i < MAXSENSORS; i++ ) {
     d10:	1f 5f       	subi	r17, 0xFF	; 255
     d12:	14 30       	cpi	r17, 0x04	; 4
     d14:	5c f3       	brlt	.-42     	; 0xcec <test_SN_sensors+0x1c>
     d16:	80 2f       	mov	r24, r16
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <test_SN_sensors+0x52>
#ifndef DEBUG

int8_t test_SN_sensors(){
	int8_t i, k;
	int8_t retcode;
	for ( k = 0; k < MAXSENSORS; k++ ) {
     d1a:	0f 5f       	subi	r16, 0xFF	; 255
     d1c:	04 30       	cpi	r16, 0x04	; 4
     d1e:	2c f3       	brlt	.-54     	; 0xcea <test_SN_sensors+0x1a>
		}
	 }	// for ( i = 0; i < MAXSENSORS; i++ )
	 if(retcode) return k;
//	 else sn_presence[k] = TRUE;
    } //for ( k = 0; k < MAXSENSORS; k++ )
	return 99;
     d20:	83 e6       	ldi	r24, 0x63	; 99
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	08 95       	ret

00000d2e <copyrSNsTogSNs>:
	}
	if(k > 0) return 0;
	return retcode;
}
//
void copyrSNsTogSNs(void){
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for ( i = 0; i < MAXSENSORS; i++ ) {
		memcpy(&gSensorIDs[i],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE);
     d32:	28 e0       	ldi	r18, 0x08	; 8
     d34:	dc 01       	movw	r26, r24
     d36:	a4 55       	subi	r26, 0x54	; 84
     d38:	bd 4f       	sbci	r27, 0xFD	; 253
     d3a:	e0 91 69 03 	lds	r30, 0x0369
     d3e:	f0 91 6a 03 	lds	r31, 0x036A
     d42:	e8 0f       	add	r30, r24
     d44:	f9 1f       	adc	r31, r25
     d46:	32 2f       	mov	r19, r18
     d48:	01 90       	ld	r0, Z+
     d4a:	0d 92       	st	X+, r0
     d4c:	3a 95       	dec	r19
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <copyrSNsTogSNs+0x1a>
     d50:	08 96       	adiw	r24, 0x08	; 8
	return retcode;
}
//
void copyrSNsTogSNs(void){
	uint8_t i;
	for ( i = 0; i < MAXSENSORS; i++ ) {
     d52:	80 32       	cpi	r24, 0x20	; 32
     d54:	91 05       	cpc	r25, r1
     d56:	71 f7       	brne	.-36     	; 0xd34 <copyrSNsTogSNs+0x6>
		memcpy(&gSensorIDs[i],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE);
	}	// for ( i = 0; i < MAXSENSORS; i++ )
}
     d58:	08 95       	ret

00000d5a <LcdPowerGoneStr>:
#endif
//
//
void LcdPowerGoneStr(void){
	LCD_CLEAR();
     d5a:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
	LCD_GOTO_XY(0,2);
     d5e:	62 e0       	ldi	r22, 0x02	; 2
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <LCD_set_position2>
	printf_P(PSTR("%S"),startPowerGoneStr);
     d66:	86 ea       	ldi	r24, 0xA6	; 166
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	86 e4       	ldi	r24, 0x46	; 70
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	9f 93       	push	r25
     d74:	8f 93       	push	r24
     d76:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
	LCD_UPDATE();
     d7a:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
     d7e:	2f ef       	ldi	r18, 0xFF	; 255
     d80:	81 e1       	ldi	r24, 0x11	; 17
     d82:	9a e7       	ldi	r25, 0x7A	; 122
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	80 40       	sbci	r24, 0x00	; 0
     d88:	90 40       	sbci	r25, 0x00	; 0
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <LcdPowerGoneStr+0x2a>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <LcdPowerGoneStr+0x34>
     d8e:	00 00       	nop
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	08 95       	ret

00000d9a <DisplayTemperature>:
_delay_ms(5000);
}
//
void DisplayTemperature(void){
     d9a:	cf 93       	push	r28
	uint8_t i,k;
	if(mausure_temperature_ok){
     d9c:	80 91 08 01 	lds	r24, 0x0108
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <DisplayTemperature+0xc>
     da4:	aa c0       	rjmp	.+340    	; 0xefa <DisplayTemperature+0x160>
     da6:	ef e3       	ldi	r30, 0x3F	; 63
     da8:	f3 e0       	ldi	r31, 0x03	; 3
     daa:	27 e4       	ldi	r18, 0x47	; 71
     dac:	33 e0       	ldi	r19, 0x03	; 3
     dae:	c0 e0       	ldi	r28, 0x00	; 0
		k = 0;
		for(i=0;i<MAXSENSORS;i++) if(temper[i] != TEMPER_BAD) k++;
     db0:	81 91       	ld	r24, Z+
     db2:	91 91       	ld	r25, Z+
     db4:	83 36       	cpi	r24, 0x63	; 99
     db6:	91 05       	cpc	r25, r1
     db8:	09 f0       	breq	.+2      	; 0xdbc <DisplayTemperature+0x22>
     dba:	cf 5f       	subi	r28, 0xFF	; 255
     dbc:	e2 17       	cp	r30, r18
     dbe:	f3 07       	cpc	r31, r19
     dc0:	b9 f7       	brne	.-18     	; 0xdb0 <DisplayTemperature+0x16>

		if(oldDisplaySens > k) LCD_CLEAR();
     dc2:	80 91 cc 02 	lds	r24, 0x02CC
     dc6:	c8 17       	cp	r28, r24
     dc8:	18 f4       	brcc	.+6      	; 0xdd0 <DisplayTemperature+0x36>
     dca:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DisplayTemperature+0x3a>
		else LCD_FIRSTLINE();
     dd0:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
		oldDisplaySens = k;
     dd4:	c0 93 cc 02 	sts	0x02CC, r28

		printf_P(PSTR("  %02d:%02d:%02d\n"),tAsync.hour,tAsync.minute,tAsync.second);
     dd8:	80 91 17 01 	lds	r24, 0x0117
     ddc:	1f 92       	push	r1
     dde:	8f 93       	push	r24
     de0:	80 91 18 01 	lds	r24, 0x0118
     de4:	1f 92       	push	r1
     de6:	8f 93       	push	r24
     de8:	80 91 19 01 	lds	r24, 0x0119
     dec:	1f 92       	push	r1
     dee:	8f 93       	push	r24
     df0:	84 e3       	ldi	r24, 0x34	; 52
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	9f 93       	push	r25
     df6:	8f 93       	push	r24
     df8:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
		if(sn_presence[0]){
     dfc:	8d b7       	in	r24, 0x3d	; 61
     dfe:	9e b7       	in	r25, 0x3e	; 62
     e00:	08 96       	adiw	r24, 0x08	; 8
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	9e bf       	out	0x3e, r25	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	8d bf       	out	0x3d, r24	; 61
     e0c:	80 91 d8 02 	lds	r24, 0x02D8
     e10:	88 23       	and	r24, r24
     e12:	c9 f0       	breq	.+50     	; 0xe46 <DisplayTemperature+0xac>
			if(temper[0] < TEMPER_BAD)
     e14:	80 91 3f 03 	lds	r24, 0x033F
     e18:	90 91 40 03 	lds	r25, 0x0340
     e1c:	83 36       	cpi	r24, 0x63	; 99
     e1e:	91 05       	cpc	r25, r1
     e20:	94 f4       	brge	.+36     	; 0xe46 <DisplayTemperature+0xac>
				printf_P(PSTR("\n %S: %i"),indoorStr,temper[0]);
     e22:	9f 93       	push	r25
     e24:	8f 93       	push	r24
     e26:	80 ea       	ldi	r24, 0xA0	; 160
     e28:	94 e0       	ldi	r25, 0x04	; 4
     e2a:	9f 93       	push	r25
     e2c:	8f 93       	push	r24
     e2e:	8b e2       	ldi	r24, 0x2B	; 43
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	9f 93       	push	r25
     e34:	8f 93       	push	r24
     e36:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
		}
		if(sn_presence[1]){
     e46:	80 91 d9 02 	lds	r24, 0x02D9
     e4a:	88 23       	and	r24, r24
     e4c:	c9 f0       	breq	.+50     	; 0xe80 <DisplayTemperature+0xe6>
			if(temper[1] < TEMPER_BAD)
     e4e:	80 91 41 03 	lds	r24, 0x0341
     e52:	90 91 42 03 	lds	r25, 0x0342
     e56:	83 36       	cpi	r24, 0x63	; 99
     e58:	91 05       	cpc	r25, r1
     e5a:	94 f4       	brge	.+36     	; 0xe80 <DisplayTemperature+0xe6>
				printf_P(PSTR("\n %S: %i"),outdoorStr,temper[1]);
     e5c:	9f 93       	push	r25
     e5e:	8f 93       	push	r24
     e60:	88 e9       	ldi	r24, 0x98	; 152
     e62:	94 e0       	ldi	r25, 0x04	; 4
     e64:	9f 93       	push	r25
     e66:	8f 93       	push	r24
     e68:	82 e2       	ldi	r24, 0x22	; 34
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	9f 93       	push	r25
     e6e:	8f 93       	push	r24
     e70:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
		}
		if(sn_presence[2]){
     e80:	80 91 da 02 	lds	r24, 0x02DA
     e84:	88 23       	and	r24, r24
     e86:	c9 f0       	breq	.+50     	; 0xeba <DisplayTemperature+0x120>
			if(temper[2] < TEMPER_BAD)
     e88:	80 91 43 03 	lds	r24, 0x0343
     e8c:	90 91 44 03 	lds	r25, 0x0344
     e90:	83 36       	cpi	r24, 0x63	; 99
     e92:	91 05       	cpc	r25, r1
     e94:	94 f4       	brge	.+36     	; 0xeba <DisplayTemperature+0x120>
				printf_P(PSTR("\n %S: %i"),supplyStr,temper[2]);
     e96:	9f 93       	push	r25
     e98:	8f 93       	push	r24
     e9a:	81 e9       	ldi	r24, 0x91	; 145
     e9c:	94 e0       	ldi	r25, 0x04	; 4
     e9e:	9f 93       	push	r25
     ea0:	8f 93       	push	r24
     ea2:	89 e1       	ldi	r24, 0x19	; 25
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	9f 93       	push	r25
     ea8:	8f 93       	push	r24
     eaa:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
		}
		if(sn_presence[3]){
     eba:	80 91 db 02 	lds	r24, 0x02DB
     ebe:	88 23       	and	r24, r24
     ec0:	c9 f0       	breq	.+50     	; 0xef4 <DisplayTemperature+0x15a>
			if(temper[3] < TEMPER_BAD)
     ec2:	80 91 45 03 	lds	r24, 0x0345
     ec6:	90 91 46 03 	lds	r25, 0x0346
     eca:	83 36       	cpi	r24, 0x63	; 99
     ecc:	91 05       	cpc	r25, r1
     ece:	94 f4       	brge	.+36     	; 0xef4 <DisplayTemperature+0x15a>
				printf_P(PSTR("\n %S: %i"),returnStr,temper[3]);
     ed0:	9f 93       	push	r25
     ed2:	8f 93       	push	r24
     ed4:	8a e8       	ldi	r24, 0x8A	; 138
     ed6:	94 e0       	ldi	r25, 0x04	; 4
     ed8:	9f 93       	push	r25
     eda:	8f 93       	push	r24
     edc:	80 e1       	ldi	r24, 0x10	; 16
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
		}

		mausure_temperature_ok = FALSE;
     ef4:	10 92 08 01 	sts	0x0108, r1
     ef8:	09 c0       	rjmp	.+18     	; 0xf0c <DisplayTemperature+0x172>
     efa:	9f ef       	ldi	r25, 0xFF	; 255
     efc:	23 ed       	ldi	r18, 0xD3	; 211
     efe:	80 e3       	ldi	r24, 0x30	; 48
     f00:	91 50       	subi	r25, 0x01	; 1
     f02:	20 40       	sbci	r18, 0x00	; 0
     f04:	80 40       	sbci	r24, 0x00	; 0
     f06:	e1 f7       	brne	.-8      	; 0xf00 <DisplayTemperature+0x166>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <DisplayTemperature+0x170>
     f0a:	00 00       	nop
	} else _delay_ms(2000);
}
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <DoWatchDog>:
	return 0;

}
//
void DoWatchDog(void) {
	if(ReadyWATCHDOG){
     f10:	80 91 7b 03 	lds	r24, 0x037B
     f14:	88 23       	and	r24, r24
     f16:	61 f0       	breq	.+24     	; 0xf30 <DoWatchDog+0x20>
		if(WATCHDOG_STATE){
     f18:	80 91 dc 02 	lds	r24, 0x02DC
     f1c:	88 23       	and	r24, r24
     f1e:	21 f0       	breq	.+8      	; 0xf28 <DoWatchDog+0x18>
			WATCHDOG_PORT |= (1 << WATCHDOG_PIN); WATCHDOG_STATE = 0;
     f20:	28 9a       	sbi	0x05, 0	; 5
     f22:	10 92 dc 02 	sts	0x02DC, r1
     f26:	08 95       	ret
		} else {
			WATCHDOG_PORT &= ~(1 << WATCHDOG_PIN); WATCHDOG_STATE = 1;}
     f28:	28 98       	cbi	0x05, 0	; 5
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 dc 02 	sts	0x02DC, r24
     f30:	08 95       	ret

00000f32 <getTemperature>:
	} else _delay_ms(2000);
}

//
int16_t getTemperature(uint8_t* sensorID)
{
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	2c 97       	sbiw	r28, 0x0c	; 12
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	8c 01       	movw	r16, r24
     f4e:	68 94       	set
     f50:	ff 24       	eor	r15, r15
     f52:	f2 f8       	bld	r15, 2
	int16_t temp;
	char s[10],k;
	k = 3; // Repeat 3 times

	do {
	if ( DS18X20_start_meas( DS18X20_POWER_PARASITE, sensorID ) == DS18X20_OK ) {
     f54:	b8 01       	movw	r22, r16
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <DS18X20_start_meas>
     f5c:	81 11       	cpse	r24, r1
     f5e:	22 c0       	rjmp	.+68     	; 0xfa4 <getTemperature+0x72>
     f60:	2f e7       	ldi	r18, 0x7F	; 127
     f62:	8f e4       	ldi	r24, 0x4F	; 79
     f64:	92 e1       	ldi	r25, 0x12	; 18
     f66:	21 50       	subi	r18, 0x01	; 1
     f68:	80 40       	sbci	r24, 0x00	; 0
     f6a:	90 40       	sbci	r25, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <getTemperature+0x34>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <getTemperature+0x3e>
     f70:	00 00       	nop
		_delay_ms( DS18B20_TCONV_12BIT );
		DO_WATCHDOG();
     f72:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
		if ( DS18X20_read_decicelsius( sensorID, &temp) == DS18X20_OK ) {
     f76:	be 01       	movw	r22, r28
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	c8 01       	movw	r24, r16
     f7e:	0e 94 82 27 	call	0x4f04	; 0x4f04 <DS18X20_read_decicelsius>
     f82:	81 11       	cpse	r24, r1
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <getTemperature+0x72>
			if( DS18X20_OK == DS18X20_format_from_decicelsius( temp, s, 10 ))
     f86:	4a e0       	ldi	r20, 0x0A	; 10
     f88:	be 01       	movw	r22, r28
     f8a:	6d 5f       	subi	r22, 0xFD	; 253
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <DS18X20_format_from_decicelsius>
     f96:	81 11       	cpse	r24, r1
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <getTemperature+0x72>
				return atoi(s);
     f9a:	ce 01       	movw	r24, r28
     f9c:	03 96       	adiw	r24, 0x03	; 3
     f9e:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <getTemperature+0x7a>
     fa4:	fa 94       	dec	r15
		}
	}
	} while (k--);
     fa6:	b1 f6       	brne	.-84     	; 0xf54 <getTemperature+0x22>
	return TEMPER_BAD;
     fa8:	83 e6       	ldi	r24, 0x63	; 99
     faa:	90 e0       	ldi	r25, 0x00	; 0
}
     fac:	2c 96       	adiw	r28, 0x0c	; 12
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	08 95       	ret

00000fc4 <manageTemperatureEvent>:
			}
		}
	}
*/
//
	void manageTemperatureEvent(void){
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
		uint8_t i;

		if(kg < MAXSENSORS - 1) kg++;
     fc8:	80 91 cd 02 	lds	r24, 0x02CD
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	24 f4       	brge	.+8      	; 0xfd8 <manageTemperatureEvent+0x14>
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	80 93 cd 02 	sts	0x02CD, r24
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <manageTemperatureEvent+0x18>
		else kg = 0;
     fd8:	10 92 cd 02 	sts	0x02CD, r1

			if(sn_presence[kg]){
     fdc:	c0 91 cd 02 	lds	r28, 0x02CD
     fe0:	dd 27       	eor	r29, r29
     fe2:	c7 fd       	sbrc	r28, 7
     fe4:	d0 95       	com	r29
     fe6:	fe 01       	movw	r30, r28
     fe8:	e8 52       	subi	r30, 0x28	; 40
     fea:	fd 4f       	sbci	r31, 0xFD	; 253
     fec:	80 81       	ld	r24, Z
     fee:	88 23       	and	r24, r24
     ff0:	f1 f1       	breq	.+124    	; 0x106e <manageTemperatureEvent+0xaa>
				temper[kg] = getTemperature(&gSensorIDs[kg][0]);
     ff2:	ce 01       	movw	r24, r28
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	84 55       	subi	r24, 0x54	; 84
    1002:	9d 4f       	sbci	r25, 0xFD	; 253
    1004:	0e 94 99 07 	call	0xf32	; 0xf32 <getTemperature>
    1008:	cc 0f       	add	r28, r28
    100a:	dd 1f       	adc	r29, r29
    100c:	c1 5c       	subi	r28, 0xC1	; 193
    100e:	dc 4f       	sbci	r29, 0xFC	; 252
    1010:	99 83       	std	Y+1, r25	; 0x01
    1012:	88 83       	st	Y, r24
				if (temper[kg] == TEMPER_BAD){
    1014:	80 91 cd 02 	lds	r24, 0x02CD
    1018:	99 27       	eor	r25, r25
    101a:	87 fd       	sbrc	r24, 7
    101c:	90 95       	com	r25
    101e:	fc 01       	movw	r30, r24
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	e1 5c       	subi	r30, 0xC1	; 193
    1026:	fc 4f       	sbci	r31, 0xFC	; 252
    1028:	20 81       	ld	r18, Z
    102a:	31 81       	ldd	r19, Z+1	; 0x01
    102c:	23 36       	cpi	r18, 0x63	; 99
    102e:	31 05       	cpc	r19, r1
    1030:	f1 f4       	brne	.+60     	; 0x106e <manageTemperatureEvent+0xaa>
					if (sn_noready_counter[kg] < NOREADY_COUNTER_MAX )
    1032:	fc 01       	movw	r30, r24
    1034:	ec 52       	subi	r30, 0x2C	; 44
    1036:	fd 4f       	sbci	r31, 0xFD	; 253
    1038:	20 81       	ld	r18, Z
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	30 f4       	brcc	.+12     	; 0x104a <manageTemperatureEvent+0x86>
						sn_noready_counter[kg]+=1;
    103e:	fc 01       	movw	r30, r24
    1040:	ec 52       	subi	r30, 0x2C	; 44
    1042:	fd 4f       	sbci	r31, 0xFD	; 253
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	20 83       	st	Z, r18
    1048:	12 c0       	rjmp	.+36     	; 0x106e <manageTemperatureEvent+0xaa>
					else {
							sn_presence[kg] = FALSE;
    104a:	fc 01       	movw	r30, r24
    104c:	e8 52       	subi	r30, 0x28	; 40
    104e:	fd 4f       	sbci	r31, 0xFD	; 253
    1050:	10 82       	st	Z, r1
							noready_sens[kg] = TRUE;
    1052:	fc 01       	movw	r30, r24
    1054:	e2 53       	subi	r30, 0x32	; 50
    1056:	fd 4f       	sbci	r31, 0xFD	; 253
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	20 83       	st	Z, r18
							temper[kg] = TEMPER_BAD;
    105c:	fc 01       	movw	r30, r24
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	e1 5c       	subi	r30, 0xC1	; 193
    1064:	fc 4f       	sbci	r31, 0xFC	; 252
    1066:	83 e6       	ldi	r24, 0x63	; 99
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24
						 }
				}
			}

//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	if(PrefHeatting){
    106e:	80 91 47 03 	lds	r24, 0x0347
    1072:	88 23       	and	r24, r24
    1074:	99 f0       	breq	.+38     	; 0x109c <manageTemperatureEvent+0xd8>
	// Outdoor temperature is drop down 10 degrees Celcius for an hour
		if (temper[0] <= rTempInDoorMax + PREHEATTING_ADDV ||
    1076:	80 91 3f 03 	lds	r24, 0x033F
    107a:	90 91 40 03 	lds	r25, 0x0340
    107e:	20 91 3d 03 	lds	r18, 0x033D
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	2b 5f       	subi	r18, 0xFB	; 251
    1086:	3f 4f       	sbci	r19, 0xFF	; 255
    1088:	28 17       	cp	r18, r24
    108a:	39 07       	cpc	r19, r25
    108c:	1c f4       	brge	.+6      	; 0x1094 <manageTemperatureEvent+0xd0>
    108e:	83 36       	cpi	r24, 0x63	; 99
    1090:	91 05       	cpc	r25, r1
    1092:	59 f4       	brne	.+22     	; 0x10aa <manageTemperatureEvent+0xe6>
				temper[0] == TEMPER_BAD){
				cbi(VALVE_PORT, VALVE_PIN3XVALVE);
    1094:	43 98       	cbi	0x08, 3	; 8
				sbi(PUMP0_PORT, PUMP0_PIN0);
    1096:	45 9a       	sbi	0x08, 5	; 8
				sbi(PUMP0_PORT, PUMP0_PIN1);
    1098:	44 9a       	sbi	0x08, 4	; 8
				return;
    109a:	4e c0       	rjmp	.+156    	; 0x1138 <manageTemperatureEvent+0x174>
		}
	}


	if(temper[0] != TEMPER_BAD){
    109c:	80 91 3f 03 	lds	r24, 0x033F
    10a0:	90 91 40 03 	lds	r25, 0x0340
    10a4:	83 36       	cpi	r24, 0x63	; 99
    10a6:	91 05       	cpc	r25, r1
    10a8:	b1 f0       	breq	.+44     	; 0x10d6 <manageTemperatureEvent+0x112>
			if (temper[0] < rTempInDoorMin){
    10aa:	20 91 3c 03 	lds	r18, 0x033C
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	82 17       	cp	r24, r18
    10b2:	93 07       	cpc	r25, r19
    10b4:	24 f4       	brge	.+8      	; 0x10be <manageTemperatureEvent+0xfa>
				cbi(VALVE_PORT, VALVE_PIN3XVALVE);
    10b6:	43 98       	cbi	0x08, 3	; 8
				sbi(PUMP0_PORT, PUMP0_PIN0);
    10b8:	45 9a       	sbi	0x08, 5	; 8
				sbi(PUMP0_PORT, PUMP0_PIN1);
    10ba:	44 9a       	sbi	0x08, 4	; 8
    10bc:	0c c0       	rjmp	.+24     	; 0x10d6 <manageTemperatureEvent+0x112>
			} else {
				if (temper[0] >= rTempInDoorMax){
    10be:	20 91 3d 03 	lds	r18, 0x033D
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	82 17       	cp	r24, r18
    10c6:	93 07       	cpc	r25, r19
    10c8:	1c f0       	brlt	.+6      	; 0x10d0 <manageTemperatureEvent+0x10c>
					cbi(PUMP0_PORT, PUMP0_PIN0);
    10ca:	45 98       	cbi	0x08, 5	; 8
					cbi(PUMP0_PORT, PUMP0_PIN1);
    10cc:	44 98       	cbi	0x08, 4	; 8
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <manageTemperatureEvent+0x112>
				} else {
					cbi(PUMP0_PORT, PUMP0_PIN0);
    10d0:	45 98       	cbi	0x08, 5	; 8
					cbi(VALVE_PORT, VALVE_PIN3XVALVE);
    10d2:	43 98       	cbi	0x08, 3	; 8
					sbi(PUMP0_PORT, PUMP0_PIN1);
    10d4:	44 9a       	sbi	0x08, 4	; 8
				}
			}
	}

	if(temper[2] != TEMPER_BAD && temper[3] != TEMPER_BAD) {
    10d6:	80 91 43 03 	lds	r24, 0x0343
    10da:	90 91 44 03 	lds	r25, 0x0344
    10de:	83 36       	cpi	r24, 0x63	; 99
    10e0:	91 05       	cpc	r25, r1
    10e2:	51 f1       	breq	.+84     	; 0x1138 <manageTemperatureEvent+0x174>
    10e4:	20 91 45 03 	lds	r18, 0x0345
    10e8:	30 91 46 03 	lds	r19, 0x0346
    10ec:	23 36       	cpi	r18, 0x63	; 99
    10ee:	31 05       	cpc	r19, r1
    10f0:	19 f1       	breq	.+70     	; 0x1138 <manageTemperatureEvent+0x174>
		i = temper[2] - temper[3];
    10f2:	82 1b       	sub	r24, r18
		if( i < rTempDiffSupplyReturnMin && temper[0] > rTempInDoorMin){
    10f4:	90 91 7e 03 	lds	r25, 0x037E
    10f8:	89 17       	cp	r24, r25
    10fa:	68 f4       	brcc	.+26     	; 0x1116 <manageTemperatureEvent+0x152>
    10fc:	20 91 3c 03 	lds	r18, 0x033C
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 91 3f 03 	lds	r20, 0x033F
    1106:	50 91 40 03 	lds	r21, 0x0340
    110a:	24 17       	cp	r18, r20
    110c:	35 07       	cpc	r19, r21
    110e:	1c f4       	brge	.+6      	; 0x1116 <manageTemperatureEvent+0x152>
			sbi(PUMP0_PORT, PUMP0_PIN0);
    1110:	45 9a       	sbi	0x08, 5	; 8
			sbi(VALVE_PORT, VALVE_PIN3XVALVE);
    1112:	43 9a       	sbi	0x08, 3	; 8
			cbi(PUMP0_PORT, PUMP0_PIN1);
    1114:	44 98       	cbi	0x08, 4	; 8
		}
		if( i > rTempDiffSupplyReturnMax && temper[0] < rTempInDoorMax){
    1116:	90 91 3e 03 	lds	r25, 0x033E
    111a:	98 17       	cp	r25, r24
    111c:	68 f4       	brcc	.+26     	; 0x1138 <manageTemperatureEvent+0x174>
    111e:	80 91 3d 03 	lds	r24, 0x033D
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	20 91 3f 03 	lds	r18, 0x033F
    1128:	30 91 40 03 	lds	r19, 0x0340
    112c:	28 17       	cp	r18, r24
    112e:	39 07       	cpc	r19, r25
    1130:	1c f4       	brge	.+6      	; 0x1138 <manageTemperatureEvent+0x174>
			cbi(VALVE_PORT, VALVE_PIN3XVALVE);
    1132:	43 98       	cbi	0x08, 3	; 8
			sbi(PUMP0_PORT, PUMP0_PIN0);
    1134:	45 9a       	sbi	0x08, 5	; 8
			sbi(PUMP0_PORT, PUMP0_PIN1);
    1136:	44 9a       	sbi	0x08, 4	; 8
		}
	}
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <ValidSensorCode>:
}
//
char ValidSensorCode(uint8_t* sensorID){
	uint8_t l;
	for (l = 0; l < OW_ROMCODE_SIZE; l++){
		if(sensorID[l] == 0xff || sensorID[l] == 0x00) continue;
    113e:	fc 01       	movw	r30, r24
    1140:	20 81       	ld	r18, Z
    1142:	21 50       	subi	r18, 0x01	; 1
    1144:	2e 3f       	cpi	r18, 0xFE	; 254
    1146:	48 f0       	brcs	.+18     	; 0x115a <ValidSensorCode+0x1c>
    1148:	31 96       	adiw	r30, 0x01	; 1
    114a:	87 e0       	ldi	r24, 0x07	; 7
    114c:	91 91       	ld	r25, Z+
    114e:	91 50       	subi	r25, 0x01	; 1
    1150:	9e 3f       	cpi	r25, 0xFE	; 254
    1152:	28 f0       	brcs	.+10     	; 0x115e <ValidSensorCode+0x20>
    1154:	81 50       	subi	r24, 0x01	; 1
		}
}
//
char ValidSensorCode(uint8_t* sensorID){
	uint8_t l;
	for (l = 0; l < OW_ROMCODE_SIZE; l++){
    1156:	d1 f7       	brne	.-12     	; 0x114c <ValidSensorCode+0xe>
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <ValidSensorCode+0x24>
		if(sensorID[l] == 0xff || sensorID[l] == 0x00) continue;
		else return 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	08 95       	ret
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	08 95       	ret
	}
	return 0;
    1162:	80 e0       	ldi	r24, 0x00	; 0
}
    1164:	08 95       	ret

00001166 <checkPresenceSN>:
//	 else sn_presence[k] = TRUE;
    } //for ( k = 0; k < MAXSENSORS; k++ )
	return 99;
}
//
char checkPresenceSN(){
    1166:	8f 92       	push	r8
    1168:	9f 92       	push	r9
    116a:	af 92       	push	r10
    116c:	bf 92       	push	r11
    116e:	cf 92       	push	r12
    1170:	df 92       	push	r13
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	0f e3       	ldi	r16, 0x3F	; 63
    1180:	13 e0       	ldi	r17, 0x03	; 3
    1182:	0f 2e       	mov	r0, r31
    1184:	f8 ed       	ldi	r31, 0xD8	; 216
    1186:	ef 2e       	mov	r14, r31
    1188:	f2 e0       	ldi	r31, 0x02	; 2
    118a:	ff 2e       	mov	r15, r31
    118c:	f0 2d       	mov	r31, r0
    118e:	c0 e0       	ldi	r28, 0x00	; 0
    1190:	d0 e0       	ldi	r29, 0x00	; 0
	char retcode;
	uint8_t i,k;

	k = 0;
    1192:	b1 2c       	mov	r11, r1
	retcode = 1;
    1194:	aa 24       	eor	r10, r10
    1196:	a3 94       	inc	r10
	for ( i = 0; i < MAXSENSORS; i++ ) {
		if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
			if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) == TEMPER_BAD)
				retcode = 0;
    1198:	81 2c       	mov	r8, r1
			else sn_presence[i] = TRUE;
    119a:	99 24       	eor	r9, r9
    119c:	93 94       	inc	r9
	uint8_t i,k;

	k = 0;
	retcode = 1;
	for ( i = 0; i < MAXSENSORS; i++ ) {
		if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
    119e:	c0 90 69 03 	lds	r12, 0x0369
    11a2:	d0 90 6a 03 	lds	r13, 0x036A
    11a6:	cc 0e       	add	r12, r28
    11a8:	dd 1e       	adc	r13, r29
    11aa:	c6 01       	movw	r24, r12
    11ac:	0e 94 9f 08 	call	0x113e	; 0x113e <ValidSensorCode>
    11b0:	88 23       	and	r24, r24
    11b2:	a1 f0       	breq	.+40     	; 0x11dc <checkPresenceSN+0x76>
			if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) == TEMPER_BAD)
    11b4:	c6 01       	movw	r24, r12
    11b6:	0e 94 99 07 	call	0xf32	; 0xf32 <getTemperature>
    11ba:	f8 01       	movw	r30, r16
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
    11c0:	83 36       	cpi	r24, 0x63	; 99
    11c2:	91 05       	cpc	r25, r1
    11c4:	19 f0       	breq	.+6      	; 0x11cc <checkPresenceSN+0x66>
				retcode = 0;
			else sn_presence[i] = TRUE;
    11c6:	f7 01       	movw	r30, r14
    11c8:	90 82       	st	Z, r9
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <checkPresenceSN+0x68>
	k = 0;
	retcode = 1;
	for ( i = 0; i < MAXSENSORS; i++ ) {
		if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
			if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) == TEMPER_BAD)
				retcode = 0;
    11cc:	a8 2c       	mov	r10, r8
    11ce:	8f e6       	ldi	r24, 0x6F	; 111
    11d0:	97 e1       	ldi	r25, 0x17	; 23
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <checkPresenceSN+0x6c>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <checkPresenceSN+0x72>
    11d8:	00 00       	nop
    11da:	01 c0       	rjmp	.+2      	; 0x11de <checkPresenceSN+0x78>
			else sn_presence[i] = TRUE;
			_delay_ms(3);
		} else k++;
    11dc:	b3 94       	inc	r11
    11de:	28 96       	adiw	r28, 0x08	; 8
    11e0:	0e 5f       	subi	r16, 0xFE	; 254
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
    11e4:	9f ef       	ldi	r25, 0xFF	; 255
    11e6:	e9 1a       	sub	r14, r25
    11e8:	f9 0a       	sbc	r15, r25
	char retcode;
	uint8_t i,k;

	k = 0;
	retcode = 1;
	for ( i = 0; i < MAXSENSORS; i++ ) {
    11ea:	c0 32       	cpi	r28, 0x20	; 32
    11ec:	d1 05       	cpc	r29, r1
    11ee:	b9 f6       	brne	.-82     	; 0x119e <checkPresenceSN+0x38>
				retcode = 0;
			else sn_presence[i] = TRUE;
			_delay_ms(3);
		} else k++;
	}
	if(k > 0) return 0;
    11f0:	bb 20       	and	r11, r11
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <checkPresenceSN+0x92>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <checkPresenceSN+0x94>
    11f8:	8a 2d       	mov	r24, r10
	return retcode;
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	9f 90       	pop	r9
    1210:	8f 90       	pop	r8
    1212:	08 95       	ret

00001214 <manage_new_sensors>:
}
//
// Return TRUE if exit from PHASE
//

uint8_t manage_new_sensors(char ch){
    1214:	2f 92       	push	r2
    1216:	3f 92       	push	r3
    1218:	4f 92       	push	r4
    121a:	5f 92       	push	r5
    121c:	6f 92       	push	r6
    121e:	7f 92       	push	r7
    1220:	8f 92       	push	r8
    1222:	9f 92       	push	r9
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	00 d0       	rcall	.+0      	; 0x123a <manage_new_sensors+0x26>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
	uint8_t sensID, l, val;
	int8_t retcode, i, fl4;

	switch(nwSen_Phase){
    123e:	90 91 d3 02 	lds	r25, 0x02D3
    1242:	92 30       	cpi	r25, 0x02	; 2
    1244:	09 f4       	brne	.+2      	; 0x1248 <manage_new_sensors+0x34>
    1246:	88 c0       	rjmp	.+272    	; 0x1358 <manage_new_sensors+0x144>
    1248:	28 f4       	brcc	.+10     	; 0x1254 <manage_new_sensors+0x40>
    124a:	99 23       	and	r25, r25
    124c:	51 f0       	breq	.+20     	; 0x1262 <manage_new_sensors+0x4e>
    124e:	91 30       	cpi	r25, 0x01	; 1
    1250:	79 f0       	breq	.+30     	; 0x1270 <manage_new_sensors+0x5c>
    1252:	60 c1       	rjmp	.+704    	; 0x1514 <manage_new_sensors+0x300>
    1254:	93 30       	cpi	r25, 0x03	; 3
    1256:	09 f4       	brne	.+2      	; 0x125a <manage_new_sensors+0x46>
    1258:	19 c1       	rjmp	.+562    	; 0x148c <manage_new_sensors+0x278>
    125a:	95 30       	cpi	r25, 0x05	; 5
    125c:	09 f4       	brne	.+2      	; 0x1260 <manage_new_sensors+0x4c>
    125e:	47 c1       	rjmp	.+654    	; 0x14ee <manage_new_sensors+0x2da>
    1260:	59 c1       	rjmp	.+690    	; 0x1514 <manage_new_sensors+0x300>
	case REORDER_NWSENS:
		kg = 0;
    1262:	10 92 cd 02 	sts	0x02CD, r1
		nwSen_Phase = REORDER_NWSENS2;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 d3 02 	sts	0x02D3, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    126c:	80 e0       	ldi	r24, 0x00	; 0

	switch(nwSen_Phase){
	case REORDER_NWSENS:
		kg = 0;
		nwSen_Phase = REORDER_NWSENS2;
	break;
    126e:	5d c1       	rjmp	.+698    	; 0x152a <manage_new_sensors+0x316>

	case REORDER_NWSENS2:
	 if(ValidSensorCode((uint8_t*) &gSensorIDs[kg])){
    1270:	50 90 cd 02 	lds	r5, 0x02CD
    1274:	05 2d       	mov	r16, r5
    1276:	11 27       	eor	r17, r17
    1278:	07 fd       	sbrc	r16, 7
    127a:	10 95       	com	r17
    127c:	c8 01       	movw	r24, r16
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	9c 01       	movw	r18, r24
    128c:	24 55       	subi	r18, 0x54	; 84
    128e:	3d 4f       	sbci	r19, 0xFD	; 253
    1290:	79 01       	movw	r14, r18
    1292:	c9 01       	movw	r24, r18
    1294:	0e 94 9f 08 	call	0x113e	; 0x113e <ValidSensorCode>
    1298:	88 23       	and	r24, r24
    129a:	09 f4       	brne	.+2      	; 0x129e <manage_new_sensors+0x8a>
    129c:	3d c1       	rjmp	.+634    	; 0x1518 <manage_new_sensors+0x304>
	  fl4 = 1;
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[kg],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
    129e:	c0 90 69 03 	lds	r12, 0x0369
    12a2:	d0 90 6a 03 	lds	r13, 0x036A
    12a6:	0f 2e       	mov	r0, r31
    12a8:	f8 ed       	ldi	r31, 0xD8	; 216
    12aa:	af 2e       	mov	r10, r31
    12ac:	f2 e0       	ldi	r31, 0x02	; 2
    12ae:	bf 2e       	mov	r11, r31
    12b0:	f0 2d       	mov	r31, r0
    12b2:	ba 82       	std	Y+2, r11	; 0x02
    12b4:	a9 82       	std	Y+1, r10	; 0x01
    12b6:	81 2c       	mov	r8, r1
    12b8:	91 2c       	mov	r9, r1
    12ba:	33 24       	eor	r3, r3
    12bc:	33 94       	inc	r3
    12be:	44 24       	eor	r4, r4
    12c0:	43 94       	inc	r4
    12c2:	37 01       	movw	r6, r14
			for (l = 0; l < OW_ROMCODE_SIZE; l++){
				sensID = gSensorIDs[i][l];
				gSensorIDs[i][l] = gSensorIDs[kg][l];
				gSensorIDs[kg][l] = sensID;
				val = sn_presence[i];
				sn_presence[i] = sn_presence[kg];
    12c4:	08 52       	subi	r16, 0x28	; 40
    12c6:	1d 4f       	sbci	r17, 0xFD	; 253
				sn_presence[kg] = val;
			}
			fl4 = 0;
    12c8:	21 2c       	mov	r2, r1
	case REORDER_NWSENS2:
	 if(ValidSensorCode((uint8_t*) &gSensorIDs[kg])){
	  fl4 = 1;
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[kg],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	b6 01       	movw	r22, r12
    12d0:	68 0d       	add	r22, r8
    12d2:	79 1d       	adc	r23, r9
    12d4:	c7 01       	movw	r24, r14
    12d6:	0e 94 8a 29 	call	0x5314	; 0x5314 <memcmp>
    12da:	89 2b       	or	r24, r25
    12dc:	e9 f4       	brne	.+58     	; 0x1318 <manage_new_sensors+0x104>
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	8a 19       	sub	r24, r10
			retcode = 0;
			if (kg == i) break;
    12e2:	85 15       	cp	r24, r5
    12e4:	69 f1       	breq	.+90     	; 0x1340 <manage_new_sensors+0x12c>
    12e6:	d3 01       	movw	r26, r6
    12e8:	a4 01       	movw	r20, r8
    12ea:	44 55       	subi	r20, 0x54	; 84
    12ec:	5d 4f       	sbci	r21, 0xFD	; 253
    12ee:	88 e0       	ldi	r24, 0x08	; 8
			for (l = 0; l < OW_ROMCODE_SIZE; l++){
				sensID = gSensorIDs[i][l];
    12f0:	fa 01       	movw	r30, r20
    12f2:	90 81       	ld	r25, Z
				gSensorIDs[i][l] = gSensorIDs[kg][l];
    12f4:	2c 91       	ld	r18, X
    12f6:	21 93       	st	Z+, r18
    12f8:	af 01       	movw	r20, r30
				gSensorIDs[kg][l] = sensID;
    12fa:	9d 93       	st	X+, r25
				val = sn_presence[i];
    12fc:	e9 81       	ldd	r30, Y+1	; 0x01
    12fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1300:	90 81       	ld	r25, Z
				sn_presence[i] = sn_presence[kg];
    1302:	f8 01       	movw	r30, r16
    1304:	20 81       	ld	r18, Z
    1306:	e9 81       	ldd	r30, Y+1	; 0x01
    1308:	fa 81       	ldd	r31, Y+2	; 0x02
    130a:	20 83       	st	Z, r18
				sn_presence[kg] = val;
    130c:	f8 01       	movw	r30, r16
    130e:	90 83       	st	Z, r25
    1310:	81 50       	subi	r24, 0x01	; 1
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[kg],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
			retcode = 0;
			if (kg == i) break;
			for (l = 0; l < OW_ROMCODE_SIZE; l++){
    1312:	71 f7       	brne	.-36     	; 0x12f0 <manage_new_sensors+0xdc>
				gSensorIDs[kg][l] = sensID;
				val = sn_presence[i];
				sn_presence[i] = sn_presence[kg];
				sn_presence[kg] = val;
			}
			fl4 = 0;
    1314:	32 2c       	mov	r3, r2
	 if(ValidSensorCode((uint8_t*) &gSensorIDs[kg])){
	  fl4 = 1;
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[kg],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
			retcode = 0;
    1316:	42 2c       	mov	r4, r2
    1318:	f8 e0       	ldi	r31, 0x08	; 8
    131a:	8f 0e       	add	r8, r31
    131c:	91 1c       	adc	r9, r1
    131e:	29 81       	ldd	r18, Y+1	; 0x01
    1320:	3a 81       	ldd	r19, Y+2	; 0x02
    1322:	2f 5f       	subi	r18, 0xFF	; 255
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	3a 83       	std	Y+2, r19	; 0x02
    1328:	29 83       	std	Y+1, r18	; 0x01

	case REORDER_NWSENS2:
	 if(ValidSensorCode((uint8_t*) &gSensorIDs[kg])){
	  fl4 = 1;
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
    132a:	30 e2       	ldi	r19, 0x20	; 32
    132c:	83 16       	cp	r8, r19
    132e:	91 04       	cpc	r9, r1
    1330:	61 f6       	brne	.-104    	; 0x12ca <manage_new_sensors+0xb6>
				sn_presence[kg] = val;
			}
			fl4 = 0;
		}	// if(memcmp(&gSensorIDs[i],&rSensorIDs[i],OW_ROMCODE_SIZE))
	  }	// for ( i = 0; i < MAXSENSORS; i++ )
	  if(retcode != 0) nwSen_Phase = ASSIGN_NEWSENS;
    1332:	44 20       	and	r4, r4
    1334:	29 f0       	breq	.+10     	; 0x1340 <manage_new_sensors+0x12c>
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	80 93 d3 02 	sts	0x02D3, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	f5 c0       	rjmp	.+490    	; 0x152a <manage_new_sensors+0x316>
			fl4 = 0;
		}	// if(memcmp(&gSensorIDs[i],&rSensorIDs[i],OW_ROMCODE_SIZE))
	  }	// for ( i = 0; i < MAXSENSORS; i++ )
	  if(retcode != 0) nwSen_Phase = ASSIGN_NEWSENS;
	  else {
		 if(fl4){
    1340:	33 20       	and	r3, r3
    1342:	09 f4       	brne	.+2      	; 0x1346 <manage_new_sensors+0x132>
    1344:	eb c0       	rjmp	.+470    	; 0x151c <manage_new_sensors+0x308>
			 if (kg < MAXSENSORS - 1) kg++;
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	85 15       	cp	r24, r5
    134a:	0c f4       	brge	.+2      	; 0x134e <manage_new_sensors+0x13a>
    134c:	e9 c0       	rjmp	.+466    	; 0x1520 <manage_new_sensors+0x30c>
    134e:	53 94       	inc	r5
    1350:	50 92 cd 02 	sts	0x02CD, r5
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	e9 c0       	rjmp	.+466    	; 0x152a <manage_new_sensors+0x316>
	  }
	 } else return 1;
	break;
	case ASSIGN_NEWSENS:
		 // new sensor found
			 LCD_CLEAR();
    1358:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
			 //printf_P(PSTR("\n%S %S"),setStr,assignStr);
             printf("%02X%02X%02X%02X%02X%02X%02X",
                      gSensorIDs[kg][0],\
                      gSensorIDs[kg][1],gSensorIDs[kg][2],\
                      gSensorIDs[kg][3],gSensorIDs[kg][4],\
                      gSensorIDs[kg][5],gSensorIDs[kg][6]);
    135c:	e0 91 cd 02 	lds	r30, 0x02CD
    1360:	98 e0       	ldi	r25, 0x08	; 8
    1362:	e9 02       	muls	r30, r25
    1364:	f0 01       	movw	r30, r0
    1366:	11 24       	eor	r1, r1
    1368:	e4 55       	subi	r30, 0x54	; 84
    136a:	fd 4f       	sbci	r31, 0xFD	; 253
	case ASSIGN_NEWSENS:
		 // new sensor found
			 LCD_CLEAR();
			 //printf_P(PSTR("%s"),&gSensorIDs[kg]);
			 //printf_P(PSTR("\n%S %S"),setStr,assignStr);
             printf("%02X%02X%02X%02X%02X%02X%02X",
    136c:	86 81       	ldd	r24, Z+6	; 0x06
    136e:	1f 92       	push	r1
    1370:	8f 93       	push	r24
    1372:	85 81       	ldd	r24, Z+5	; 0x05
    1374:	1f 92       	push	r1
    1376:	8f 93       	push	r24
    1378:	84 81       	ldd	r24, Z+4	; 0x04
    137a:	1f 92       	push	r1
    137c:	8f 93       	push	r24
    137e:	83 81       	ldd	r24, Z+3	; 0x03
    1380:	1f 92       	push	r1
    1382:	8f 93       	push	r24
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	1f 92       	push	r1
    1388:	8f 93       	push	r24
    138a:	81 81       	ldd	r24, Z+1	; 0x01
    138c:	1f 92       	push	r1
    138e:	8f 93       	push	r24
    1390:	80 81       	ld	r24, Z
    1392:	1f 92       	push	r1
    1394:	8f 93       	push	r24
    1396:	8c e2       	ldi	r24, 0x2C	; 44
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	9f 93       	push	r25
    139c:	8f 93       	push	r24
    139e:	0e 94 2b 2a 	call	0x5456	; 0x5456 <printf>
                      gSensorIDs[kg][3],gSensorIDs[kg][4],\
                      gSensorIDs[kg][5],gSensorIDs[kg][6]);
#ifdef SN_SENSOR_SIZE
             printf_P(PSTR("%S %S"),setStr,assignStr);
#else
             printf_P(PSTR("\n%S %S"),setStr,assignStr);
    13a2:	81 e6       	ldi	r24, 0x61	; 97
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	9f 93       	push	r25
    13a8:	8f 93       	push	r24
    13aa:	8e e6       	ldi	r24, 0x6E	; 110
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	9f 93       	push	r25
    13b0:	8f 93       	push	r24
    13b2:	89 e0       	ldi	r24, 0x09	; 9
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	9f 93       	push	r25
    13b8:	8f 93       	push	r24
    13ba:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
#endif
			 if(!sn_presence[0]) printf_P(PSTR("\n%i-%S"),0,indoorStr);
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	80 91 d8 02 	lds	r24, 0x02D8
    13cc:	81 11       	cpse	r24, r1
    13ce:	12 c0       	rjmp	.+36     	; 0x13f4 <manage_new_sensors+0x1e0>
    13d0:	80 ea       	ldi	r24, 0xA0	; 160
    13d2:	94 e0       	ldi	r25, 0x04	; 4
    13d4:	9f 93       	push	r25
    13d6:	8f 93       	push	r24
    13d8:	1f 92       	push	r1
    13da:	1f 92       	push	r1
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	9f 93       	push	r25
    13e2:	8f 93       	push	r24
    13e4:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
			 if(!sn_presence[1]) printf_P(PSTR("\n%i-%S"),1,outdoorStr);
    13f4:	80 91 d9 02 	lds	r24, 0x02D9
    13f8:	81 11       	cpse	r24, r1
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <manage_new_sensors+0x20e>
    13fc:	88 e9       	ldi	r24, 0x98	; 152
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	9f 93       	push	r25
    1402:	8f 93       	push	r24
    1404:	1f 92       	push	r1
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	8f 93       	push	r24
    140a:	8b ef       	ldi	r24, 0xFB	; 251
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9f 93       	push	r25
    1410:	8f 93       	push	r24
    1412:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
			 if(!sn_presence[2]) printf_P(PSTR("\n%i-%S"),2,supplyStr);
    1422:	80 91 da 02 	lds	r24, 0x02DA
    1426:	81 11       	cpse	r24, r1
    1428:	13 c0       	rjmp	.+38     	; 0x1450 <manage_new_sensors+0x23c>
    142a:	81 e9       	ldi	r24, 0x91	; 145
    142c:	94 e0       	ldi	r25, 0x04	; 4
    142e:	9f 93       	push	r25
    1430:	8f 93       	push	r24
    1432:	1f 92       	push	r1
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	8f 93       	push	r24
    1438:	84 ef       	ldi	r24, 0xF4	; 244
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9f 93       	push	r25
    143e:	8f 93       	push	r24
    1440:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
			 if(!sn_presence[3]) printf_P(PSTR("\n%i-%S"),3,returnStr);
    1450:	80 91 db 02 	lds	r24, 0x02DB
    1454:	81 11       	cpse	r24, r1
    1456:	13 c0       	rjmp	.+38     	; 0x147e <manage_new_sensors+0x26a>
    1458:	8a e8       	ldi	r24, 0x8A	; 138
    145a:	94 e0       	ldi	r25, 0x04	; 4
    145c:	9f 93       	push	r25
    145e:	8f 93       	push	r24
    1460:	1f 92       	push	r1
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	8f 93       	push	r24
    1466:	8d ee       	ldi	r24, 0xED	; 237
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9f 93       	push	r25
    146c:	8f 93       	push	r24
    146e:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
			 LCD_UPDATE();
    147e:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
			 nwSen_Phase = ASSIGN_NEWSENS2;
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	80 93 d3 02 	sts	0x02D3, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1488:	80 e0       	ldi	r24, 0x00	; 0
			 if(!sn_presence[1]) printf_P(PSTR("\n%i-%S"),1,outdoorStr);
			 if(!sn_presence[2]) printf_P(PSTR("\n%i-%S"),2,supplyStr);
			 if(!sn_presence[3]) printf_P(PSTR("\n%i-%S"),3,returnStr);
			 LCD_UPDATE();
			 nwSen_Phase = ASSIGN_NEWSENS2;
		break;
    148a:	4f c0       	rjmp	.+158    	; 0x152a <manage_new_sensors+0x316>
	case ASSIGN_NEWSENS2:
		 	 switch(ch){
    148c:	90 ed       	ldi	r25, 0xD0	; 208
    148e:	98 0f       	add	r25, r24
    1490:	94 30       	cpi	r25, 0x04	; 4
    1492:	08 f0       	brcs	.+2      	; 0x1496 <manage_new_sensors+0x282>
    1494:	47 c0       	rjmp	.+142    	; 0x1524 <manage_new_sensors+0x310>
		 	 case '0':
		 	 case '1':
		 	 case '2':
		 	 case '3':
		 		 	l = ch - '0';
			 		if(!sn_presence[l]){
    1496:	89 2f       	mov	r24, r25
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	fc 01       	movw	r30, r24
    149c:	e8 52       	subi	r30, 0x28	; 40
    149e:	fd 4f       	sbci	r31, 0xFD	; 253
    14a0:	20 81       	ld	r18, Z
    14a2:	21 11       	cpse	r18, r1
    14a4:	1f c0       	rjmp	.+62     	; 0x14e4 <manage_new_sensors+0x2d0>
			 			memcpy((uint8_t*)(rSensorIDs + l * OW_ROMCODE_SIZE),&gSensorIDs[kg][0],OW_ROMCODE_SIZE);
    14a6:	9c 01       	movw	r18, r24
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
    14b4:	a0 91 69 03 	lds	r26, 0x0369
    14b8:	b0 91 6a 03 	lds	r27, 0x036A
    14bc:	a2 0f       	add	r26, r18
    14be:	b3 1f       	adc	r27, r19
    14c0:	e0 91 cd 02 	lds	r30, 0x02CD
    14c4:	28 e0       	ldi	r18, 0x08	; 8
    14c6:	e2 02       	muls	r30, r18
    14c8:	f0 01       	movw	r30, r0
    14ca:	11 24       	eor	r1, r1
    14cc:	e4 55       	subi	r30, 0x54	; 84
    14ce:	fd 4f       	sbci	r31, 0xFD	; 253
    14d0:	28 e0       	ldi	r18, 0x08	; 8
    14d2:	01 90       	ld	r0, Z+
    14d4:	0d 92       	st	X+, r0
    14d6:	2a 95       	dec	r18
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <manage_new_sensors+0x2be>
			 			sn_presence[l] = TRUE;
    14da:	fc 01       	movw	r30, r24
    14dc:	e8 52       	subi	r30, 0x28	; 40
    14de:	fd 4f       	sbci	r31, 0xFD	; 253
    14e0:	21 e0       	ldi	r18, 0x01	; 1
    14e2:	20 83       	st	Z, r18
			 		}
		 		 nwSen_Phase = ASSIGN_TOEEPROM;
    14e4:	85 e0       	ldi	r24, 0x05	; 5
    14e6:	80 93 d3 02 	sts	0x02D3, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
			 		if(!sn_presence[l]){
			 			memcpy((uint8_t*)(rSensorIDs + l * OW_ROMCODE_SIZE),&gSensorIDs[kg][0],OW_ROMCODE_SIZE);
			 			sn_presence[l] = TRUE;
			 		}
		 		 nwSen_Phase = ASSIGN_TOEEPROM;
			 	 break;
    14ec:	1e c0       	rjmp	.+60     	; 0x152a <manage_new_sensors+0x316>

		 	 }
	break;
	case ASSIGN_TOEEPROM:
		eeprom_update_block((void *)rSensorIDs , (void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	6f e0       	ldi	r22, 0x0F	; 15
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	80 91 69 03 	lds	r24, 0x0369
    14fa:	90 91 6a 03 	lds	r25, 0x036A
    14fe:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__eeupd_block_m328p>
	 	 if (kg < MAXSENSORS - 1)
    1502:	80 91 cd 02 	lds	r24, 0x02CD
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	7c f4       	brge	.+30     	; 0x1528 <manage_new_sensors+0x314>
	 		 nwSen_Phase = REORDER_NWSENS2;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 d3 02 	sts	0x02D3, r24
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1510:	80 e0       	ldi	r24, 0x00	; 0
	case ASSIGN_TOEEPROM:
		eeprom_update_block((void *)rSensorIDs , (void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
    1512:	0b c0       	rjmp	.+22     	; 0x152a <manage_new_sensors+0x316>
	} // switch(nwSen_Phase){
	return 0;
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	09 c0       	rjmp	.+18     	; 0x152a <manage_new_sensors+0x316>
		 if(fl4){
			 if (kg < MAXSENSORS - 1) kg++;
			 else if(retcode == 0) return 1;
		 }
	  }
	 } else return 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	07 c0       	rjmp	.+14     	; 0x152a <manage_new_sensors+0x316>
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	05 c0       	rjmp	.+10     	; 0x152a <manage_new_sensors+0x316>
	  }	// for ( i = 0; i < MAXSENSORS; i++ )
	  if(retcode != 0) nwSen_Phase = ASSIGN_NEWSENS;
	  else {
		 if(fl4){
			 if (kg < MAXSENSORS - 1) kg++;
			 else if(retcode == 0) return 1;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	03 c0       	rjmp	.+6      	; 0x152a <manage_new_sensors+0x316>
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	01 c0       	rjmp	.+2      	; 0x152a <manage_new_sensors+0x316>
	break;
	case ASSIGN_TOEEPROM:
		eeprom_update_block((void *)rSensorIDs , (void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} // switch(nwSen_Phase){
	return 0;

}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	9f 90       	pop	r9
    1544:	8f 90       	pop	r8
    1546:	7f 90       	pop	r7
    1548:	6f 90       	pop	r6
    154a:	5f 90       	pop	r5
    154c:	4f 90       	pop	r4
    154e:	3f 90       	pop	r3
    1550:	2f 90       	pop	r2
    1552:	08 95       	ret

00001554 <resetSensNumber>:
	noready_sens[sensNumber] = FALSE;
	resetSensNumber(sensNumber);

}
//
void resetSensNumber(uint8_t sensNumber){
    1554:	28 e0       	ldi	r18, 0x08	; 8
    1556:	82 9f       	mul	r24, r18
    1558:	c0 01       	movw	r24, r0
    155a:	11 24       	eor	r1, r1
    155c:	fc 01       	movw	r30, r24
    155e:	e4 55       	subi	r30, 0x54	; 84
    1560:	fd 4f       	sbci	r31, 0xFD	; 253
	int8_t i;
	for(i = 0;i < OW_ROMCODE_SIZE; i++)
    1562:	80 e0       	ldi	r24, 0x00	; 0
		gSensorIDs[sensNumber][i] = 0x00;
    1564:	11 92       	st	Z+, r1

}
//
void resetSensNumber(uint8_t sensNumber){
	int8_t i;
	for(i = 0;i < OW_ROMCODE_SIZE; i++)
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	88 30       	cpi	r24, 0x08	; 8
    156a:	e1 f7       	brne	.-8      	; 0x1564 <resetSensNumber+0x10>
		gSensorIDs[sensNumber][i] = 0x00;
}
    156c:	08 95       	ret

0000156e <sms_noready_sens>:
		else return 1;
	}
	return 0;
}
//
void sms_noready_sens(uint8_t sensNumber){
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	b8 2e       	mov	r11, r24
	size_t size;
	SMS *psms;
	size = sizeof(SMS)+1;
	if((psms = (SMS*)malloc(size)) != NULL){
    1582:	8f ec       	ldi	r24, 0xCF	; 207
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 2c 28 	call	0x5058	; 0x5058 <malloc>
    158a:	ec 01       	movw	r28, r24
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	09 f4       	brne	.+2      	; 0x1592 <sms_noready_sens+0x24>
    1590:	7d c0       	rjmp	.+250    	; 0x168c <sms_noready_sens+0x11e>
		strncpy(psms->number, telNumber, SMSlenNumber);
    1592:	6c 01       	movw	r12, r24
    1594:	80 ea       	ldi	r24, 0xA0	; 160
    1596:	c8 0e       	add	r12, r24
    1598:	d1 1c       	adc	r13, r1
    159a:	44 e1       	ldi	r20, 0x14	; 20
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	6c e6       	ldi	r22, 0x6C	; 108
    15a0:	73 e0       	ldi	r23, 0x03	; 3
    15a2:	c6 01       	movw	r24, r12
    15a4:	0e 94 ae 29 	call	0x535c	; 0x535c <strncpy>
		//strncpy_P(wbuffer, notReadyStr, LCD_COLUMN_NUMBER);
		//strncat(psms->body, wbuffer, SMSlenBody - strlen(psms->body));
		strncpy_P(psms->body, notReadyStr, SMSlenBody);
    15a8:	40 ea       	ldi	r20, 0xA0	; 160
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	6a e9       	ldi	r22, 0x9A	; 154
    15ae:	73 e0       	ldi	r23, 0x03	; 3
    15b0:	ce 01       	movw	r24, r28
    15b2:	0e 94 76 29 	call	0x52ec	; 0x52ec <strncpy_P>
		strncpy_P(wbuffer, snStr, WBUFFER_LEN );
    15b6:	4e e1       	ldi	r20, 0x1E	; 30
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	67 ea       	ldi	r22, 0xA7	; 167
    15bc:	74 e0       	ldi	r23, 0x04	; 4
    15be:	88 e4       	ldi	r24, 0x48	; 72
    15c0:	93 e0       	ldi	r25, 0x03	; 3
    15c2:	0e 94 76 29 	call	0x52ec	; 0x52ec <strncpy_P>
		strncat(psms->body, wbuffer, SMSlenBody - strlen(psms->body));
    15c6:	fe 01       	movw	r30, r28
    15c8:	01 90       	ld	r0, Z+
    15ca:	00 20       	and	r0, r0
    15cc:	e9 f7       	brne	.-6      	; 0x15c8 <sms_noready_sens+0x5a>
    15ce:	31 97       	sbiw	r30, 0x01	; 1
    15d0:	ec 1b       	sub	r30, r28
    15d2:	fd 0b       	sbc	r31, r29
    15d4:	0f 2e       	mov	r0, r31
    15d6:	f0 ea       	ldi	r31, 0xA0	; 160
    15d8:	ef 2e       	mov	r14, r31
    15da:	f1 2c       	mov	r15, r1
    15dc:	f0 2d       	mov	r31, r0
    15de:	a7 01       	movw	r20, r14
    15e0:	4e 1b       	sub	r20, r30
    15e2:	5f 0b       	sbc	r21, r31
    15e4:	68 e4       	ldi	r22, 0x48	; 72
    15e6:	73 e0       	ldi	r23, 0x03	; 3
    15e8:	ce 01       	movw	r24, r28
    15ea:	0e 94 9e 29 	call	0x533c	; 0x533c <strncat>
		sprintf_P(wbuffer,PSTR("%d: "),sensNumber);
    15ee:	1f 92       	push	r1
    15f0:	bf 92       	push	r11
    15f2:	88 ee       	ldi	r24, 0xE8	; 232
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9f 93       	push	r25
    15f8:	8f 93       	push	r24
    15fa:	08 e4       	ldi	r16, 0x48	; 72
    15fc:	13 e0       	ldi	r17, 0x03	; 3
    15fe:	1f 93       	push	r17
    1600:	0f 93       	push	r16
    1602:	0e 94 95 2a 	call	0x552a	; 0x552a <sprintf_P>
		strncat(psms->body, wbuffer, SMSlenBody - strlen(psms->body));
    1606:	fe 01       	movw	r30, r28
    1608:	01 90       	ld	r0, Z+
    160a:	00 20       	and	r0, r0
    160c:	e9 f7       	brne	.-6      	; 0x1608 <sms_noready_sens+0x9a>
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	ec 1b       	sub	r30, r28
    1612:	fd 0b       	sbc	r31, r29
    1614:	a7 01       	movw	r20, r14
    1616:	4e 1b       	sub	r20, r30
    1618:	5f 0b       	sbc	r21, r31
    161a:	b8 01       	movw	r22, r16
    161c:	ce 01       	movw	r24, r28
    161e:	0e 94 9e 29 	call	0x533c	; 0x533c <strncat>
		sprintf_P(wbuffer,PSTR(" at %02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
    1622:	80 91 17 01 	lds	r24, 0x0117
    1626:	1f 92       	push	r1
    1628:	8f 93       	push	r24
    162a:	80 91 18 01 	lds	r24, 0x0118
    162e:	1f 92       	push	r1
    1630:	8f 93       	push	r24
    1632:	80 91 19 01 	lds	r24, 0x0119
    1636:	1f 92       	push	r1
    1638:	8f 93       	push	r24
    163a:	25 ed       	ldi	r18, 0xD5	; 213
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	3f 93       	push	r19
    1640:	2f 93       	push	r18
    1642:	1f 93       	push	r17
    1644:	0f 93       	push	r16
    1646:	0e 94 95 2a 	call	0x552a	; 0x552a <sprintf_P>
		strncat(psms->body, wbuffer, SMSlenBody - strlen(psms->body));
    164a:	fe 01       	movw	r30, r28
    164c:	01 90       	ld	r0, Z+
    164e:	00 20       	and	r0, r0
    1650:	e9 f7       	brne	.-6      	; 0x164c <sms_noready_sens+0xde>
    1652:	31 97       	sbiw	r30, 0x01	; 1
    1654:	ec 1b       	sub	r30, r28
    1656:	fd 0b       	sbc	r31, r29
    1658:	a7 01       	movw	r20, r14
    165a:	4e 1b       	sub	r20, r30
    165c:	5f 0b       	sbc	r21, r31
    165e:	b8 01       	movw	r22, r16
    1660:	ce 01       	movw	r24, r28
    1662:	0e 94 9e 29 	call	0x533c	; 0x533c <strncat>
		DO_WATCHDOG();
    1666:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
		gsm_send_sms( psms->number, psms->body, 1 );
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	be 01       	movw	r22, r28
    1670:	c6 01       	movw	r24, r12
    1672:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <gsm_send_sms>
		free(psms);
    1676:	ce 01       	movw	r24, r28
    1678:	0e 94 c4 28 	call	0x5188	; 0x5188 <free>
    167c:	8d b7       	in	r24, 0x3d	; 61
    167e:	9e b7       	in	r25, 0x3e	; 62
    1680:	40 96       	adiw	r24, 0x10	; 16
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	9e bf       	out	0x3e, r25	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	8d bf       	out	0x3d, r24	; 61
	}
	noready_sens[sensNumber] = FALSE;
    168c:	eb 2d       	mov	r30, r11
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	e2 53       	subi	r30, 0x32	; 50
    1692:	fd 4f       	sbci	r31, 0xFD	; 253
    1694:	10 82       	st	Z, r1
	resetSensNumber(sensNumber);
    1696:	8b 2d       	mov	r24, r11
    1698:	0e 94 aa 0a 	call	0x1554	; 0x1554 <resetSensNumber>

}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	bf 90       	pop	r11
    16ae:	08 95       	ret

000016b0 <sms_pumpStarted>:
	int8_t i;
	for(i = 0;i < OW_ROMCODE_SIZE; i++)
		gSensorIDs[sensNumber][i] = 0x00;
}

void sms_pumpStarted(){
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
	size_t size;
	SMS *psms;
	size = sizeof(SMS)+1;
	if((psms = (SMS*)malloc(size)) != NULL){
    16b8:	8f ec       	ldi	r24, 0xCF	; 207
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 2c 28 	call	0x5058	; 0x5058 <malloc>
    16c0:	ec 01       	movw	r28, r24
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	d1 f0       	breq	.+52     	; 0x16fa <sms_pumpStarted+0x4a>
		strncpy(psms->number, telNumber, SMSlenNumber);
    16c6:	8c 01       	movw	r16, r24
    16c8:	00 56       	subi	r16, 0x60	; 96
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	44 e1       	ldi	r20, 0x14	; 20
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	6c e6       	ldi	r22, 0x6C	; 108
    16d2:	73 e0       	ldi	r23, 0x03	; 3
    16d4:	c8 01       	movw	r24, r16
    16d6:	0e 94 ae 29 	call	0x535c	; 0x535c <strncpy>
		strncpy_P(psms->body, startRegulatorStr, SMSlenBody);
    16da:	40 ea       	ldi	r20, 0xA0	; 160
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	65 eb       	ldi	r22, 0xB5	; 181
    16e0:	73 e0       	ldi	r23, 0x03	; 3
    16e2:	ce 01       	movw	r24, r28
    16e4:	0e 94 76 29 	call	0x52ec	; 0x52ec <strncpy_P>
//		sprintf_P(wbuffer,PSTR(" at %02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
//		strncat(sms.body, wbuffer, sizeof(sms.body) - strlen(sms.body));
		gsm_send_sms( psms->number, psms->body, 2 );
    16e8:	42 e0       	ldi	r20, 0x02	; 2
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	be 01       	movw	r22, r28
    16ee:	c8 01       	movw	r24, r16
    16f0:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <gsm_send_sms>
		free(psms);
    16f4:	ce 01       	movw	r24, r28
    16f6:	0e 94 c4 28 	call	0x5188	; 0x5188 <free>
	}
}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <sms_powerGone>:
// if((gSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1) != NULL) MAXSENSORS][OW_ROMCODE_SIZE
void sms_powerGone(){
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
	size_t size;
	SMS *psms;
	size = sizeof(SMS)+1;
	if((psms = (SMS*)malloc(size)) != NULL){
    170c:	8f ec       	ldi	r24, 0xCF	; 207
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 2c 28 	call	0x5058	; 0x5058 <malloc>
    1714:	ec 01       	movw	r28, r24
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	09 f4       	brne	.+2      	; 0x171c <sms_powerGone+0x18>
    171a:	46 c0       	rjmp	.+140    	; 0x17a8 <sms_powerGone+0xa4>
		strncpy(psms->number, telNumber, SMSlenNumber);
    171c:	8c 01       	movw	r16, r24
    171e:	00 56       	subi	r16, 0x60	; 96
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	44 e1       	ldi	r20, 0x14	; 20
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	6c e6       	ldi	r22, 0x6C	; 108
    1728:	73 e0       	ldi	r23, 0x03	; 3
    172a:	c8 01       	movw	r24, r16
    172c:	0e 94 ae 29 	call	0x535c	; 0x535c <strncpy>
		strncpy_P(psms->body, startPowerGoneStr, SMSlenBody);
    1730:	40 ea       	ldi	r20, 0xA0	; 160
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	66 ea       	ldi	r22, 0xA6	; 166
    1736:	73 e0       	ldi	r23, 0x03	; 3
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 76 29 	call	0x52ec	; 0x52ec <strncpy_P>
		sprintf_P(wbuffer,PSTR(" at %02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
    173e:	80 91 17 01 	lds	r24, 0x0117
    1742:	1f 92       	push	r1
    1744:	8f 93       	push	r24
    1746:	80 91 18 01 	lds	r24, 0x0118
    174a:	1f 92       	push	r1
    174c:	8f 93       	push	r24
    174e:	80 91 19 01 	lds	r24, 0x0119
    1752:	1f 92       	push	r1
    1754:	8f 93       	push	r24
    1756:	82 ec       	ldi	r24, 0xC2	; 194
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9f 93       	push	r25
    175c:	8f 93       	push	r24
    175e:	88 e4       	ldi	r24, 0x48	; 72
    1760:	93 e0       	ldi	r25, 0x03	; 3
    1762:	9f 93       	push	r25
    1764:	8f 93       	push	r24
    1766:	0e 94 95 2a 	call	0x552a	; 0x552a <sprintf_P>
		strncat(psms->body, wbuffer, sizeof(psms->body) - strlen(psms->body));
    176a:	fe 01       	movw	r30, r28
    176c:	01 90       	ld	r0, Z+
    176e:	00 20       	and	r0, r0
    1770:	e9 f7       	brne	.-6      	; 0x176c <sms_powerGone+0x68>
    1772:	ae 01       	movw	r20, r28
    1774:	4e 1b       	sub	r20, r30
    1776:	5f 0b       	sbc	r21, r31
    1778:	4f 55       	subi	r20, 0x5F	; 95
    177a:	5f 4f       	sbci	r21, 0xFF	; 255
    177c:	68 e4       	ldi	r22, 0x48	; 72
    177e:	73 e0       	ldi	r23, 0x03	; 3
    1780:	ce 01       	movw	r24, r28
    1782:	0e 94 9e 29 	call	0x533c	; 0x533c <strncat>
		gsm_send_sms( psms->number, psms->body, 2 );
    1786:	42 e0       	ldi	r20, 0x02	; 2
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	be 01       	movw	r22, r28
    178c:	c8 01       	movw	r24, r16
    178e:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <gsm_send_sms>
		free(psms);
    1792:	ce 01       	movw	r24, r28
    1794:	0e 94 c4 28 	call	0x5188	; 0x5188 <free>
    1798:	8d b7       	in	r24, 0x3d	; 61
    179a:	9e b7       	in	r25, 0x3e	; 62
    179c:	0a 96       	adiw	r24, 0x0a	; 10
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	9e bf       	out	0x3e, r25	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	8d bf       	out	0x3d, r24	; 61
	}
}
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	08 95       	ret

000017b2 <ManageOutdoorTempEvent>:
//
//MANAGE_OUTDOOR_TEMPEVENT();
void ManageOutdoorTempEvent(){
	if (temper[N_OUTDOOR] < TEMPER_BAD){
    17b2:	80 91 41 03 	lds	r24, 0x0341
    17b6:	90 91 42 03 	lds	r25, 0x0342
    17ba:	83 36       	cpi	r24, 0x63	; 99
    17bc:	91 05       	cpc	r25, r1
    17be:	7c f4       	brge	.+30     	; 0x17de <ManageOutdoorTempEvent+0x2c>
		if (temp_for_hour - temper[N_OUTDOOR] >= PERCENT_OF_OUTDOOR_TEMPER_DOWN)
    17c0:	20 91 6b 03 	lds	r18, 0x036B
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	a9 01       	movw	r20, r18
    17c8:	48 1b       	sub	r20, r24
    17ca:	59 0b       	sbc	r21, r25
    17cc:	4a 30       	cpi	r20, 0x0A	; 10
    17ce:	51 05       	cpc	r21, r1
    17d0:	24 f0       	brlt	.+8      	; 0x17da <ManageOutdoorTempEvent+0x28>
			PrefHeatting = TRUE;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	80 93 47 03 	sts	0x0347, r24
    17d8:	08 95       	ret
		else PrefHeatting = FALSE;
    17da:	10 92 47 03 	sts	0x0347, r1
    17de:	08 95       	ret

000017e0 <TestNoReadySensors>:
	}
}
//
//TEST_NOTREADY_SENSORS();
void TestNoReadySensors(){
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	c8 ed       	ldi	r28, 0xD8	; 216
    17f8:	d2 e0       	ldi	r29, 0x02	; 2
    17fa:	0f 2e       	mov	r0, r31
    17fc:	ff e3       	ldi	r31, 0x3F	; 63
    17fe:	ef 2e       	mov	r14, r31
    1800:	f3 e0       	ldi	r31, 0x03	; 3
    1802:	ff 2e       	mov	r15, r31
    1804:	f0 2d       	mov	r31, r0
    1806:	00 e0       	ldi	r16, 0x00	; 0
    1808:	10 e0       	ldi	r17, 0x00	; 0

	for ( i = 0; i < MAXSENSORS; i++ ) {
		if (sn_presence[i]) continue;
			if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
				if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) != TEMPER_BAD)
					sn_presence[i] = TRUE;
    180a:	99 24       	eor	r9, r9
    180c:	93 94       	inc	r9
//TEST_NOTREADY_SENSORS();
void TestNoReadySensors(){
	uint8_t i;

	for ( i = 0; i < MAXSENSORS; i++ ) {
		if (sn_presence[i]) continue;
    180e:	88 81       	ld	r24, Y
    1810:	81 11       	cpse	r24, r1
    1812:	1b c0       	rjmp	.+54     	; 0x184a <TestNoReadySensors+0x6a>
			if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
    1814:	c0 90 69 03 	lds	r12, 0x0369
    1818:	d0 90 6a 03 	lds	r13, 0x036A
    181c:	c0 0e       	add	r12, r16
    181e:	d1 1e       	adc	r13, r17
    1820:	c6 01       	movw	r24, r12
    1822:	0e 94 9f 08 	call	0x113e	; 0x113e <ValidSensorCode>
    1826:	88 23       	and	r24, r24
    1828:	81 f0       	breq	.+32     	; 0x184a <TestNoReadySensors+0x6a>
				if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) != TEMPER_BAD)
    182a:	c6 01       	movw	r24, r12
    182c:	0e 94 99 07 	call	0xf32	; 0xf32 <getTemperature>
    1830:	f7 01       	movw	r30, r14
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
    1836:	83 36       	cpi	r24, 0x63	; 99
    1838:	91 05       	cpc	r25, r1
    183a:	09 f0       	breq	.+2      	; 0x183e <TestNoReadySensors+0x5e>
					sn_presence[i] = TRUE;
    183c:	98 82       	st	Y, r9
    183e:	8f e6       	ldi	r24, 0x6F	; 111
    1840:	97 e1       	ldi	r25, 0x17	; 23
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <TestNoReadySensors+0x62>
    1846:	00 c0       	rjmp	.+0      	; 0x1848 <TestNoReadySensors+0x68>
    1848:	00 00       	nop
    184a:	21 96       	adiw	r28, 0x01	; 1
    184c:	08 5f       	subi	r16, 0xF8	; 248
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	92 e0       	ldi	r25, 0x02	; 2
    1852:	e9 0e       	add	r14, r25
    1854:	f1 1c       	adc	r15, r1
//
//TEST_NOTREADY_SENSORS();
void TestNoReadySensors(){
	uint8_t i;

	for ( i = 0; i < MAXSENSORS; i++ ) {
    1856:	00 32       	cpi	r16, 0x20	; 32
    1858:	11 05       	cpc	r17, r1
    185a:	c9 f6       	brne	.-78     	; 0x180e <TestNoReadySensors+0x2e>
				if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) != TEMPER_BAD)
					sn_presence[i] = TRUE;
			_delay_ms(3);
		}
	}
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	bf 90       	pop	r11
    186e:	af 90       	pop	r10
    1870:	9f 90       	pop	r9
    1872:	08 95       	ret

00001874 <main>:
}
//
#define SNLEN 7

int main( void )
{
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	63 97       	sbiw	r28, 0x13	; 19
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
	char wStr[5];
	int ki;
	byte gSensNumb[SNLEN + 1];

	//	lcd_str = FDEV_SETUP_STREAM(LcdWrite, NULL, _FDEV_SETUP_WRITE);
		stdout = &lcd_str;
    1888:	89 e0       	ldi	r24, 0x09	; 9
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	90 93 fc 06 	sts	0x06FC, r25
    1890:	80 93 fb 06 	sts	0x06FB, r24

	INT1_DDR &= ~(1 << INT1_PIN);	// INT1_PIN as input
    1894:	4a b1       	in	r20, 0x0a	; 10
    1896:	29 b1       	in	r18, 0x09	; 9
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	bc 01       	movw	r22, r24
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <main+0x30>
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	2a 95       	dec	r18
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <main+0x2c>
    18a8:	9b 01       	movw	r18, r22
    18aa:	20 95       	com	r18
    18ac:	24 23       	and	r18, r20
    18ae:	2a b9       	out	0x0a, r18	; 10
    INT1_PORT |= (1 << INT1_PIN);    // turn On the Pull-up
    18b0:	2b b1       	in	r18, 0x0b	; 11
    18b2:	39 b1       	in	r19, 0x09	; 9
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <main+0x46>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	3a 95       	dec	r19
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <main+0x42>
    18be:	82 2b       	or	r24, r18
    18c0:	8b b9       	out	0x0b, r24	; 11
      	// INT1_PIN is now an input with pull-up enabled

    ReadyWATCHDOG = FALSE;
    18c2:	10 92 7b 03 	sts	0x037B, r1
    x = 0; y = 0;
    18c6:	10 92 2a 03 	sts	0x032A, r1
    18ca:	10 92 29 03 	sts	0x0329, r1
    18ce:	10 92 28 03 	sts	0x0328, r1
    18d2:	10 92 27 03 	sts	0x0327, r1
    LCD_INIT();
    18d6:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_initialize2>
    // If Power Phase is gone - STOP!
	if(INT1_PIN & (1 << INT1_PIN_PIN)){
    18da:	4b 9b       	sbis	0x09, 3	; 9
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <main+0x72>
		LcdPowerGoneStr();
    18de:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LcdPowerGoneStr>
		HALT();
    18e2:	0e 94 53 29 	call	0x52a6	; 0x52a6 <abort>
	}

	MainLoopPhase = DISPLAY_MAINMENU;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 a7 02 	sts	0x02A7, r24
	LastPhase = MainLoopPhase;
    18ec:	80 93 a6 02 	sts	0x02A6, r24
	MenuPhase = MMENU_SHOW;
    18f0:	10 92 a5 02 	sts	0x02A5, r1

	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
    18f4:	81 e2       	ldi	r24, 0x21	; 33
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 2c 28 	call	0x5058	; 0x5058 <malloc>
    18fc:	90 93 6a 03 	sts	0x036A, r25
    1900:	80 93 69 03 	sts	0x0369, r24
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	09 f4       	brne	.+2      	; 0x190a <main+0x96>
    1908:	89 c0       	rjmp	.+274    	; 0x1a1c <main+0x1a8>
		eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	6f e0       	ldi	r22, 0x0F	; 15
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	0e 94 89 2c 	call	0x5912	; 0x5912 <__eerd_block_m328p>
	} else HALT();

	rTempInDoorMin = eeprom_read_byte(&TempInDoorMin);
    1916:	86 e3       	ldi	r24, 0x36	; 54
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 99 2c 	call	0x5932	; 0x5932 <__eerd_byte_m328p>
    191e:	80 93 3c 03 	sts	0x033C, r24
	rTempInDoorMax = eeprom_read_byte(&TempInDoorMax);
    1922:	85 e3       	ldi	r24, 0x35	; 53
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 99 2c 	call	0x5932	; 0x5932 <__eerd_byte_m328p>
    192a:	80 93 3d 03 	sts	0x033D, r24
		rTempOutDoorMin = eeprom_read_byte(&TempOutDoorMin);
    192e:	84 e3       	ldi	r24, 0x34	; 52
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 99 2c 	call	0x5932	; 0x5932 <__eerd_byte_m328p>
    1936:	80 93 68 03 	sts	0x0368, r24
		rTempOutDoorMax = eeprom_read_byte(&TempOutDoorMax);
    193a:	83 e3       	ldi	r24, 0x33	; 51
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 99 2c 	call	0x5932	; 0x5932 <__eerd_byte_m328p>
    1942:	80 93 7f 03 	sts	0x037F, r24
		rTempSupplyMin = eeprom_read_byte(&TempSupplyMin);
    1946:	82 e3       	ldi	r24, 0x32	; 50
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 99 2c 	call	0x5932	; 0x5932 <__eerd_byte_m328p>
    194e:	80 93 7c 03 	sts	0x037C, r24
		rTempSupplyMax = eeprom_read_byte(&TempSupplyMax);
    1952:	81 e3       	ldi	r24, 0x31	; 49
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 99 2c 	call	0x5932	; 0x5932 <__eerd_byte_m328p>
    195a:	80 93 7d 03 	sts	0x037D, r24
		rTempDiffSupplyReturnMin = eeprom_read_byte(&TempDiffSupplyReturnMin);
    195e:	80 e3       	ldi	r24, 0x30	; 48
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 99 2c 	call	0x5932	; 0x5932 <__eerd_byte_m328p>
    1966:	80 93 7e 03 	sts	0x037E, r24
		rTempDiffSupplyReturnMax = eeprom_read_byte(&TempDiffSupplyReturnMax);
    196a:	8f e2       	ldi	r24, 0x2F	; 47
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 99 2c 	call	0x5932	; 0x5932 <__eerd_byte_m328p>
    1972:	80 93 3e 03 	sts	0x033E, r24
//	eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	eeprom_read_block((void *)telNumber , (const void*)etelNumber ,LENNUMPHONE);
    1976:	4e e0       	ldi	r20, 0x0E	; 14
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	8c e6       	ldi	r24, 0x6C	; 108
    1980:	93 e0       	ldi	r25, 0x03	; 3
    1982:	0e 94 89 2c 	call	0x5912	; 0x5912 <__eerd_block_m328p>
//	set_sleep_mode(SLEEP_MODE_PWR_DOWN);

	nSNpos = 0;
	n = 0;
	k = 0;
	fl = 0;
    1986:	10 92 a4 02 	sts	0x02A4, r1
	aSN_num = 0;
	mtemp_minute = TEMPER_BAD;
	mtemp_hour = TEMPER_BAD;

	// Power Reduction
	PRR |= (1<<PRTWI) | (1<<PRTIM1) | (1<<PRTIM0);
    198a:	e4 e6       	ldi	r30, 0x64	; 100
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	88 6a       	ori	r24, 0xA8	; 168
    1992:	80 83       	st	Z, r24

// Set output pins to manage PUMP0 and Tree-State-Valve
	PUMP0_DDRS |= (1<<PUMP0_PIN0)|(1<<PUMP0_PIN1);
    1994:	87 b1       	in	r24, 0x07	; 7
    1996:	80 63       	ori	r24, 0x30	; 48
    1998:	87 b9       	out	0x07, r24	; 7
	VALVE_DDRS |= (1<<VALVE_PIN3XVALVE);
    199a:	3b 9a       	sbi	0x07, 3	; 7

#ifdef WATCHDOG
	WDT_setup();
	wdt_reset();
#else
	WDT_off();
    199c:	0e 94 86 18 	call	0x310c	; 0x310c <WDT_off>
#endif

//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_DIR_OUT();
    19a0:	55 9a       	sbi	0x0a, 5	; 10
        DS_PWR_OUT_HIGH();
    19a2:	5d 9a       	sbi	0x0b, 5	; 11
#endif
  
   
//	n3310
        LCD_CLEAR();
    19a4:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
        LCD_GOTO_XY(5,1);
    19a8:	61 e0       	ldi	r22, 0x01	; 1
    19aa:	85 e0       	ldi	r24, 0x05	; 5
    19ac:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <LCD_set_position2>
        printf_P(PSTR("%S"),helloStr1);
    19b0:	82 ec       	ldi	r24, 0xC2	; 194
    19b2:	94 e0       	ldi	r25, 0x04	; 4
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	83 e9       	ldi	r24, 0x93	; 147
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	9f 93       	push	r25
    19be:	8f 93       	push	r24
    19c0:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
        LCD_GOTO_XY(3,2);
    19c4:	62 e0       	ldi	r22, 0x02	; 2
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <LCD_set_position2>
        printf_P(PSTR("%S"),helloStr2);
    19cc:	88 eb       	ldi	r24, 0xB8	; 184
    19ce:	94 e0       	ldi	r25, 0x04	; 4
    19d0:	9f 93       	push	r25
    19d2:	8f 93       	push	r24
    19d4:	80 e9       	ldi	r24, 0x90	; 144
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	9f 93       	push	r25
    19da:	8f 93       	push	r24
    19dc:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
        LCD_UPDATE();
    19e0:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
//

	uart_init((UART_BAUD_SELECT((BAUD),F_CPU)));
    19e4:	83 e3       	ldi	r24, 0x33	; 51
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 ef 17 	call	0x2fde	; 0x2fde <uart_init>

	//%%%%%%%%%%%%%%%%% For GSM %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

		gsm_text_sms();				// Initial SMS text-mode message
    19ec:	0e 94 17 22 	call	0x442e	; 0x442e <gsm_text_sms>
		sms_pumpStarted();
    19f0:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <sms_pumpStarted>

	 */
	//********************************************************

#ifndef OW_ONE_BUS
	ow_set_bus(&THERM_PIN,&THERM_PORT,&THERM_DDR,THERM_IO);
    19f4:	24 e0       	ldi	r18, 0x04	; 4
    19f6:	4a e2       	ldi	r20, 0x2A	; 42
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	6b e2       	ldi	r22, 0x2B	; 43
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	89 e2       	ldi	r24, 0x29	; 41
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 ab 1b 	call	0x3756	; 0x3756 <ow_set_bus>
#endif
	
	sei();
    1a06:	78 94       	sei
	if(!checkPresenceSN()){
    1a08:	0e 94 b3 08 	call	0x1166	; 0x1166 <checkPresenceSN>
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	88 23       	and	r24, r24
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <main+0x1ac>
    1a1a:	21 c0       	rjmp	.+66     	; 0x1a5e <main+0x1ea>
	LastPhase = MainLoopPhase;
	MenuPhase = MMENU_SHOW;

	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
		eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	} else HALT();
    1a1c:	0e 94 53 29 	call	0x52a6	; 0x52a6 <abort>
			_delay_ms(3);
			nSensors = search_sensors();
			if(k++ > 3) break;
		}
#else
		nSensors = search_sensors_n();
    1a20:	0e 94 a1 05 	call	0xb42	; 0xb42 <search_sensors_n>
    1a24:	80 93 67 03 	sts	0x0367, r24
	ow_set_bus(&THERM_PIN,&THERM_PORT,&THERM_DDR,THERM_IO);
#endif
	
	sei();
	if(!checkPresenceSN()){
		k = 0;
    1a28:	f1 2c       	mov	r15, r1
    1a2a:	1f 2d       	mov	r17, r15
			nSensors = search_sensors();
			if(k++ > 3) break;
		}
#else
		nSensors = search_sensors_n();
		while (nSensors != MAXSENSORS){
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <main+0x1d8>
			ResetDiscrepancy();
    1a2e:	0e 94 9a 19 	call	0x3334	; 0x3334 <ResetDiscrepancy>
    1a32:	ef e6       	ldi	r30, 0x6F	; 111
    1a34:	f7 e1       	ldi	r31, 0x17	; 23
    1a36:	31 97       	sbiw	r30, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <main+0x1c2>
    1a3a:	00 c0       	rjmp	.+0      	; 0x1a3c <main+0x1c8>
    1a3c:	00 00       	nop
			_delay_ms(3);
			nSensors = search_sensors_n();
    1a3e:	0e 94 a1 05 	call	0xb42	; 0xb42 <search_sensors_n>
    1a42:	80 93 67 03 	sts	0x0367, r24
			if(k++ > 3) break;
    1a46:	1f 5f       	subi	r17, 0xFF	; 255
    1a48:	15 30       	cpi	r17, 0x05	; 5
    1a4a:	21 f0       	breq	.+8      	; 0x1a54 <main+0x1e0>
			nSensors = search_sensors();
			if(k++ > 3) break;
		}
#else
		nSensors = search_sensors_n();
		while (nSensors != MAXSENSORS){
    1a4c:	80 91 67 03 	lds	r24, 0x0367
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <main+0x1ba>
    1a54:	f1 2e       	mov	r15, r17
			ResetDiscrepancy();
			_delay_ms(3);
			nSensors = search_sensors_n();
			if(k++ > 3) break;
		}
		btest_new_sensors = TRUE;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	80 93 d2 02 	sts	0x02D2, r24
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <main+0x1f6>
#endif
	} else {
		copyrSNsTogSNs();
    1a5e:	0e 94 97 06 	call	0xd2e	; 0xd2e <copyrSNsTogSNs>
		nSensors = MAXSENSORS;
    1a62:	84 e0       	ldi	r24, 0x04	; 4
    1a64:	80 93 67 03 	sts	0x0367, r24

//	set_sleep_mode(SLEEP_MODE_PWR_DOWN);

	nSNpos = 0;
	n = 0;
	k = 0;
    1a68:	f1 2c       	mov	r15, r1
	} else {
		copyrSNsTogSNs();
		nSensors = MAXSENSORS;
	}

	InitAdc(ADC_CHANNEL);
    1a6a:	87 e0       	ldi	r24, 0x07	; 7
    1a6c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <InitAdc>
	InitAnalogComp();
    1a70:	0e 94 41 05 	call	0xa82	; 0xa82 <InitAnalogComp>
	init_clock();
    1a74:	0e 94 ac 18 	call	0x3158	; 0x3158 <init_clock>

	LCD_CLEAR();
    1a78:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
	LCD_FIRSTLINE();
    1a7c:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
	//LCD_GOTO_XY(0,0);
	LCD_PUTINT(nSensors);
    1a80:	80 91 67 03 	lds	r24, 0x0367
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 d5 20 	call	0x41aa	; 0x41aa <LcdPutInt>
	//printf_P(PSTR("%i%s",nSensors,Sensorsfound);
	LCD_FSTR(FONT_1X,(const char*)Sensorsfound);
    1a8a:	85 ef       	ldi	r24, 0xF5	; 245
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_draw_string3>
	LCD_UPDATE();
    1a92:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
#ifdef SN_SENSOR_SIZE
	LCD_FIRSTLINE();
#endif
	//_delay_ms(1000);

	if(nSensors == MAXSENSORS ){
    1a96:	80 91 67 03 	lds	r24, 0x0367
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <main+0x22c>
    1a9e:	76 c0       	rjmp	.+236    	; 0x1b8c <main+0x318>
		if((ki = test_SN_sensors()) == 99){
    1aa0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <test_SN_sensors>
    1aa4:	e8 2e       	mov	r14, r24
    1aa6:	08 2f       	mov	r16, r24
    1aa8:	11 27       	eor	r17, r17
    1aaa:	07 fd       	sbrc	r16, 7
    1aac:	10 95       	com	r17
    1aae:	03 36       	cpi	r16, 0x63	; 99
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <main+0x242>
    1ab4:	43 c0       	rjmp	.+134    	; 0x1b3c <main+0x2c8>
    1ab6:	e1 2c       	mov	r14, r1

	for ( i = 0; i < nSensors; i++ ) {
		LCD_NEXTSTR();
    1ab8:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <LcdNextStr>
		LCD_PUTINT((int)i+1);
    1abc:	0e 2d       	mov	r16, r14
    1abe:	10 e0       	ldi	r17, 0x00	; 0
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	0e 94 d5 20 	call	0x41aa	; 0x41aa <LcdPutInt>
		if ( gSensorIDs[i][0] == DS18S20_FAMILY_CODE ) {
    1ac8:	f8 01       	movw	r30, r16
    1aca:	ee 0f       	add	r30, r30
    1acc:	ff 1f       	adc	r31, r31
    1ace:	ee 0f       	add	r30, r30
    1ad0:	ff 1f       	adc	r31, r31
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	e4 55       	subi	r30, 0x54	; 84
    1ad8:	fd 4f       	sbci	r31, 0xFD	; 253
    1ada:	80 81       	ld	r24, Z
    1adc:	80 31       	cpi	r24, 0x10	; 16
    1ade:	29 f4       	brne	.+10     	; 0x1aea <main+0x276>
			LCD_FSTR(FONT_1X,DS18S20);
    1ae0:	8c ee       	ldi	r24, 0xEC	; 236
    1ae2:	93 e0       	ldi	r25, 0x03	; 3
    1ae4:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_draw_string3>
    1ae8:	0b c0       	rjmp	.+22     	; 0x1b00 <main+0x28c>
			//printf_P(PSTR("%s",DS18S20);
		} else if ( gSensorIDs[i][0] == DS1822_FAMILY_CODE ) {
    1aea:	82 32       	cpi	r24, 0x22	; 34
    1aec:	29 f4       	brne	.+10     	; 0x1af8 <main+0x284>
			LCD_FSTR(FONT_1X,DS1822);
    1aee:	8b ed       	ldi	r24, 0xDB	; 219
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_draw_string3>
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <main+0x28c>
			//printf_P(PSTR("%s",DS1822);
		}
		else {
			LCD_FSTR(FONT_1X,(const char*)DS18B20);
    1af8:	83 ee       	ldi	r24, 0xE3	; 227
    1afa:	93 e0       	ldi	r25, 0x03	; 3
    1afc:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_draw_string3>
			//printf_P(PSTR("%s",DS18B20);
		}

		if ( DS18X20_get_power_status( &gSensorIDs[i][0] ) == DS18X20_POWER_PARASITE ) {
    1b00:	c8 01       	movw	r24, r16
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	84 55       	subi	r24, 0x54	; 84
    1b10:	9d 4f       	sbci	r25, 0xFD	; 253
    1b12:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <DS18X20_get_power_status>
    1b16:	81 11       	cpse	r24, r1
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <main+0x2b0>
			LCD_FSTR(FONT_1X,(const char*)PAR);
    1b1a:	86 ed       	ldi	r24, 0xD6	; 214
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_draw_string3>
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <main+0x2b8>
			//printf_P(PSTR("%s",PAR);
		} else {
			LCD_FSTR(FONT_1X,(const char*)EXT);
    1b24:	81 ed       	ldi	r24, 0xD1	; 209
    1b26:	93 e0       	ldi	r25, 0x03	; 3
    1b28:	0e 94 b3 20 	call	0x4166	; 0x4166 <LCD_draw_string3>
	//_delay_ms(1000);

	if(nSensors == MAXSENSORS ){
		if((ki = test_SN_sensors()) == 99){

	for ( i = 0; i < nSensors; i++ ) {
    1b2c:	e3 94       	inc	r14
    1b2e:	80 91 67 03 	lds	r24, 0x0367
    1b32:	e8 16       	cp	r14, r24
    1b34:	08 f2       	brcs	.-126    	; 0x1ab8 <main+0x244>
		} else {
			LCD_FSTR(FONT_1X,(const char*)EXT);
			//printf_P(PSTR("%s",EXT);
		}
	}	// for ( i = 0; i < nSensors; i++ )
	     LCD_UPDATE();
    1b36:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
    1b3a:	4d c0       	rjmp	.+154    	; 0x1bd6 <main+0x362>
//)))))))))))))))))))))))))))))))))))))))))))))))))))
   } else { 	// if(test_SN_sensors())
	   printf_P(PSTR("\n    %S"),alarmStr);
    1b3c:	22 e2       	ldi	r18, 0x22	; 34
    1b3e:	34 e0       	ldi	r19, 0x04	; 4
    1b40:	3f 93       	push	r19
    1b42:	2f 93       	push	r18
    1b44:	28 e8       	ldi	r18, 0x88	; 136
    1b46:	33 e0       	ldi	r19, 0x03	; 3
    1b48:	3f 93       	push	r19
    1b4a:	2f 93       	push	r18
    1b4c:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
	   printf_P(PSTR("\n   %S:%01i"),sensorStr,ki);
    1b50:	1f 93       	push	r17
    1b52:	ef 92       	push	r14
    1b54:	8b e1       	ldi	r24, 0x1B	; 27
    1b56:	94 e0       	ldi	r25, 0x04	; 4
    1b58:	9f 93       	push	r25
    1b5a:	8f 93       	push	r24
    1b5c:	8c e7       	ldi	r24, 0x7C	; 124
    1b5e:	93 e0       	ldi	r25, 0x03	; 3
    1b60:	9f 93       	push	r25
    1b62:	8f 93       	push	r24
    1b64:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
	   printf_P(PSTR("\n   %S"),missingStr);
    1b68:	8b e0       	ldi	r24, 0x0B	; 11
    1b6a:	94 e0       	ldi	r25, 0x04	; 4
    1b6c:	9f 93       	push	r25
    1b6e:	8f 93       	push	r24
    1b70:	85 e7       	ldi	r24, 0x75	; 117
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	9f 93       	push	r25
    1b76:	8f 93       	push	r24
    1b78:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
	   LCD_UPDATE();
    1b7c:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	25 c0       	rjmp	.+74     	; 0x1bd6 <main+0x362>
   }	// else { if(test_SN_sensors())
  }	else { // if(nSensors == MAXSENSORS )
	   printf_P(PSTR("\n    %S"),alarmStr);
    1b8c:	82 e2       	ldi	r24, 0x22	; 34
    1b8e:	94 e0       	ldi	r25, 0x04	; 4
    1b90:	9f 93       	push	r25
    1b92:	8f 93       	push	r24
    1b94:	8d e6       	ldi	r24, 0x6D	; 109
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	9f 93       	push	r25
    1b9a:	8f 93       	push	r24
    1b9c:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
	   printf_P(PSTR("\n   %Ss"),sensorStr);
    1ba0:	8b e1       	ldi	r24, 0x1B	; 27
    1ba2:	94 e0       	ldi	r25, 0x04	; 4
    1ba4:	9f 93       	push	r25
    1ba6:	8f 93       	push	r24
    1ba8:	85 e6       	ldi	r24, 0x65	; 101
    1baa:	93 e0       	ldi	r25, 0x03	; 3
    1bac:	9f 93       	push	r25
    1bae:	8f 93       	push	r24
    1bb0:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
	   printf_P(PSTR("\n   %S"),absenceStr);
    1bb4:	83 e1       	ldi	r24, 0x13	; 19
    1bb6:	94 e0       	ldi	r25, 0x04	; 4
    1bb8:	9f 93       	push	r25
    1bba:	8f 93       	push	r24
    1bbc:	8e e5       	ldi	r24, 0x5E	; 94
    1bbe:	93 e0       	ldi	r25, 0x03	; 3
    1bc0:	9f 93       	push	r25
    1bc2:	8f 93       	push	r24
    1bc4:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
	   LCD_UPDATE();
    1bc8:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	7f ef       	ldi	r23, 0xFF	; 255
    1bd8:	89 e6       	ldi	r24, 0x69	; 105
    1bda:	98 e1       	ldi	r25, 0x18	; 24
    1bdc:	71 50       	subi	r23, 0x01	; 1
    1bde:	80 40       	sbci	r24, 0x00	; 0
    1be0:	90 40       	sbci	r25, 0x00	; 0
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <main+0x368>
    1be4:	00 c0       	rjmp	.+0      	; 0x1be6 <main+0x372>
    1be6:	00 00       	nop
#ifdef WATCHDOG
	wdt_reset();
	_delay_ms(50);
#endif

	LCD_CLEAR();
    1be8:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>

	WATCHDOG_DDR |=(1 << WATCHDOG_PIN);	// As output
    1bec:	20 9a       	sbi	0x04, 0	; 4
	TimeKeyPressed = 0;
    1bee:	10 92 80 03 	sts	0x0380, r1
	extstate = 0;
    1bf2:	10 92 3b 03 	sts	0x033B, r1
	powergone = 0;
    1bf6:	10 92 3a 03 	sts	0x033A, r1
	ExtInt0Enable();
    1bfa:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <ExtInt0Enable>
	ExtInt1Enable();
    1bfe:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <ExtInt1Enable>
//	===============================================================================================
	PrefHeatting = FALSE;
    1c02:	10 92 47 03 	sts	0x0347, r1
	temp_for_hour = temper[N_OUTDOOR];
    1c06:	80 91 41 03 	lds	r24, 0x0341
    1c0a:	80 93 6b 03 	sts	0x036B, r24

	if(!btest_new_sensors){
    1c0e:	80 91 d2 02 	lds	r24, 0x02D2
    1c12:	81 11       	cpse	r24, r1
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <main+0x3ae>
		MANAGE_TEMPEVENT();
    1c16:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <manageTemperatureEvent>
		ReadyWATCHDOG = TRUE;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	80 93 7b 03 	sts	0x037B, r24
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <main+0x3b8>
	} else {
		MainLoopPhase = ENTER_NEW_SENSOR;
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	80 93 a7 02 	sts	0x02A7, r24
		nwSen_Phase = REORDER_NWSENS;
    1c28:	10 92 d3 02 	sts	0x02D3, r1
				_delay_ms(100);
#endif
*/
	DO_WATCHDOG();

	for(k = 0;k < MAXSENSORS;k++)
    1c2c:	1a 8a       	std	Y+18, r1	; 0x12
    1c2e:	a1 e0       	ldi	r26, 0x01	; 1
    1c30:	a8 8b       	std	Y+16, r26	; 0x10
    1c32:	0f 2e       	mov	r0, r31
    1c34:	f3 e6       	ldi	r31, 0x63	; 99
    1c36:	8f 2e       	mov	r8, r31
    1c38:	f0 2d       	mov	r31, r0
    1c3a:	0f 2e       	mov	r0, r31
    1c3c:	f3 e6       	ldi	r31, 0x63	; 99
    1c3e:	9f 2e       	mov	r9, r31
    1c40:	f0 2d       	mov	r31, r0
    1c42:	1f 86       	std	Y+15, r1	; 0x0f
    1c44:	1e 86       	std	Y+14, r1	; 0x0e
    1c46:	19 8a       	std	Y+17, r1	; 0x11
    1c48:	1b 8a       	std	Y+19, r1	; 0x13
    1c4a:	0e ec       	ldi	r16, 0xCE	; 206
    1c4c:	12 e0       	ldi	r17, 0x02	; 2
    1c4e:	0f 2e       	mov	r0, r31
    1c50:	f2 ed       	ldi	r31, 0xD2	; 210
    1c52:	6f 2e       	mov	r6, r31
    1c54:	f2 e0       	ldi	r31, 0x02	; 2
    1c56:	7f 2e       	mov	r7, r31
    1c58:	f0 2d       	mov	r31, r0
		extstate = 0;
		LCD_CLEAR();
	}

//
		if(tAsync.minute != mtemp_minute){
    1c5a:	0f 2e       	mov	r0, r31
    1c5c:	f8 e1       	ldi	r31, 0x18	; 24
    1c5e:	4f 2e       	mov	r4, r31
    1c60:	f1 e0       	ldi	r31, 0x01	; 1
    1c62:	5f 2e       	mov	r5, r31
    1c64:	f0 2d       	mov	r31, r0
		if(tAsync.minute % 10 == 0){
			TEST_NOTREADY_SENSORS();
		}

//
		if(tAsync.hour != mtemp_hour){
    1c66:	0f 2e       	mov	r0, r31
    1c68:	f9 e1       	ldi	r31, 0x19	; 25
    1c6a:	2f 2e       	mov	r2, r31
    1c6c:	f1 e0       	ldi	r31, 0x01	; 1
    1c6e:	3f 2e       	mov	r3, r31
    1c70:	f0 2d       	mov	r31, r0
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <main+0x406>
				_delay_ms(100);
#endif
*/
	DO_WATCHDOG();

	for(k = 0;k < MAXSENSORS;k++)
    1c74:	68 94       	set
    1c76:	ff 24       	eor	r15, r15
    1c78:	f2 f8       	bld	r15, 2

//
	for(;;) {   // main loop ***************************************
		//DO_WATCHDOG();
//##################################################################
		if(!wait_powergone && powergone){
    1c7a:	80 91 22 03 	lds	r24, 0x0322
    1c7e:	81 11       	cpse	r24, r1
    1c80:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <main+0x16ae>
    1c84:	80 91 3a 03 	lds	r24, 0x033A
    1c88:	88 23       	and	r24, r24
    1c8a:	a1 f0       	breq	.+40     	; 0x1cb4 <main+0x440>
			wait_powergone = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	80 93 22 03 	sts	0x0322, r24
    1c92:	10 c0       	rjmp	.+32     	; 0x1cb4 <main+0x440>
		}
//
		if(wait_powergone){
			if(powergone){
				if(wait_powergone >= TIMEOUT_POWERGON + 1){
    1c94:	93 30       	cpi	r25, 0x03	; 3
    1c96:	70 f0       	brcs	.+28     	; 0x1cb4 <main+0x440>
					if(INT1_PIN & (1 << INT1_PIN_PIN)){
    1c98:	4b 9b       	sbis	0x09, 3	; 9
    1c9a:	06 c0       	rjmp	.+12     	; 0x1ca8 <main+0x434>
						LcdPowerGoneStr();
    1c9c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <LcdPowerGoneStr>
						sms_powerGone();
    1ca0:	0e 94 82 0b 	call	0x1704	; 0x1704 <sms_powerGone>
						HALT();
    1ca4:	0e 94 53 29 	call	0x52a6	; 0x52a6 <abort>
					} else {
						cli();
    1ca8:	f8 94       	cli
						powergone = 0;
    1caa:	10 92 3a 03 	sts	0x033A, r1
						wait_powergone = 0;
    1cae:	10 92 22 03 	sts	0x0322, r1
						sei();
    1cb2:	78 94       	sei

#ifdef WATCHDOG
	wdt_reset();
#endif

	ch = (char)GetKeyCode();
    1cb4:	0e 94 6d 05 	call	0xada	; 0xada <GetKeyCode>
    1cb8:	d8 2e       	mov	r13, r24

	if(ch == '*' && !fl) {
    1cba:	ba e2       	ldi	r27, 0x2A	; 42
    1cbc:	8b 13       	cpse	r24, r27
    1cbe:	10 c0       	rjmp	.+32     	; 0x1ce0 <main+0x46c>
    1cc0:	80 91 a4 02 	lds	r24, 0x02A4
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	0c c0       	rjmp	.+24     	; 0x1ce0 <main+0x46c>
		LastPhase = MainLoopPhase;
    1cc8:	80 91 a7 02 	lds	r24, 0x02A7
    1ccc:	80 93 a6 02 	sts	0x02A6, r24
		MainLoopPhase = DISPLAY_MAINMENU;
    1cd0:	91 e0       	ldi	r25, 0x01	; 1
    1cd2:	90 93 a7 02 	sts	0x02A7, r25
		if(LastPhase != MainLoopPhase)
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <main+0x468>
    1cda:	9a c0       	rjmp	.+308    	; 0x1e10 <main+0x59c>
			LCD_CLEAR();
    1cdc:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
	}

		switch(MainLoopPhase) {
    1ce0:	80 91 a7 02 	lds	r24, 0x02A7
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	41 f1       	breq	.+80     	; 0x1d38 <main+0x4c4>
    1ce8:	18 f1       	brcs	.+70     	; 0x1d30 <main+0x4bc>
    1cea:	83 30       	cpi	r24, 0x03	; 3
    1cec:	11 f0       	breq	.+4      	; 0x1cf2 <main+0x47e>
    1cee:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <main+0x15d2>
			//MANAGE_TEMPEVENT();
			//LastPhase = MainLoopPhase;
			//MainLoopPhase = DISPLAY_MAINMENU;
			//MainLoopPhase = DISPLAY_TEMPERATURE;

			if(manage_new_sensors(ch)){
    1cf2:	8d 2d       	mov	r24, r13
    1cf4:	0e 94 0a 09 	call	0x1214	; 0x1214 <manage_new_sensors>
    1cf8:	88 23       	and	r24, r24
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <main+0x48a>
    1cfc:	be cf       	rjmp	.-132    	; 0x1c7a <main+0x406>
				MANAGE_TEMPEVENT();
    1cfe:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <manageTemperatureEvent>
				temp_for_hour = temper[N_OUTDOOR];
    1d02:	80 91 41 03 	lds	r24, 0x0341
    1d06:	80 93 6b 03 	sts	0x036B, r24
				LastPhase = MainLoopPhase;
    1d0a:	80 91 a7 02 	lds	r24, 0x02A7
    1d0e:	80 93 a6 02 	sts	0x02A6, r24
				MainLoopPhase = DISPLAY_MAINMENU;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	80 93 a7 02 	sts	0x02A7, r24
				MenuPhase = MMENU_SHOW;
    1d18:	10 92 a5 02 	sts	0x02A5, r1
				ReadyWATCHDOG = TRUE;
    1d1c:	80 93 7b 03 	sts	0x037B, r24
				free(rSensorIDs);
    1d20:	80 91 69 03 	lds	r24, 0x0369
    1d24:	90 91 6a 03 	lds	r25, 0x036A
    1d28:	0e 94 c4 28 	call	0x5188	; 0x5188 <free>
			} else continue;

		break;
    1d2c:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <main+0x15d2>

		case DISPLAY_TEMPERATURE:
			DisplayTemperature();
    1d30:	0e 94 cd 06 	call	0xd9a	; 0xd9a <DisplayTemperature>
		break;
    1d34:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <main+0x15d2>

		case DISPLAY_MAINMENU:

			switch(ch){
    1d38:	8d 2d       	mov	r24, r13
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	b3 97       	sbiw	r30, 0x23	; 35
    1d40:	e7 31       	cpi	r30, 0x17	; 23
    1d42:	f1 05       	cpc	r31, r1
    1d44:	08 f0       	brcs	.+2      	; 0x1d48 <main+0x4d4>
    1d46:	64 c0       	rjmp	.+200    	; 0x1e10 <main+0x59c>
    1d48:	ec 5c       	subi	r30, 0xCC	; 204
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>

				case '1':
				if(MenuPhase == MMENU_SHOW )
    1d50:	80 91 a5 02 	lds	r24, 0x02A5
    1d54:	81 11       	cpse	r24, r1
    1d56:	5c c0       	rjmp	.+184    	; 0x1e10 <main+0x59c>
					MenuPhase = MTELPHONE_SET;
    1d58:	88 e0       	ldi	r24, 0x08	; 8
    1d5a:	80 93 a5 02 	sts	0x02A5, r24
    1d5e:	02 c1       	rjmp	.+516    	; 0x1f64 <main+0x6f0>
				break;
				case '2':
					if(MenuPhase == MMENU_SHOW )
    1d60:	80 91 a5 02 	lds	r24, 0x02A5
    1d64:	81 11       	cpse	r24, r1
    1d66:	54 c0       	rjmp	.+168    	; 0x1e10 <main+0x59c>
						MenuPhase = MVIEW_SNs;
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	80 93 a5 02 	sts	0x02A5, r24
    1d6e:	0d c3       	rjmp	.+1562   	; 0x238a <main+0xb16>
					break;
				case '3':
					if(MenuPhase == MMENU_SHOW )
    1d70:	80 91 a5 02 	lds	r24, 0x02A5
    1d74:	81 11       	cpse	r24, r1
    1d76:	4c c0       	rjmp	.+152    	; 0x1e10 <main+0x59c>
						MenuPhase = MSET_TIME;
    1d78:	85 e0       	ldi	r24, 0x05	; 5
    1d7a:	80 93 a5 02 	sts	0x02A5, r24
    1d7e:	80 c7       	rjmp	.+3840   	; 0x2c80 <main+0x140c>
					break;
				case '4':
					if(MenuPhase == MMENU_SHOW )
    1d80:	80 91 a5 02 	lds	r24, 0x02A5
    1d84:	81 11       	cpse	r24, r1
    1d86:	44 c0       	rjmp	.+136    	; 0x1e10 <main+0x59c>
						MenuPhase = MSETTEMP;
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	80 93 a5 02 	sts	0x02A5, r24
    1d8e:	9c c4       	rjmp	.+2360   	; 0x26c8 <main+0xe54>
					break;
				case '5':
					if(MenuPhase == MMENU_SHOW ){
    1d90:	80 91 a5 02 	lds	r24, 0x02A5
    1d94:	81 11       	cpse	r24, r1
    1d96:	3c c0       	rjmp	.+120    	; 0x1e10 <main+0x59c>
						MenuPhase = MSETTEMP;
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	80 93 a5 02 	sts	0x02A5, r24
						ActSN = TOEEPROM;
						fl = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	80 93 a4 02 	sts	0x02A4, r24
						MenuPhase = MSETTEMP;
					break;
				case '5':
					if(MenuPhase == MMENU_SHOW ){
						MenuPhase = MSETTEMP;
						ActSN = TOEEPROM;
    1da4:	ea e0       	ldi	r30, 0x0A	; 10
    1da6:	ee 87       	std	Y+14, r30	; 0x0e
    1da8:	33 c0       	rjmp	.+102    	; 0x1e10 <main+0x59c>
						fl = 1;
					}
					break;
				case '6':
					if(MenuPhase == MMENU_SHOW )
    1daa:	80 91 a5 02 	lds	r24, 0x02A5
    1dae:	81 11       	cpse	r24, r1
    1db0:	2f c0       	rjmp	.+94     	; 0x1e10 <main+0x59c>
						MenuPhase = MVIEW_TIME;
    1db2:	86 e0       	ldi	r24, 0x06	; 6
    1db4:	80 93 a5 02 	sts	0x02A5, r24
    1db8:	3a c7       	rjmp	.+3700   	; 0x2c2e <main+0x13ba>
					break;
				case '7':
					if(MenuPhase == MMENU_SHOW )
    1dba:	80 91 a5 02 	lds	r24, 0x02A5
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	27 c0       	rjmp	.+78     	; 0x1e10 <main+0x59c>
						MenuPhase = MASSIGN;
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	80 93 a5 02 	sts	0x02A5, r24
    1dc8:	4a c3       	rjmp	.+1684   	; 0x245e <main+0xbea>
					break;
				case '8':
					if(MenuPhase == MMENU_SHOW )
    1dca:	80 91 a5 02 	lds	r24, 0x02A5
    1dce:	81 11       	cpse	r24, r1
    1dd0:	1f c0       	rjmp	.+62     	; 0x1e10 <main+0x59c>
						MenuPhase = MVIEWTEMPR;
    1dd2:	87 e0       	ldi	r24, 0x07	; 7
    1dd4:	80 93 a5 02 	sts	0x02A5, r24
    1dd8:	a3 c3       	rjmp	.+1862   	; 0x2520 <main+0xcac>
					break;
				case '9':
				if(MenuPhase == MMENU_SHOW )
    1dda:	80 91 a5 02 	lds	r24, 0x02A5
    1dde:	81 11       	cpse	r24, r1
    1de0:	17 c0       	rjmp	.+46     	; 0x1e10 <main+0x59c>
					MenuPhase = MSNs_SET;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	80 93 a5 02 	sts	0x02A5, r24
    1de8:	51 c1       	rjmp	.+674    	; 0x208c <main+0x818>
				break;

				case '#':
					LCD_CLEAR();
    1dea:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
				    LCD_UPDATE();
    1dee:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
					if(fl){
    1df2:	80 91 a4 02 	lds	r24, 0x02A4
    1df6:	88 23       	and	r24, r24
    1df8:	29 f0       	breq	.+10     	; 0x1e04 <main+0x590>
						MenuPhase = MMENU_SHOW;
    1dfa:	10 92 a5 02 	sts	0x02A5, r1
						fl = 0;
    1dfe:	10 92 a4 02 	sts	0x02A4, r1
					} else {MainLoopPhase = DISPLAY_TEMPERATURE; mausure_temperature_ok = TRUE; continue;}
					break;
    1e02:	06 c0       	rjmp	.+12     	; 0x1e10 <main+0x59c>
					LCD_CLEAR();
				    LCD_UPDATE();
					if(fl){
						MenuPhase = MMENU_SHOW;
						fl = 0;
					} else {MainLoopPhase = DISPLAY_TEMPERATURE; mausure_temperature_ok = TRUE; continue;}
    1e04:	10 92 a7 02 	sts	0x02A7, r1
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	80 93 08 01 	sts	0x0108, r24
    1e0e:	35 cf       	rjmp	.-406    	; 0x1c7a <main+0x406>
					break;
				}

			switch(MenuPhase){
    1e10:	40 91 a5 02 	lds	r20, 0x02A5
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	4a 30       	cpi	r20, 0x0A	; 10
    1e18:	51 05       	cpc	r21, r1
    1e1a:	10 f0       	brcs	.+4      	; 0x1e20 <main+0x5ac>
    1e1c:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <main+0x15d2>
    1e20:	fa 01       	movw	r30, r20
    1e22:	e5 5b       	subi	r30, 0xB5	; 181
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>
			case MMENU_SHOW:
				if(fl){ LCD_CLEAR(); fl = 0;}
    1e2a:	80 91 a4 02 	lds	r24, 0x02A4
    1e2e:	88 23       	and	r24, r24
    1e30:	21 f0       	breq	.+8      	; 0x1e3a <main+0x5c6>
    1e32:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
    1e36:	10 92 a4 02 	sts	0x02A4, r1
				LCD_FIRSTLINE();
    1e3a:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>

				printf_P(PSTR("%i.%S %S\n"),1,setStr,telStr);
    1e3e:	8b ec       	ldi	r24, 0xCB	; 203
    1e40:	93 e0       	ldi	r25, 0x03	; 3
    1e42:	9f 93       	push	r25
    1e44:	8f 93       	push	r24
    1e46:	0f 2e       	mov	r0, r31
    1e48:	fe e6       	ldi	r31, 0x6E	; 110
    1e4a:	cf 2e       	mov	r12, r31
    1e4c:	f4 e0       	ldi	r31, 0x04	; 4
    1e4e:	df 2e       	mov	r13, r31
    1e50:	f0 2d       	mov	r31, r0
    1e52:	df 92       	push	r13
    1e54:	cf 92       	push	r12
    1e56:	1f 92       	push	r1
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	8f 93       	push	r24
    1e5c:	84 e5       	ldi	r24, 0x54	; 84
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	9f 93       	push	r25
    1e62:	8f 93       	push	r24
    1e64:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("%i.%S %Ss\n"),2,viewStr,snStr);
    1e68:	87 ea       	ldi	r24, 0xA7	; 167
    1e6a:	94 e0       	ldi	r25, 0x04	; 4
    1e6c:	9f 93       	push	r25
    1e6e:	8f 93       	push	r24
    1e70:	0f 2e       	mov	r0, r31
    1e72:	f9 e6       	ldi	r31, 0x69	; 105
    1e74:	ef 2e       	mov	r14, r31
    1e76:	f4 e0       	ldi	r31, 0x04	; 4
    1e78:	ff 2e       	mov	r15, r31
    1e7a:	f0 2d       	mov	r31, r0
    1e7c:	ff 92       	push	r15
    1e7e:	ef 92       	push	r14
    1e80:	1f 92       	push	r1
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	8f 93       	push	r24
    1e86:	89 e4       	ldi	r24, 0x49	; 73
    1e88:	93 e0       	ldi	r25, 0x03	; 3
    1e8a:	9f 93       	push	r25
    1e8c:	8f 93       	push	r24
    1e8e:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("%i.%S %S\n"),3,setStr,timeStr);
    1e92:	0f 2e       	mov	r0, r31
    1e94:	fb e3       	ldi	r31, 0x3B	; 59
    1e96:	af 2e       	mov	r10, r31
    1e98:	f4 e0       	ldi	r31, 0x04	; 4
    1e9a:	bf 2e       	mov	r11, r31
    1e9c:	f0 2d       	mov	r31, r0
    1e9e:	bf 92       	push	r11
    1ea0:	af 92       	push	r10
    1ea2:	df 92       	push	r13
    1ea4:	cf 92       	push	r12
    1ea6:	1f 92       	push	r1
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	8f 93       	push	r24
    1eac:	8f e3       	ldi	r24, 0x3F	; 63
    1eae:	93 e0       	ldi	r25, 0x03	; 3
    1eb0:	9f 93       	push	r25
    1eb2:	8f 93       	push	r24
    1eb4:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("%i.%S %S-%S\n"),4,setStr,minStr,maxStr);
    1eb8:	89 e5       	ldi	r24, 0x59	; 89
    1eba:	94 e0       	ldi	r25, 0x04	; 4
    1ebc:	9f 93       	push	r25
    1ebe:	8f 93       	push	r24
    1ec0:	8d e5       	ldi	r24, 0x5D	; 93
    1ec2:	94 e0       	ldi	r25, 0x04	; 4
    1ec4:	9f 93       	push	r25
    1ec6:	8f 93       	push	r24
    1ec8:	df 92       	push	r13
    1eca:	cf 92       	push	r12
    1ecc:	1f 92       	push	r1
    1ece:	84 e0       	ldi	r24, 0x04	; 4
    1ed0:	8f 93       	push	r24
    1ed2:	82 e3       	ldi	r24, 0x32	; 50
    1ed4:	93 e0       	ldi	r25, 0x03	; 3
    1ed6:	9f 93       	push	r25
    1ed8:	8f 93       	push	r24
    1eda:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("%i.%S\n"),5,toeepromStr);
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	85 e4       	ldi	r24, 0x45	; 69
    1eea:	94 e0       	ldi	r25, 0x04	; 4
    1eec:	9f 93       	push	r25
    1eee:	8f 93       	push	r24
    1ef0:	1f 92       	push	r1
    1ef2:	85 e0       	ldi	r24, 0x05	; 5
    1ef4:	8f 93       	push	r24
    1ef6:	8b e2       	ldi	r24, 0x2B	; 43
    1ef8:	93 e0       	ldi	r25, 0x03	; 3
    1efa:	9f 93       	push	r25
    1efc:	8f 93       	push	r24
    1efe:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
#ifdef N1110_LCD
				printf_P(PSTR("%i.%S %S\n"),6,viewStr,timeStr);
    1f02:	bf 92       	push	r11
    1f04:	af 92       	push	r10
    1f06:	ff 92       	push	r15
    1f08:	ef 92       	push	r14
    1f0a:	1f 92       	push	r1
    1f0c:	86 e0       	ldi	r24, 0x06	; 6
    1f0e:	8f 93       	push	r24
    1f10:	81 e2       	ldi	r24, 0x21	; 33
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	9f 93       	push	r25
    1f16:	8f 93       	push	r24
    1f18:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("%i.%S %S\n"),7,viewStr,assignStr);
    1f1c:	81 e6       	ldi	r24, 0x61	; 97
    1f1e:	94 e0       	ldi	r25, 0x04	; 4
    1f20:	9f 93       	push	r25
    1f22:	8f 93       	push	r24
    1f24:	ff 92       	push	r15
    1f26:	ef 92       	push	r14
    1f28:	1f 92       	push	r1
    1f2a:	87 e0       	ldi	r24, 0x07	; 7
    1f2c:	8f 93       	push	r24
    1f2e:	87 e1       	ldi	r24, 0x17	; 23
    1f30:	93 e0       	ldi	r25, 0x03	; 3
    1f32:	9f 93       	push	r25
    1f34:	8f 93       	push	r24
    1f36:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("%i.%S %S"),8,viewStr,temperStr);
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	94 e0       	ldi	r25, 0x04	; 4
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	ff 92       	push	r15
    1f44:	ef 92       	push	r14
    1f46:	1f 92       	push	r1
    1f48:	88 e0       	ldi	r24, 0x08	; 8
    1f4a:	8f 93       	push	r24
    1f4c:	8e e0       	ldi	r24, 0x0E	; 14
    1f4e:	93 e0       	ldi	r25, 0x03	; 3
    1f50:	9f 93       	push	r25
    1f52:	8f 93       	push	r24
    1f54:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
//				printf_P(PSTR("%i.%S %Ss\n"),9,setStr,snStr);
#else
				printf_P(PSTR("%i.%S %S"),6,viewStr,timeStr);
#endif
				break;
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	71 c7       	rjmp	.+3810   	; 0x2e46 <main+0x15d2>
			case  MTELPHONE_SET:
				if(fl == 0){
    1f64:	80 91 a4 02 	lds	r24, 0x02A4
    1f68:	81 11       	cpse	r24, r1
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <main+0x700>
					ActSN = TELPRNSTR;
					fl = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	80 93 a4 02 	sts	0x02A4, r24
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <main+0x710>
				}
				switch(ActSN) {
    1f74:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f76:	71 30       	cpi	r23, 0x01	; 1
    1f78:	09 f1       	breq	.+66     	; 0x1fbc <main+0x748>
    1f7a:	20 f0       	brcs	.+8      	; 0x1f84 <main+0x710>
    1f7c:	72 30       	cpi	r23, 0x02	; 2
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <main+0x70e>
    1f80:	5d c0       	rjmp	.+186    	; 0x203c <main+0x7c8>
    1f82:	61 c7       	rjmp	.+3778   	; 0x2e46 <main+0x15d2>
					case TELPRNSTR:
						LCD_CLEAR();
    1f84:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    1f88:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S:\n"),setStr, telStr);
    1f8c:	8b ec       	ldi	r24, 0xCB	; 203
    1f8e:	93 e0       	ldi	r25, 0x03	; 3
    1f90:	9f 93       	push	r25
    1f92:	8f 93       	push	r24
    1f94:	8e e6       	ldi	r24, 0x6E	; 110
    1f96:	94 e0       	ldi	r25, 0x04	; 4
    1f98:	9f 93       	push	r25
    1f9a:	8f 93       	push	r24
    1f9c:	86 e0       	ldi	r24, 0x06	; 6
    1f9e:	93 e0       	ldi	r25, 0x03	; 3
    1fa0:	9f 93       	push	r25
    1fa2:	8f 93       	push	r24
    1fa4:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ActSN = TELENTERNUM;
						n = 0;
						break;
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
					case TELPRNSTR:
						LCD_CLEAR();
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S:\n"),setStr, telStr);
						ActSN = TELENTERNUM;
						n = 0;
    1fb4:	1f 86       	std	Y+15, r1	; 0x0f
				switch(ActSN) {
					case TELPRNSTR:
						LCD_CLEAR();
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S:\n"),setStr, telStr);
						ActSN = TELENTERNUM;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	8e 87       	std	Y+14, r24	; 0x0e
						n = 0;
						break;
    1fba:	45 c7       	rjmp	.+3722   	; 0x2e46 <main+0x15d2>
					case TELENTERNUM:
						if(ch >= 0x30 && ch <= 0x39) {
    1fbc:	80 ed       	ldi	r24, 0xD0	; 208
    1fbe:	8d 0d       	add	r24, r13
    1fc0:	8a 30       	cpi	r24, 0x0A	; 10
    1fc2:	78 f4       	brcc	.+30     	; 0x1fe2 <main+0x76e>
							if(n < LENNUMPHONE){
    1fc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc6:	9e 30       	cpi	r25, 0x0E	; 14
    1fc8:	60 f4       	brcc	.+24     	; 0x1fe2 <main+0x76e>
								printf("%c",ch);
    1fca:	8d 2d       	mov	r24, r13
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <putchar>
								telNumber[n] = ch;
    1fd2:	af 85       	ldd	r26, Y+15	; 0x0f
    1fd4:	ea 2f       	mov	r30, r26
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	e4 59       	subi	r30, 0x94	; 148
    1fda:	fc 4f       	sbci	r31, 0xFC	; 252
    1fdc:	d0 82       	st	Z, r13
								n++;
    1fde:	af 5f       	subi	r26, 0xFF	; 255
    1fe0:	af 87       	std	Y+15, r26	; 0x0f
								}
						 	 }
						if(ch == '*')
    1fe2:	ba e2       	ldi	r27, 0x2A	; 42
    1fe4:	db 12       	cpse	r13, r27
    1fe6:	2f c7       	rjmp	.+3678   	; 0x2e46 <main+0x15d2>
							{
							 telNumber[n] = '\0';
    1fe8:	2f 85       	ldd	r18, Y+15	; 0x0f
    1fea:	e2 2f       	mov	r30, r18
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	0f 2e       	mov	r0, r31
    1ff0:	fc e6       	ldi	r31, 0x6C	; 108
    1ff2:	ef 2e       	mov	r14, r31
    1ff4:	f3 e0       	ldi	r31, 0x03	; 3
    1ff6:	ff 2e       	mov	r15, r31
    1ff8:	f0 2d       	mov	r31, r0
    1ffa:	e4 59       	subi	r30, 0x94	; 148
    1ffc:	fc 4f       	sbci	r31, 0xFC	; 252
    1ffe:	10 82       	st	Z, r1
							 printf_P(PSTR("\n%S%S?"),saveStr, toeepromStr);
    2000:	85 e4       	ldi	r24, 0x45	; 69
    2002:	94 e0       	ldi	r25, 0x04	; 4
    2004:	9f 93       	push	r25
    2006:	8f 93       	push	r24
    2008:	80 e4       	ldi	r24, 0x40	; 64
    200a:	94 e0       	ldi	r25, 0x04	; 4
    200c:	9f 93       	push	r25
    200e:	8f 93       	push	r24
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	92 e0       	ldi	r25, 0x02	; 2
    2014:	9f 93       	push	r25
    2016:	8f 93       	push	r24
    2018:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
							 printf_P(PSTR("\n%s"),telNumber);
    201c:	ff 92       	push	r15
    201e:	ef 92       	push	r14
    2020:	8b ef       	ldi	r24, 0xFB	; 251
    2022:	92 e0       	ldi	r25, 0x02	; 2
    2024:	9f 93       	push	r25
    2026:	8f 93       	push	r24
    2028:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
							 ActSN = TELTOEEPROM;
    2036:	72 e0       	ldi	r23, 0x02	; 2
    2038:	7e 87       	std	Y+14, r23	; 0x0e
    203a:	05 c7       	rjmp	.+3594   	; 0x2e46 <main+0x15d2>
							}
						break;
					case TELTOEEPROM:

						if(ch == '*') {
    203c:	8a e2       	ldi	r24, 0x2A	; 42
    203e:	d8 12       	cpse	r13, r24
    2040:	02 c7       	rjmp	.+3588   	; 0x2e46 <main+0x15d2>
							//eeprom_update_block((void *)telNumber , (void*)etelNumber ,strlen(telNumber));
							eeprom_write_block((void *)telNumber , (void*)etelNumber ,strlen(telNumber)+1);
    2042:	ec e6       	ldi	r30, 0x6C	; 108
    2044:	f3 e0       	ldi	r31, 0x03	; 3
    2046:	01 90       	ld	r0, Z+
    2048:	00 20       	and	r0, r0
    204a:	e9 f7       	brne	.-6      	; 0x2046 <main+0x7d2>
    204c:	af 01       	movw	r20, r30
    204e:	4c 56       	subi	r20, 0x6C	; 108
    2050:	53 40       	sbci	r21, 0x03	; 3
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	8c e6       	ldi	r24, 0x6C	; 108
    2058:	93 e0       	ldi	r25, 0x03	; 3
    205a:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__eewr_block_m328p>
							printf_P(PSTR("\n%SD %S!"),saveStr,okStr);
    205e:	87 ec       	ldi	r24, 0xC7	; 199
    2060:	94 e0       	ldi	r25, 0x04	; 4
    2062:	9f 93       	push	r25
    2064:	8f 93       	push	r24
    2066:	80 e4       	ldi	r24, 0x40	; 64
    2068:	94 e0       	ldi	r25, 0x04	; 4
    206a:	9f 93       	push	r25
    206c:	8f 93       	push	r24
    206e:	82 ef       	ldi	r24, 0xF2	; 242
    2070:	92 e0       	ldi	r25, 0x02	; 2
    2072:	9f 93       	push	r25
    2074:	8f 93       	push	r24
    2076:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
							ActSN = EXITTELSET;;
    2086:	93 e0       	ldi	r25, 0x03	; 3
    2088:	9e 87       	std	Y+14, r25	; 0x0e
    208a:	dd c6       	rjmp	.+3514   	; 0x2e46 <main+0x15d2>
				}

				break;

			case MSNs_SET:
				if(fl == 0){
    208c:	80 91 a4 02 	lds	r24, 0x02A4
    2090:	81 11       	cpse	r24, r1
    2092:	04 c0       	rjmp	.+8      	; 0x209c <main+0x828>
					ActSN = INDOOR;
					fl = 1;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	80 93 a4 02 	sts	0x02A4, r24
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <main+0x850>
				}

				switch(ActSN) {
    209c:	ae 85       	ldd	r26, Y+14	; 0x0e
    209e:	a2 30       	cpi	r26, 0x02	; 2
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <main+0x830>
    20a2:	6b c0       	rjmp	.+214    	; 0x217a <main+0x906>
    20a4:	28 f4       	brcc	.+10     	; 0x20b0 <main+0x83c>
    20a6:	aa 23       	and	r26, r26
    20a8:	69 f0       	breq	.+26     	; 0x20c4 <main+0x850>
    20aa:	a1 30       	cpi	r26, 0x01	; 1
    20ac:	c1 f1       	breq	.+112    	; 0x211e <main+0x8aa>
    20ae:	cb c6       	rjmp	.+3478   	; 0x2e46 <main+0x15d2>
    20b0:	be 85       	ldd	r27, Y+14	; 0x0e
    20b2:	b4 30       	cpi	r27, 0x04	; 4
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <main+0x844>
    20b6:	65 c1       	rjmp	.+714    	; 0x2382 <main+0xb0e>
    20b8:	08 f4       	brcc	.+2      	; 0x20bc <main+0x848>
    20ba:	8d c0       	rjmp	.+282    	; 0x21d6 <main+0x962>
    20bc:	b5 30       	cpi	r27, 0x05	; 5
    20be:	09 f4       	brne	.+2      	; 0x20c2 <main+0x84e>
    20c0:	b7 c0       	rjmp	.+366    	; 0x2230 <main+0x9bc>
    20c2:	c1 c6       	rjmp	.+3458   	; 0x2e46 <main+0x15d2>

					case INDOOR:
						LCD_CLEAR();
    20c4:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    20c8:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    20cc:	8a ea       	ldi	r24, 0xAA	; 170
    20ce:	94 e0       	ldi	r25, 0x04	; 4
    20d0:	9f 93       	push	r25
    20d2:	8f 93       	push	r24
    20d4:	81 eb       	ldi	r24, 0xB1	; 177
    20d6:	94 e0       	ldi	r25, 0x04	; 4
    20d8:	9f 93       	push	r25
    20da:	8f 93       	push	r24
    20dc:	8b ee       	ldi	r24, 0xEB	; 235
    20de:	92 e0       	ldi	r25, 0x02	; 2
    20e0:	9f 93       	push	r25
    20e2:	8f 93       	push	r24
    20e4:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
    20e8:	87 ea       	ldi	r24, 0xA7	; 167
    20ea:	94 e0       	ldi	r25, 0x04	; 4
    20ec:	9f 93       	push	r25
    20ee:	8f 93       	push	r24
    20f0:	80 ea       	ldi	r24, 0xA0	; 160
    20f2:	94 e0       	ldi	r25, 0x04	; 4
    20f4:	9f 93       	push	r25
    20f6:	8f 93       	push	r24
    20f8:	82 ee       	ldi	r24, 0xE2	; 226
    20fa:	92 e0       	ldi	r25, 0x02	; 2
    20fc:	9f 93       	push	r25
    20fe:	8f 93       	push	r24
    2100:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						n = 0;
						nSNpos = 0;
						ActSN_next = OUTDOOR;
						aSN_num = 0;
						ActSN = ENTER_SN;
						break;
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = OUTDOOR;
						aSN_num = 0;
    210e:	1a 8a       	std	Y+18, r1	; 0x12
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = OUTDOOR;
    2110:	f1 e0       	ldi	r31, 0x01	; 1
    2112:	f8 8b       	std	Y+16, r31	; 0x10
						LCD_CLEAR();
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
						ch = 'z';
						n = 0;
    2114:	1f 86       	std	Y+15, r1	; 0x0f
						nSNpos = 0;
						ActSN_next = OUTDOOR;
						aSN_num = 0;
						ActSN = ENTER_SN;
    2116:	25 e0       	ldi	r18, 0x05	; 5
    2118:	2e 87       	std	Y+14, r18	; 0x0e
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
    211a:	19 8a       	std	Y+17, r1	; 0x11
						ActSN_next = OUTDOOR;
						aSN_num = 0;
						ActSN = ENTER_SN;
						break;
    211c:	94 c6       	rjmp	.+3368   	; 0x2e46 <main+0x15d2>
					case OUTDOOR:
						LCD_CLEAR();
    211e:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    2122:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2126:	8a ea       	ldi	r24, 0xAA	; 170
    2128:	94 e0       	ldi	r25, 0x04	; 4
    212a:	9f 93       	push	r25
    212c:	8f 93       	push	r24
    212e:	81 eb       	ldi	r24, 0xB1	; 177
    2130:	94 e0       	ldi	r25, 0x04	; 4
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	8b ed       	ldi	r24, 0xDB	; 219
    2138:	92 e0       	ldi	r25, 0x02	; 2
    213a:	9f 93       	push	r25
    213c:	8f 93       	push	r24
    213e:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
    2142:	87 ea       	ldi	r24, 0xA7	; 167
    2144:	94 e0       	ldi	r25, 0x04	; 4
    2146:	9f 93       	push	r25
    2148:	8f 93       	push	r24
    214a:	88 e9       	ldi	r24, 0x98	; 152
    214c:	94 e0       	ldi	r25, 0x04	; 4
    214e:	9f 93       	push	r25
    2150:	8f 93       	push	r24
    2152:	82 ed       	ldi	r24, 0xD2	; 210
    2154:	92 e0       	ldi	r25, 0x02	; 2
    2156:	9f 93       	push	r25
    2158:	8f 93       	push	r24
    215a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						n = 0;
						nSNpos = 0;
						ActSN_next = SUPPLY;
						aSN_num = 1;
						ActSN = ENTER_SN;
						break;
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = SUPPLY;
						aSN_num = 1;
    2168:	71 e0       	ldi	r23, 0x01	; 1
    216a:	7a 8b       	std	Y+18, r23	; 0x12
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = SUPPLY;
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	88 8b       	std	Y+16, r24	; 0x10
						LCD_CLEAR();
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
						ch = 'z';
						n = 0;
    2170:	1f 86       	std	Y+15, r1	; 0x0f
						nSNpos = 0;
						ActSN_next = SUPPLY;
						aSN_num = 1;
						ActSN = ENTER_SN;
    2172:	95 e0       	ldi	r25, 0x05	; 5
    2174:	9e 87       	std	Y+14, r25	; 0x0e
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
    2176:	19 8a       	std	Y+17, r1	; 0x11
						ActSN_next = SUPPLY;
						aSN_num = 1;
						ActSN = ENTER_SN;
						break;
    2178:	66 c6       	rjmp	.+3276   	; 0x2e46 <main+0x15d2>
					case SUPPLY:
						LCD_CLEAR();
    217a:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    217e:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2182:	8a ea       	ldi	r24, 0xAA	; 170
    2184:	94 e0       	ldi	r25, 0x04	; 4
    2186:	9f 93       	push	r25
    2188:	8f 93       	push	r24
    218a:	81 eb       	ldi	r24, 0xB1	; 177
    218c:	94 e0       	ldi	r25, 0x04	; 4
    218e:	9f 93       	push	r25
    2190:	8f 93       	push	r24
    2192:	8b ec       	ldi	r24, 0xCB	; 203
    2194:	92 e0       	ldi	r25, 0x02	; 2
    2196:	9f 93       	push	r25
    2198:	8f 93       	push	r24
    219a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
    219e:	87 ea       	ldi	r24, 0xA7	; 167
    21a0:	94 e0       	ldi	r25, 0x04	; 4
    21a2:	9f 93       	push	r25
    21a4:	8f 93       	push	r24
    21a6:	81 e9       	ldi	r24, 0x91	; 145
    21a8:	94 e0       	ldi	r25, 0x04	; 4
    21aa:	9f 93       	push	r25
    21ac:	8f 93       	push	r24
    21ae:	82 ec       	ldi	r24, 0xC2	; 194
    21b0:	92 e0       	ldi	r25, 0x02	; 2
    21b2:	9f 93       	push	r25
    21b4:	8f 93       	push	r24
    21b6:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						n = 0;
						nSNpos = 0;
						ActSN_next = RETURN;
						aSN_num = 2;
						ActSN = ENTER_SN;
						break;
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = RETURN;
						aSN_num = 2;
    21c4:	b2 e0       	ldi	r27, 0x02	; 2
    21c6:	ba 8b       	std	Y+18, r27	; 0x12
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = RETURN;
    21c8:	e3 e0       	ldi	r30, 0x03	; 3
    21ca:	e8 8b       	std	Y+16, r30	; 0x10
						LCD_CLEAR();
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
						ch = 'z';
						n = 0;
    21cc:	1f 86       	std	Y+15, r1	; 0x0f
						nSNpos = 0;
						ActSN_next = RETURN;
						aSN_num = 2;
						ActSN = ENTER_SN;
    21ce:	f5 e0       	ldi	r31, 0x05	; 5
    21d0:	fe 87       	std	Y+14, r31	; 0x0e
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
    21d2:	19 8a       	std	Y+17, r1	; 0x11
						ActSN_next = RETURN;
						aSN_num = 2;
						ActSN = ENTER_SN;
						break;
    21d4:	38 c6       	rjmp	.+3184   	; 0x2e46 <main+0x15d2>
					case RETURN:
						LCD_CLEAR();
    21d6:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    21da:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    21de:	8a ea       	ldi	r24, 0xAA	; 170
    21e0:	94 e0       	ldi	r25, 0x04	; 4
    21e2:	9f 93       	push	r25
    21e4:	8f 93       	push	r24
    21e6:	81 eb       	ldi	r24, 0xB1	; 177
    21e8:	94 e0       	ldi	r25, 0x04	; 4
    21ea:	9f 93       	push	r25
    21ec:	8f 93       	push	r24
    21ee:	8b eb       	ldi	r24, 0xBB	; 187
    21f0:	92 e0       	ldi	r25, 0x02	; 2
    21f2:	9f 93       	push	r25
    21f4:	8f 93       	push	r24
    21f6:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
    21fa:	87 ea       	ldi	r24, 0xA7	; 167
    21fc:	94 e0       	ldi	r25, 0x04	; 4
    21fe:	9f 93       	push	r25
    2200:	8f 93       	push	r24
    2202:	8a e8       	ldi	r24, 0x8A	; 138
    2204:	94 e0       	ldi	r25, 0x04	; 4
    2206:	9f 93       	push	r25
    2208:	8f 93       	push	r24
    220a:	82 eb       	ldi	r24, 0xB2	; 178
    220c:	92 e0       	ldi	r25, 0x02	; 2
    220e:	9f 93       	push	r25
    2210:	8f 93       	push	r24
    2212:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						n = 0;
						nSNpos = 0;
						ActSN_next = INDOOR;
						aSN_num = 3;
						ActSN = ENTER_SN;
						break;
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = INDOOR;
						aSN_num = 3;
    2220:	33 e0       	ldi	r19, 0x03	; 3
    2222:	3a 8b       	std	Y+18, r19	; 0x12
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = INDOOR;
    2224:	18 8a       	std	Y+16, r1	; 0x10
						LCD_CLEAR();
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
						ch = 'z';
						n = 0;
    2226:	1f 86       	std	Y+15, r1	; 0x0f
						nSNpos = 0;
						ActSN_next = INDOOR;
						aSN_num = 3;
						ActSN = ENTER_SN;
    2228:	45 e0       	ldi	r20, 0x05	; 5
    222a:	4e 87       	std	Y+14, r20	; 0x0e
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
    222c:	19 8a       	std	Y+17, r1	; 0x11
						ActSN_next = INDOOR;
						aSN_num = 3;
						ActSN = ENTER_SN;
						break;
    222e:	0b c6       	rjmp	.+3094   	; 0x2e46 <main+0x15d2>

					case ENTER_SN:
						 if(ch >= 0x30 && ch <= 0x39) {
    2230:	80 ed       	ldi	r24, 0xD0	; 208
    2232:	8d 0d       	add	r24, r13
    2234:	8a 30       	cpi	r24, 0x0A	; 10
    2236:	08 f0       	brcs	.+2      	; 0x223a <main+0x9c6>
    2238:	a0 c0       	rjmp	.+320    	; 0x237a <main+0xb06>
							if(nSNpos < SNLEN){
    223a:	69 89       	ldd	r22, Y+17	; 0x11
    223c:	67 30       	cpi	r22, 0x07	; 7
    223e:	08 f0       	brcs	.+2      	; 0x2242 <main+0x9ce>
    2240:	98 c0       	rjmp	.+304    	; 0x2372 <main+0xafe>
								printf("%c",ch);
    2242:	8d 2d       	mov	r24, r13
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <putchar>
								wStr[n] = ch;
    224a:	7f 85       	ldd	r23, Y+15	; 0x0f
    224c:	87 2f       	mov	r24, r23
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	e1 e0       	ldi	r30, 0x01	; 1
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	ec 0f       	add	r30, r28
    2256:	fd 1f       	adc	r31, r29
    2258:	e8 0f       	add	r30, r24
    225a:	f9 1f       	adc	r31, r25
    225c:	d0 82       	st	Z, r13
							  if (n < 2) n++;
    225e:	72 30       	cpi	r23, 0x02	; 2
    2260:	18 f4       	brcc	.+6      	; 0x2268 <main+0x9f4>
    2262:	7f 5f       	subi	r23, 0xFF	; 255
    2264:	7f 87       	std	Y+15, r23	; 0x0f
    2266:	89 c0       	rjmp	.+274    	; 0x237a <main+0xb06>
							  else {
								wStr[n+1] = 0;
    2268:	e2 e0       	ldi	r30, 0x02	; 2
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	ec 0f       	add	r30, r28
    226e:	fd 1f       	adc	r31, r29
    2270:	e8 0f       	add	r30, r24
    2272:	f9 1f       	adc	r31, r25
    2274:	10 82       	st	Z, r1
								ki = atoi(wStr);
    2276:	ce 01       	movw	r24, r28
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
								if(ki <= 255){
    227e:	8f 3f       	cpi	r24, 0xFF	; 255
    2280:	91 05       	cpc	r25, r1
    2282:	11 f0       	breq	.+4      	; 0x2288 <main+0xa14>
    2284:	0c f0       	brlt	.+2      	; 0x2288 <main+0xa14>
    2286:	65 c0       	rjmp	.+202    	; 0x2352 <main+0xade>
									gSensNumb[nSNpos] = (uint8_t) ki;
    2288:	0f 2e       	mov	r0, r31
    228a:	f6 e0       	ldi	r31, 0x06	; 6
    228c:	ef 2e       	mov	r14, r31
    228e:	f1 2c       	mov	r15, r1
    2290:	f0 2d       	mov	r31, r0
    2292:	ec 0e       	add	r14, r28
    2294:	fd 1e       	adc	r15, r29
    2296:	a9 89       	ldd	r26, Y+17	; 0x11
    2298:	ea 0e       	add	r14, r26
    229a:	f1 1c       	adc	r15, r1
    229c:	f7 01       	movw	r30, r14
    229e:	80 83       	st	Z, r24
									ReturnXPos(3);
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	0e 94 0b 21 	call	0x4216	; 0x4216 <ReturnXPos>
									printf("%02X ",gSensNumb[nSNpos]);
    22a6:	d7 01       	movw	r26, r14
    22a8:	8c 91       	ld	r24, X
    22aa:	1f 92       	push	r1
    22ac:	8f 93       	push	r24
    22ae:	85 e2       	ldi	r24, 0x25	; 37
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	9f 93       	push	r25
    22b4:	8f 93       	push	r24
    22b6:	0e 94 2b 2a 	call	0x5456	; 0x5456 <printf>
							        ReturnXPos(1);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	0e 94 0b 21 	call	0x4216	; 0x4216 <ReturnXPos>
									nSNpos += 1;
    22c0:	b9 89       	ldd	r27, Y+17	; 0x11
    22c2:	bf 5f       	subi	r27, 0xFF	; 255
    22c4:	b9 8b       	std	Y+17, r27	; 0x11
								   if(nSNpos == SNLEN){
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	b7 30       	cpi	r27, 0x07	; 7
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <main+0xa60>
    22d2:	52 c0       	rjmp	.+164    	; 0x2378 <main+0xb04>
								      gSensNumb[nSNpos] = 0;
    22d4:	1d 86       	std	Y+13, r1	; 0x0d
    22d6:	fe 01       	movw	r30, r28
    22d8:	36 96       	adiw	r30, 0x06	; 6
    22da:	3a 89       	ldd	r19, Y+18	; 0x12
    22dc:	28 e0       	ldi	r18, 0x08	; 8
    22de:	32 9f       	mul	r19, r18
    22e0:	a0 01       	movw	r20, r0
    22e2:	11 24       	eor	r1, r1
    22e4:	44 55       	subi	r20, 0x54	; 84
    22e6:	5d 4f       	sbci	r21, 0xFD	; 253
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
								      for(k=0;k<SNLEN;k++)
										 gSensorIDs[aSN_num][k] = gSensNumb[k];
    22ec:	23 2f       	mov	r18, r19
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	79 01       	movw	r14, r18
    22f2:	61 91       	ld	r22, Z+
    22f4:	da 01       	movw	r26, r20
    22f6:	a8 0f       	add	r26, r24
    22f8:	b9 1f       	adc	r27, r25
    22fa:	6c 93       	st	X, r22
    22fc:	01 96       	adiw	r24, 0x01	; 1
									printf("%02X ",gSensNumb[nSNpos]);
							        ReturnXPos(1);
									nSNpos += 1;
								   if(nSNpos == SNLEN){
								      gSensNumb[nSNpos] = 0;
								      for(k=0;k<SNLEN;k++)
    22fe:	87 30       	cpi	r24, 0x07	; 7
    2300:	91 05       	cpc	r25, r1
    2302:	b1 f7       	brne	.-20     	; 0x22f0 <main+0xa7c>
										 gSensorIDs[aSN_num][k] = gSensNumb[k];
								      ch = crc8(&gSensNumb[0],SNLEN);
    2304:	67 e0       	ldi	r22, 0x07	; 7
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	ce 01       	movw	r24, r28
    230a:	06 96       	adiw	r24, 0x06	; 6
    230c:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <crc8>
    2310:	d8 2e       	mov	r13, r24
								      gSensorIDs[aSN_num][k] = ch;
    2312:	f7 01       	movw	r30, r14
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	e4 55       	subi	r30, 0x54	; 84
    2322:	fd 4f       	sbci	r31, 0xFD	; 253
    2324:	87 83       	std	Z+7, r24	; 0x07
								      printf_P(PSTR("\n %S:%02X"),checksumStr,ch);
    2326:	1f 92       	push	r1
    2328:	8f 93       	push	r24
    232a:	82 e7       	ldi	r24, 0x72	; 114
    232c:	94 e0       	ldi	r25, 0x04	; 4
    232e:	9f 93       	push	r25
    2330:	8f 93       	push	r24
    2332:	88 ea       	ldi	r24, 0xA8	; 168
    2334:	92 e0       	ldi	r25, 0x02	; 2
    2336:	9f 93       	push	r25
    2338:	8f 93       	push	r24
    233a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
								      ActSN = SN_EXIT;
								   }
								} else { ReturnXPos(3); printf_P(PSTR("   ")); ReturnXPos(3);}
								n = 0;
    234a:	1f 86       	std	Y+15, r1	; 0x0f
								      for(k=0;k<SNLEN;k++)
										 gSensorIDs[aSN_num][k] = gSensNumb[k];
								      ch = crc8(&gSensNumb[0],SNLEN);
								      gSensorIDs[aSN_num][k] = ch;
								      printf_P(PSTR("\n %S:%02X"),checksumStr,ch);
								      ActSN = SN_EXIT;
    234c:	44 e0       	ldi	r20, 0x04	; 4
    234e:	4e 87       	std	Y+14, r20	; 0x0e
    2350:	14 c0       	rjmp	.+40     	; 0x237a <main+0xb06>
								   }
								} else { ReturnXPos(3); printf_P(PSTR("   ")); ReturnXPos(3);}
    2352:	83 e0       	ldi	r24, 0x03	; 3
    2354:	0e 94 0b 21 	call	0x4216	; 0x4216 <ReturnXPos>
    2358:	84 ea       	ldi	r24, 0xA4	; 164
    235a:	92 e0       	ldi	r25, 0x02	; 2
    235c:	9f 93       	push	r25
    235e:	8f 93       	push	r24
    2360:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    2364:	83 e0       	ldi	r24, 0x03	; 3
    2366:	0e 94 0b 21 	call	0x4216	; 0x4216 <ReturnXPos>
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
								n = 0;
    236e:	1f 86       	std	Y+15, r1	; 0x0f
    2370:	04 c0       	rjmp	.+8      	; 0x237a <main+0xb06>
							  }
						    } else 	ActSN = SN_EXIT;
    2372:	64 e0       	ldi	r22, 0x04	; 4
    2374:	6e 87       	std	Y+14, r22	; 0x0e
    2376:	01 c0       	rjmp	.+2      	; 0x237a <main+0xb06>
								      gSensorIDs[aSN_num][k] = ch;
								      printf_P(PSTR("\n %S:%02X"),checksumStr,ch);
								      ActSN = SN_EXIT;
								   }
								} else { ReturnXPos(3); printf_P(PSTR("   ")); ReturnXPos(3);}
								n = 0;
    2378:	1f 86       	std	Y+15, r1	; 0x0f
							  }
						    } else 	ActSN = SN_EXIT;

						}

							if(ch == '*')
    237a:	7a e2       	ldi	r23, 0x2A	; 42
    237c:	d7 12       	cpse	r13, r23
    237e:	63 c5       	rjmp	.+2758   	; 0x2e46 <main+0x15d2>
    2380:	54 c5       	rjmp	.+2728   	; 0x2e2a <main+0x15b6>
								ActSN = ActSN_next;

							break;
						case SN_EXIT:
							if(ch == '*')
    2382:	8a e2       	ldi	r24, 0x2A	; 42
    2384:	d8 12       	cpse	r13, r24
    2386:	5f c5       	rjmp	.+2750   	; 0x2e46 <main+0x15d2>
    2388:	53 c5       	rjmp	.+2726   	; 0x2e30 <main+0x15bc>
					}	// switch(ActSN)

				break;

			case MVIEW_SNs:
				if(fl == 0){
    238a:	80 91 a4 02 	lds	r24, 0x02A4
    238e:	81 11       	cpse	r24, r1
    2390:	5c c0       	rjmp	.+184    	; 0x244a <main+0xbd6>
					fl = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	80 93 a4 02 	sts	0x02A4, r24
					LCD_CLEAR();
    2398:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						ks = nSensors - LCD_NUMBLINES+2;
					}
				  LCD_CLEAR();
				}
*/
				printf_P(PSTR("%S"),nsupdownStr);
    239c:	8b e7       	ldi	r24, 0x7B	; 123
    239e:	94 e0       	ldi	r25, 0x04	; 4
    23a0:	9f 93       	push	r25
    23a2:	8f 93       	push	r24
    23a4:	81 ea       	ldi	r24, 0xA1	; 161
    23a6:	92 e0       	ldi	r25, 0x02	; 2
    23a8:	9f 93       	push	r25
    23aa:	8f 93       	push	r24
    23ac:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    23b0:	0f 2e       	mov	r0, r31
    23b2:	f2 eb       	ldi	r31, 0xB2	; 178
    23b4:	ef 2e       	mov	r14, r31
    23b6:	f2 e0       	ldi	r31, 0x02	; 2
    23b8:	ff 2e       	mov	r15, r31
    23ba:	f0 2d       	mov	r31, r0
    23bc:	0f 2e       	mov	r0, r31
    23be:	f2 ed       	ldi	r31, 0xD2	; 210
    23c0:	cf 2e       	mov	r12, r31
    23c2:	f2 e0       	ldi	r31, 0x02	; 2
    23c4:	df 2e       	mov	r13, r31
    23c6:	f0 2d       	mov	r31, r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
//					n = y;
#ifdef SN_SENSOR_SIZE
						printf("%02X%02X%02X%02X%02X%02X%02X",
#else
						// if(sn_presence[k])
						printf("\n%02X%02X%02X%02X%02X%02X%02X",
    23d0:	d7 01       	movw	r26, r14
    23d2:	8c 91       	ld	r24, X
    23d4:	1f 92       	push	r1
    23d6:	8f 93       	push	r24
    23d8:	f7 01       	movw	r30, r14
    23da:	31 97       	sbiw	r30, 0x01	; 1
    23dc:	80 81       	ld	r24, Z
    23de:	1f 92       	push	r1
    23e0:	8f 93       	push	r24
    23e2:	31 97       	sbiw	r30, 0x01	; 1
    23e4:	80 81       	ld	r24, Z
    23e6:	1f 92       	push	r1
    23e8:	8f 93       	push	r24
    23ea:	31 97       	sbiw	r30, 0x01	; 1
    23ec:	80 81       	ld	r24, Z
    23ee:	1f 92       	push	r1
    23f0:	8f 93       	push	r24
    23f2:	31 97       	sbiw	r30, 0x01	; 1
    23f4:	80 81       	ld	r24, Z
    23f6:	1f 92       	push	r1
    23f8:	8f 93       	push	r24
    23fa:	31 97       	sbiw	r30, 0x01	; 1
    23fc:	80 81       	ld	r24, Z
    23fe:	1f 92       	push	r1
    2400:	8f 93       	push	r24
    2402:	31 97       	sbiw	r30, 0x01	; 1
    2404:	80 81       	ld	r24, Z
    2406:	1f 92       	push	r1
    2408:	8f 93       	push	r24
    240a:	ab e2       	ldi	r26, 0x2B	; 43
    240c:	b1 e0       	ldi	r27, 0x01	; 1
    240e:	bf 93       	push	r27
    2410:	af 93       	push	r26
    2412:	0e 94 2b 2a 	call	0x5456	; 0x5456 <printf>
    2416:	f8 e0       	ldi	r31, 0x08	; 8
    2418:	ef 0e       	add	r14, r31
    241a:	f1 1c       	adc	r15, r1
				}
*/
				printf_P(PSTR("%S"),nsupdownStr);

//				for(k = ks;(k < ks+LCD_NUMBLINES-2) && (k < nSensors);k++){
				for(k = 0;k < MAXSENSORS;k++){
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	ec 14       	cp	r14, r12
    2428:	fd 04       	cpc	r15, r13
    242a:	91 f6       	brne	.-92     	; 0x23d0 <main+0xb5c>
							gSensorIDs[k][3],gSensorIDs[k][4],\
							gSensorIDs[k][5],gSensorIDs[k][6]);

				}

				printf_P(PSTR("    %S"),exitStr);
    242c:	81 eb       	ldi	r24, 0xB1	; 177
    242e:	94 e0       	ldi	r25, 0x04	; 4
    2430:	9f 93       	push	r25
    2432:	8f 93       	push	r24
    2434:	8a e9       	ldi	r24, 0x9A	; 154
    2436:	92 e0       	ldi	r25, 0x02	; 2
    2438:	9f 93       	push	r25
    243a:	8f 93       	push	r24
    243c:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	fe c4       	rjmp	.+2556   	; 0x2e46 <main+0x15d2>
    244a:	3f ef       	ldi	r19, 0xFF	; 255
    244c:	49 e6       	ldi	r20, 0x69	; 105
    244e:	68 e1       	ldi	r22, 0x18	; 24
    2450:	31 50       	subi	r19, 0x01	; 1
    2452:	40 40       	sbci	r20, 0x00	; 0
    2454:	60 40       	sbci	r22, 0x00	; 0
    2456:	e1 f7       	brne	.-8      	; 0x2450 <main+0xbdc>
    2458:	00 c0       	rjmp	.+0      	; 0x245a <main+0xbe6>
    245a:	00 00       	nop
    245c:	f4 c4       	rjmp	.+2536   	; 0x2e46 <main+0x15d2>
				} else _delay_ms(1000);

				break;

			case MASSIGN:
				if(fl == 0){
    245e:	80 91 a4 02 	lds	r24, 0x02A4
    2462:	81 11       	cpse	r24, r1
    2464:	f0 c4       	rjmp	.+2528   	; 0x2e46 <main+0x15d2>
					LCD_CLEAR();
    2466:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
				LCD_FIRSTLINE();
    246a:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
				printf_P(PSTR("%S%i - %S"), snStr,1,indoorStr);
    246e:	80 ea       	ldi	r24, 0xA0	; 160
    2470:	94 e0       	ldi	r25, 0x04	; 4
    2472:	9f 93       	push	r25
    2474:	8f 93       	push	r24
    2476:	1f 92       	push	r1
    2478:	dd 24       	eor	r13, r13
    247a:	d3 94       	inc	r13
    247c:	df 92       	push	r13
    247e:	0f 2e       	mov	r0, r31
    2480:	f7 ea       	ldi	r31, 0xA7	; 167
    2482:	ef 2e       	mov	r14, r31
    2484:	f4 e0       	ldi	r31, 0x04	; 4
    2486:	ff 2e       	mov	r15, r31
    2488:	f0 2d       	mov	r31, r0
    248a:	ff 92       	push	r15
    248c:	ef 92       	push	r14
    248e:	80 e9       	ldi	r24, 0x90	; 144
    2490:	92 e0       	ldi	r25, 0x02	; 2
    2492:	9f 93       	push	r25
    2494:	8f 93       	push	r24
    2496:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("\n%S%i - %S"),snStr,2,outdoorStr);
    249a:	88 e9       	ldi	r24, 0x98	; 152
    249c:	94 e0       	ldi	r25, 0x04	; 4
    249e:	9f 93       	push	r25
    24a0:	8f 93       	push	r24
    24a2:	1f 92       	push	r1
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	8f 93       	push	r24
    24a8:	ff 92       	push	r15
    24aa:	ef 92       	push	r14
    24ac:	85 e8       	ldi	r24, 0x85	; 133
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	9f 93       	push	r25
    24b2:	8f 93       	push	r24
    24b4:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("\n%S%i - %S"),snStr,3,supplyStr);
    24b8:	81 e9       	ldi	r24, 0x91	; 145
    24ba:	94 e0       	ldi	r25, 0x04	; 4
    24bc:	9f 93       	push	r25
    24be:	8f 93       	push	r24
    24c0:	1f 92       	push	r1
    24c2:	83 e0       	ldi	r24, 0x03	; 3
    24c4:	8f 93       	push	r24
    24c6:	ff 92       	push	r15
    24c8:	ef 92       	push	r14
    24ca:	8a e7       	ldi	r24, 0x7A	; 122
    24cc:	92 e0       	ldi	r25, 0x02	; 2
    24ce:	9f 93       	push	r25
    24d0:	8f 93       	push	r24
    24d2:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("\n%S%i - %S"),snStr,4,returnStr);
    24d6:	8a e8       	ldi	r24, 0x8A	; 138
    24d8:	94 e0       	ldi	r25, 0x04	; 4
    24da:	9f 93       	push	r25
    24dc:	8f 93       	push	r24
    24de:	1f 92       	push	r1
    24e0:	84 e0       	ldi	r24, 0x04	; 4
    24e2:	8f 93       	push	r24
    24e4:	ff 92       	push	r15
    24e6:	ef 92       	push	r14
    24e8:	8f e6       	ldi	r24, 0x6F	; 111
    24ea:	92 e0       	ldi	r25, 0x02	; 2
    24ec:	9f 93       	push	r25
    24ee:	8f 93       	push	r24
    24f0:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("\n   %S"),exitStr);
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	81 eb       	ldi	r24, 0xB1	; 177
    2500:	94 e0       	ldi	r25, 0x04	; 4
    2502:	9f 93       	push	r25
    2504:	8f 93       	push	r24
    2506:	88 e6       	ldi	r24, 0x68	; 104
    2508:	92 e0       	ldi	r25, 0x02	; 2
    250a:	9f 93       	push	r25
    250c:	8f 93       	push	r24
    250e:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				fl = 1;
    2512:	d0 92 a4 02 	sts	0x02A4, r13
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	93 c4       	rjmp	.+2342   	; 0x2e46 <main+0x15d2>
				}
				break;
			case MVIEWTEMPR:
				if(fl == 0){
    2520:	80 91 a4 02 	lds	r24, 0x02A4
    2524:	81 11       	cpse	r24, r1
    2526:	c6 c0       	rjmp	.+396    	; 0x26b4 <main+0xe40>
				LCD_CLEAR();
    2528:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
				LCD_FIRSTLINE();
    252c:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>

				printf_P(PSTR("%S%S:%i"),indoorStr,minStr,(int8_t)rTempInDoorMin);
    2530:	20 91 3c 03 	lds	r18, 0x033C
    2534:	82 2f       	mov	r24, r18
    2536:	99 27       	eor	r25, r25
    2538:	87 fd       	sbrc	r24, 7
    253a:	90 95       	com	r25
    253c:	9f 93       	push	r25
    253e:	2f 93       	push	r18
    2540:	0f 2e       	mov	r0, r31
    2542:	fd e5       	ldi	r31, 0x5D	; 93
    2544:	cf 2e       	mov	r12, r31
    2546:	f4 e0       	ldi	r31, 0x04	; 4
    2548:	df 2e       	mov	r13, r31
    254a:	f0 2d       	mov	r31, r0
    254c:	df 92       	push	r13
    254e:	cf 92       	push	r12
    2550:	0f 2e       	mov	r0, r31
    2552:	f0 ea       	ldi	r31, 0xA0	; 160
    2554:	af 2e       	mov	r10, r31
    2556:	f4 e0       	ldi	r31, 0x04	; 4
    2558:	bf 2e       	mov	r11, r31
    255a:	f0 2d       	mov	r31, r0
    255c:	bf 92       	push	r11
    255e:	af 92       	push	r10
    2560:	80 e6       	ldi	r24, 0x60	; 96
    2562:	92 e0       	ldi	r25, 0x02	; 2
    2564:	9f 93       	push	r25
    2566:	8f 93       	push	r24
    2568:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("\n%S%S:%i"),indoorStr,maxStr,(int8_t)rTempInDoorMax);
    256c:	20 91 3d 03 	lds	r18, 0x033D
    2570:	82 2f       	mov	r24, r18
    2572:	99 27       	eor	r25, r25
    2574:	87 fd       	sbrc	r24, 7
    2576:	90 95       	com	r25
    2578:	9f 93       	push	r25
    257a:	2f 93       	push	r18
    257c:	0f 2e       	mov	r0, r31
    257e:	f9 e5       	ldi	r31, 0x59	; 89
    2580:	ef 2e       	mov	r14, r31
    2582:	f4 e0       	ldi	r31, 0x04	; 4
    2584:	ff 2e       	mov	r15, r31
    2586:	f0 2d       	mov	r31, r0
    2588:	ff 92       	push	r15
    258a:	ef 92       	push	r14
    258c:	bf 92       	push	r11
    258e:	af 92       	push	r10
    2590:	87 e5       	ldi	r24, 0x57	; 87
    2592:	92 e0       	ldi	r25, 0x02	; 2
    2594:	9f 93       	push	r25
    2596:	8f 93       	push	r24
    2598:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("\n%S%S:%i"),outdoorStr,minStr,(int8_t)rTempOutDoorMin);
    259c:	20 91 68 03 	lds	r18, 0x0368
    25a0:	82 2f       	mov	r24, r18
    25a2:	99 27       	eor	r25, r25
    25a4:	87 fd       	sbrc	r24, 7
    25a6:	90 95       	com	r25
    25a8:	9f 93       	push	r25
    25aa:	2f 93       	push	r18
    25ac:	df 92       	push	r13
    25ae:	cf 92       	push	r12
    25b0:	0f 2e       	mov	r0, r31
    25b2:	f8 e9       	ldi	r31, 0x98	; 152
    25b4:	af 2e       	mov	r10, r31
    25b6:	f4 e0       	ldi	r31, 0x04	; 4
    25b8:	bf 2e       	mov	r11, r31
    25ba:	f0 2d       	mov	r31, r0
    25bc:	bf 92       	push	r11
    25be:	af 92       	push	r10
    25c0:	8e e4       	ldi	r24, 0x4E	; 78
    25c2:	92 e0       	ldi	r25, 0x02	; 2
    25c4:	9f 93       	push	r25
    25c6:	8f 93       	push	r24
    25c8:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				if((int8_t)rTempOutDoorMax < -9)
					printf_P(PSTR("%S%S:%i"),supplyStr,minStr,(int8_t)rTempSupplyMin);
				else
					printf_P(PSTR("\n%S%S:%i"),supplyStr,minStr,(int8_t)rTempSupplyMin);
#else
				printf_P(PSTR("\n%S%S:%i"),outdoorStr,maxStr,(int8_t)rTempOutDoorMax);
    25cc:	20 91 7f 03 	lds	r18, 0x037F
    25d0:	82 2f       	mov	r24, r18
    25d2:	99 27       	eor	r25, r25
    25d4:	87 fd       	sbrc	r24, 7
    25d6:	90 95       	com	r25
    25d8:	9f 93       	push	r25
    25da:	2f 93       	push	r18
    25dc:	ff 92       	push	r15
    25de:	ef 92       	push	r14
    25e0:	bf 92       	push	r11
    25e2:	af 92       	push	r10
    25e4:	85 e4       	ldi	r24, 0x45	; 69
    25e6:	92 e0       	ldi	r25, 0x02	; 2
    25e8:	9f 93       	push	r25
    25ea:	8f 93       	push	r24
    25ec:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("\n%S%S:%i"),supplyStr,minStr,(int8_t)rTempSupplyMin);
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	20 91 7c 03 	lds	r18, 0x037C
    25fe:	82 2f       	mov	r24, r18
    2600:	99 27       	eor	r25, r25
    2602:	87 fd       	sbrc	r24, 7
    2604:	90 95       	com	r25
    2606:	9f 93       	push	r25
    2608:	2f 93       	push	r18
    260a:	df 92       	push	r13
    260c:	cf 92       	push	r12
    260e:	0f 2e       	mov	r0, r31
    2610:	f1 e9       	ldi	r31, 0x91	; 145
    2612:	af 2e       	mov	r10, r31
    2614:	f4 e0       	ldi	r31, 0x04	; 4
    2616:	bf 2e       	mov	r11, r31
    2618:	f0 2d       	mov	r31, r0
    261a:	bf 92       	push	r11
    261c:	af 92       	push	r10
    261e:	8c e3       	ldi	r24, 0x3C	; 60
    2620:	92 e0       	ldi	r25, 0x02	; 2
    2622:	9f 93       	push	r25
    2624:	8f 93       	push	r24
    2626:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
#endif
				printf_P(PSTR("\n%S%S:%i"),supplyStr,maxStr,(int8_t)rTempSupplyMax);
    262a:	20 91 7d 03 	lds	r18, 0x037D
    262e:	82 2f       	mov	r24, r18
    2630:	99 27       	eor	r25, r25
    2632:	87 fd       	sbrc	r24, 7
    2634:	90 95       	com	r25
    2636:	9f 93       	push	r25
    2638:	2f 93       	push	r18
    263a:	ff 92       	push	r15
    263c:	ef 92       	push	r14
    263e:	bf 92       	push	r11
    2640:	af 92       	push	r10
    2642:	83 e3       	ldi	r24, 0x33	; 51
    2644:	92 e0       	ldi	r25, 0x02	; 2
    2646:	9f 93       	push	r25
    2648:	8f 93       	push	r24
    264a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
#ifdef N1110_LCD
				printf_P(PSTR("\n%S%S:%i"),diffStr,minStr,(int8_t)rTempDiffSupplyReturnMin);
    264e:	20 91 7e 03 	lds	r18, 0x037E
    2652:	82 2f       	mov	r24, r18
    2654:	99 27       	eor	r25, r25
    2656:	87 fd       	sbrc	r24, 7
    2658:	90 95       	com	r25
    265a:	9f 93       	push	r25
    265c:	2f 93       	push	r18
    265e:	df 92       	push	r13
    2660:	cf 92       	push	r12
    2662:	0f 2e       	mov	r0, r31
    2664:	ff e4       	ldi	r31, 0x4F	; 79
    2666:	cf 2e       	mov	r12, r31
    2668:	f4 e0       	ldi	r31, 0x04	; 4
    266a:	df 2e       	mov	r13, r31
    266c:	f0 2d       	mov	r31, r0
    266e:	df 92       	push	r13
    2670:	cf 92       	push	r12
    2672:	8a e2       	ldi	r24, 0x2A	; 42
    2674:	92 e0       	ldi	r25, 0x02	; 2
    2676:	9f 93       	push	r25
    2678:	8f 93       	push	r24
    267a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				printf_P(PSTR("\n%S%S:%i"),diffStr,maxStr,(int8_t)rTempDiffSupplyReturnMax);
    267e:	20 91 3e 03 	lds	r18, 0x033E
    2682:	82 2f       	mov	r24, r18
    2684:	99 27       	eor	r25, r25
    2686:	87 fd       	sbrc	r24, 7
    2688:	90 95       	com	r25
    268a:	9f 93       	push	r25
    268c:	2f 93       	push	r18
    268e:	ff 92       	push	r15
    2690:	ef 92       	push	r14
    2692:	df 92       	push	r13
    2694:	cf 92       	push	r12
    2696:	81 e2       	ldi	r24, 0x21	; 33
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	9f 93       	push	r25
    269c:	8f 93       	push	r24
    269e:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
#endif

				fl = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	80 93 a4 02 	sts	0x02A4, r24
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	c9 c3       	rjmp	.+1938   	; 0x2e46 <main+0x15d2>
    26b4:	ff ef       	ldi	r31, 0xFF	; 255
    26b6:	29 e6       	ldi	r18, 0x69	; 105
    26b8:	38 e1       	ldi	r19, 0x18	; 24
    26ba:	f1 50       	subi	r31, 0x01	; 1
    26bc:	20 40       	sbci	r18, 0x00	; 0
    26be:	30 40       	sbci	r19, 0x00	; 0
    26c0:	e1 f7       	brne	.-8      	; 0x26ba <main+0xe46>
    26c2:	00 c0       	rjmp	.+0      	; 0x26c4 <main+0xe50>
    26c4:	00 00       	nop
    26c6:	bf c3       	rjmp	.+1918   	; 0x2e46 <main+0x15d2>
				} else _delay_ms(1000);
				break;
			case MSETTEMP:
				if(fl == 0){
    26c8:	80 91 a4 02 	lds	r24, 0x02A4
    26cc:	81 11       	cpse	r24, r1
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <main+0xe64>
					ActSN = INDOORTEMPMIN;
					fl = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	80 93 a4 02 	sts	0x02A4, r24
    26d6:	0c c0       	rjmp	.+24     	; 0x26f0 <main+0xe7c>
				}

				switch(ActSN){
    26d8:	4e 85       	ldd	r20, Y+14	; 0x0e
    26da:	84 2f       	mov	r24, r20
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	8c 30       	cpi	r24, 0x0C	; 12
    26e0:	91 05       	cpc	r25, r1
    26e2:	08 f0       	brcs	.+2      	; 0x26e6 <main+0xe72>
    26e4:	b0 c3       	rjmp	.+1888   	; 0x2e46 <main+0x15d2>
    26e6:	fc 01       	movw	r30, r24
    26e8:	eb 5a       	subi	r30, 0xAB	; 171
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	0c 94 03 28 	jmp	0x5006	; 0x5006 <__tablejump2__>
					case INDOORTEMPMIN:
						LCD_CLEAR();
    26f0:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    26f4:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    26f8:	8a ea       	ldi	r24, 0xAA	; 170
    26fa:	94 e0       	ldi	r25, 0x04	; 4
    26fc:	9f 93       	push	r25
    26fe:	8f 93       	push	r24
    2700:	81 eb       	ldi	r24, 0xB1	; 177
    2702:	94 e0       	ldi	r25, 0x04	; 4
    2704:	9f 93       	push	r25
    2706:	8f 93       	push	r24
    2708:	8a e1       	ldi	r24, 0x1A	; 26
    270a:	92 e0       	ldi	r25, 0x02	; 2
    270c:	9f 93       	push	r25
    270e:	8f 93       	push	r24
    2710:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
    2714:	80 ea       	ldi	r24, 0xA0	; 160
    2716:	94 e0       	ldi	r25, 0x04	; 4
    2718:	9f 93       	push	r25
    271a:	8f 93       	push	r24
    271c:	84 e5       	ldi	r24, 0x54	; 84
    271e:	94 e0       	ldi	r25, 0x04	; 4
    2720:	9f 93       	push	r25
    2722:	8f 93       	push	r24
    2724:	83 e1       	ldi	r24, 0x13	; 19
    2726:	92 e0       	ldi	r25, 0x02	; 2
    2728:	9f 93       	push	r25
    272a:	8f 93       	push	r24
    272c:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S:"),minStr);
    2730:	8d e5       	ldi	r24, 0x5D	; 93
    2732:	94 e0       	ldi	r25, 0x04	; 4
    2734:	9f 93       	push	r25
    2736:	8f 93       	push	r24
    2738:	8e e0       	ldi	r24, 0x0E	; 14
    273a:	92 e0       	ldi	r25, 0x02	; 2
    273c:	9f 93       	push	r25
    273e:	8f 93       	push	r24
    2740:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ch = 'z';
						n = 0;
						k = 1;
						ActSN_next = INDOORTEMPMAX;
						ActSN = ENTER_TEMP;
						TempAct = &rTempInDoorMin;
    2744:	8c e3       	ldi	r24, 0x3C	; 60
    2746:	93 e0       	ldi	r25, 0x03	; 3
    2748:	90 93 ab 02 	sts	0x02AB, r25
    274c:	80 93 aa 02 	sts	0x02AA, r24
						break;
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						n = 0;
						k = 1;
						ActSN_next = INDOORTEMPMAX;
    275a:	71 e0       	ldi	r23, 0x01	; 1
    275c:	78 8b       	std	Y+16, r23	; 0x10
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						n = 0;
    275e:	1f 86       	std	Y+15, r1	; 0x0f
						k = 1;
						ActSN_next = INDOORTEMPMAX;
						ActSN = ENTER_TEMP;
    2760:	89 e0       	ldi	r24, 0x09	; 9
    2762:	8e 87       	std	Y+14, r24	; 0x0e
						TempAct = &rTempInDoorMin;
						break;
    2764:	70 c3       	rjmp	.+1760   	; 0x2e46 <main+0x15d2>
					case INDOORTEMPMAX:
						LCD_CLEAR();
    2766:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    276a:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    276e:	8a ea       	ldi	r24, 0xAA	; 170
    2770:	94 e0       	ldi	r25, 0x04	; 4
    2772:	9f 93       	push	r25
    2774:	8f 93       	push	r24
    2776:	81 eb       	ldi	r24, 0xB1	; 177
    2778:	94 e0       	ldi	r25, 0x04	; 4
    277a:	9f 93       	push	r25
    277c:	8f 93       	push	r24
    277e:	87 e0       	ldi	r24, 0x07	; 7
    2780:	92 e0       	ldi	r25, 0x02	; 2
    2782:	9f 93       	push	r25
    2784:	8f 93       	push	r24
    2786:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
    278a:	80 ea       	ldi	r24, 0xA0	; 160
    278c:	94 e0       	ldi	r25, 0x04	; 4
    278e:	9f 93       	push	r25
    2790:	8f 93       	push	r24
    2792:	84 e5       	ldi	r24, 0x54	; 84
    2794:	94 e0       	ldi	r25, 0x04	; 4
    2796:	9f 93       	push	r25
    2798:	8f 93       	push	r24
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	92 e0       	ldi	r25, 0x02	; 2
    279e:	9f 93       	push	r25
    27a0:	8f 93       	push	r24
    27a2:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S:"),maxStr);
    27a6:	89 e5       	ldi	r24, 0x59	; 89
    27a8:	94 e0       	ldi	r25, 0x04	; 4
    27aa:	9f 93       	push	r25
    27ac:	8f 93       	push	r24
    27ae:	8b ef       	ldi	r24, 0xFB	; 251
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	9f 93       	push	r25
    27b4:	8f 93       	push	r24
    27b6:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ch = 'z';
						ActSN_next = OUTDOORTEMPMIN;
						ActSN = ENTER_TEMP;
						TempAct = &rTempInDoorMax;
    27ba:	8d e3       	ldi	r24, 0x3D	; 61
    27bc:	93 e0       	ldi	r25, 0x03	; 3
    27be:	90 93 ab 02 	sts	0x02AB, r25
    27c2:	80 93 aa 02 	sts	0x02AA, r24
						n = 0;
						k = 1;
						break;
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = OUTDOORTEMPMIN;
    27d0:	b2 e0       	ldi	r27, 0x02	; 2
    27d2:	b8 8b       	std	Y+16, r27	; 0x10
						ActSN = ENTER_TEMP;
						TempAct = &rTempInDoorMax;
						n = 0;
    27d4:	1f 86       	std	Y+15, r1	; 0x0f
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = OUTDOORTEMPMIN;
						ActSN = ENTER_TEMP;
    27d6:	e9 e0       	ldi	r30, 0x09	; 9
    27d8:	ee 87       	std	Y+14, r30	; 0x0e
						TempAct = &rTempInDoorMax;
						n = 0;
						k = 1;
						break;
    27da:	35 c3       	rjmp	.+1642   	; 0x2e46 <main+0x15d2>
					case OUTDOORTEMPMIN:
						LCD_CLEAR();
    27dc:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    27e0:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    27e4:	8a ea       	ldi	r24, 0xAA	; 170
    27e6:	94 e0       	ldi	r25, 0x04	; 4
    27e8:	9f 93       	push	r25
    27ea:	8f 93       	push	r24
    27ec:	81 eb       	ldi	r24, 0xB1	; 177
    27ee:	94 e0       	ldi	r25, 0x04	; 4
    27f0:	9f 93       	push	r25
    27f2:	8f 93       	push	r24
    27f4:	84 ef       	ldi	r24, 0xF4	; 244
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	9f 93       	push	r25
    27fa:	8f 93       	push	r24
    27fc:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
    2800:	88 e9       	ldi	r24, 0x98	; 152
    2802:	94 e0       	ldi	r25, 0x04	; 4
    2804:	9f 93       	push	r25
    2806:	8f 93       	push	r24
    2808:	84 e5       	ldi	r24, 0x54	; 84
    280a:	94 e0       	ldi	r25, 0x04	; 4
    280c:	9f 93       	push	r25
    280e:	8f 93       	push	r24
    2810:	8d ee       	ldi	r24, 0xED	; 237
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	9f 93       	push	r25
    2816:	8f 93       	push	r24
    2818:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S:"),minStr);
    281c:	8d e5       	ldi	r24, 0x5D	; 93
    281e:	94 e0       	ldi	r25, 0x04	; 4
    2820:	9f 93       	push	r25
    2822:	8f 93       	push	r24
    2824:	88 ee       	ldi	r24, 0xE8	; 232
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	9f 93       	push	r25
    282a:	8f 93       	push	r24
    282c:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ch = 'z';
						ActSN_next = OUTDOORTEMPMAX;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempOutDoorMin;
    2830:	88 e6       	ldi	r24, 0x68	; 104
    2832:	93 e0       	ldi	r25, 0x03	; 3
    2834:	90 93 ab 02 	sts	0x02AB, r25
    2838:	80 93 aa 02 	sts	0x02AA, r24
						break;
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = OUTDOORTEMPMAX;
    2846:	33 e0       	ldi	r19, 0x03	; 3
    2848:	38 8b       	std	Y+16, r19	; 0x10
						ActSN = ENTER_TEMP;
						n = 0;
    284a:	1f 86       	std	Y+15, r1	; 0x0f
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = OUTDOORTEMPMAX;
						ActSN = ENTER_TEMP;
    284c:	49 e0       	ldi	r20, 0x09	; 9
    284e:	4e 87       	std	Y+14, r20	; 0x0e
						n = 0;
						k = 1;
						TempAct = &rTempOutDoorMin;
						break;
    2850:	fa c2       	rjmp	.+1524   	; 0x2e46 <main+0x15d2>
					case OUTDOORTEMPMAX:
						LCD_CLEAR();
    2852:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    2856:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    285a:	8a ea       	ldi	r24, 0xAA	; 170
    285c:	94 e0       	ldi	r25, 0x04	; 4
    285e:	9f 93       	push	r25
    2860:	8f 93       	push	r24
    2862:	81 eb       	ldi	r24, 0xB1	; 177
    2864:	94 e0       	ldi	r25, 0x04	; 4
    2866:	9f 93       	push	r25
    2868:	8f 93       	push	r24
    286a:	81 ee       	ldi	r24, 0xE1	; 225
    286c:	91 e0       	ldi	r25, 0x01	; 1
    286e:	9f 93       	push	r25
    2870:	8f 93       	push	r24
    2872:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
    2876:	88 e9       	ldi	r24, 0x98	; 152
    2878:	94 e0       	ldi	r25, 0x04	; 4
    287a:	9f 93       	push	r25
    287c:	8f 93       	push	r24
    287e:	84 e5       	ldi	r24, 0x54	; 84
    2880:	94 e0       	ldi	r25, 0x04	; 4
    2882:	9f 93       	push	r25
    2884:	8f 93       	push	r24
    2886:	8a ed       	ldi	r24, 0xDA	; 218
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	9f 93       	push	r25
    288c:	8f 93       	push	r24
    288e:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S:"),maxStr);
    2892:	89 e5       	ldi	r24, 0x59	; 89
    2894:	94 e0       	ldi	r25, 0x04	; 4
    2896:	9f 93       	push	r25
    2898:	8f 93       	push	r24
    289a:	85 ed       	ldi	r24, 0xD5	; 213
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	9f 93       	push	r25
    28a0:	8f 93       	push	r24
    28a2:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ch = 'z';
						ActSN_next = SUPPLYTEMPMIN;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempOutDoorMax;
    28a6:	8f e7       	ldi	r24, 0x7F	; 127
    28a8:	93 e0       	ldi	r25, 0x03	; 3
    28aa:	90 93 ab 02 	sts	0x02AB, r25
    28ae:	80 93 aa 02 	sts	0x02AA, r24
						break;
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = SUPPLYTEMPMIN;
    28bc:	74 e0       	ldi	r23, 0x04	; 4
    28be:	78 8b       	std	Y+16, r23	; 0x10
						ActSN = ENTER_TEMP;
						n = 0;
    28c0:	1f 86       	std	Y+15, r1	; 0x0f
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = SUPPLYTEMPMIN;
						ActSN = ENTER_TEMP;
    28c2:	89 e0       	ldi	r24, 0x09	; 9
    28c4:	8e 87       	std	Y+14, r24	; 0x0e
						n = 0;
						k = 1;
						TempAct = &rTempOutDoorMax;
						break;
    28c6:	bf c2       	rjmp	.+1406   	; 0x2e46 <main+0x15d2>
					case SUPPLYTEMPMIN:
						LCD_CLEAR();
    28c8:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    28cc:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    28d0:	8a ea       	ldi	r24, 0xAA	; 170
    28d2:	94 e0       	ldi	r25, 0x04	; 4
    28d4:	9f 93       	push	r25
    28d6:	8f 93       	push	r24
    28d8:	81 eb       	ldi	r24, 0xB1	; 177
    28da:	94 e0       	ldi	r25, 0x04	; 4
    28dc:	9f 93       	push	r25
    28de:	8f 93       	push	r24
    28e0:	8e ec       	ldi	r24, 0xCE	; 206
    28e2:	91 e0       	ldi	r25, 0x01	; 1
    28e4:	9f 93       	push	r25
    28e6:	8f 93       	push	r24
    28e8:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
    28ec:	81 e9       	ldi	r24, 0x91	; 145
    28ee:	94 e0       	ldi	r25, 0x04	; 4
    28f0:	9f 93       	push	r25
    28f2:	8f 93       	push	r24
    28f4:	84 e5       	ldi	r24, 0x54	; 84
    28f6:	94 e0       	ldi	r25, 0x04	; 4
    28f8:	9f 93       	push	r25
    28fa:	8f 93       	push	r24
    28fc:	87 ec       	ldi	r24, 0xC7	; 199
    28fe:	91 e0       	ldi	r25, 0x01	; 1
    2900:	9f 93       	push	r25
    2902:	8f 93       	push	r24
    2904:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S:"),minStr);
    2908:	8d e5       	ldi	r24, 0x5D	; 93
    290a:	94 e0       	ldi	r25, 0x04	; 4
    290c:	9f 93       	push	r25
    290e:	8f 93       	push	r24
    2910:	82 ec       	ldi	r24, 0xC2	; 194
    2912:	91 e0       	ldi	r25, 0x01	; 1
    2914:	9f 93       	push	r25
    2916:	8f 93       	push	r24
    2918:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ch = 'z';
						ActSN_next = SUPPLYTEMPMAX;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempSupplyMin;
    291c:	8c e7       	ldi	r24, 0x7C	; 124
    291e:	93 e0       	ldi	r25, 0x03	; 3
    2920:	90 93 ab 02 	sts	0x02AB, r25
    2924:	80 93 aa 02 	sts	0x02AA, r24
						break;
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = SUPPLYTEMPMAX;
    2932:	b5 e0       	ldi	r27, 0x05	; 5
    2934:	b8 8b       	std	Y+16, r27	; 0x10
						ActSN = ENTER_TEMP;
						n = 0;
    2936:	1f 86       	std	Y+15, r1	; 0x0f
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = SUPPLYTEMPMAX;
						ActSN = ENTER_TEMP;
    2938:	e9 e0       	ldi	r30, 0x09	; 9
    293a:	ee 87       	std	Y+14, r30	; 0x0e
						n = 0;
						k = 1;
						TempAct = &rTempSupplyMin;
						break;
    293c:	84 c2       	rjmp	.+1288   	; 0x2e46 <main+0x15d2>
					case SUPPLYTEMPMAX:
						LCD_CLEAR();
    293e:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    2942:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2946:	8a ea       	ldi	r24, 0xAA	; 170
    2948:	94 e0       	ldi	r25, 0x04	; 4
    294a:	9f 93       	push	r25
    294c:	8f 93       	push	r24
    294e:	81 eb       	ldi	r24, 0xB1	; 177
    2950:	94 e0       	ldi	r25, 0x04	; 4
    2952:	9f 93       	push	r25
    2954:	8f 93       	push	r24
    2956:	8b eb       	ldi	r24, 0xBB	; 187
    2958:	91 e0       	ldi	r25, 0x01	; 1
    295a:	9f 93       	push	r25
    295c:	8f 93       	push	r24
    295e:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
    2962:	81 e9       	ldi	r24, 0x91	; 145
    2964:	94 e0       	ldi	r25, 0x04	; 4
    2966:	9f 93       	push	r25
    2968:	8f 93       	push	r24
    296a:	84 e5       	ldi	r24, 0x54	; 84
    296c:	94 e0       	ldi	r25, 0x04	; 4
    296e:	9f 93       	push	r25
    2970:	8f 93       	push	r24
    2972:	84 eb       	ldi	r24, 0xB4	; 180
    2974:	91 e0       	ldi	r25, 0x01	; 1
    2976:	9f 93       	push	r25
    2978:	8f 93       	push	r24
    297a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S:"),maxStr);
    297e:	89 e5       	ldi	r24, 0x59	; 89
    2980:	94 e0       	ldi	r25, 0x04	; 4
    2982:	9f 93       	push	r25
    2984:	8f 93       	push	r24
    2986:	8f ea       	ldi	r24, 0xAF	; 175
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	9f 93       	push	r25
    298c:	8f 93       	push	r24
    298e:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ch = 'z';
						ActSN_next = DIFFTEMPMIN;
						ActSN = ENTER_TEMP;
						TempAct = &rTempSupplyMax;
    2992:	8d e7       	ldi	r24, 0x7D	; 125
    2994:	93 e0       	ldi	r25, 0x03	; 3
    2996:	90 93 ab 02 	sts	0x02AB, r25
    299a:	80 93 aa 02 	sts	0x02AA, r24
						n = 0;
						k = 1;
						break;
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = DIFFTEMPMIN;
    29a8:	36 e0       	ldi	r19, 0x06	; 6
    29aa:	38 8b       	std	Y+16, r19	; 0x10
						ActSN = ENTER_TEMP;
						TempAct = &rTempSupplyMax;
						n = 0;
    29ac:	1f 86       	std	Y+15, r1	; 0x0f
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = DIFFTEMPMIN;
						ActSN = ENTER_TEMP;
    29ae:	49 e0       	ldi	r20, 0x09	; 9
    29b0:	4e 87       	std	Y+14, r20	; 0x0e
						TempAct = &rTempSupplyMax;
						n = 0;
						k = 1;
						break;
    29b2:	49 c2       	rjmp	.+1170   	; 0x2e46 <main+0x15d2>
					case DIFFTEMPMIN:
						LCD_CLEAR();
    29b4:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    29b8:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    29bc:	8a ea       	ldi	r24, 0xAA	; 170
    29be:	94 e0       	ldi	r25, 0x04	; 4
    29c0:	9f 93       	push	r25
    29c2:	8f 93       	push	r24
    29c4:	81 eb       	ldi	r24, 0xB1	; 177
    29c6:	94 e0       	ldi	r25, 0x04	; 4
    29c8:	9f 93       	push	r25
    29ca:	8f 93       	push	r24
    29cc:	88 ea       	ldi	r24, 0xA8	; 168
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	9f 93       	push	r25
    29d2:	8f 93       	push	r24
    29d4:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
    29d8:	8f e4       	ldi	r24, 0x4F	; 79
    29da:	94 e0       	ldi	r25, 0x04	; 4
    29dc:	9f 93       	push	r25
    29de:	8f 93       	push	r24
    29e0:	84 e5       	ldi	r24, 0x54	; 84
    29e2:	94 e0       	ldi	r25, 0x04	; 4
    29e4:	9f 93       	push	r25
    29e6:	8f 93       	push	r24
    29e8:	81 ea       	ldi	r24, 0xA1	; 161
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	9f 93       	push	r25
    29ee:	8f 93       	push	r24
    29f0:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S:"),minStr);
    29f4:	8d e5       	ldi	r24, 0x5D	; 93
    29f6:	94 e0       	ldi	r25, 0x04	; 4
    29f8:	9f 93       	push	r25
    29fa:	8f 93       	push	r24
    29fc:	8c e9       	ldi	r24, 0x9C	; 156
    29fe:	91 e0       	ldi	r25, 0x01	; 1
    2a00:	9f 93       	push	r25
    2a02:	8f 93       	push	r24
    2a04:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ch = 'z';
						ActSN_next = DIFFTEMPMAX;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempDiffSupplyReturnMin;
    2a08:	8e e7       	ldi	r24, 0x7E	; 126
    2a0a:	93 e0       	ldi	r25, 0x03	; 3
    2a0c:	90 93 ab 02 	sts	0x02AB, r25
    2a10:	80 93 aa 02 	sts	0x02AA, r24
						break;
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = DIFFTEMPMAX;
    2a1e:	77 e0       	ldi	r23, 0x07	; 7
    2a20:	78 8b       	std	Y+16, r23	; 0x10
						ActSN = ENTER_TEMP;
						n = 0;
    2a22:	1f 86       	std	Y+15, r1	; 0x0f
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = DIFFTEMPMAX;
						ActSN = ENTER_TEMP;
    2a24:	89 e0       	ldi	r24, 0x09	; 9
    2a26:	8e 87       	std	Y+14, r24	; 0x0e
						n = 0;
						k = 1;
						TempAct = &rTempDiffSupplyReturnMin;
						break;
    2a28:	0e c2       	rjmp	.+1052   	; 0x2e46 <main+0x15d2>
					case DIFFTEMPMAX:
						LCD_CLEAR();
    2a2a:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    2a2e:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2a32:	8a ea       	ldi	r24, 0xAA	; 170
    2a34:	94 e0       	ldi	r25, 0x04	; 4
    2a36:	9f 93       	push	r25
    2a38:	8f 93       	push	r24
    2a3a:	81 eb       	ldi	r24, 0xB1	; 177
    2a3c:	94 e0       	ldi	r25, 0x04	; 4
    2a3e:	9f 93       	push	r25
    2a40:	8f 93       	push	r24
    2a42:	85 e9       	ldi	r24, 0x95	; 149
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	9f 93       	push	r25
    2a48:	8f 93       	push	r24
    2a4a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
    2a4e:	8f e4       	ldi	r24, 0x4F	; 79
    2a50:	94 e0       	ldi	r25, 0x04	; 4
    2a52:	9f 93       	push	r25
    2a54:	8f 93       	push	r24
    2a56:	84 e5       	ldi	r24, 0x54	; 84
    2a58:	94 e0       	ldi	r25, 0x04	; 4
    2a5a:	9f 93       	push	r25
    2a5c:	8f 93       	push	r24
    2a5e:	8e e8       	ldi	r24, 0x8E	; 142
    2a60:	91 e0       	ldi	r25, 0x01	; 1
    2a62:	9f 93       	push	r25
    2a64:	8f 93       	push	r24
    2a66:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						printf_P(PSTR(" %S:"),maxStr);
    2a6a:	89 e5       	ldi	r24, 0x59	; 89
    2a6c:	94 e0       	ldi	r25, 0x04	; 4
    2a6e:	9f 93       	push	r25
    2a70:	8f 93       	push	r24
    2a72:	89 e8       	ldi	r24, 0x89	; 137
    2a74:	91 e0       	ldi	r25, 0x01	; 1
    2a76:	9f 93       	push	r25
    2a78:	8f 93       	push	r24
    2a7a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ch = 'z';
						ActSN_next = TOEEPROM;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempDiffSupplyReturnMax;
    2a7e:	8e e3       	ldi	r24, 0x3E	; 62
    2a80:	93 e0       	ldi	r25, 0x03	; 3
    2a82:	90 93 ab 02 	sts	0x02AB, r25
    2a86:	80 93 aa 02 	sts	0x02AA, r24
						break;
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = TOEEPROM;
    2a94:	ba e0       	ldi	r27, 0x0A	; 10
    2a96:	b8 8b       	std	Y+16, r27	; 0x10
						ActSN = ENTER_TEMP;
						n = 0;
    2a98:	1f 86       	std	Y+15, r1	; 0x0f
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = TOEEPROM;
						ActSN = ENTER_TEMP;
    2a9a:	e9 e0       	ldi	r30, 0x09	; 9
    2a9c:	ee 87       	std	Y+14, r30	; 0x0e
						n = 0;
						k = 1;
						TempAct = &rTempDiffSupplyReturnMax;
						break;
    2a9e:	d3 c1       	rjmp	.+934    	; 0x2e46 <main+0x15d2>
					case TOEEPROM:
						LCD_CLEAR();
    2aa0:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
						LCD_FIRSTLINE();
    2aa4:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
						printf_P(PSTR("%S %S?\n"),saveStr, toeepromStr);
    2aa8:	85 e4       	ldi	r24, 0x45	; 69
    2aaa:	94 e0       	ldi	r25, 0x04	; 4
    2aac:	9f 93       	push	r25
    2aae:	8f 93       	push	r24
    2ab0:	80 e4       	ldi	r24, 0x40	; 64
    2ab2:	94 e0       	ldi	r25, 0x04	; 4
    2ab4:	9f 93       	push	r25
    2ab6:	8f 93       	push	r24
    2ab8:	81 e8       	ldi	r24, 0x81	; 129
    2aba:	91 e0       	ldi	r25, 0x01	; 1
    2abc:	9f 93       	push	r25
    2abe:	8f 93       	push	r24
    2ac0:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
						ActSN_next = INDOORTEMPMIN;
						ActSN = SAVE_EEPROM;
						break;
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
						break;
					case TOEEPROM:
						LCD_CLEAR();
						LCD_FIRSTLINE();
						printf_P(PSTR("%S %S?\n"),saveStr, toeepromStr);
						ActSN_next = INDOORTEMPMIN;
    2ad0:	18 8a       	std	Y+16, r1	; 0x10
						ActSN = SAVE_EEPROM;
    2ad2:	fb e0       	ldi	r31, 0x0B	; 11
    2ad4:	fe 87       	std	Y+14, r31	; 0x0e
						break;
    2ad6:	b7 c1       	rjmp	.+878    	; 0x2e46 <main+0x15d2>
					case SAVE_EEPROM:
						if(ch == '*') {
    2ad8:	2a e2       	ldi	r18, 0x2A	; 42
    2ada:	d2 12       	cpse	r13, r18
    2adc:	b4 c1       	rjmp	.+872    	; 0x2e46 <main+0x15d2>
							eeprom_update_byte(&TempInDoorMin,rTempInDoorMin);
    2ade:	60 91 3c 03 	lds	r22, 0x033C
    2ae2:	86 e3       	ldi	r24, 0x36	; 54
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eeupd_byte_m328p>
							eeprom_update_byte(&TempInDoorMax,rTempInDoorMax);
    2aea:	60 91 3d 03 	lds	r22, 0x033D
    2aee:	85 e3       	ldi	r24, 0x35	; 53
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eeupd_byte_m328p>
							eeprom_update_byte(&TempOutDoorMin,rTempOutDoorMin);
    2af6:	60 91 68 03 	lds	r22, 0x0368
    2afa:	84 e3       	ldi	r24, 0x34	; 52
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eeupd_byte_m328p>
							eeprom_update_byte(&TempOutDoorMax,rTempOutDoorMax);
    2b02:	60 91 7f 03 	lds	r22, 0x037F
    2b06:	83 e3       	ldi	r24, 0x33	; 51
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eeupd_byte_m328p>
							eeprom_update_byte(&TempSupplyMin,rTempSupplyMin);
    2b0e:	60 91 7c 03 	lds	r22, 0x037C
    2b12:	82 e3       	ldi	r24, 0x32	; 50
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eeupd_byte_m328p>
							eeprom_update_byte(&TempSupplyMax,rTempSupplyMax);
    2b1a:	60 91 7d 03 	lds	r22, 0x037D
    2b1e:	81 e3       	ldi	r24, 0x31	; 49
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eeupd_byte_m328p>
							eeprom_update_byte(&TempDiffSupplyReturnMin,rTempDiffSupplyReturnMin);
    2b26:	60 91 7e 03 	lds	r22, 0x037E
    2b2a:	80 e3       	ldi	r24, 0x30	; 48
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eeupd_byte_m328p>
							eeprom_update_byte(&TempDiffSupplyReturnMax,rTempDiffSupplyReturnMax);
    2b32:	60 91 3e 03 	lds	r22, 0x033E
    2b36:	8f e2       	ldi	r24, 0x2F	; 47
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__eeupd_byte_m328p>
							eeprom_update_block((void *)gSensorIDs , (void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	6f e0       	ldi	r22, 0x0F	; 15
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	8c ea       	ldi	r24, 0xAC	; 172
    2b48:	92 e0       	ldi	r25, 0x02	; 2
    2b4a:	0e 94 a1 2c 	call	0x5942	; 0x5942 <__eeupd_block_m328p>
							printf_P(PSTR("\n%SD %S!"),saveStr,okStr);
    2b4e:	87 ec       	ldi	r24, 0xC7	; 199
    2b50:	94 e0       	ldi	r25, 0x04	; 4
    2b52:	9f 93       	push	r25
    2b54:	8f 93       	push	r24
    2b56:	80 e4       	ldi	r24, 0x40	; 64
    2b58:	94 e0       	ldi	r25, 0x04	; 4
    2b5a:	9f 93       	push	r25
    2b5c:	8f 93       	push	r24
    2b5e:	88 e7       	ldi	r24, 0x78	; 120
    2b60:	91 e0       	ldi	r25, 0x01	; 1
    2b62:	9f 93       	push	r25
    2b64:	8f 93       	push	r24
    2b66:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
							ActSN = TEMP_EXIT;
    2b76:	38 e0       	ldi	r19, 0x08	; 8
    2b78:	3e 87       	std	Y+14, r19	; 0x0e
    2b7a:	65 c1       	rjmp	.+714    	; 0x2e46 <main+0x15d2>
						}
						break;
					case TEMP_EXIT:
						if(ch == '*') ActSN = ActSN_next;
    2b7c:	4a e2       	ldi	r20, 0x2A	; 42
    2b7e:	d4 12       	cpse	r13, r20
    2b80:	62 c1       	rjmp	.+708    	; 0x2e46 <main+0x15d2>
    2b82:	59 c1       	rjmp	.+690    	; 0x2e36 <main+0x15c2>

						break;
					case ENTER_TEMP:
						 if(ch >= 0x30 && ch <= 0x39) {
    2b84:	80 ed       	ldi	r24, 0xD0	; 208
    2b86:	8d 0d       	add	r24, r13
    2b88:	8a 30       	cpi	r24, 0x0A	; 10
    2b8a:	08 f0       	brcs	.+2      	; 0x2b8e <main+0x131a>
    2b8c:	4c c0       	rjmp	.+152    	; 0x2c26 <main+0x13b2>

							 if(n < k){
    2b8e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b90:	6f 15       	cp	r22, r15
    2b92:	e0 f4       	brcc	.+56     	; 0x2bcc <main+0x1358>
								 if(n == 0 && ch == '9'){
    2b94:	61 11       	cpse	r22, r1
    2b96:	0a c0       	rjmp	.+20     	; 0x2bac <main+0x1338>
    2b98:	79 e3       	ldi	r23, 0x39	; 57
    2b9a:	d7 12       	cpse	r13, r23
    2b9c:	07 c0       	rjmp	.+14     	; 0x2bac <main+0x1338>
								 	 	 { wStr[n] = '-'; k = 2; printf("-");}
    2b9e:	8d e2       	ldi	r24, 0x2D	; 45
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	8d e2       	ldi	r24, 0x2D	; 45
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <putchar>
    2baa:	0c c0       	rjmp	.+24     	; 0x2bc4 <main+0x1350>
								 } else { wStr[n] = ch; printf("%c",ch);}
    2bac:	e1 e0       	ldi	r30, 0x01	; 1
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	ec 0f       	add	r30, r28
    2bb2:	fd 1f       	adc	r31, r29
    2bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb6:	e8 0f       	add	r30, r24
    2bb8:	f1 1d       	adc	r31, r1
    2bba:	d0 82       	st	Z, r13
    2bbc:	8d 2d       	mov	r24, r13
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <putchar>
								 n++;
    2bc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc6:	9f 5f       	subi	r25, 0xFF	; 255
    2bc8:	9f 87       	std	Y+15, r25	; 0x0f
    2bca:	2d c0       	rjmp	.+90     	; 0x2c26 <main+0x13b2>
							 } else {
								 wStr[n] = ch;
    2bcc:	af 85       	ldd	r26, Y+15	; 0x0f
    2bce:	8a 2f       	mov	r24, r26
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	e1 e0       	ldi	r30, 0x01	; 1
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	ec 0f       	add	r30, r28
    2bd8:	fd 1f       	adc	r31, r29
    2bda:	e8 0f       	add	r30, r24
    2bdc:	f9 1f       	adc	r31, r25
    2bde:	d0 82       	st	Z, r13
								 wStr[n+1] = '\0';
    2be0:	e2 e0       	ldi	r30, 0x02	; 2
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	ec 0f       	add	r30, r28
    2be6:	fd 1f       	adc	r31, r29
    2be8:	e8 0f       	add	r30, r24
    2bea:	f9 1f       	adc	r31, r25
    2bec:	10 82       	st	Z, r1
								 printf("%c",ch);
    2bee:	8d 2d       	mov	r24, r13
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <putchar>
								 ki = atoi(wStr);
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	01 96       	adiw	r24, 0x01	; 1
    2bfa:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
								 *TempAct = ki;
    2bfe:	e0 91 aa 02 	lds	r30, 0x02AA
    2c02:	f0 91 ab 02 	lds	r31, 0x02AB
    2c06:	80 83       	st	Z, r24
								 n = 0;
								 printf_P(PSTR("\nValue is:%i"),ki);
    2c08:	9f 93       	push	r25
    2c0a:	8f 93       	push	r24
    2c0c:	8b e6       	ldi	r24, 0x6B	; 107
    2c0e:	91 e0       	ldi	r25, 0x01	; 1
    2c10:	9f 93       	push	r25
    2c12:	8f 93       	push	r24
    2c14:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
								 wStr[n] = ch;
								 wStr[n+1] = '\0';
								 printf("%c",ch);
								 ki = atoi(wStr);
								 *TempAct = ki;
								 n = 0;
    2c20:	1f 86       	std	Y+15, r1	; 0x0f
								 printf_P(PSTR("\nValue is:%i"),ki);
								 ActSN = TEMP_EXIT;
    2c22:	b8 e0       	ldi	r27, 0x08	; 8
    2c24:	be 87       	std	Y+14, r27	; 0x0e
							 }
						 }
						 if(ch == '*') ActSN = ActSN_next;
    2c26:	ea e2       	ldi	r30, 0x2A	; 42
    2c28:	de 12       	cpse	r13, r30
    2c2a:	0d c1       	rjmp	.+538    	; 0x2e46 <main+0x15d2>
    2c2c:	07 c1       	rjmp	.+526    	; 0x2e3c <main+0x15c8>
						break;
				}	// switch(ActSN)
				//ch = 'z';
				break;
			case MVIEW_TIME:
				if(fl == 0) {LCD_CLEAR(); fl = 1;}
    2c2e:	80 91 a4 02 	lds	r24, 0x02A4
    2c32:	81 11       	cpse	r24, r1
    2c34:	05 c0       	rjmp	.+10     	; 0x2c40 <main+0x13cc>
    2c36:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	80 93 a4 02 	sts	0x02A4, r24

#ifdef N1110_LCD
				LCD_SETTEXTSIZE(2);
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	0e 94 ce 20 	call	0x419c	; 0x419c <LCD_setTextSize>
#endif
				LCD_FIRSTLINE();
    2c46:	0e 94 06 21 	call	0x420c	; 0x420c <LcdFirstLine>
#ifdef N1110_LCD
				printf_P(PSTR("\n%02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
    2c4a:	80 91 17 01 	lds	r24, 0x0117
    2c4e:	1f 92       	push	r1
    2c50:	8f 93       	push	r24
    2c52:	d2 01       	movw	r26, r4
    2c54:	8c 91       	ld	r24, X
    2c56:	1f 92       	push	r1
    2c58:	8f 93       	push	r24
    2c5a:	f1 01       	movw	r30, r2
    2c5c:	80 81       	ld	r24, Z
    2c5e:	1f 92       	push	r1
    2c60:	8f 93       	push	r24
    2c62:	8b e5       	ldi	r24, 0x5B	; 91
    2c64:	91 e0       	ldi	r25, 0x01	; 1
    2c66:	9f 93       	push	r25
    2c68:	8f 93       	push	r24
    2c6a:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
				LCD_SETTEXTSIZE(1);
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	0e 94 ce 20 	call	0x419c	; 0x419c <LCD_setTextSize>
#else
				printf_P(PSTR("\n  %02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
#endif
				break;
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	e3 c0       	rjmp	.+454    	; 0x2e46 <main+0x15d2>
			case MSET_TIME:
				if(fl == 0){
    2c80:	80 91 a4 02 	lds	r24, 0x02A4
    2c84:	81 11       	cpse	r24, r1
    2c86:	06 c0       	rjmp	.+12     	; 0x2c94 <main+0x1420>
					LCD_CLEAR();
    2c88:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
					ActSN = MSET_HOUR;
					ActSN_next = MSET_MINUTE;
					fl = 1;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	80 93 a4 02 	sts	0x02A4, r24
    2c92:	12 c0       	rjmp	.+36     	; 0x2cb8 <main+0x1444>
				}	// if(fl == 0)

				switch(ActSN){
    2c94:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c96:	32 30       	cpi	r19, 0x02	; 2
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <main+0x1428>
    2c9a:	42 c0       	rjmp	.+132    	; 0x2d20 <main+0x14ac>
    2c9c:	28 f4       	brcc	.+10     	; 0x2ca8 <main+0x1434>
    2c9e:	33 23       	and	r19, r19
    2ca0:	59 f0       	breq	.+22     	; 0x2cb8 <main+0x1444>
    2ca2:	31 30       	cpi	r19, 0x01	; 1
    2ca4:	19 f1       	breq	.+70     	; 0x2cec <main+0x1478>
    2ca6:	cf c0       	rjmp	.+414    	; 0x2e46 <main+0x15d2>
    2ca8:	4e 85       	ldd	r20, Y+14	; 0x0e
    2caa:	43 30       	cpi	r20, 0x03	; 3
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <main+0x143c>
    2cae:	54 c0       	rjmp	.+168    	; 0x2d58 <main+0x14e4>
    2cb0:	44 30       	cpi	r20, 0x04	; 4
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <main+0x1442>
    2cb4:	a5 c0       	rjmp	.+330    	; 0x2e00 <main+0x158c>
    2cb6:	c7 c0       	rjmp	.+398    	; 0x2e46 <main+0x15d2>
				case MSET_HOUR:
					printf_P(PSTR("\n%S:"),hourStr);
    2cb8:	af e2       	ldi	r26, 0x2F	; 47
    2cba:	b4 e0       	ldi	r27, 0x04	; 4
    2cbc:	bf 93       	push	r27
    2cbe:	af 93       	push	r26
    2cc0:	a6 e5       	ldi	r26, 0x56	; 86
    2cc2:	b1 e0       	ldi	r27, 0x01	; 1
    2cc4:	bf 93       	push	r27
    2cc6:	af 93       	push	r26
    2cc8:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
					k = 1;
					n = 0;
					ks = 23;
					TempAct = &(tAsync.hour);
    2ccc:	30 92 ab 02 	sts	0x02AB, r3
    2cd0:	20 92 aa 02 	sts	0x02AA, r2
					ActSN_next = MSET_MINUTE;
					ActSN = ENTER_NUMB;
					break;
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
					printf_P(PSTR("\n%S:"),hourStr);
					k = 1;
					n = 0;
					ks = 23;
					TempAct = &(tAsync.hour);
					ActSN_next = MSET_MINUTE;
    2cdc:	f1 e0       	ldi	r31, 0x01	; 1
    2cde:	f8 8b       	std	Y+16, r31	; 0x10

				switch(ActSN){
				case MSET_HOUR:
					printf_P(PSTR("\n%S:"),hourStr);
					k = 1;
					n = 0;
    2ce0:	1f 86       	std	Y+15, r1	; 0x0f
					ks = 23;
					TempAct = &(tAsync.hour);
					ActSN_next = MSET_MINUTE;
					ActSN = ENTER_NUMB;
    2ce2:	23 e0       	ldi	r18, 0x03	; 3
    2ce4:	2e 87       	std	Y+14, r18	; 0x0e
				switch(ActSN){
				case MSET_HOUR:
					printf_P(PSTR("\n%S:"),hourStr);
					k = 1;
					n = 0;
					ks = 23;
    2ce6:	37 e1       	ldi	r19, 0x17	; 23
    2ce8:	3b 8b       	std	Y+19, r19	; 0x13
					TempAct = &(tAsync.hour);
					ActSN_next = MSET_MINUTE;
					ActSN = ENTER_NUMB;
					break;
    2cea:	ad c0       	rjmp	.+346    	; 0x2e46 <main+0x15d2>
				case MSET_MINUTE:
					printf_P(PSTR("\n%S:"),minuteStr);
    2cec:	84 e3       	ldi	r24, 0x34	; 52
    2cee:	94 e0       	ldi	r25, 0x04	; 4
    2cf0:	9f 93       	push	r25
    2cf2:	8f 93       	push	r24
    2cf4:	81 e5       	ldi	r24, 0x51	; 81
    2cf6:	91 e0       	ldi	r25, 0x01	; 1
    2cf8:	9f 93       	push	r25
    2cfa:	8f 93       	push	r24
    2cfc:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
					k = 1;
					n = 0;
					ks = 60;
					TempAct = &(tAsync.minute);
    2d00:	50 92 ab 02 	sts	0x02AB, r5
    2d04:	40 92 aa 02 	sts	0x02AA, r4
					ActSN_next = MSET_SECOND;
					ActSN = ENTER_NUMB;
					break;
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
					printf_P(PSTR("\n%S:"),minuteStr);
					k = 1;
					n = 0;
					ks = 60;
					TempAct = &(tAsync.minute);
					ActSN_next = MSET_SECOND;
    2d10:	42 e0       	ldi	r20, 0x02	; 2
    2d12:	48 8b       	std	Y+16, r20	; 0x10
					ActSN = ENTER_NUMB;
					break;
				case MSET_MINUTE:
					printf_P(PSTR("\n%S:"),minuteStr);
					k = 1;
					n = 0;
    2d14:	1f 86       	std	Y+15, r1	; 0x0f
					ks = 60;
					TempAct = &(tAsync.minute);
					ActSN_next = MSET_SECOND;
					ActSN = ENTER_NUMB;
    2d16:	63 e0       	ldi	r22, 0x03	; 3
    2d18:	6e 87       	std	Y+14, r22	; 0x0e
					break;
				case MSET_MINUTE:
					printf_P(PSTR("\n%S:"),minuteStr);
					k = 1;
					n = 0;
					ks = 60;
    2d1a:	7c e3       	ldi	r23, 0x3C	; 60
    2d1c:	7b 8b       	std	Y+19, r23	; 0x13
					TempAct = &(tAsync.minute);
					ActSN_next = MSET_SECOND;
					ActSN = ENTER_NUMB;
					break;
    2d1e:	93 c0       	rjmp	.+294    	; 0x2e46 <main+0x15d2>
				case MSET_SECOND:
					printf_P(PSTR("\n%S:"),secondStr);
    2d20:	a8 e2       	ldi	r26, 0x28	; 40
    2d22:	b4 e0       	ldi	r27, 0x04	; 4
    2d24:	bf 93       	push	r27
    2d26:	af 93       	push	r26
    2d28:	ac e4       	ldi	r26, 0x4C	; 76
    2d2a:	b1 e0       	ldi	r27, 0x01	; 1
    2d2c:	bf 93       	push	r27
    2d2e:	af 93       	push	r26
    2d30:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
					k = 1;
					n = 0;
					ks = 60;
					TempAct = &(tAsync.second);
    2d34:	87 e1       	ldi	r24, 0x17	; 23
    2d36:	91 e0       	ldi	r25, 0x01	; 1
    2d38:	90 93 ab 02 	sts	0x02AB, r25
    2d3c:	80 93 aa 02 	sts	0x02AA, r24
					ActSN_next = MTIME_EXIT;
					ActSN = ENTER_NUMB;
					break;
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
					printf_P(PSTR("\n%S:"),secondStr);
					k = 1;
					n = 0;
					ks = 60;
					TempAct = &(tAsync.second);
					ActSN_next = MTIME_EXIT;
    2d48:	f4 e0       	ldi	r31, 0x04	; 4
    2d4a:	f8 8b       	std	Y+16, r31	; 0x10
					ActSN = ENTER_NUMB;
					break;
				case MSET_SECOND:
					printf_P(PSTR("\n%S:"),secondStr);
					k = 1;
					n = 0;
    2d4c:	1f 86       	std	Y+15, r1	; 0x0f
					ks = 60;
					TempAct = &(tAsync.second);
					ActSN_next = MTIME_EXIT;
					ActSN = ENTER_NUMB;
    2d4e:	23 e0       	ldi	r18, 0x03	; 3
    2d50:	2e 87       	std	Y+14, r18	; 0x0e
					break;
				case MSET_SECOND:
					printf_P(PSTR("\n%S:"),secondStr);
					k = 1;
					n = 0;
					ks = 60;
    2d52:	3c e3       	ldi	r19, 0x3C	; 60
    2d54:	3b 8b       	std	Y+19, r19	; 0x13
					TempAct = &(tAsync.second);
					ActSN_next = MTIME_EXIT;
					ActSN = ENTER_NUMB;
					break;
    2d56:	77 c0       	rjmp	.+238    	; 0x2e46 <main+0x15d2>

				case ENTER_NUMB:
				 	 if(ch >= 0x30 && ch <= 0x39) {
    2d58:	80 ed       	ldi	r24, 0xD0	; 208
    2d5a:	8d 0d       	add	r24, r13
    2d5c:	8a 30       	cpi	r24, 0x0A	; 10
    2d5e:	08 f0       	brcs	.+2      	; 0x2d62 <main+0x14ee>
    2d60:	4b c0       	rjmp	.+150    	; 0x2df8 <main+0x1584>

					 	 if(n < k){
    2d62:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d64:	4f 15       	cp	r20, r15
    2d66:	78 f4       	brcc	.+30     	; 0x2d86 <main+0x1512>
						 	 wStr[n] = ch;
    2d68:	e1 e0       	ldi	r30, 0x01	; 1
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	ec 0f       	add	r30, r28
    2d6e:	fd 1f       	adc	r31, r29
    2d70:	e4 0f       	add	r30, r20
    2d72:	f1 1d       	adc	r31, r1
    2d74:	d0 82       	st	Z, r13
						 	 printf("%c",ch);
    2d76:	8d 2d       	mov	r24, r13
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <putchar>
						 	 n++;
    2d7e:	7f 85       	ldd	r23, Y+15	; 0x0f
    2d80:	7f 5f       	subi	r23, 0xFF	; 255
    2d82:	7f 87       	std	Y+15, r23	; 0x0f
    2d84:	39 c0       	rjmp	.+114    	; 0x2df8 <main+0x1584>
					 	 } else {
						 	 wStr[n] = ch;
    2d86:	af 85       	ldd	r26, Y+15	; 0x0f
    2d88:	8a 2f       	mov	r24, r26
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	e1 e0       	ldi	r30, 0x01	; 1
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	ec 0f       	add	r30, r28
    2d92:	fd 1f       	adc	r31, r29
    2d94:	e8 0f       	add	r30, r24
    2d96:	f9 1f       	adc	r31, r25
    2d98:	d0 82       	st	Z, r13
						 	 wStr[n+1] = '\0';
    2d9a:	e2 e0       	ldi	r30, 0x02	; 2
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	ec 0f       	add	r30, r28
    2da0:	fd 1f       	adc	r31, r29
    2da2:	e8 0f       	add	r30, r24
    2da4:	f9 1f       	adc	r31, r25
    2da6:	10 82       	st	Z, r1
						 	 printf("%c",ch);
    2da8:	8d 2d       	mov	r24, r13
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <putchar>
						 	 ki = atoi(wStr);
    2db0:	ce 01       	movw	r24, r28
    2db2:	01 96       	adiw	r24, 0x01	; 1
    2db4:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
							 n = 0;
							 if(ki >= 0 && ki <= (int) ks){
    2db8:	99 23       	and	r25, r25
    2dba:	7c f0       	brlt	.+30     	; 0x2dda <main+0x1566>
    2dbc:	bb 89       	ldd	r27, Y+19	; 0x13
    2dbe:	2b 2f       	mov	r18, r27
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	28 17       	cp	r18, r24
    2dc4:	39 07       	cpc	r19, r25
    2dc6:	4c f0       	brlt	.+18     	; 0x2dda <main+0x1566>
								*TempAct = ki;
    2dc8:	e0 91 aa 02 	lds	r30, 0x02AA
    2dcc:	f0 91 ab 02 	lds	r31, 0x02AB
    2dd0:	80 83       	st	Z, r24
								ActSN = ActSN_next;;
    2dd2:	e8 89       	ldd	r30, Y+16	; 0x10
    2dd4:	ee 87       	std	Y+14, r30	; 0x0e
					 	 } else {
						 	 wStr[n] = ch;
						 	 wStr[n+1] = '\0';
						 	 printf("%c",ch);
						 	 ki = atoi(wStr);
							 n = 0;
    2dd6:	1f 86       	std	Y+15, r1	; 0x0f
							 if(ki >= 0 && ki <= (int) ks){
								*TempAct = ki;
								ActSN = ActSN_next;;
    2dd8:	0f c0       	rjmp	.+30     	; 0x2df8 <main+0x1584>
							 } else {
								ReturnXPos(2); 
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	0e 94 0b 21 	call	0x4216	; 0x4216 <ReturnXPos>
								printf_P(PSTR("  "));
    2de0:	89 e4       	ldi	r24, 0x49	; 73
    2de2:	91 e0       	ldi	r25, 0x01	; 1
    2de4:	9f 93       	push	r25
    2de6:	8f 93       	push	r24
    2de8:	0e 94 3f 2a 	call	0x547e	; 0x547e <printf_P>
								ReturnXPos(2);
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	0e 94 0b 21 	call	0x4216	; 0x4216 <ReturnXPos>
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
					 	 } else {
						 	 wStr[n] = ch;
						 	 wStr[n+1] = '\0';
						 	 printf("%c",ch);
						 	 ki = atoi(wStr);
							 n = 0;
    2df6:	1f 86       	std	Y+15, r1	; 0x0f
								printf_P(PSTR("  "));
								ReturnXPos(2);
							 }
					 	 }
				 	 }
				 	 if(ch == '*') ActSN = ActSN_next;
    2df8:	fa e2       	ldi	r31, 0x2A	; 42
    2dfa:	df 12       	cpse	r13, r31
    2dfc:	24 c0       	rjmp	.+72     	; 0x2e46 <main+0x15d2>
    2dfe:	21 c0       	rjmp	.+66     	; 0x2e42 <main+0x15ce>
				 	 break;
				case MTIME_EXIT:
					if(ch == '*') {MenuPhase = MVIEW_TIME; fl = 0;}
    2e00:	2a e2       	ldi	r18, 0x2A	; 42
    2e02:	d2 12       	cpse	r13, r18
    2e04:	20 c0       	rjmp	.+64     	; 0x2e46 <main+0x15d2>
    2e06:	86 e0       	ldi	r24, 0x06	; 6
    2e08:	80 93 a5 02 	sts	0x02A5, r24
    2e0c:	10 92 a4 02 	sts	0x02A4, r1
    2e10:	1a c0       	rjmp	.+52     	; 0x2e46 <main+0x15d2>
					break;
				}	// switch(ActSN)
				ch = 'z';
				break;
			case MEXIT:
				LCD_CLEAR();
    2e12:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
				LastPhase = MainLoopPhase;
    2e16:	80 91 a7 02 	lds	r24, 0x02A7
    2e1a:	80 93 a6 02 	sts	0x02A6, r24
				MainLoopPhase = DISPLAY_TEMPERATURE;
    2e1e:	10 92 a7 02 	sts	0x02A7, r1
				MenuPhase = MMENU_SHOW;
    2e22:	10 92 a5 02 	sts	0x02A5, r1
				continue;
    2e26:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <main+0x406>
						    } else 	ActSN = SN_EXIT;

						}

							if(ch == '*')
								ActSN = ActSN_next;
    2e2a:	38 89       	ldd	r19, Y+16	; 0x10
    2e2c:	3e 87       	std	Y+14, r19	; 0x0e
    2e2e:	0b c0       	rjmp	.+22     	; 0x2e46 <main+0x15d2>

							break;
						case SN_EXIT:
							if(ch == '*')
								ActSN = ActSN_next;
    2e30:	48 89       	ldd	r20, Y+16	; 0x10
    2e32:	4e 87       	std	Y+14, r20	; 0x0e
    2e34:	08 c0       	rjmp	.+16     	; 0x2e46 <main+0x15d2>
							printf_P(PSTR("\n%SD %S!"),saveStr,okStr);
							ActSN = TEMP_EXIT;
						}
						break;
					case TEMP_EXIT:
						if(ch == '*') ActSN = ActSN_next;
    2e36:	68 89       	ldd	r22, Y+16	; 0x10
    2e38:	6e 87       	std	Y+14, r22	; 0x0e
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <main+0x15d2>
								 n = 0;
								 printf_P(PSTR("\nValue is:%i"),ki);
								 ActSN = TEMP_EXIT;
							 }
						 }
						 if(ch == '*') ActSN = ActSN_next;
    2e3c:	78 89       	ldd	r23, Y+16	; 0x10
    2e3e:	7e 87       	std	Y+14, r23	; 0x0e
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <main+0x15d2>
    2e42:	88 89       	ldd	r24, Y+16	; 0x10
    2e44:	8e 87       	std	Y+14, r24	; 0x0e

			}	// switch(MenuPhase)

		break;
		}	// switch(MainLoopPhase)
		LCD_UPDATE();
    2e46:	0e 94 56 1d 	call	0x3aac	; 0x3aac <LCD_Update>
				LCD_CLEAR();
			} else
				_delay_ms(100);
#endif
*/
	DO_WATCHDOG();
    2e4a:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    2e4e:	78 01       	movw	r14, r16
    2e50:	8e 2d       	mov	r24, r14
    2e52:	80 1b       	sub	r24, r16

	for(k = 0;k < MAXSENSORS;k++)
		if(noready_sens[k]) {
    2e54:	d7 01       	movw	r26, r14
    2e56:	9d 91       	ld	r25, X+
    2e58:	7d 01       	movw	r14, r26
    2e5a:	91 11       	cpse	r25, r1
			sms_noready_sens(k);
    2e5c:	0e 94 b7 0a 	call	0x156e	; 0x156e <sms_noready_sens>
				_delay_ms(100);
#endif
*/
	DO_WATCHDOG();

	for(k = 0;k < MAXSENSORS;k++)
    2e60:	e6 14       	cp	r14, r6
    2e62:	f7 04       	cpc	r15, r7
    2e64:	a9 f7       	brne	.-22     	; 0x2e50 <main+0x15dc>
		if(noready_sens[k]) {
			sms_noready_sens(k);
		}

	if(MainLoopPhase == DISPLAY_MAINMENU)
    2e66:	80 91 a7 02 	lds	r24, 0x02A7
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	79 f4       	brne	.+30     	; 0x2e8c <main+0x1618>
		if(TimeKeyPressed > KEYPRESSED_TIMOUT){
    2e6e:	80 91 80 03 	lds	r24, 0x0380
    2e72:	83 30       	cpi	r24, 0x03	; 3
    2e74:	58 f0       	brcs	.+22     	; 0x2e8c <main+0x1618>
			LastPhase = MainLoopPhase;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	80 93 a6 02 	sts	0x02A6, r24
			MainLoopPhase = DISPLAY_TEMPERATURE;
    2e7c:	10 92 a7 02 	sts	0x02A7, r1
			fl = 0;
    2e80:	10 92 a4 02 	sts	0x02A4, r1
			TimeKeyPressed = 0;
    2e84:	10 92 80 03 	sts	0x0380, r1
			LCD_CLEAR();
    2e88:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
		}

	if(extstate != 0){
    2e8c:	80 91 3b 03 	lds	r24, 0x033B
    2e90:	88 23       	and	r24, r24
    2e92:	79 f0       	breq	.+30     	; 0x2eb2 <main+0x163e>
		LastPhase = MainLoopPhase;
    2e94:	80 91 a7 02 	lds	r24, 0x02A7
    2e98:	80 93 a6 02 	sts	0x02A6, r24
		MainLoopPhase = DISPLAY_MAINMENU;
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	80 93 a7 02 	sts	0x02A7, r24
		fl = 0;
    2ea2:	10 92 a4 02 	sts	0x02A4, r1
		TimeKeyPressed = 0;
    2ea6:	10 92 80 03 	sts	0x0380, r1
		extstate = 0;
    2eaa:	10 92 3b 03 	sts	0x033B, r1
		LCD_CLEAR();
    2eae:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
	}

//
		if(tAsync.minute != mtemp_minute){
    2eb2:	f2 01       	movw	r30, r4
    2eb4:	20 81       	ld	r18, Z
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	89 2d       	mov	r24, r9
    2eba:	99 27       	eor	r25, r25
    2ebc:	87 fd       	sbrc	r24, 7
    2ebe:	90 95       	com	r25
    2ec0:	28 17       	cp	r18, r24
    2ec2:	39 07       	cpc	r19, r25
    2ec4:	39 f0       	breq	.+14     	; 0x2ed4 <main+0x1660>
			MANAGE_TEMPEVENT();
    2ec6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <manageTemperatureEvent>
			mtemp_minute = tAsync.minute;
    2eca:	d2 01       	movw	r26, r4
    2ecc:	9c 90       	ld	r9, X
			mausure_temperature_ok = TRUE;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	80 93 08 01 	sts	0x0108, r24
		}

		if(tAsync.minute % 10 == 0){
    2ed4:	f2 01       	movw	r30, r4
    2ed6:	80 81       	ld	r24, Z
    2ed8:	9d ec       	ldi	r25, 0xCD	; 205
    2eda:	89 9f       	mul	r24, r25
    2edc:	91 2d       	mov	r25, r1
    2ede:	11 24       	eor	r1, r1
    2ee0:	96 95       	lsr	r25
    2ee2:	96 95       	lsr	r25
    2ee4:	96 95       	lsr	r25
    2ee6:	99 0f       	add	r25, r25
    2ee8:	29 2f       	mov	r18, r25
    2eea:	22 0f       	add	r18, r18
    2eec:	22 0f       	add	r18, r18
    2eee:	92 0f       	add	r25, r18
    2ef0:	89 13       	cpse	r24, r25
    2ef2:	02 c0       	rjmp	.+4      	; 0x2ef8 <main+0x1684>
			TEST_NOTREADY_SENSORS();
    2ef4:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <TestNoReadySensors>
		}

//
		if(tAsync.hour != mtemp_hour){
    2ef8:	d1 01       	movw	r26, r2
    2efa:	2c 91       	ld	r18, X
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	88 2d       	mov	r24, r8
    2f00:	99 27       	eor	r25, r25
    2f02:	87 fd       	sbrc	r24, 7
    2f04:	90 95       	com	r25
    2f06:	28 17       	cp	r18, r24
    2f08:	39 07       	cpc	r19, r25
    2f0a:	11 f4       	brne	.+4      	; 0x2f10 <main+0x169c>
    2f0c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <main+0x400>
			MANAGE_OUTDOOR_TEMPEVENT();
    2f10:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <ManageOutdoorTempEvent>
			mtemp_hour = tAsync.hour;
    2f14:	f1 01       	movw	r30, r2
    2f16:	80 80       	ld	r8, Z
				_delay_ms(100);
#endif
*/
	DO_WATCHDOG();

	for(k = 0;k < MAXSENSORS;k++)
    2f18:	68 94       	set
    2f1a:	ff 24       	eor	r15, r15
    2f1c:	f2 f8       	bld	r15, 2
    2f1e:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <main+0x406>
//##################################################################
		if(!wait_powergone && powergone){
			wait_powergone = 1;
		}
//
		if(wait_powergone){
    2f22:	90 91 22 03 	lds	r25, 0x0322
			if(powergone){
    2f26:	80 91 3a 03 	lds	r24, 0x033A
    2f2a:	81 11       	cpse	r24, r1
    2f2c:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <main+0x420>
    2f30:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <main+0x440>

00002f34 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    2f34:	1f 92       	push	r1
    2f36:	0f 92       	push	r0
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	0f 92       	push	r0
    2f3c:	11 24       	eor	r1, r1
    2f3e:	2f 93       	push	r18
    2f40:	8f 93       	push	r24
    2f42:	9f 93       	push	r25
    2f44:	ef 93       	push	r30
    2f46:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2f48:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    2f4c:	20 91 c6 00 	lds	r18, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    2f50:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2f52:	e0 91 df 02 	lds	r30, 0x02DF
    2f56:	ef 5f       	subi	r30, 0xFF	; 255
    2f58:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    2f5a:	90 91 de 02 	lds	r25, 0x02DE
    2f5e:	e9 17       	cp	r30, r25
    2f60:	39 f0       	breq	.+14     	; 0x2f70 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    2f62:	e0 93 df 02 	sts	0x02DF, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	ee 51       	subi	r30, 0x1E	; 30
    2f6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f6c:	20 83       	st	Z, r18
    2f6e:	01 c0       	rjmp	.+2      	; 0x2f72 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2f70:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    2f72:	80 93 dd 02 	sts	0x02DD, r24
}
    2f76:	ff 91       	pop	r31
    2f78:	ef 91       	pop	r30
    2f7a:	9f 91       	pop	r25
    2f7c:	8f 91       	pop	r24
    2f7e:	2f 91       	pop	r18
    2f80:	0f 90       	pop	r0
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	0f 90       	pop	r0
    2f86:	1f 90       	pop	r1
    2f88:	18 95       	reti

00002f8a <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    2f8a:	1f 92       	push	r1
    2f8c:	0f 92       	push	r0
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	0f 92       	push	r0
    2f92:	11 24       	eor	r1, r1
    2f94:	8f 93       	push	r24
    2f96:	9f 93       	push	r25
    2f98:	ef 93       	push	r30
    2f9a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    2f9c:	90 91 e1 02 	lds	r25, 0x02E1
    2fa0:	80 91 e0 02 	lds	r24, 0x02E0
    2fa4:	98 17       	cp	r25, r24
    2fa6:	69 f0       	breq	.+26     	; 0x2fc2 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2fa8:	e0 91 e0 02 	lds	r30, 0x02E0
    2fac:	ef 5f       	subi	r30, 0xFF	; 255
    2fae:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    2fb0:	e0 93 e0 02 	sts	0x02E0, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	ee 5f       	subi	r30, 0xFE	; 254
    2fb8:	fc 4f       	sbci	r31, 0xFC	; 252
    2fba:	80 81       	ld	r24, Z
    2fbc:	80 93 c6 00 	sts	0x00C6, r24
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2fc2:	e1 ec       	ldi	r30, 0xC1	; 193
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	8f 7d       	andi	r24, 0xDF	; 223
    2fca:	80 83       	st	Z, r24
    }
}
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	9f 91       	pop	r25
    2fd2:	8f 91       	pop	r24
    2fd4:	0f 90       	pop	r0
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	0f 90       	pop	r0
    2fda:	1f 90       	pop	r1
    2fdc:	18 95       	reti

00002fde <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    2fde:	10 92 e1 02 	sts	0x02E1, r1
    UART_TxTail = 0;
    2fe2:	10 92 e0 02 	sts	0x02E0, r1
    UART_RxHead = 0;
    2fe6:	10 92 df 02 	sts	0x02DF, r1
    UART_RxTail = 0;
    2fea:	10 92 de 02 	sts	0x02DE, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    2fee:	99 23       	and	r25, r25
    2ff0:	24 f4       	brge	.+8      	; 0x2ffa <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    2ff2:	22 e0       	ldi	r18, 0x02	; 2
    2ff4:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
    2ff8:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    2ffa:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    2ffe:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    3002:	88 e9       	ldi	r24, 0x98	; 152
    3004:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    3008:	86 e0       	ldi	r24, 0x06	; 6
    300a:	80 93 c2 00 	sts	0x00C2, r24
    300e:	08 95       	ret

00003010 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    3010:	90 91 df 02 	lds	r25, 0x02DF
    3014:	80 91 de 02 	lds	r24, 0x02DE
    3018:	98 17       	cp	r25, r24
    301a:	91 f0       	breq	.+36     	; 0x3040 <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    301c:	e0 91 de 02 	lds	r30, 0x02DE
    3020:	ef 5f       	subi	r30, 0xFF	; 255
    3022:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
    3024:	e0 93 de 02 	sts	0x02DE, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	ee 51       	subi	r30, 0x1E	; 30
    302c:	fd 4f       	sbci	r31, 0xFD	; 253
    302e:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
    3030:	80 91 dd 02 	lds	r24, 0x02DD
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	98 2f       	mov	r25, r24
    3038:	88 27       	eor	r24, r24
    303a:	82 0f       	add	r24, r18
    303c:	91 1d       	adc	r25, r1
    303e:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    3044:	08 95       	ret

00003046 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    3046:	20 91 e1 02 	lds	r18, 0x02E1
    304a:	2f 5f       	subi	r18, 0xFF	; 255
    304c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    304e:	90 91 e0 02 	lds	r25, 0x02E0
    3052:	29 17       	cp	r18, r25
    3054:	e1 f3       	breq	.-8      	; 0x304e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    3056:	e2 2f       	mov	r30, r18
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	ee 5f       	subi	r30, 0xFE	; 254
    305c:	fc 4f       	sbci	r31, 0xFC	; 252
    305e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    3060:	20 93 e1 02 	sts	0x02E1, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    3064:	e1 ec       	ldi	r30, 0xC1	; 193
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	80 62       	ori	r24, 0x20	; 32
    306c:	80 83       	st	Z, r24
    306e:	08 95       	ret

00003070 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	ec 01       	movw	r28, r24
    while (*s) 
    3076:	88 81       	ld	r24, Y
    3078:	88 23       	and	r24, r24
    307a:	31 f0       	breq	.+12     	; 0x3088 <uart_puts+0x18>
    307c:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    307e:	0e 94 23 18 	call	0x3046	; 0x3046 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    3082:	89 91       	ld	r24, Y+
    3084:	81 11       	cpse	r24, r1
    3086:	fb cf       	rjmp	.-10     	; 0x307e <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	08 95       	ret

0000308e <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    3092:	ec 01       	movw	r28, r24
    3094:	21 96       	adiw	r28, 0x01	; 1
    3096:	fc 01       	movw	r30, r24
    3098:	84 91       	lpm	r24, Z
    309a:	88 23       	and	r24, r24
    309c:	39 f0       	breq	.+14     	; 0x30ac <uart_puts_p+0x1e>
      uart_putc(c);
    309e:	0e 94 23 18 	call	0x3046	; 0x3046 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    30a2:	fe 01       	movw	r30, r28
    30a4:	84 91       	lpm	r24, Z
    30a6:	21 96       	adiw	r28, 0x01	; 1
    30a8:	81 11       	cpse	r24, r1
    30aa:	f9 cf       	rjmp	.-14     	; 0x309e <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	08 95       	ret

000030b2 <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
    30b2:	80 91 df 02 	lds	r24, 0x02DF
    30b6:	20 91 de 02 	lds	r18, 0x02DE
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	4f 96       	adiw	r24, 0x1f	; 31
    30be:	82 1b       	sub	r24, r18
    30c0:	91 09       	sbc	r25, r1
    30c2:	6f e1       	ldi	r22, 0x1F	; 31
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__divmodhi4>
}/* uart_available */
    30ca:	08 95       	ret

000030cc <uart_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
    30cc:	80 91 de 02 	lds	r24, 0x02DE
    30d0:	80 93 df 02 	sts	0x02DF, r24
    30d4:	08 95       	ret

000030d6 <uart_put_int>:
Purpose:  transmit integer as ASCII to UART
Input:    integer value
Returns:  none
**************************************************************************/
void uart_put_int( const int val )
{
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	2a 97       	sbiw	r28, 0x0a	; 10
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    30ea:	4a e0       	ldi	r20, 0x0A	; 10
    30ec:	be 01       	movw	r22, r28
    30ee:	6f 5f       	subi	r22, 0xFF	; 255
    30f0:	7f 4f       	sbci	r23, 0xFF	; 255
    30f2:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__itoa_ncheck>
	char buffer[10];
	uart_puts( itoa( val, buffer, 10 ) );
    30f6:	0e 94 38 18 	call	0x3070	; 0x3070 <uart_puts>
} /* uart_puti */
    30fa:	2a 96       	adiw	r28, 0x0a	; 10
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	08 95       	ret

0000310c <WDT_off>:
uint8_t TimeKeyPressed;
char wait_powergone = 0;

void WDT_off(void)
{
	cli();
    310c:	f8 94       	cli
	wdt_reset();
    310e:	a8 95       	wdr
/* Clear WDRF in MCUSR */
	MCUSR &= ~(1<<WDRF);
    3110:	84 b7       	in	r24, 0x34	; 52
    3112:	87 7f       	andi	r24, 0xF7	; 247
    3114:	84 bf       	out	0x34, r24	; 52
/* Write logical one to WDCE and WDE */
/* Keep old prescaler setting to prevent unintentional
time-out */
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    3116:	e0 e6       	ldi	r30, 0x60	; 96
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	88 61       	ori	r24, 0x18	; 24
    311e:	80 83       	st	Z, r24
/* Turn off WDT */
	WDTCSR = 0x00;
    3120:	10 82       	st	Z, r1
	sei();
    3122:	78 94       	sei
    3124:	08 95       	ret

00003126 <__vector_6>:
}

// watchdog interrupt
ISR (WDT_vect)
{
    3126:	1f 92       	push	r1
    3128:	0f 92       	push	r0
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	0f 92       	push	r0
    312e:	11 24       	eor	r1, r1
   cli();
    3130:	f8 94       	cli
   wdt_reset();
    3132:	a8 95       	wdr
   sei();
    3134:	78 94       	sei
}  // end of WDT_vect
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	0f 90       	pop	r0
    313c:	1f 90       	pop	r1
    313e:	18 95       	reti

00003140 <WDT_setup>:
//
void WDT_setup()
{

	cli();
    3140:	f8 94       	cli
	MCUSR &= ~(1 << WDRF);                           // reset status flag
    3142:	84 b7       	in	r24, 0x34	; 52
    3144:	87 7f       	andi	r24, 0xF7	; 247
    3146:	84 bf       	out	0x34, r24	; 52
	WDTCSR = (1 << WDCE) | (1 << WDE);              // enable configuration changes
    3148:	e0 e6       	ldi	r30, 0x60	; 96
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	88 e1       	ldi	r24, 0x18	; 24
    314e:	80 83       	st	Z, r24
	WDTCSR = (1 << WDIE) | (1<< WDP0) | (1 << WDP3); // set the prescalar  8s
    3150:	81 e6       	ldi	r24, 0x61	; 97
    3152:	80 83       	st	Z, r24
	//WDTCSR = (1<<WDE) | (1<< WDP0) | (1 << WDP3); // set the prescalar  8s
	sei();
    3154:	78 94       	sei
    3156:	08 95       	ret

00003158 <init_clock>:

}
//

void init_clock(void)
{                                   
    3158:	20 e4       	ldi	r18, 0x40	; 64
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	5f ef       	ldi	r21, 0xFF	; 255
    315e:	4f ef       	ldi	r20, 0xFF	; 255
    3160:	08 c0       	rjmp	.+16     	; 0x3172 <init_clock+0x1a>
    3162:	01 97       	sbiw	r24, 0x01	; 1
//    init_rtc();   
    int temp0,temp1;      
        
    for(temp0=0;temp0<0x0040;temp0++)   // Wait for external clock crystal to stabilize   
    {   
        for(temp1=0;temp1<0xFFFF;temp1++);   
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	e9 f7       	brne	.-6      	; 0x3162 <init_clock+0xa>
    3168:	21 50       	subi	r18, 0x01	; 1
    316a:	31 09       	sbc	r19, r1
void init_clock(void)
{                                   
//    init_rtc();   
    int temp0,temp1;      
        
    for(temp0=0;temp0<0x0040;temp0++)   // Wait for external clock crystal to stabilize   
    316c:	21 15       	cp	r18, r1
    316e:	31 05       	cpc	r19, r1
    3170:	19 f0       	breq	.+6      	; 0x3178 <init_clock+0x20>

}
//

void init_clock(void)
{                                   
    3172:	85 2f       	mov	r24, r21
    3174:	94 2f       	mov	r25, r20
    3176:	f5 cf       	rjmp	.-22     	; 0x3162 <init_clock+0xa>
    for(temp0=0;temp0<0x0040;temp0++)   // Wait for external clock crystal to stabilize   
    {   
        for(temp1=0;temp1<0xFFFF;temp1++);   
    }   
//    DDRB=0xFF;
    TIMSK2 &=~((1<<TOIE2)|(1<<OCIE2A)|(1<<OCIE2B));     //Disable TC2 interrupt
    3178:	e0 e7       	ldi	r30, 0x70	; 112
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	88 7f       	andi	r24, 0xF8	; 248
    3180:	80 83       	st	Z, r24
    ASSR |= (1<<AS2);           //set Timer/Counter2 to be asynchronous from the CPU clock
    3182:	e6 eb       	ldi	r30, 0xB6	; 182
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	80 62       	ori	r24, 0x20	; 32
    318a:	80 83       	st	Z, r24
                                //with a second external clock(32,768kHz)driving it.     
    TCNT2 = 0x00;
    318c:	10 92 b2 00 	sts	0x00B2, r1
    TCCR2B = 0x05;                 //prescale the timer to be clock source / 1024 to make it
    3190:	85 e0       	ldi	r24, 0x05	; 5
    3192:	80 93 b1 00 	sts	0x00B1, r24
                                //exactly 1 second for every overflow to occur
    while(ASSR&0x1F);           //Wait until TC2 is updated
    3196:	80 81       	ld	r24, Z
    3198:	8f 71       	andi	r24, 0x1F	; 31
    319a:	e9 f7       	brne	.-6      	; 0x3196 <init_clock+0x3e>
    TIMSK2 |= (1<<TOIE2);        //set 8-bit Timer/Counter2 Overflow Interrupt Enable
    319c:	e0 e7       	ldi	r30, 0x70	; 112
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	81 60       	ori	r24, 0x01	; 1
    31a4:	80 83       	st	Z, r24
    sei();                     //set the Global Interrupt Enable Bit
    31a6:	78 94       	sei
    31a8:	08 95       	ret

000031aa <not_leap>:
   
}     
    
char not_leap(void)      //check for leap year   
{   
    if (!(tAsync.year%100))   
    31aa:	40 91 1c 01 	lds	r20, 0x011C
    31ae:	50 91 1d 01 	lds	r21, 0x011D
    31b2:	9a 01       	movw	r18, r20
    31b4:	36 95       	lsr	r19
    31b6:	27 95       	ror	r18
    31b8:	36 95       	lsr	r19
    31ba:	27 95       	ror	r18
    31bc:	ab e7       	ldi	r26, 0x7B	; 123
    31be:	b4 e1       	ldi	r27, 0x14	; 20
    31c0:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    31c4:	96 95       	lsr	r25
    31c6:	87 95       	ror	r24
    31c8:	64 e6       	ldi	r22, 0x64	; 100
    31ca:	68 9f       	mul	r22, r24
    31cc:	90 01       	movw	r18, r0
    31ce:	69 9f       	mul	r22, r25
    31d0:	30 0d       	add	r19, r0
    31d2:	11 24       	eor	r1, r1
    31d4:	42 17       	cp	r20, r18
    31d6:	53 07       	cpc	r21, r19
    31d8:	91 f4       	brne	.+36     	; 0x31fe <not_leap+0x54>
        return (char)(tAsync.year%400);   
    31da:	9a 01       	movw	r18, r20
    31dc:	32 95       	swap	r19
    31de:	22 95       	swap	r18
    31e0:	2f 70       	andi	r18, 0x0F	; 15
    31e2:	23 27       	eor	r18, r19
    31e4:	3f 70       	andi	r19, 0x0F	; 15
    31e6:	23 27       	eor	r18, r19
    31e8:	ae e3       	ldi	r26, 0x3E	; 62
    31ea:	ba e0       	ldi	r27, 0x0A	; 10
    31ec:	0e 94 09 28 	call	0x5012	; 0x5012 <__umulhisi3>
    31f0:	94 2f       	mov	r25, r20
    31f2:	20 e7       	ldi	r18, 0x70	; 112
    31f4:	82 9f       	mul	r24, r18
    31f6:	90 0d       	add	r25, r0
    31f8:	11 24       	eor	r1, r1
    31fa:	89 2f       	mov	r24, r25
    31fc:	08 95       	ret
    else   
        return (char)(tAsync.year%4);   
    31fe:	84 2f       	mov	r24, r20
    3200:	83 70       	andi	r24, 0x03	; 3
} 
    3202:	08 95       	ret

00003204 <__vector_9>:
    TIMSK2 |= (1<<TOIE2);        //set 8-bit Timer/Counter2 Overflow Interrupt Enable
    sei();                     //set the Global Interrupt Enable Bit
}   
   
ISR (TIMER2_OVF_vect) //void counter(void) //overflow interrupt vector
{    
    3204:	1f 92       	push	r1
    3206:	0f 92       	push	r0
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	0f 92       	push	r0
    320c:	11 24       	eor	r1, r1
    320e:	2f 93       	push	r18
    3210:	3f 93       	push	r19
    3212:	4f 93       	push	r20
    3214:	5f 93       	push	r21
    3216:	6f 93       	push	r22
    3218:	7f 93       	push	r23
    321a:	8f 93       	push	r24
    321c:	9f 93       	push	r25
    321e:	af 93       	push	r26
    3220:	bf 93       	push	r27
    3222:	ef 93       	push	r30
    3224:	ff 93       	push	r31
       
    if (++tAsync.second==60)        //keep track of time, date, month, and year   
    3226:	80 91 17 01 	lds	r24, 0x0117
    322a:	8f 5f       	subi	r24, 0xFF	; 255
    322c:	8c 33       	cpi	r24, 0x3C	; 60
    322e:	19 f0       	breq	.+6      	; 0x3236 <__vector_9+0x32>
    3230:	80 93 17 01 	sts	0x0117, r24
    3234:	6e c0       	rjmp	.+220    	; 0x3312 <__vector_9+0x10e>
    {   
        tAsync.second=0;
    3236:	10 92 17 01 	sts	0x0117, r1
        TimeKeyPressed++;
    323a:	80 91 80 03 	lds	r24, 0x0380
    323e:	8f 5f       	subi	r24, 0xFF	; 255
    3240:	80 93 80 03 	sts	0x0380, r24
        if (++tAsync.minute==60)    
    3244:	80 91 18 01 	lds	r24, 0x0118
    3248:	8f 5f       	subi	r24, 0xFF	; 255
    324a:	8c 33       	cpi	r24, 0x3C	; 60
    324c:	19 f0       	breq	.+6      	; 0x3254 <__vector_9+0x50>
    324e:	80 93 18 01 	sts	0x0118, r24
    3252:	58 c0       	rjmp	.+176    	; 0x3304 <__vector_9+0x100>
        {   
            tAsync.minute=0;   
    3254:	10 92 18 01 	sts	0x0118, r1
            if (++tAsync.hour==24)   
    3258:	80 91 19 01 	lds	r24, 0x0119
    325c:	8f 5f       	subi	r24, 0xFF	; 255
    325e:	88 31       	cpi	r24, 0x18	; 24
    3260:	19 f0       	breq	.+6      	; 0x3268 <__vector_9+0x64>
    3262:	80 93 19 01 	sts	0x0119, r24
    3266:	4e c0       	rjmp	.+156    	; 0x3304 <__vector_9+0x100>
            {   
                tAsync.hour=0;   
    3268:	10 92 19 01 	sts	0x0119, r1
                if (++tAsync.date==32)   
    326c:	ea e1       	ldi	r30, 0x1A	; 26
    326e:	f1 e0       	ldi	r31, 0x01	; 1
    3270:	80 81       	ld	r24, Z
    3272:	8f 5f       	subi	r24, 0xFF	; 255
    3274:	80 83       	st	Z, r24
    3276:	80 32       	cpi	r24, 0x20	; 32
    3278:	49 f4       	brne	.+18     	; 0x328c <__vector_9+0x88>
                {   
                    tAsync.month++;   
    327a:	eb e1       	ldi	r30, 0x1B	; 27
    327c:	f1 e0       	ldi	r31, 0x01	; 1
    327e:	80 81       	ld	r24, Z
    3280:	8f 5f       	subi	r24, 0xFF	; 255
    3282:	80 83       	st	Z, r24
                    tAsync.date=1;   
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	80 93 1a 01 	sts	0x011A, r24
    328a:	2e c0       	rjmp	.+92     	; 0x32e8 <__vector_9+0xe4>
                }   
                else if (tAsync.date==31)    
    328c:	8f 31       	cpi	r24, 0x1F	; 31
    328e:	79 f4       	brne	.+30     	; 0x32ae <__vector_9+0xaa>
                {                       
                    if ((tAsync.month==4) || (tAsync.month==6) || (tAsync.month==9) || (tAsync.month==11))    
    3290:	80 91 1b 01 	lds	r24, 0x011B
    3294:	98 2f       	mov	r25, r24
    3296:	9d 7f       	andi	r25, 0xFD	; 253
    3298:	94 30       	cpi	r25, 0x04	; 4
    329a:	11 f0       	breq	.+4      	; 0x32a0 <__vector_9+0x9c>
    329c:	99 30       	cpi	r25, 0x09	; 9
    329e:	21 f5       	brne	.+72     	; 0x32e8 <__vector_9+0xe4>
                    {   
                        tAsync.month++;   
    32a0:	8f 5f       	subi	r24, 0xFF	; 255
    32a2:	80 93 1b 01 	sts	0x011B, r24
                        tAsync.date=1;   
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	80 93 1a 01 	sts	0x011A, r24
    32ac:	1d c0       	rjmp	.+58     	; 0x32e8 <__vector_9+0xe4>
                    }   
                }   
                else if (tAsync.date==30)   
    32ae:	8e 31       	cpi	r24, 0x1E	; 30
    32b0:	59 f4       	brne	.+22     	; 0x32c8 <__vector_9+0xc4>
                {   
                    if(tAsync.month==2)   
    32b2:	80 91 1b 01 	lds	r24, 0x011B
    32b6:	82 30       	cpi	r24, 0x02	; 2
    32b8:	b9 f4       	brne	.+46     	; 0x32e8 <__vector_9+0xe4>
                    {   
                       tAsync.month++;   
    32ba:	83 e0       	ldi	r24, 0x03	; 3
    32bc:	80 93 1b 01 	sts	0x011B, r24
                       tAsync.date=1;   
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	80 93 1a 01 	sts	0x011A, r24
    32c6:	10 c0       	rjmp	.+32     	; 0x32e8 <__vector_9+0xe4>
                    }   
                }                 
                else if (tAsync.date==29)    
    32c8:	8d 31       	cpi	r24, 0x1D	; 29
    32ca:	71 f4       	brne	.+28     	; 0x32e8 <__vector_9+0xe4>
                {   
                    if((tAsync.month==2) && (not_leap()))   
    32cc:	80 91 1b 01 	lds	r24, 0x011B
    32d0:	82 30       	cpi	r24, 0x02	; 2
    32d2:	51 f4       	brne	.+20     	; 0x32e8 <__vector_9+0xe4>
    32d4:	0e 94 d5 18 	call	0x31aa	; 0x31aa <not_leap>
    32d8:	88 23       	and	r24, r24
    32da:	a1 f0       	breq	.+40     	; 0x3304 <__vector_9+0x100>
                    {   
                        tAsync.month++;   
    32dc:	83 e0       	ldi	r24, 0x03	; 3
    32de:	80 93 1b 01 	sts	0x011B, r24
                        tAsync.date=1;   
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	80 93 1a 01 	sts	0x011A, r24
                    }                   
                }                             
                if (tAsync.month==13)   
    32e8:	80 91 1b 01 	lds	r24, 0x011B
    32ec:	8d 30       	cpi	r24, 0x0D	; 13
    32ee:	51 f4       	brne	.+20     	; 0x3304 <__vector_9+0x100>
                {   
                    tAsync.month=1;   
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	80 93 1b 01 	sts	0x011B, r24
                    tAsync.year++;   
    32f6:	ec e1       	ldi	r30, 0x1C	; 28
    32f8:	f1 e0       	ldi	r31, 0x01	; 1
    32fa:	80 81       	ld	r24, Z
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	80 83       	st	Z, r24
                }   
            }   
        }   
//wwwwwwwww
        if(wait_powergone) wait_powergone++;
    3304:	80 91 22 03 	lds	r24, 0x0322
    3308:	88 23       	and	r24, r24
    330a:	19 f0       	breq	.+6      	; 0x3312 <__vector_9+0x10e>
    330c:	8f 5f       	subi	r24, 0xFF	; 255
    330e:	80 93 22 03 	sts	0x0322, r24
//wwwwwwwww
    }     
   
}     
    3312:	ff 91       	pop	r31
    3314:	ef 91       	pop	r30
    3316:	bf 91       	pop	r27
    3318:	af 91       	pop	r26
    331a:	9f 91       	pop	r25
    331c:	8f 91       	pop	r24
    331e:	7f 91       	pop	r23
    3320:	6f 91       	pop	r22
    3322:	5f 91       	pop	r21
    3324:	4f 91       	pop	r20
    3326:	3f 91       	pop	r19
    3328:	2f 91       	pop	r18
    332a:	0f 90       	pop	r0
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	0f 90       	pop	r0
    3330:	1f 90       	pop	r1
    3332:	18 95       	reti

00003334 <ResetDiscrepancy>:
}

void ResetDiscrepancy()
{
   // reset the search state
   LastDiscrepancy = 0;
    3334:	10 92 8c 03 	sts	0x038C, r1
   LastDeviceFlag = FALSE;
    3338:	10 92 8a 03 	sts	0x038A, r1
   LastFamilyDiscrepancy = 0;
    333c:	10 92 89 03 	sts	0x0389, r1
    3340:	08 95       	ret

00003342 <OWReset>:
{

        uint8_t r;
        uint8_t retries = 125;

        NOINTERRUPT();
    3342:	f8 94       	cli
		OW_DIR_IN();
    3344:	e0 91 93 03 	lds	r30, 0x0393
    3348:	f0 91 94 03 	lds	r31, 0x0394
    334c:	90 81       	ld	r25, Z
    334e:	80 91 8f 03 	lds	r24, 0x038F
    3352:	80 95       	com	r24
    3354:	89 23       	and	r24, r25
    3356:	80 83       	st	Z, r24
        DOINTERRUPT();
    3358:	78 94       	sei
    335a:	8c e7       	ldi	r24, 0x7C	; 124
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <OWReset+0x22>
    335e:	81 50       	subi	r24, 0x01	; 1
        // wait until the wire is high... just in case
        do {
                if (--retries == 0) return 0;
    3360:	09 f4       	brne	.+2      	; 0x3364 <OWReset+0x22>
    3362:	49 c0       	rjmp	.+146    	; 0x33f6 <OWReset+0xb4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3364:	95 e0       	ldi	r25, 0x05	; 5
    3366:	9a 95       	dec	r25
    3368:	f1 f7       	brne	.-4      	; 0x3366 <OWReset+0x24>
    336a:	00 00       	nop
					_delay_us(2);
                //delayMicroseconds(2);
		} while ( !OW_GET_IN());
    336c:	e0 91 90 03 	lds	r30, 0x0390
    3370:	f0 91 91 03 	lds	r31, 0x0391
    3374:	20 81       	ld	r18, Z
    3376:	90 91 8f 03 	lds	r25, 0x038F
    337a:	92 23       	and	r25, r18
    337c:	81 f3       	breq	.-32     	; 0x335e <OWReset+0x1c>

        NOINTERRUPT();
    337e:	f8 94       	cli
		OW_OUT_LOW();
    3380:	e0 91 8d 03 	lds	r30, 0x038D
    3384:	f0 91 8e 03 	lds	r31, 0x038E
    3388:	90 81       	ld	r25, Z
    338a:	80 91 8f 03 	lds	r24, 0x038F
    338e:	80 95       	com	r24
    3390:	89 23       	and	r24, r25
    3392:	80 83       	st	Z, r24
		OW_DIR_OUT();
    3394:	e0 91 93 03 	lds	r30, 0x0393
    3398:	f0 91 94 03 	lds	r31, 0x0394
    339c:	90 81       	ld	r25, Z
    339e:	80 91 8f 03 	lds	r24, 0x038F
    33a2:	89 2b       	or	r24, r25
    33a4:	80 83       	st	Z, r24
        DOINTERRUPT();
    33a6:	78 94       	sei
    33a8:	ef eb       	ldi	r30, 0xBF	; 191
    33aa:	f3 e0       	ldi	r31, 0x03	; 3
    33ac:	31 97       	sbiw	r30, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <OWReset+0x6a>
    33b0:	00 c0       	rjmp	.+0      	; 0x33b2 <OWReset+0x70>
    33b2:	00 00       	nop
		_delay_us(480);
        NOINTERRUPT();
    33b4:	f8 94       	cli
		OW_DIR_IN();
    33b6:	e0 91 93 03 	lds	r30, 0x0393
    33ba:	f0 91 94 03 	lds	r31, 0x0394
    33be:	90 81       	ld	r25, Z
    33c0:	80 91 8f 03 	lds	r24, 0x038F
    33c4:	80 95       	com	r24
    33c6:	89 23       	and	r24, r25
    33c8:	80 83       	st	Z, r24
    33ca:	fa eb       	ldi	r31, 0xBA	; 186
    33cc:	fa 95       	dec	r31
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <OWReset+0x8a>
    33d0:	00 c0       	rjmp	.+0      	; 0x33d2 <OWReset+0x90>
		_delay_us(70);
		r = !OW_GET_IN();
    33d2:	e0 91 90 03 	lds	r30, 0x0390
    33d6:	f0 91 91 03 	lds	r31, 0x0391
    33da:	90 81       	ld	r25, Z
    33dc:	80 91 8f 03 	lds	r24, 0x038F
    33e0:	98 23       	and	r25, r24
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	09 f0       	breq	.+2      	; 0x33e8 <OWReset+0xa6>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
        DOINTERRUPT();
    33e8:	78 94       	sei
    33ea:	e3 e3       	ldi	r30, 0x33	; 51
    33ec:	f3 e0       	ldi	r31, 0x03	; 3
    33ee:	31 97       	sbiw	r30, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <OWReset+0xac>
    33f2:	00 c0       	rjmp	.+0      	; 0x33f4 <OWReset+0xb2>
    33f4:	00 00       	nop
		_delay_us(410);
        return r;
//
}
    33f6:	08 95       	ret

000033f8 <OWWriteBit>:
//
void OWWriteBit(unsigned char v)
{
   // platform specific

        NOINTERRUPT();
    33f8:	f8 94       	cli

		OW_OUT_LOW();
    33fa:	e0 91 8d 03 	lds	r30, 0x038D
    33fe:	f0 91 8e 03 	lds	r31, 0x038E
    3402:	20 81       	ld	r18, Z
    3404:	90 91 8f 03 	lds	r25, 0x038F
    3408:	90 95       	com	r25
    340a:	92 23       	and	r25, r18
    340c:	90 83       	st	Z, r25
		OW_DIR_OUT();
    340e:	e0 91 93 03 	lds	r30, 0x0393
    3412:	f0 91 94 03 	lds	r31, 0x0394
    3416:	20 81       	ld	r18, Z
    3418:	90 91 8f 03 	lds	r25, 0x038F
    341c:	92 2b       	or	r25, r18
    341e:	90 83       	st	Z, r25

	if (v & 1) {
    3420:	80 ff       	sbrs	r24, 0
    3422:	13 c0       	rjmp	.+38     	; 0x344a <OWWriteBit+0x52>
    3424:	8a e1       	ldi	r24, 0x1A	; 26
    3426:	8a 95       	dec	r24
    3428:	f1 f7       	brne	.-4      	; 0x3426 <OWWriteBit+0x2e>
    342a:	00 c0       	rjmp	.+0      	; 0x342c <OWWriteBit+0x34>
		_delay_us(10);
		OW_OUT_HIGH();
    342c:	e0 91 8d 03 	lds	r30, 0x038D
    3430:	f0 91 8e 03 	lds	r31, 0x038E
    3434:	90 81       	ld	r25, Z
    3436:	80 91 8f 03 	lds	r24, 0x038F
    343a:	89 2b       	or	r24, r25
    343c:	80 83       	st	Z, r24
        DOINTERRUPT();
    343e:	78 94       	sei
    3440:	82 e9       	ldi	r24, 0x92	; 146
    3442:	8a 95       	dec	r24
    3444:	f1 f7       	brne	.-4      	; 0x3442 <OWWriteBit+0x4a>
    3446:	00 c0       	rjmp	.+0      	; 0x3448 <OWWriteBit+0x50>
    3448:	08 95       	ret
    344a:	8d ea       	ldi	r24, 0xAD	; 173
    344c:	8a 95       	dec	r24
    344e:	f1 f7       	brne	.-4      	; 0x344c <OWWriteBit+0x54>
    3450:	00 00       	nop
		_delay_us(55);
	} else {
		_delay_us(65);
		OW_OUT_HIGH();
    3452:	e0 91 8d 03 	lds	r30, 0x038D
    3456:	f0 91 8e 03 	lds	r31, 0x038E
    345a:	90 81       	ld	r25, Z
    345c:	80 91 8f 03 	lds	r24, 0x038F
    3460:	89 2b       	or	r24, r25
    3462:	80 83       	st	Z, r24
        DOINTERRUPT();
    3464:	78 94       	sei
    3466:	8d e0       	ldi	r24, 0x0D	; 13
    3468:	8a 95       	dec	r24
    346a:	f1 f7       	brne	.-4      	; 0x3468 <OWWriteBit+0x70>
    346c:	00 00       	nop
    346e:	08 95       	ret

00003470 <OWWriteByte>:

//--------------------------------------------------------------------------
// Send 8 bits of data to the 1-Wire bus
//
void OWWriteByte(unsigned char v)
{
    3470:	ef 92       	push	r14
    3472:	ff 92       	push	r15
    3474:	0f 93       	push	r16
    3476:	1f 93       	push	r17
    3478:	cf 93       	push	r28
    347a:	df 93       	push	r29
    347c:	f8 2e       	mov	r15, r24
    347e:	c8 e0       	ldi	r28, 0x08	; 8
    3480:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
	
	power = 1;


    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    3482:	11 e0       	ldi	r17, 0x01	; 1
        OWWriteBit( (bitMask & v)?1:0);
    3484:	01 e0       	ldi	r16, 0x01	; 1
    3486:	e1 2c       	mov	r14, r1
    3488:	80 2f       	mov	r24, r16
    348a:	91 2f       	mov	r25, r17
    348c:	9f 21       	and	r25, r15
    348e:	09 f4       	brne	.+2      	; 0x3492 <OWWriteByte+0x22>
    3490:	8e 2d       	mov	r24, r14
    3492:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <OWWriteBit>
    uint8_t bitMask;
	
	power = 1;


    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    3496:	11 0f       	add	r17, r17
    3498:	21 97       	sbiw	r28, 0x01	; 1
    349a:	20 97       	sbiw	r28, 0x00	; 0
    349c:	a9 f7       	brne	.-22     	; 0x3488 <OWWriteByte+0x18>
		OW_DIR_IN();
		OW_OUT_LOW();	//Tri-state (Hi-Z)
        DOINTERRUPT();
    }

}
    349e:	df 91       	pop	r29
    34a0:	cf 91       	pop	r28
    34a2:	1f 91       	pop	r17
    34a4:	0f 91       	pop	r16
    34a6:	ff 90       	pop	r15
    34a8:	ef 90       	pop	r14
    34aa:	08 95       	ret

000034ac <OWReadBit>:
{
//	unsigned char pin_state;
   // platform specific

 uint8_t r;
        NOINTERRUPT();
    34ac:	f8 94       	cli
        OW_OUT_LOW();
    34ae:	e0 91 8d 03 	lds	r30, 0x038D
    34b2:	f0 91 8e 03 	lds	r31, 0x038E
    34b6:	90 81       	ld	r25, Z
    34b8:	80 91 8f 03 	lds	r24, 0x038F
    34bc:	80 95       	com	r24
    34be:	89 23       	and	r24, r25
    34c0:	80 83       	st	Z, r24
		OW_DIR_OUT();
    34c2:	e0 91 93 03 	lds	r30, 0x0393
    34c6:	f0 91 94 03 	lds	r31, 0x0394
    34ca:	90 81       	ld	r25, Z
    34cc:	80 91 8f 03 	lds	r24, 0x038F
    34d0:	89 2b       	or	r24, r25
    34d2:	80 83       	st	Z, r24
    34d4:	85 e0       	ldi	r24, 0x05	; 5
    34d6:	8a 95       	dec	r24
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <OWReadBit+0x2a>
    34da:	00 00       	nop
		_delay_us(2);
		OW_DIR_IN();  // let pin float, pull up will raise
    34dc:	e0 91 93 03 	lds	r30, 0x0393
    34e0:	f0 91 94 03 	lds	r31, 0x0394
    34e4:	90 81       	ld	r25, Z
    34e6:	80 91 8f 03 	lds	r24, 0x038F
    34ea:	80 95       	com	r24
    34ec:	89 23       	and	r24, r25
    34ee:	80 83       	st	Z, r24
    34f0:	8a e1       	ldi	r24, 0x1A	; 26
    34f2:	8a 95       	dec	r24
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <OWReadBit+0x46>
    34f6:	00 c0       	rjmp	.+0      	; 0x34f8 <OWReadBit+0x4c>
		_delay_us(10);
		r = OW_GET_IN_SHIFT();
    34f8:	e0 91 90 03 	lds	r30, 0x0390
    34fc:	f0 91 91 03 	lds	r31, 0x0391
    3500:	20 81       	ld	r18, Z
    3502:	90 91 8f 03 	lds	r25, 0x038F
		DOINTERRUPT();
    3506:	78 94       	sei
    3508:	8d e8       	ldi	r24, 0x8D	; 141
    350a:	8a 95       	dec	r24
    350c:	f1 f7       	brne	.-4      	; 0x350a <OWReadBit+0x5e>
    350e:	00 00       	nop
        OW_OUT_LOW();
		OW_DIR_OUT();
		_delay_us(2);
		OW_DIR_IN();  // let pin float, pull up will raise
		_delay_us(10);
		r = OW_GET_IN_SHIFT();
    3510:	29 23       	and	r18, r25
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	92 13       	cpse	r25, r18
    3516:	80 e0       	ldi	r24, 0x00	; 0
		DOINTERRUPT();
		_delay_us(53);
        return r;
//

}
    3518:	08 95       	ret

0000351a <OWMatchRom>:
//
void OWMatchRom(unsigned char * romValue)
{
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	8c 01       	movw	r16, r24
    unsigned char bytesLeft = 8;

    // Send the MATCH ROM command.
    OWWriteByte(DS18X20_MATCH_ROM);
    3524:	85 e5       	ldi	r24, 0x55	; 85
    3526:	0e 94 38 1a 	call	0x3470	; 0x3470 <OWWriteByte>
    352a:	e8 01       	movw	r28, r16
    352c:	08 5f       	subi	r16, 0xF8	; 248
    352e:	1f 4f       	sbci	r17, 0xFF	; 255

    // Do once for each byte.
    while (bytesLeft > 0)
    {
        // Transmit 1 byte of the ID to match.
    	OWWriteByte(*romValue++);
    3530:	89 91       	ld	r24, Y+
    3532:	0e 94 38 1a 	call	0x3470	; 0x3470 <OWWriteByte>

    // Send the MATCH ROM command.
    OWWriteByte(DS18X20_MATCH_ROM);

    // Do once for each byte.
    while (bytesLeft > 0)
    3536:	c0 17       	cp	r28, r16
    3538:	d1 07       	cpc	r29, r17
    353a:	d1 f7       	brne	.-12     	; 0x3530 <OWMatchRom+0x16>
    {
        // Transmit 1 byte of the ID to match.
    	OWWriteByte(*romValue++);
        bytesLeft--;
    }
}
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	08 95       	ret

00003546 <docrc8>:
// global 'crc8' value. 
// Returns current global crc8 value
//
unsigned char docrc8(unsigned char value)
{
   crc8m = dscrc_table[crc8m ^ value];
    3546:	e0 91 8b 03 	lds	r30, 0x038B
    354a:	8e 27       	eor	r24, r30
    354c:	e8 2f       	mov	r30, r24
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	e7 5b       	subi	r30, 0xB7	; 183
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
    3554:	80 81       	ld	r24, Z
    3556:	80 93 8b 03 	sts	0x038B, r24
   return crc8m;
}
    355a:	08 95       	ret

0000355c <OWSearch>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OWSearch()
{
    355c:	df 92       	push	r13
    355e:	ef 92       	push	r14
    3560:	ff 92       	push	r15
    3562:	0f 93       	push	r16
    3564:	1f 93       	push	r17
    3566:	cf 93       	push	r28
    3568:	df 93       	push	r29
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;
   crc8m = 0;
    356a:	10 92 8b 03 	sts	0x038B, r1

   // if the last call was not the last one
   if (!LastDeviceFlag)
    356e:	80 91 8a 03 	lds	r24, 0x038A
    3572:	81 11       	cpse	r24, r1
    3574:	6e c0       	rjmp	.+220    	; 0x3652 <OWSearch+0xf6>
   {
      // 1-Wire reset
      if (!OWReset())
    3576:	0e 94 a1 19 	call	0x3342	; 0x3342 <OWReset>
    357a:	81 11       	cpse	r24, r1
    357c:	07 c0       	rjmp	.+14     	; 0x358c <OWSearch+0x30>
      {
         // reset the search
         LastDiscrepancy = 0;
    357e:	10 92 8c 03 	sts	0x038C, r1
         LastDeviceFlag = FALSE;
    3582:	10 92 8a 03 	sts	0x038A, r1
         LastFamilyDiscrepancy = 0;
    3586:	10 92 89 03 	sts	0x0389, r1
         return FALSE;
    358a:	72 c0       	rjmp	.+228    	; 0x3670 <OWSearch+0x114>
      }

      // issue the search command 
      OWWriteByte(0xF0);  
    358c:	80 ef       	ldi	r24, 0xF0	; 240
    358e:	0e 94 38 1a 	call	0x3470	; 0x3470 <OWWriteByte>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
    3592:	ee 24       	eor	r14, r14
    3594:	e3 94       	inc	r14
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
    3596:	c0 e0       	ldi	r28, 0x00	; 0
   uint8_t id_bit, cmp_id_bit;
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
    3598:	f1 2c       	mov	r15, r1
   uint8_t last_zero, rom_byte_number, search_result;
   uint8_t id_bit, cmp_id_bit;
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    359a:	d1 e0       	ldi	r29, 0x01	; 1
    359c:	11 e0       	ldi	r17, 0x01	; 1
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    359e:	d1 2c       	mov	r13, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = OWReadBit();
    35a0:	0e 94 56 1a 	call	0x34ac	; 0x34ac <OWReadBit>
    35a4:	08 2f       	mov	r16, r24
         cmp_id_bit = OWReadBit();
    35a6:	0e 94 56 1a 	call	0x34ac	; 0x34ac <OWReadBit>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    35aa:	01 30       	cpi	r16, 0x01	; 1
    35ac:	19 f4       	brne	.+6      	; 0x35b4 <OWSearch+0x58>
    35ae:	81 30       	cpi	r24, 0x01	; 1
    35b0:	f1 f4       	brne	.+60     	; 0x35ee <OWSearch+0x92>
    35b2:	41 c0       	rjmp	.+130    	; 0x3636 <OWSearch+0xda>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    35b4:	08 13       	cpse	r16, r24
    35b6:	24 c0       	rjmp	.+72     	; 0x3600 <OWSearch+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    35b8:	80 91 8c 03 	lds	r24, 0x038C
    35bc:	d8 17       	cp	r29, r24
    35be:	50 f4       	brcc	.+20     	; 0x35d4 <OWSearch+0x78>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    35c0:	ec 2f       	mov	r30, r28
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	ef 57       	subi	r30, 0x7F	; 127
    35c6:	fc 4f       	sbci	r31, 0xFC	; 252
    35c8:	80 81       	ld	r24, Z
    35ca:	8e 21       	and	r24, r14
    35cc:	01 2f       	mov	r16, r17
    35ce:	29 f4       	brne	.+10     	; 0x35da <OWSearch+0x7e>
    35d0:	0d 2d       	mov	r16, r13
    35d2:	03 c0       	rjmp	.+6      	; 0x35da <OWSearch+0x7e>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    35d4:	01 2f       	mov	r16, r17
    35d6:	d8 13       	cpse	r29, r24
    35d8:	0d 2d       	mov	r16, r13

               // if 0 was picked then record its position in LastZero
               if (search_direction == 0)
    35da:	01 11       	cpse	r16, r1
    35dc:	06 c0       	rjmp	.+12     	; 0x35ea <OWSearch+0x8e>
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    35de:	d9 30       	cpi	r29, 0x09	; 9
    35e0:	08 f0       	brcs	.+2      	; 0x35e4 <OWSearch+0x88>
    35e2:	3f c0       	rjmp	.+126    	; 0x3662 <OWSearch+0x106>
                     LastFamilyDiscrepancy = last_zero;
    35e4:	d0 93 89 03 	sts	0x0389, r29
    35e8:	3c c0       	rjmp	.+120    	; 0x3662 <OWSearch+0x106>
               }
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
    35ea:	01 30       	cpi	r16, 0x01	; 1
    35ec:	49 f4       	brne	.+18     	; 0x3600 <OWSearch+0xa4>
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    35ee:	ec 2f       	mov	r30, r28
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	ef 57       	subi	r30, 0x7F	; 127
    35f4:	fc 4f       	sbci	r31, 0xFC	; 252
    35f6:	80 81       	ld	r24, Z
    35f8:	8e 29       	or	r24, r14
    35fa:	80 83       	st	Z, r24
    35fc:	01 2f       	mov	r16, r17
    35fe:	09 c0       	rjmp	.+18     	; 0x3612 <OWSearch+0xb6>
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    3600:	ec 2f       	mov	r30, r28
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	ef 57       	subi	r30, 0x7F	; 127
    3606:	fc 4f       	sbci	r31, 0xFC	; 252
    3608:	90 81       	ld	r25, Z
    360a:	8e 2d       	mov	r24, r14
    360c:	80 95       	com	r24
    360e:	89 23       	and	r24, r25
    3610:	80 83       	st	Z, r24

            // serial number search direction write bit
            OWWriteBit(search_direction);
    3612:	80 2f       	mov	r24, r16
    3614:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <OWWriteBit>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    3618:	df 5f       	subi	r29, 0xFF	; 255
            rom_byte_mask <<= 1;
    361a:	ee 0c       	add	r14, r14

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    361c:	49 f4       	brne	.+18     	; 0x3630 <OWSearch+0xd4>
            {
                docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
    361e:	ec 2f       	mov	r30, r28
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	ef 57       	subi	r30, 0x7F	; 127
    3624:	fc 4f       	sbci	r31, 0xFC	; 252
    3626:	80 81       	ld	r24, Z
    3628:	0e 94 a3 1a 	call	0x3546	; 0x3546 <docrc8>
                rom_byte_number++;
    362c:	cf 5f       	subi	r28, 0xFF	; 255
                rom_byte_mask = 1;
    362e:	e1 2e       	mov	r14, r17
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    3630:	c8 30       	cpi	r28, 0x08	; 8
    3632:	08 f4       	brcc	.+2      	; 0x3636 <OWSearch+0xda>
    3634:	b5 cf       	rjmp	.-150    	; 0x35a0 <OWSearch+0x44>

      // if the search was successful then
      if (!((id_bit_number < 65) || (crc8m != 0)))
    3636:	d1 34       	cpi	r29, 0x41	; 65
    3638:	60 f0       	brcs	.+24     	; 0x3652 <OWSearch+0xf6>
    363a:	80 91 8b 03 	lds	r24, 0x038B
    363e:	81 11       	cpse	r24, r1
    3640:	08 c0       	rjmp	.+16     	; 0x3652 <OWSearch+0xf6>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    3642:	f0 92 8c 03 	sts	0x038C, r15

         // check for last device
         if (LastDiscrepancy == 0)
    3646:	f1 10       	cpse	r15, r1
    3648:	0e c0       	rjmp	.+28     	; 0x3666 <OWSearch+0x10a>
            LastDeviceFlag = TRUE;
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	80 93 8a 03 	sts	0x038A, r24
    3650:	0a c0       	rjmp	.+20     	; 0x3666 <OWSearch+0x10a>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    3652:	10 92 8c 03 	sts	0x038C, r1
      LastDeviceFlag = FALSE;
    3656:	10 92 8a 03 	sts	0x038A, r1
      LastFamilyDiscrepancy = 0;
    365a:	10 92 89 03 	sts	0x0389, r1
      search_result = FALSE;
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	07 c0       	rjmp	.+14     	; 0x3670 <OWSearch+0x114>
   uint8_t last_zero, rom_byte_number, search_result;
   uint8_t id_bit, cmp_id_bit;
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    3662:	fd 2e       	mov	r15, r29
    3664:	cd cf       	rjmp	.-102    	; 0x3600 <OWSearch+0xa4>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    3666:	80 91 81 03 	lds	r24, 0x0381
    366a:	88 23       	and	r24, r24
    366c:	91 f3       	breq	.-28     	; 0x3652 <OWSearch+0xf6>
    366e:	81 e0       	ldi	r24, 0x01	; 1
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   }

   return search_result;
}
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	df 90       	pop	r13
    367e:	08 95       	ret

00003680 <OWFirst>:
//        FALSE : no device present
//
uint8_t OWFirst()
{
   // reset the search state
   LastDiscrepancy = 0;
    3680:	10 92 8c 03 	sts	0x038C, r1
   LastDeviceFlag = FALSE;
    3684:	10 92 8a 03 	sts	0x038A, r1
   LastFamilyDiscrepancy = 0;
    3688:	10 92 89 03 	sts	0x0389, r1

   return OWSearch();
    368c:	0e 94 ae 1a 	call	0x355c	; 0x355c <OWSearch>
}
    3690:	08 95       	ret

00003692 <OWNext>:
//        FALSE : device not found, end of search
//
uint8_t OWNext()
{
   // leave the search state alone
   return OWSearch();
    3692:	0e 94 ae 1a 	call	0x355c	; 0x355c <OWSearch>
}
    3696:	08 95       	ret

00003698 <OWVerify>:
// Verify the device with the ROM number in ROM_NO buffer is present.
// Return TRUE  : device verified present
//        FALSE : device not present
//
uint8_t OWVerify()
{
    3698:	ff 92       	push	r15
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	cf 93       	push	r28
    36a0:	df 93       	push	r29
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	28 97       	sbiw	r28, 0x08	; 8
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	89 e8       	ldi	r24, 0x89	; 137
    36b4:	93 e0       	ldi	r25, 0x03	; 3
    36b6:	de 01       	movw	r26, r28
    36b8:	11 96       	adiw	r26, 0x01	; 1
    36ba:	e1 e8       	ldi	r30, 0x81	; 129
    36bc:	f3 e0       	ldi	r31, 0x03	; 3
   unsigned char rom_backup[8];
   uint8_t i,rslt,ld_backup,ldf_backup,lfd_backup;

   // keep a backup copy of the current state
   for (i = 0; i < 8; i++)
      rom_backup[i] = ROM_NO[i];
    36be:	21 91       	ld	r18, Z+
    36c0:	2d 93       	st	X+, r18
{
   unsigned char rom_backup[8];
   uint8_t i,rslt,ld_backup,ldf_backup,lfd_backup;

   // keep a backup copy of the current state
   for (i = 0; i < 8; i++)
    36c2:	e8 17       	cp	r30, r24
    36c4:	f9 07       	cpc	r31, r25
    36c6:	d9 f7       	brne	.-10     	; 0x36be <OWVerify+0x26>
      rom_backup[i] = ROM_NO[i];
   ld_backup = LastDiscrepancy;
    36c8:	f0 90 8c 03 	lds	r15, 0x038C
   ldf_backup = LastDeviceFlag;
    36cc:	00 91 8a 03 	lds	r16, 0x038A
   lfd_backup = LastFamilyDiscrepancy;
    36d0:	10 91 89 03 	lds	r17, 0x0389

   // set search to find the same device
   LastDiscrepancy = 64;
    36d4:	80 e4       	ldi	r24, 0x40	; 64
    36d6:	80 93 8c 03 	sts	0x038C, r24
   LastDeviceFlag = FALSE;
    36da:	10 92 8a 03 	sts	0x038A, r1

   if (OWSearch())
    36de:	0e 94 ae 1a 	call	0x355c	; 0x355c <OWSearch>
    36e2:	88 23       	and	r24, r24
    36e4:	99 f0       	breq	.+38     	; 0x370c <OWVerify+0x74>
   {
      // check if same device found
      rslt = TRUE;
      for (i = 0; i < 8; i++)
      {
         if (rom_backup[i] != ROM_NO[i])
    36e6:	99 81       	ldd	r25, Y+1	; 0x01
    36e8:	80 91 81 03 	lds	r24, 0x0381
    36ec:	98 13       	cpse	r25, r24
    36ee:	10 c0       	rjmp	.+32     	; 0x3710 <OWVerify+0x78>
    36f0:	fe 01       	movw	r30, r28
    36f2:	32 96       	adiw	r30, 0x02	; 2
    36f4:	a2 e8       	ldi	r26, 0x82	; 130
    36f6:	b3 e0       	ldi	r27, 0x03	; 3
    36f8:	ce 01       	movw	r24, r28
    36fa:	09 96       	adiw	r24, 0x09	; 9
    36fc:	31 91       	ld	r19, Z+
    36fe:	2d 91       	ld	r18, X+
    3700:	32 13       	cpse	r19, r18
    3702:	08 c0       	rjmp	.+16     	; 0x3714 <OWVerify+0x7c>

   if (OWSearch())
   {
      // check if same device found
      rslt = TRUE;
      for (i = 0; i < 8; i++)
    3704:	e8 17       	cp	r30, r24
    3706:	f9 07       	cpc	r31, r25
    3708:	c9 f7       	brne	.-14     	; 0x36fc <OWVerify+0x64>
    370a:	06 c0       	rjmp	.+12     	; 0x3718 <OWVerify+0x80>
            break;
         }
      }
   }
   else
     rslt = FALSE;
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	05 c0       	rjmp	.+10     	; 0x371a <OWVerify+0x82>
      rslt = TRUE;
      for (i = 0; i < 8; i++)
      {
         if (rom_backup[i] != ROM_NO[i])
         {
            rslt = FALSE;
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	03 c0       	rjmp	.+6      	; 0x371a <OWVerify+0x82>
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	01 c0       	rjmp	.+2      	; 0x371a <OWVerify+0x82>
   LastDeviceFlag = FALSE;

   if (OWSearch())
   {
      // check if same device found
      rslt = TRUE;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	9e 01       	movw	r18, r28
    371c:	27 5f       	subi	r18, 0xF7	; 247
    371e:	3f 4f       	sbci	r19, 0xFF	; 255
      for (i = 0; i < 8; i++)
      {
         if (rom_backup[i] != ROM_NO[i])
         {
            rslt = FALSE;
    3720:	a1 e8       	ldi	r26, 0x81	; 129
    3722:	b3 e0       	ldi	r27, 0x03	; 3
    3724:	fe 01       	movw	r30, r28
    3726:	31 96       	adiw	r30, 0x01	; 1
   else
     rslt = FALSE;

   // restore the search state 
   for (i = 0; i < 8; i++)
      ROM_NO[i] = rom_backup[i];
    3728:	91 91       	ld	r25, Z+
    372a:	9d 93       	st	X+, r25
   }
   else
     rslt = FALSE;

   // restore the search state 
   for (i = 0; i < 8; i++)
    372c:	e2 17       	cp	r30, r18
    372e:	f3 07       	cpc	r31, r19
    3730:	d9 f7       	brne	.-10     	; 0x3728 <OWVerify+0x90>
      ROM_NO[i] = rom_backup[i];
   LastDiscrepancy = ld_backup;
    3732:	f0 92 8c 03 	sts	0x038C, r15
   LastDeviceFlag = ldf_backup;
    3736:	00 93 8a 03 	sts	0x038A, r16
   LastFamilyDiscrepancy = lfd_backup;
    373a:	10 93 89 03 	sts	0x0389, r17

   // return the result of the verify
   return rslt;
}
    373e:	28 96       	adiw	r28, 0x08	; 8
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	df 91       	pop	r29
    374c:	cf 91       	pop	r28
    374e:	1f 91       	pop	r17
    3750:	0f 91       	pop	r16
    3752:	ff 90       	pop	r15
    3754:	08 95       	ret

00003756 <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
    3756:	50 93 94 03 	sts	0x0394, r21
    375a:	40 93 93 03 	sts	0x0393, r20
	OW_OUT=out;
    375e:	70 93 8e 03 	sts	0x038E, r23
    3762:	60 93 8d 03 	sts	0x038D, r22
	OW_IN=in;
    3766:	90 93 91 03 	sts	0x0391, r25
    376a:	80 93 90 03 	sts	0x0390, r24
	OW_PIN_MASK = (1 << pin);
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	02 2e       	mov	r0, r18
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <ow_set_bus+0x20>
    3774:	88 0f       	add	r24, r24
    3776:	0a 94       	dec	r0
    3778:	ea f7       	brpl	.-6      	; 0x3774 <ow_set_bus+0x1e>
    377a:	80 93 8f 03 	sts	0x038F, r24
	OW_PIN = pin;
    377e:	20 93 92 03 	sts	0x0392, r18
    3782:	08 95       	ret

00003784 <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
    3784:	e0 91 90 03 	lds	r30, 0x0390
    3788:	f0 91 91 03 	lds	r31, 0x0391
    378c:	90 81       	ld	r25, Z
    378e:	80 91 8f 03 	lds	r24, 0x038F
}
    3792:	89 23       	and	r24, r25
    3794:	08 95       	ret

00003796 <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
    3796:	e0 91 8d 03 	lds	r30, 0x038D
    379a:	f0 91 8e 03 	lds	r31, 0x038E
    379e:	90 81       	ld	r25, Z
    37a0:	80 91 8f 03 	lds	r24, 0x038F
    37a4:	89 2b       	or	r24, r25
    37a6:	80 83       	st	Z, r24
	OW_DIR_OUT();
    37a8:	e0 91 93 03 	lds	r30, 0x0393
    37ac:	f0 91 94 03 	lds	r31, 0x0394
    37b0:	90 81       	ld	r25, Z
    37b2:	80 91 8f 03 	lds	r24, 0x038F
    37b6:	89 2b       	or	r24, r25
    37b8:	80 83       	st	Z, r24
    37ba:	08 95       	ret

000037bc <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
    37c0:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    37c2:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    37c4:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
    37c6:	e0 91 8d 03 	lds	r30, 0x038D
    37ca:	f0 91 8e 03 	lds	r31, 0x038E
    37ce:	90 81       	ld	r25, Z
    37d0:	80 91 8f 03 	lds	r24, 0x038F
    37d4:	80 95       	com	r24
    37d6:	89 23       	and	r24, r25
    37d8:	80 83       	st	Z, r24
#endif
		OW_DIR_OUT();    // drive bus low
    37da:	e0 91 93 03 	lds	r30, 0x0393
    37de:	f0 91 94 03 	lds	r31, 0x0394
    37e2:	90 81       	ld	r25, Z
    37e4:	80 91 8f 03 	lds	r24, 0x038F
    37e8:	89 2b       	or	r24, r25
    37ea:	80 83       	st	Z, r24
    37ec:	85 e0       	ldi	r24, 0x05	; 5
    37ee:	8a 95       	dec	r24
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <ow_bit_io_intern+0x32>
    37f2:	00 00       	nop
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
    37f4:	cc 23       	and	r28, r28
    37f6:	99 f0       	breq	.+38     	; 0x381e <ow_bit_io_intern+0x62>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
    37f8:	e0 91 93 03 	lds	r30, 0x0393
    37fc:	f0 91 94 03 	lds	r31, 0x0394
    3800:	90 81       	ld	r25, Z
    3802:	80 91 8f 03 	lds	r24, 0x038F
    3806:	80 95       	com	r24
    3808:	89 23       	and	r24, r25
    380a:	80 83       	st	Z, r24
#if OW_USE_INTERNAL_PULLUP
			OW_OUT_HIGH();
    380c:	e0 91 8d 03 	lds	r30, 0x038D
    3810:	f0 91 8e 03 	lds	r31, 0x038E
    3814:	90 81       	ld	r25, Z
    3816:	80 91 8f 03 	lds	r24, 0x038F
    381a:	89 2b       	or	r24, r25
    381c:	80 83       	st	Z, r24
    381e:	80 e2       	ldi	r24, 0x20	; 32
    3820:	8a 95       	dec	r24
    3822:	f1 f7       	brne	.-4      	; 0x3820 <ow_bit_io_intern+0x64>
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
    3824:	e0 91 90 03 	lds	r30, 0x0390
    3828:	f0 91 91 03 	lds	r31, 0x0391
    382c:	90 81       	ld	r25, Z
    382e:	80 91 8f 03 	lds	r24, 0x038F
    3832:	89 23       	and	r24, r25
    3834:	09 f4       	brne	.+2      	; 0x3838 <ow_bit_io_intern+0x7c>
			b = 0;  // sample at end of read-timeslot
    3836:	c0 e0       	ldi	r28, 0x00	; 0
    3838:	85 e7       	ldi	r24, 0x75	; 117
    383a:	8a 95       	dec	r24
    383c:	f1 f7       	brne	.-4      	; 0x383a <ow_bit_io_intern+0x7e>
    383e:	00 00       	nop
		}
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
    3840:	e0 91 8d 03 	lds	r30, 0x038D
    3844:	f0 91 8e 03 	lds	r31, 0x038E
    3848:	90 81       	ld	r25, Z
    384a:	80 91 8f 03 	lds	r24, 0x038F
    384e:	89 2b       	or	r24, r25
    3850:	80 83       	st	Z, r24
#endif
		OW_DIR_IN();
    3852:	e0 91 93 03 	lds	r30, 0x0393
    3856:	f0 91 94 03 	lds	r31, 0x0394
    385a:	20 81       	ld	r18, Z
    385c:	90 91 8f 03 	lds	r25, 0x038F
    3860:	90 95       	com	r25
    3862:	92 23       	and	r25, r18
    3864:	90 83       	st	Z, r25
	
		if ( with_parasite_enable ) {
    3866:	61 11       	cpse	r22, r1
			ow_parasite_enable();
    3868:	0e 94 cb 1b 	call	0x3796	; 0x3796 <ow_parasite_enable>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    386c:	df bf       	out	0x3f, r29	; 63
    386e:	8a e1       	ldi	r24, 0x1A	; 26
    3870:	8a 95       	dec	r24
    3872:	f1 f7       	brne	.-4      	; 0x3870 <ow_bit_io_intern+0xb4>
    3874:	00 c0       	rjmp	.+0      	; 0x3876 <ow_bit_io_intern+0xba>
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
    3876:	8c 2f       	mov	r24, r28
    3878:	df 91       	pop	r29
    387a:	cf 91       	pop	r28
    387c:	08 95       	ret

0000387e <ow_parasite_disable>:
	OW_DIR_OUT();
}

void ow_parasite_disable(void)
{
	OW_DIR_IN();
    387e:	e0 91 93 03 	lds	r30, 0x0393
    3882:	f0 91 94 03 	lds	r31, 0x0394
    3886:	90 81       	ld	r25, Z
    3888:	80 91 8f 03 	lds	r24, 0x038F
    388c:	80 95       	com	r24
    388e:	89 23       	and	r24, r25
    3890:	80 83       	st	Z, r24
    3892:	08 95       	ret

00003894 <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
    3894:	60 e0       	ldi	r22, 0x00	; 0
    3896:	81 70       	andi	r24, 0x01	; 1
    3898:	0e 94 de 1b 	call	0x37bc	; 0x37bc <ow_bit_io_intern>
}
    389c:	08 95       	ret

0000389e <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	c8 2f       	mov	r28, r24
    38a4:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
    38a6:	8c 2f       	mov	r24, r28
    38a8:	81 70       	andi	r24, 0x01	; 1
    38aa:	0e 94 4a 1c 	call	0x3894	; 0x3894 <ow_bit_io>
		b >>= 1;
    38ae:	c6 95       	lsr	r28
		if( j ) {
    38b0:	81 11       	cpse	r24, r1
			b |= 0x80;
    38b2:	c0 68       	ori	r28, 0x80	; 128
    38b4:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
    38b6:	b9 f7       	brne	.-18     	; 0x38a6 <ow_byte_wr+0x8>
	
	return b;
}
    38b8:	8c 2f       	mov	r24, r28
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

000038c0 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
    38c6:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
    38c8:	d1 30       	cpi	r29, 0x01	; 1
    38ca:	31 f0       	breq	.+12     	; 0x38d8 <ow_byte_wr_with_parasite_enable+0x18>
			j = ow_bit_io_intern( b & 1, 0 );
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	8c 2f       	mov	r24, r28
    38d0:	81 70       	andi	r24, 0x01	; 1
    38d2:	0e 94 de 1b 	call	0x37bc	; 0x37bc <ow_bit_io_intern>
    38d6:	05 c0       	rjmp	.+10     	; 0x38e2 <ow_byte_wr_with_parasite_enable+0x22>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
    38d8:	61 e0       	ldi	r22, 0x01	; 1
    38da:	8c 2f       	mov	r24, r28
    38dc:	81 70       	andi	r24, 0x01	; 1
    38de:	0e 94 de 1b 	call	0x37bc	; 0x37bc <ow_bit_io_intern>
		}
		b >>= 1;
    38e2:	c6 95       	lsr	r28
		if( j ) {
    38e4:	81 11       	cpse	r24, r1
			b |= 0x80;
    38e6:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
    38e8:	d1 50       	subi	r29, 0x01	; 1
    38ea:	71 f7       	brne	.-36     	; 0x38c8 <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
    38ec:	8c 2f       	mov	r24, r28
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	08 95       	ret

000038f4 <ow_command_intern>:
	return next_diff;                   // to continue search
}
#endif

static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
    38f4:	ef 92       	push	r14
    38f6:	ff 92       	push	r15
    38f8:	0f 93       	push	r16
    38fa:	1f 93       	push	r17
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	e8 2e       	mov	r14, r24
    3902:	eb 01       	movw	r28, r22
    3904:	f4 2e       	mov	r15, r20
	uint8_t i;

#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    3906:	0e 94 a1 19 	call	0x3342	; 0x3342 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();

	if( id ) {
    390a:	20 97       	sbiw	r28, 0x00	; 0
    390c:	69 f0       	breq	.+26     	; 0x3928 <ow_command_intern+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
    390e:	85 e5       	ldi	r24, 0x55	; 85
    3910:	0e 94 4f 1c 	call	0x389e	; 0x389e <ow_byte_wr>
    3914:	8e 01       	movw	r16, r28
    3916:	08 5f       	subi	r16, 0xF8	; 248
    3918:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
    391a:	89 91       	ld	r24, Y+
    391c:	0e 94 4f 1c 	call	0x389e	; 0x389e <ow_byte_wr>
			id++;
		} while( --i );
    3920:	c0 17       	cp	r28, r16
    3922:	d1 07       	cpc	r29, r17
    3924:	d1 f7       	brne	.-12     	; 0x391a <ow_command_intern+0x26>
    3926:	03 c0       	rjmp	.+6      	; 0x392e <ow_command_intern+0x3a>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
    3928:	8c ec       	ldi	r24, 0xCC	; 204
    392a:	0e 94 4f 1c 	call	0x389e	; 0x389e <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
    392e:	ff 20       	and	r15, r15
    3930:	21 f0       	breq	.+8      	; 0x393a <ow_command_intern+0x46>
		ow_byte_wr_with_parasite_enable( command );
    3932:	8e 2d       	mov	r24, r14
    3934:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <ow_byte_wr_with_parasite_enable>
    3938:	03 c0       	rjmp	.+6      	; 0x3940 <ow_command_intern+0x4c>
	} else {
		ow_byte_wr( command );
    393a:	8e 2d       	mov	r24, r14
    393c:	0e 94 4f 1c 	call	0x389e	; 0x389e <ow_byte_wr>
	}
}
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	ff 90       	pop	r15
    394a:	ef 90       	pop	r14
    394c:	08 95       	ret

0000394e <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
    394e:	8f ef       	ldi	r24, 0xFF	; 255
    3950:	0e 94 4f 1c 	call	0x389e	; 0x389e <ow_byte_wr>
}
    3954:	08 95       	ret

00003956 <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
    3956:	40 e0       	ldi	r20, 0x00	; 0
    3958:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <ow_command_intern>
    395c:	08 95       	ret

0000395e <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <ow_command_intern>
    3964:	08 95       	ret

00003966 <LCD_send_bit>:
extern byte LCDCache [Cache_Size];


void LCD_send_bit(uint8_t data)
{
	if (data)
    3966:	88 23       	and	r24, r24
    3968:	11 f0       	breq	.+4      	; 0x396e <LCD_send_bit+0x8>
	{
		sbi(LCD_PORT, LCD_PINSDA);
    396a:	2b 9a       	sbi	0x05, 3	; 5
    396c:	01 c0       	rjmp	.+2      	; 0x3970 <LCD_send_bit+0xa>
	}
	else cbi(LCD_PORT, LCD_PINSDA);
    396e:	2b 98       	cbi	0x05, 3	; 5
    3970:	8a e6       	ldi	r24, 0x6A	; 106
    3972:	8a 95       	dec	r24
    3974:	f1 f7       	brne	.-4      	; 0x3972 <LCD_send_bit+0xc>
    3976:	00 c0       	rjmp	.+0      	; 0x3978 <LCD_send_bit+0x12>
	_delay_us(40);
	sbi(LCD_PORT, LCD_PINCLC);
    3978:	2d 9a       	sbi	0x05, 5	; 5
    397a:	85 e3       	ldi	r24, 0x35	; 53
    397c:	8a 95       	dec	r24
    397e:	f1 f7       	brne	.-4      	; 0x397c <LCD_send_bit+0x16>
    3980:	00 00       	nop
	_delay_us(20);
	cbi(LCD_PORT, LCD_PINCLC);
    3982:	2d 98       	cbi	0x05, 5	; 5
    3984:	8a e6       	ldi	r24, 0x6A	; 106
    3986:	8a 95       	dec	r24
    3988:	f1 f7       	brne	.-4      	; 0x3986 <LCD_send_bit+0x20>
    398a:	00 c0       	rjmp	.+0      	; 0x398c <LCD_send_bit+0x26>
    398c:	08 95       	ret

0000398e <LCD_send_byte>:
	_delay_us(40);
}

void LCD_send_byte(uint8_t data, uint8_t dorc)
{
    398e:	0f 93       	push	r16
    3990:	1f 93       	push	r17
    3992:	cf 93       	push	r28
    3994:	df 93       	push	r29
    3996:	08 2f       	mov	r16, r24
    3998:	86 2f       	mov	r24, r22
	cbi(LCD_PORT, LCD_PINCSX);
    399a:	2a 98       	cbi	0x05, 2	; 5

	LCD_send_bit(dorc);
    399c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <LCD_send_bit>
    39a0:	c8 e0       	ldi	r28, 0x08	; 8
    39a2:	d0 e0       	ldi	r29, 0x00	; 0

	for (uint8_t m = 0x80; m > 0x00; m >>= 1)
    39a4:	10 e8       	ldi	r17, 0x80	; 128
	{
		LCD_send_bit(data & m);
    39a6:	81 2f       	mov	r24, r17
    39a8:	80 23       	and	r24, r16
    39aa:	0e 94 b3 1c 	call	0x3966	; 0x3966 <LCD_send_bit>
{
	cbi(LCD_PORT, LCD_PINCSX);

	LCD_send_bit(dorc);

	for (uint8_t m = 0x80; m > 0x00; m >>= 1)
    39ae:	16 95       	lsr	r17
    39b0:	21 97       	sbiw	r28, 0x01	; 1
    39b2:	20 97       	sbiw	r28, 0x00	; 0
    39b4:	c1 f7       	brne	.-16     	; 0x39a6 <LCD_send_byte+0x18>
	{
		LCD_send_bit(data & m);
	}

	sbi(LCD_PORT, LCD_PINCSX);
    39b6:	2a 9a       	sbi	0x05, 2	; 5
}
    39b8:	df 91       	pop	r29
    39ba:	cf 91       	pop	r28
    39bc:	1f 91       	pop	r17
    39be:	0f 91       	pop	r16
    39c0:	08 95       	ret

000039c2 <LCD_send_command>:
}
*/
//
void LCD_send_command(uint8_t data)
{
	LCD_send_byte(data, 0x00);
    39c2:	60 e0       	ldi	r22, 0x00	; 0
    39c4:	0e 94 c7 1c 	call	0x398e	; 0x398e <LCD_send_byte>
    39c8:	08 95       	ret

000039ca <LCD_send_data>:
}

void LCD_send_data(uint8_t data)
{
	LCD_send_byte(data, 0x01);
    39ca:	61 e0       	ldi	r22, 0x01	; 1
    39cc:	0e 94 c7 1c 	call	0x398e	; 0x398e <LCD_send_byte>
    39d0:	08 95       	ret

000039d2 <LCD_Clear_Screen>:
	LCD_send_command(0xA6); 	//
	_delay_ms(1000);               		// 1 Sec delay
}
//
void LCD_Clear_Screen(void)
{
    39d2:	cf 93       	push	r28
    39d4:	df 93       	push	r29
	LCD_send_command(0x40); // Y = 0
    39d6:	80 e4       	ldi	r24, 0x40	; 64
    39d8:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0xB0);
    39dc:	80 eb       	ldi	r24, 0xB0	; 176
    39de:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0x10); // X = 0
    39e2:	80 e1       	ldi	r24, 0x10	; 16
    39e4:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0x00);
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
    39ee:	c0 e6       	ldi	r28, 0x60	; 96
    39f0:	d3 e0       	ldi	r29, 0x03	; 3
	//LCD_send_command(0xAE); // disable display;

	for(unsigned int i=0;i<864;i++) LCD_send_data(0x00);
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <LCD_send_data>
    39f8:	21 97       	sbiw	r28, 0x01	; 1
    39fa:	20 97       	sbiw	r28, 0x00	; 0
    39fc:	d1 f7       	brne	.-12     	; 0x39f2 <LCD_Clear_Screen+0x20>

	//LCD_send_command(0x07);
	//LCD_send_command(0xAF); // enable display;
}
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	08 95       	ret

00003a04 <LCD_initialize2>:
  // max contract 0
  LCD_send_command(0x90);
}
*/
void LCD_initialize2(){
	LCD_DDRS |= (1<<LCD_PINCLC)|(1<<LCD_PINSDA)|(1<<LCD_PINCSX)|(1<<LCD_PINRST);
    3a04:	84 b1       	in	r24, 0x04	; 4
    3a06:	8c 63       	ori	r24, 0x3C	; 60
    3a08:	84 b9       	out	0x04, r24	; 4

	CS_LCD_RESET;
    3a0a:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a0c:	8f e0       	ldi	r24, 0x0F	; 15
    3a0e:	97 e2       	ldi	r25, 0x27	; 39
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <LCD_initialize2+0xc>
    3a14:	00 c0       	rjmp	.+0      	; 0x3a16 <LCD_initialize2+0x12>
    3a16:	00 00       	nop
	_delay_ms(5);
	RST_LCD_RESET;
    3a18:	2c 98       	cbi	0x05, 4	; 5
    3a1a:	8f e1       	ldi	r24, 0x1F	; 31
    3a1c:	9e e4       	ldi	r25, 0x4E	; 78
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <LCD_initialize2+0x1a>
    3a22:	00 c0       	rjmp	.+0      	; 0x3a24 <LCD_initialize2+0x20>
    3a24:	00 00       	nop

	_delay_ms(10);

	RST_LCD_SET;
    3a26:	2c 9a       	sbi	0x05, 4	; 5

	LCD_send_command(0x20); //  Vop
    3a28:	80 e2       	ldi	r24, 0x20	; 32
    3a2a:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0x90);
    3a2e:	80 e9       	ldi	r24, 0x90	; 144
    3a30:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0xA4); // all on/normal display
    3a34:	84 ea       	ldi	r24, 0xA4	; 164
    3a36:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0x2F); // Power control set(charge pump on/off)
    3a3a:	8f e2       	ldi	r24, 0x2F	; 47
    3a3c:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0x40); // set start row address = 0
    3a40:	80 e4       	ldi	r24, 0x40	; 64
    3a42:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0xB0); //
    3a46:	80 eb       	ldi	r24, 0xB0	; 176
    3a48:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0x10); //
    3a4c:	80 e1       	ldi	r24, 0x10	; 16
    3a4e:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0x0);  //
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	//LCD_send_command(0xC8); // mirror Y axis (about X axis)
#ifdef LCD1100
  // vertical reverse
	LCD_send_command(0xC8);
    3a58:	88 ec       	ldi	r24, 0xC8	; 200
    3a5a:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
#endif
	LCD_send_command(0xA1); //
    3a5e:	81 ea       	ldi	r24, 0xA1	; 161
    3a60:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0xAC); // set initial row (R0) of the display
    3a64:	8c ea       	ldi	r24, 0xAC	; 172
    3a66:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	LCD_send_command(0x07);
    3a6a:	87 e0       	ldi	r24, 0x07	; 7
    3a6c:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
	//LCD_send_command(0xF9); //
	LCD_send_command(0xAF); //
    3a70:	8f ea       	ldi	r24, 0xAF	; 175
    3a72:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>

	LCD_Clear_Screen(); // clear LCD
    3a76:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <LCD_Clear_Screen>

	LCD_send_command(0xA7); 	//
    3a7a:	87 ea       	ldi	r24, 0xA7	; 167
    3a7c:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
    3a80:	9f ef       	ldi	r25, 0xFF	; 255
    3a82:	24 e3       	ldi	r18, 0x34	; 52
    3a84:	8c e0       	ldi	r24, 0x0C	; 12
    3a86:	91 50       	subi	r25, 0x01	; 1
    3a88:	20 40       	sbci	r18, 0x00	; 0
    3a8a:	80 40       	sbci	r24, 0x00	; 0
    3a8c:	e1 f7       	brne	.-8      	; 0x3a86 <LCD_initialize2+0x82>
    3a8e:	00 c0       	rjmp	.+0      	; 0x3a90 <LCD_initialize2+0x8c>
    3a90:	00 00       	nop
	_delay_ms(500);                		// 1/2 Sec delay
	LCD_send_command(0xA6); 	//
    3a92:	86 ea       	ldi	r24, 0xA6	; 166
    3a94:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
    3a98:	9f ef       	ldi	r25, 0xFF	; 255
    3a9a:	29 e6       	ldi	r18, 0x69	; 105
    3a9c:	88 e1       	ldi	r24, 0x18	; 24
    3a9e:	91 50       	subi	r25, 0x01	; 1
    3aa0:	20 40       	sbci	r18, 0x00	; 0
    3aa2:	80 40       	sbci	r24, 0x00	; 0
    3aa4:	e1 f7       	brne	.-8      	; 0x3a9e <LCD_initialize2+0x9a>
    3aa6:	00 c0       	rjmp	.+0      	; 0x3aa8 <LCD_initialize2+0xa4>
    3aa8:	00 00       	nop
    3aaa:	08 95       	ret

00003aac <LCD_Update>:
	//LCD_send_command(0xAF); // enable display;
}

//******************************************************************************

void LCD_Update() {
    3aac:	9f 92       	push	r9
    3aae:	af 92       	push	r10
    3ab0:	bf 92       	push	r11
    3ab2:	cf 92       	push	r12
    3ab4:	df 92       	push	r13
    3ab6:	ef 92       	push	r14
    3ab8:	ff 92       	push	r15
    3aba:	0f 93       	push	r16
    3abc:	1f 93       	push	r17
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	a1 2c       	mov	r10, r1
    3ac4:	b1 2c       	mov	r11, r1
    3ac6:	91 2c       	mov	r9, r1
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	6c 01       	movw	r12, r24
    3ace:	28 e0       	ldi	r18, 0x08	; 8
    3ad0:	c2 0e       	add	r12, r18
    3ad2:	d1 1c       	adc	r13, r1
	for(int p = 0; p < 9; p++){
		if(yUpdateMin >= ((p+1) *8)) {
    3ad4:	20 91 25 03 	lds	r18, 0x0325
    3ad8:	33 27       	eor	r19, r19
    3ada:	27 fd       	sbrc	r18, 7
    3adc:	30 95       	com	r19
    3ade:	2c 15       	cp	r18, r12
    3ae0:	3d 05       	cpc	r19, r13
    3ae2:	c4 f5       	brge	.+112    	; 0x3b54 <LCD_Update+0xa8>
			continue;
		}
		if(yUpdateMax < p*8){
    3ae4:	20 91 1f 01 	lds	r18, 0x011F
    3ae8:	33 27       	eor	r19, r19
    3aea:	27 fd       	sbrc	r18, 7
    3aec:	30 95       	com	r19
    3aee:	28 17       	cp	r18, r24
    3af0:	39 07       	cpc	r19, r25
    3af2:	d4 f1       	brlt	.+116    	; 0x3b68 <LCD_Update+0xbc>
				break;
		}
//		LCD_send_command(0x40);
		LCD_send_command(SetYAddr | p);
    3af4:	89 2d       	mov	r24, r9
    3af6:	80 6b       	ori	r24, 0xB0	; 176
    3af8:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>

		int col = xUpdateMin;
    3afc:	10 91 26 03 	lds	r17, 0x0326
    3b00:	c1 2f       	mov	r28, r17
    3b02:	dd 27       	eor	r29, r29
    3b04:	c7 fd       	sbrc	r28, 7
    3b06:	d0 95       	com	r29
		int maxcol = xUpdateMax;
    3b08:	e0 90 20 01 	lds	r14, 0x0120
    3b0c:	ff 24       	eor	r15, r15
    3b0e:	e7 fc       	sbrc	r14, 7
    3b10:	f0 94       	com	r15

		//LCD_send_command(SetXAddr3 | (col / 16));
		LCD_send_command(SetXAddr3 | (col >> 4));
    3b12:	ce 01       	movw	r24, r28
    3b14:	95 95       	asr	r25
    3b16:	87 95       	ror	r24
    3b18:	95 95       	asr	r25
    3b1a:	87 95       	ror	r24
    3b1c:	95 95       	asr	r25
    3b1e:	87 95       	ror	r24
    3b20:	95 95       	asr	r25
    3b22:	87 95       	ror	r24
    3b24:	80 61       	ori	r24, 0x10	; 16
    3b26:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
		//LCD_send_command(SetXAddr4 | (col - (16 * (col/16))));
		LCD_send_command(SetXAddr4 | (col & 0x000f));
    3b2a:	81 2f       	mov	r24, r17
    3b2c:	8f 70       	andi	r24, 0x0F	; 15
    3b2e:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <LCD_send_command>
		//LCD_send_command(SetXAddr3 | (col / 16));
//		LCD_send_command(SetXAddr3 | (col >> 4));

		for(; col <= maxcol; col++){
    3b32:	ec 16       	cp	r14, r28
    3b34:	fd 06       	cpc	r15, r29
    3b36:	74 f0       	brlt	.+28     	; 0x3b54 <LCD_Update+0xa8>
			LCD_send_data(LCDCache[(LCD_X * p) + col]);
    3b38:	8e 01       	movw	r16, r28
    3b3a:	0a 0d       	add	r16, r10
    3b3c:	1b 1d       	adc	r17, r11
    3b3e:	0b 56       	subi	r16, 0x6B	; 107
    3b40:	1c 4f       	sbci	r17, 0xFC	; 252
    3b42:	f8 01       	movw	r30, r16
    3b44:	81 91       	ld	r24, Z+
    3b46:	8f 01       	movw	r16, r30
    3b48:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <LCD_send_data>
		//LCD_send_command(SetXAddr4 | (col - (16 * (col/16))));
		LCD_send_command(SetXAddr4 | (col & 0x000f));
		//LCD_send_command(SetXAddr3 | (col / 16));
//		LCD_send_command(SetXAddr3 | (col >> 4));

		for(; col <= maxcol; col++){
    3b4c:	21 96       	adiw	r28, 0x01	; 1
    3b4e:	ec 16       	cp	r14, r28
    3b50:	fd 06       	cpc	r15, r29
    3b52:	bc f7       	brge	.-18     	; 0x3b42 <LCD_Update+0x96>
    3b54:	93 94       	inc	r9
    3b56:	f0 e6       	ldi	r31, 0x60	; 96
    3b58:	af 0e       	add	r10, r31
    3b5a:	b1 1c       	adc	r11, r1
}

//******************************************************************************

void LCD_Update() {
	for(int p = 0; p < 9; p++){
    3b5c:	28 e4       	ldi	r18, 0x48	; 72
    3b5e:	c2 16       	cp	r12, r18
    3b60:	d1 04       	cpc	r13, r1
    3b62:	11 f0       	breq	.+4      	; 0x3b68 <LCD_Update+0xbc>
    3b64:	c6 01       	movw	r24, r12
    3b66:	b2 cf       	rjmp	.-156    	; 0x3acc <LCD_Update+0x20>
		for(; col <= maxcol; col++){
			LCD_send_data(LCDCache[(LCD_X * p) + col]);
		}

	}
	xUpdateMin = LCD_X - 1;
    3b68:	8f e5       	ldi	r24, 0x5F	; 95
    3b6a:	80 93 26 03 	sts	0x0326, r24
	xUpdateMax = 0;
    3b6e:	10 92 20 01 	sts	0x0120, r1
	yUpdateMin = LCD_Y -1;
    3b72:	80 e4       	ldi	r24, 0x40	; 64
    3b74:	80 93 25 03 	sts	0x0325, r24
	yUpdateMax = 0;
    3b78:	10 92 1f 01 	sts	0x011F, r1
}
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ff 90       	pop	r15
    3b86:	ef 90       	pop	r14
    3b88:	df 90       	pop	r13
    3b8a:	cf 90       	pop	r12
    3b8c:	bf 90       	pop	r11
    3b8e:	af 90       	pop	r10
    3b90:	9f 90       	pop	r9
    3b92:	08 95       	ret

00003b94 <LCD_UpdateBox>:
  x = 0;
  y = 0;
}

void LCD_UpdateBox (int xmin, int ymin, int xmax, int ymax) {
	if (xmin < xUpdateMin) xUpdateMin = xmin;
    3b94:	e0 91 26 03 	lds	r30, 0x0326
    3b98:	ff 27       	eor	r31, r31
    3b9a:	e7 fd       	sbrc	r30, 7
    3b9c:	f0 95       	com	r31
    3b9e:	8e 17       	cp	r24, r30
    3ba0:	9f 07       	cpc	r25, r31
    3ba2:	14 f4       	brge	.+4      	; 0x3ba8 <LCD_UpdateBox+0x14>
    3ba4:	80 93 26 03 	sts	0x0326, r24
	if (xmax > xUpdateMax) xUpdateMax = xmax;
    3ba8:	80 91 20 01 	lds	r24, 0x0120
    3bac:	99 27       	eor	r25, r25
    3bae:	87 fd       	sbrc	r24, 7
    3bb0:	90 95       	com	r25
    3bb2:	84 17       	cp	r24, r20
    3bb4:	95 07       	cpc	r25, r21
    3bb6:	14 f4       	brge	.+4      	; 0x3bbc <LCD_UpdateBox+0x28>
    3bb8:	40 93 20 01 	sts	0x0120, r20
	if (ymin < yUpdateMin) yUpdateMin = ymin;
    3bbc:	80 91 25 03 	lds	r24, 0x0325
    3bc0:	99 27       	eor	r25, r25
    3bc2:	87 fd       	sbrc	r24, 7
    3bc4:	90 95       	com	r25
    3bc6:	68 17       	cp	r22, r24
    3bc8:	79 07       	cpc	r23, r25
    3bca:	14 f4       	brge	.+4      	; 0x3bd0 <LCD_UpdateBox+0x3c>
    3bcc:	60 93 25 03 	sts	0x0325, r22
	if (ymax > yUpdateMax) yUpdateMax = ymax;
    3bd0:	80 91 1f 01 	lds	r24, 0x011F
    3bd4:	99 27       	eor	r25, r25
    3bd6:	87 fd       	sbrc	r24, 7
    3bd8:	90 95       	com	r25
    3bda:	82 17       	cp	r24, r18
    3bdc:	93 07       	cpc	r25, r19
    3bde:	14 f4       	brge	.+4      	; 0x3be4 <LCD_UpdateBox+0x50>
    3be0:	20 93 1f 01 	sts	0x011F, r18
    3be4:	08 95       	ret

00003be6 <LCD_Clear>:
//unsigned char wrap = 1;
//uint16_t textcolor = 0xFF, textbgcolor = 0x00;
//uint8_t textsize = 1;

//-----------------------------------
void LCD_Clear() {
    3be6:	e5 e9       	ldi	r30, 0x95	; 149
    3be8:	f3 e0       	ldi	r31, 0x03	; 3
    3bea:	85 ef       	ldi	r24, 0xF5	; 245
    3bec:	96 e0       	ldi	r25, 0x06	; 6
	for (int index = 0; index < Cache_Size ; index++)
  {
   LCDCache[index] = (0x00);
    3bee:	11 92       	st	Z+, r1
//uint16_t textcolor = 0xFF, textbgcolor = 0x00;
//uint8_t textsize = 1;

//-----------------------------------
void LCD_Clear() {
	for (int index = 0; index < Cache_Size ; index++)
    3bf0:	e8 17       	cp	r30, r24
    3bf2:	f9 07       	cpc	r31, r25
    3bf4:	e1 f7       	brne	.-8      	; 0x3bee <LCD_Clear+0x8>
  {
   LCDCache[index] = (0x00);
  }
  LCD_UpdateBox(0, 0, LCD_X - 1, LCD_Y - 1);
    3bf6:	20 e4       	ldi	r18, 0x40	; 64
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	4f e5       	ldi	r20, 0x5F	; 95
    3bfc:	50 e0       	ldi	r21, 0x00	; 0
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	70 e0       	ldi	r23, 0x00	; 0
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_UpdateBox>
  Cursor_X = 0;
    3c0a:	10 92 24 03 	sts	0x0324, r1
  Cursor_Y = 0;
    3c0e:	10 92 23 03 	sts	0x0323, r1
  x = 0;
    3c12:	10 92 2a 03 	sts	0x032A, r1
    3c16:	10 92 29 03 	sts	0x0329, r1
  y = 0;
    3c1a:	10 92 28 03 	sts	0x0328, r1
    3c1e:	10 92 27 03 	sts	0x0327, r1
    3c22:	08 95       	ret

00003c24 <LCD_drawPixel>:
	if (ymin < yUpdateMin) yUpdateMin = ymin;
	if (ymax > yUpdateMax) yUpdateMax = ymax;
}

void LCD_drawPixel (int16_t xc, int16_t yc, uint16_t color) {
	if ((xc < 0) || (xc >= LCD_X) || (yc < 0) || (yc >= LCD_Y))
    3c24:	80 36       	cpi	r24, 0x60	; 96
    3c26:	91 05       	cpc	r25, r1
    3c28:	08 f0       	brcs	.+2      	; 0x3c2c <LCD_drawPixel+0x8>
    3c2a:	64 c0       	rjmp	.+200    	; 0x3cf4 <LCD_drawPixel+0xd0>
    3c2c:	61 34       	cpi	r22, 0x41	; 65
    3c2e:	71 05       	cpc	r23, r1
    3c30:	08 f0       	brcs	.+2      	; 0x3c34 <LCD_drawPixel+0x10>
    3c32:	60 c0       	rjmp	.+192    	; 0x3cf4 <LCD_drawPixel+0xd0>
	return;

	if (color)
    3c34:	45 2b       	or	r20, r21
    3c36:	69 f1       	breq	.+90     	; 0x3c92 <LCD_drawPixel+0x6e>
    LCDCache[xc + (yc/8)*LCD_X] |= _BV(yc%8);
    3c38:	9b 01       	movw	r18, r22
    3c3a:	77 23       	and	r23, r23
    3c3c:	14 f4       	brge	.+4      	; 0x3c42 <LCD_drawPixel+0x1e>
    3c3e:	29 5f       	subi	r18, 0xF9	; 249
    3c40:	3f 4f       	sbci	r19, 0xFF	; 255
    3c42:	35 95       	asr	r19
    3c44:	27 95       	ror	r18
    3c46:	35 95       	asr	r19
    3c48:	27 95       	ror	r18
    3c4a:	35 95       	asr	r19
    3c4c:	27 95       	ror	r18
    3c4e:	40 e6       	ldi	r20, 0x60	; 96
    3c50:	42 9f       	mul	r20, r18
    3c52:	f0 01       	movw	r30, r0
    3c54:	43 9f       	mul	r20, r19
    3c56:	f0 0d       	add	r31, r0
    3c58:	11 24       	eor	r1, r1
    3c5a:	e8 0f       	add	r30, r24
    3c5c:	f9 1f       	adc	r31, r25
    3c5e:	eb 56       	subi	r30, 0x6B	; 107
    3c60:	fc 4f       	sbci	r31, 0xFC	; 252
    3c62:	9b 01       	movw	r18, r22
    3c64:	27 70       	andi	r18, 0x07	; 7
    3c66:	30 78       	andi	r19, 0x80	; 128
    3c68:	33 23       	and	r19, r19
    3c6a:	34 f4       	brge	.+12     	; 0x3c78 <LCD_drawPixel+0x54>
    3c6c:	21 50       	subi	r18, 0x01	; 1
    3c6e:	31 09       	sbc	r19, r1
    3c70:	28 6f       	ori	r18, 0xF8	; 248
    3c72:	3f 6f       	ori	r19, 0xFF	; 255
    3c74:	2f 5f       	subi	r18, 0xFF	; 255
    3c76:	3f 4f       	sbci	r19, 0xFF	; 255
    3c78:	41 e0       	ldi	r20, 0x01	; 1
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	da 01       	movw	r26, r20
    3c7e:	02 c0       	rjmp	.+4      	; 0x3c84 <LCD_drawPixel+0x60>
    3c80:	aa 0f       	add	r26, r26
    3c82:	bb 1f       	adc	r27, r27
    3c84:	2a 95       	dec	r18
    3c86:	e2 f7       	brpl	.-8      	; 0x3c80 <LCD_drawPixel+0x5c>
    3c88:	9d 01       	movw	r18, r26
    3c8a:	30 81       	ld	r19, Z
    3c8c:	23 2b       	or	r18, r19
    3c8e:	20 83       	st	Z, r18
    3c90:	2d c0       	rjmp	.+90     	; 0x3cec <LCD_drawPixel+0xc8>
  else
    LCDCache[xc + (yc/8)*LCD_X] &= ~_BV(yc%8);
    3c92:	9b 01       	movw	r18, r22
    3c94:	77 23       	and	r23, r23
    3c96:	14 f4       	brge	.+4      	; 0x3c9c <LCD_drawPixel+0x78>
    3c98:	29 5f       	subi	r18, 0xF9	; 249
    3c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c9c:	35 95       	asr	r19
    3c9e:	27 95       	ror	r18
    3ca0:	35 95       	asr	r19
    3ca2:	27 95       	ror	r18
    3ca4:	35 95       	asr	r19
    3ca6:	27 95       	ror	r18
    3ca8:	40 e6       	ldi	r20, 0x60	; 96
    3caa:	42 9f       	mul	r20, r18
    3cac:	f0 01       	movw	r30, r0
    3cae:	43 9f       	mul	r20, r19
    3cb0:	f0 0d       	add	r31, r0
    3cb2:	11 24       	eor	r1, r1
    3cb4:	e8 0f       	add	r30, r24
    3cb6:	f9 1f       	adc	r31, r25
    3cb8:	eb 56       	subi	r30, 0x6B	; 107
    3cba:	fc 4f       	sbci	r31, 0xFC	; 252
    3cbc:	9b 01       	movw	r18, r22
    3cbe:	27 70       	andi	r18, 0x07	; 7
    3cc0:	30 78       	andi	r19, 0x80	; 128
    3cc2:	33 23       	and	r19, r19
    3cc4:	34 f4       	brge	.+12     	; 0x3cd2 <LCD_drawPixel+0xae>
    3cc6:	21 50       	subi	r18, 0x01	; 1
    3cc8:	31 09       	sbc	r19, r1
    3cca:	28 6f       	ori	r18, 0xF8	; 248
    3ccc:	3f 6f       	ori	r19, 0xFF	; 255
    3cce:	2f 5f       	subi	r18, 0xFF	; 255
    3cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd2:	41 e0       	ldi	r20, 0x01	; 1
    3cd4:	50 e0       	ldi	r21, 0x00	; 0
    3cd6:	da 01       	movw	r26, r20
    3cd8:	02 c0       	rjmp	.+4      	; 0x3cde <LCD_drawPixel+0xba>
    3cda:	aa 0f       	add	r26, r26
    3cdc:	bb 1f       	adc	r27, r27
    3cde:	2a 95       	dec	r18
    3ce0:	e2 f7       	brpl	.-8      	; 0x3cda <LCD_drawPixel+0xb6>
    3ce2:	9d 01       	movw	r18, r26
    3ce4:	20 95       	com	r18
    3ce6:	30 81       	ld	r19, Z
    3ce8:	23 23       	and	r18, r19
    3cea:	20 83       	st	Z, r18

	LCD_UpdateBox(xc,yc,xc,yc);
    3cec:	9b 01       	movw	r18, r22
    3cee:	ac 01       	movw	r20, r24
    3cf0:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_UpdateBox>
    3cf4:	08 95       	ret

00003cf6 <LCD_set_position2>:
}

//;;;;;;;;
void LCD_set_position2(uint8_t xpos, uint8_t ypos)
{
	  x = xpos;
    3cf6:	28 2f       	mov	r18, r24
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	30 93 2a 03 	sts	0x032A, r19
    3cfe:	20 93 29 03 	sts	0x0329, r18
	  y = ypos;
    3d02:	26 2f       	mov	r18, r22
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	30 93 28 03 	sts	0x0328, r19
    3d0a:	20 93 27 03 	sts	0x0327, r18
      Cursor_X = xpos * FONT_WIDTH * textsize;
    3d0e:	90 91 1e 01 	lds	r25, 0x011E
    3d12:	29 2f       	mov	r18, r25
    3d14:	22 0f       	add	r18, r18
    3d16:	29 0f       	add	r18, r25
    3d18:	22 0f       	add	r18, r18
    3d1a:	28 9f       	mul	r18, r24
    3d1c:	80 2d       	mov	r24, r0
    3d1e:	11 24       	eor	r1, r1
    3d20:	80 93 24 03 	sts	0x0324, r24
      Cursor_Y = ypos * FONT_HEIGHT * textsize;
    3d24:	99 0f       	add	r25, r25
    3d26:	99 0f       	add	r25, r25
    3d28:	99 0f       	add	r25, r25
    3d2a:	96 9f       	mul	r25, r22
    3d2c:	60 2d       	mov	r22, r0
    3d2e:	11 24       	eor	r1, r1
    3d30:	60 93 23 03 	sts	0x0323, r22
    3d34:	08 95       	ret

00003d36 <LCD_drawLine>:
	LCD_draw_string2(wbuffer);
}
//;;;;;;;;


void LCD_drawLine(int16_t x0, int16_t y0,int16_t x1, int16_t y1, uint16_t color) {
    3d36:	2f 92       	push	r2
    3d38:	3f 92       	push	r3
    3d3a:	4f 92       	push	r4
    3d3c:	5f 92       	push	r5
    3d3e:	6f 92       	push	r6
    3d40:	7f 92       	push	r7
    3d42:	8f 92       	push	r8
    3d44:	9f 92       	push	r9
    3d46:	af 92       	push	r10
    3d48:	bf 92       	push	r11
    3d4a:	cf 92       	push	r12
    3d4c:	df 92       	push	r13
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	ec 01       	movw	r28, r24
    3d5c:	7b 01       	movw	r14, r22
    3d5e:	6a 01       	movw	r12, r20
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    3d60:	c9 01       	movw	r24, r18
    3d62:	86 1b       	sub	r24, r22
    3d64:	97 0b       	sbc	r25, r23
    3d66:	ac 01       	movw	r20, r24
    3d68:	22 f4       	brpl	.+8      	; 0x3d72 <LCD_drawLine+0x3c>
    3d6a:	44 27       	eor	r20, r20
    3d6c:	55 27       	eor	r21, r21
    3d6e:	48 1b       	sub	r20, r24
    3d70:	59 0b       	sbc	r21, r25
    3d72:	b6 01       	movw	r22, r12
    3d74:	6c 1b       	sub	r22, r28
    3d76:	7d 0b       	sbc	r23, r29
    3d78:	cb 01       	movw	r24, r22
    3d7a:	99 23       	and	r25, r25
    3d7c:	24 f4       	brge	.+8      	; 0x3d86 <LCD_drawLine+0x50>
    3d7e:	88 27       	eor	r24, r24
    3d80:	99 27       	eor	r25, r25
    3d82:	86 1b       	sub	r24, r22
    3d84:	97 0b       	sbc	r25, r23
    3d86:	71 e0       	ldi	r23, 0x01	; 1
    3d88:	60 e0       	ldi	r22, 0x00	; 0
    3d8a:	84 17       	cp	r24, r20
    3d8c:	95 07       	cpc	r25, r21
    3d8e:	0c f0       	brlt	.+2      	; 0x3d92 <LCD_drawLine+0x5c>
    3d90:	70 e0       	ldi	r23, 0x00	; 0
    3d92:	a7 2e       	mov	r10, r23
    3d94:	b6 2e       	mov	r11, r22
  if (steep) {
    3d96:	a1 14       	cp	r10, r1
    3d98:	b1 04       	cpc	r11, r1
    3d9a:	51 f0       	breq	.+20     	; 0x3db0 <LCD_drawLine+0x7a>
    3d9c:	9c 2d       	mov	r25, r12
    3d9e:	8d 2d       	mov	r24, r13
    swap(x0, y0);
    swap(x1, y1);
    3da0:	69 01       	movw	r12, r18
    3da2:	29 2f       	mov	r18, r25
    3da4:	38 2f       	mov	r19, r24
    3da6:	9c 2f       	mov	r25, r28
    3da8:	8d 2f       	mov	r24, r29


void LCD_drawLine(int16_t x0, int16_t y0,int16_t x1, int16_t y1, uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
    swap(x0, y0);
    3daa:	e7 01       	movw	r28, r14
    3dac:	e9 2e       	mov	r14, r25
    3dae:	f8 2e       	mov	r15, r24
    swap(x1, y1);
  }

  if (x0 > x1) {
    3db0:	cc 16       	cp	r12, r28
    3db2:	dd 06       	cpc	r13, r29
    3db4:	54 f4       	brge	.+20     	; 0x3dca <LCD_drawLine+0x94>
    3db6:	9e 2d       	mov	r25, r14
    3db8:	8f 2d       	mov	r24, r15
    swap(x0, x1);
    swap(y0, y1);
    3dba:	79 01       	movw	r14, r18
    3dbc:	29 2f       	mov	r18, r25
    3dbe:	38 2f       	mov	r19, r24
    3dc0:	9c 2f       	mov	r25, r28
    3dc2:	8d 2f       	mov	r24, r29
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
    swap(x0, x1);
    3dc4:	e6 01       	movw	r28, r12
    3dc6:	c9 2e       	mov	r12, r25
    3dc8:	d8 2e       	mov	r13, r24
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
    3dca:	16 01       	movw	r2, r12
    3dcc:	2c 1a       	sub	r2, r28
    3dce:	3d 0a       	sbc	r3, r29
  dy = abs(y1 - y0);
    3dd0:	c9 01       	movw	r24, r18
    3dd2:	8e 19       	sub	r24, r14
    3dd4:	9f 09       	sbc	r25, r15
    3dd6:	3c 01       	movw	r6, r24
    3dd8:	22 f4       	brpl	.+8      	; 0x3de2 <LCD_drawLine+0xac>
    3dda:	66 24       	eor	r6, r6
    3ddc:	77 24       	eor	r7, r7
    3dde:	68 1a       	sub	r6, r24
    3de0:	79 0a       	sbc	r7, r25

  int16_t err = dx / 2;
    3de2:	41 01       	movw	r8, r2
    3de4:	33 20       	and	r3, r3
    3de6:	1c f4       	brge	.+6      	; 0x3dee <LCD_drawLine+0xb8>
    3de8:	8f ef       	ldi	r24, 0xFF	; 255
    3dea:	88 1a       	sub	r8, r24
    3dec:	98 0a       	sbc	r9, r24
    3dee:	95 94       	asr	r9
    3df0:	87 94       	ror	r8
  int16_t ystep;

  if (y0 < y1) {
    3df2:	e2 16       	cp	r14, r18
    3df4:	f3 06       	cpc	r15, r19
    3df6:	24 f4       	brge	.+8      	; 0x3e00 <LCD_drawLine+0xca>
    ystep = 1;
    3df8:	44 24       	eor	r4, r4
    3dfa:	43 94       	inc	r4
    3dfc:	51 2c       	mov	r5, r1
    3dfe:	03 c0       	rjmp	.+6      	; 0x3e06 <LCD_drawLine+0xd0>
  } else {
    ystep = -1;
    3e00:	44 24       	eor	r4, r4
    3e02:	4a 94       	dec	r4
    3e04:	54 2c       	mov	r5, r4
  }

  for (; x0<=x1; x0++) {
    3e06:	cc 16       	cp	r12, r28
    3e08:	dd 06       	cpc	r13, r29
    3e0a:	cc f0       	brlt	.+50     	; 0x3e3e <LCD_drawLine+0x108>
    if (steep) {
    3e0c:	a1 14       	cp	r10, r1
    3e0e:	b1 04       	cpc	r11, r1
    3e10:	31 f0       	breq	.+12     	; 0x3e1e <LCD_drawLine+0xe8>
      LCD_drawPixel(y0, x0, color);
    3e12:	a8 01       	movw	r20, r16
    3e14:	be 01       	movw	r22, r28
    3e16:	c7 01       	movw	r24, r14
    3e18:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <LCD_drawPixel>
    3e1c:	05 c0       	rjmp	.+10     	; 0x3e28 <LCD_drawLine+0xf2>
    } else {
      LCD_drawPixel(x0, y0, color);
    3e1e:	a8 01       	movw	r20, r16
    3e20:	b7 01       	movw	r22, r14
    3e22:	ce 01       	movw	r24, r28
    3e24:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <LCD_drawPixel>
    }
    err -= dy;
    3e28:	86 18       	sub	r8, r6
    3e2a:	97 08       	sbc	r9, r7
    if (err < 0) {
    3e2c:	22 f4       	brpl	.+8      	; 0x3e36 <LCD_drawLine+0x100>
      y0 += ystep;
    3e2e:	e4 0c       	add	r14, r4
    3e30:	f5 1c       	adc	r15, r5
      err += dx;
    3e32:	82 0c       	add	r8, r2
    3e34:	93 1c       	adc	r9, r3
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    3e36:	21 96       	adiw	r28, 0x01	; 1
    3e38:	cc 16       	cp	r12, r28
    3e3a:	dd 06       	cpc	r13, r29
    3e3c:	3c f7       	brge	.-50     	; 0x3e0c <LCD_drawLine+0xd6>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    3e3e:	df 91       	pop	r29
    3e40:	cf 91       	pop	r28
    3e42:	1f 91       	pop	r17
    3e44:	0f 91       	pop	r16
    3e46:	ff 90       	pop	r15
    3e48:	ef 90       	pop	r14
    3e4a:	df 90       	pop	r13
    3e4c:	cf 90       	pop	r12
    3e4e:	bf 90       	pop	r11
    3e50:	af 90       	pop	r10
    3e52:	9f 90       	pop	r9
    3e54:	8f 90       	pop	r8
    3e56:	7f 90       	pop	r7
    3e58:	6f 90       	pop	r6
    3e5a:	5f 90       	pop	r5
    3e5c:	4f 90       	pop	r4
    3e5e:	3f 90       	pop	r3
    3e60:	2f 90       	pop	r2
    3e62:	08 95       	ret

00003e64 <LCD_drawFastVLine>:
  for (int16_t i=xq; i<xq+w; i++) {
    LCD_drawFastVLine(i, yq, h, color);
  }
}

void LCD_drawFastVLine(int16_t xq, int16_t yq, int16_t h, uint16_t color) {
    3e64:	0f 93       	push	r16
    3e66:	1f 93       	push	r17
    3e68:	89 01       	movw	r16, r18
  LCD_drawLine(xq, yq, xq, yq+h-1, color);
    3e6a:	9b 01       	movw	r18, r22
    3e6c:	24 0f       	add	r18, r20
    3e6e:	35 1f       	adc	r19, r21
    3e70:	21 50       	subi	r18, 0x01	; 1
    3e72:	31 09       	sbc	r19, r1
    3e74:	ac 01       	movw	r20, r24
    3e76:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <LCD_drawLine>
}
    3e7a:	1f 91       	pop	r17
    3e7c:	0f 91       	pop	r16
    3e7e:	08 95       	ret

00003e80 <LCD_fillRect>:
      err += dx;
    }
  }
}

void LCD_fillRect(int16_t xq, int16_t yq, int16_t w, int16_t h, uint16_t color) {
    3e80:	af 92       	push	r10
    3e82:	bf 92       	push	r11
    3e84:	cf 92       	push	r12
    3e86:	df 92       	push	r13
    3e88:	ef 92       	push	r14
    3e8a:	ff 92       	push	r15
    3e8c:	0f 93       	push	r16
    3e8e:	1f 93       	push	r17
    3e90:	cf 93       	push	r28
    3e92:	df 93       	push	r29
    3e94:	ec 01       	movw	r28, r24
    3e96:	5b 01       	movw	r10, r22
    3e98:	69 01       	movw	r12, r18
  for (int16_t i=xq; i<xq+w; i++) {
    3e9a:	7c 01       	movw	r14, r24
    3e9c:	e4 0e       	add	r14, r20
    3e9e:	f5 1e       	adc	r15, r21
    3ea0:	8e 15       	cp	r24, r14
    3ea2:	9f 05       	cpc	r25, r15
    3ea4:	54 f4       	brge	.+20     	; 0x3eba <LCD_fillRect+0x3a>
    LCD_drawFastVLine(i, yq, h, color);
    3ea6:	98 01       	movw	r18, r16
    3ea8:	a6 01       	movw	r20, r12
    3eaa:	b5 01       	movw	r22, r10
    3eac:	ce 01       	movw	r24, r28
    3eae:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <LCD_drawFastVLine>
    }
  }
}

void LCD_fillRect(int16_t xq, int16_t yq, int16_t w, int16_t h, uint16_t color) {
  for (int16_t i=xq; i<xq+w; i++) {
    3eb2:	21 96       	adiw	r28, 0x01	; 1
    3eb4:	ce 15       	cp	r28, r14
    3eb6:	df 05       	cpc	r29, r15
    3eb8:	b4 f3       	brlt	.-20     	; 0x3ea6 <LCD_fillRect+0x26>
    LCD_drawFastVLine(i, yq, h, color);
  }
}
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	1f 91       	pop	r17
    3ec0:	0f 91       	pop	r16
    3ec2:	ff 90       	pop	r15
    3ec4:	ef 90       	pop	r14
    3ec6:	df 90       	pop	r13
    3ec8:	cf 90       	pop	r12
    3eca:	bf 90       	pop	r11
    3ecc:	af 90       	pop	r10
    3ece:	08 95       	ret

00003ed0 <LCD_drawChar>:
	yUpdateMin = LCD_Y -1;
	yUpdateMax = 0;
}
*/

void LCD_drawChar(int16_t xs, int16_t ys, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
    3ed0:	2f 92       	push	r2
    3ed2:	3f 92       	push	r3
    3ed4:	4f 92       	push	r4
    3ed6:	5f 92       	push	r5
    3ed8:	6f 92       	push	r6
    3eda:	7f 92       	push	r7
    3edc:	8f 92       	push	r8
    3ede:	9f 92       	push	r9
    3ee0:	af 92       	push	r10
    3ee2:	bf 92       	push	r11
    3ee4:	cf 92       	push	r12
    3ee6:	df 92       	push	r13
    3ee8:	ef 92       	push	r14
    3eea:	ff 92       	push	r15
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	2c 97       	sbiw	r28, 0x0c	; 12
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	19 01       	movw	r2, r18

  if((xs >= LCD_X) ||(ys >= LCD_Y) || ((xs + 5 * size - 1) < 0) || ((ys + 8 * size - 1) < 0))
    3f06:	80 36       	cpi	r24, 0x60	; 96
    3f08:	91 05       	cpc	r25, r1
    3f0a:	0c f0       	brlt	.+2      	; 0x3f0e <LCD_drawChar+0x3e>
    3f0c:	9e c0       	rjmp	.+316    	; 0x404a <LCD_drawChar+0x17a>
    3f0e:	61 34       	cpi	r22, 0x41	; 65
    3f10:	71 05       	cpc	r23, r1
    3f12:	0c f0       	brlt	.+2      	; 0x3f16 <LCD_drawChar+0x46>
    3f14:	9a c0       	rjmp	.+308    	; 0x404a <LCD_drawChar+0x17a>
    3f16:	ae 2c       	mov	r10, r14
    3f18:	b1 2c       	mov	r11, r1
    3f1a:	95 01       	movw	r18, r10
    3f1c:	22 0f       	add	r18, r18
    3f1e:	33 1f       	adc	r19, r19
    3f20:	22 0f       	add	r18, r18
    3f22:	33 1f       	adc	r19, r19
    3f24:	2a 0d       	add	r18, r10
    3f26:	3b 1d       	adc	r19, r11
    3f28:	28 0f       	add	r18, r24
    3f2a:	39 1f       	adc	r19, r25
    3f2c:	21 50       	subi	r18, 0x01	; 1
    3f2e:	31 09       	sbc	r19, r1
    3f30:	33 23       	and	r19, r19
    3f32:	0c f4       	brge	.+2      	; 0x3f36 <LCD_drawChar+0x66>
    3f34:	8a c0       	rjmp	.+276    	; 0x404a <LCD_drawChar+0x17a>
    3f36:	95 01       	movw	r18, r10
    3f38:	22 0f       	add	r18, r18
    3f3a:	33 1f       	adc	r19, r19
    3f3c:	22 0f       	add	r18, r18
    3f3e:	33 1f       	adc	r19, r19
    3f40:	22 0f       	add	r18, r18
    3f42:	33 1f       	adc	r19, r19
    3f44:	26 0f       	add	r18, r22
    3f46:	37 1f       	adc	r19, r23
    3f48:	21 50       	subi	r18, 0x01	; 1
    3f4a:	31 09       	sbc	r19, r1
    3f4c:	33 23       	and	r19, r19
    3f4e:	0c f4       	brge	.+2      	; 0x3f52 <LCD_drawChar+0x82>
    3f50:	7c c0       	rjmp	.+248    	; 0x404a <LCD_drawChar+0x17a>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    3f52:	50 e0       	ldi	r21, 0x00	; 0
    3f54:	9a 01       	movw	r18, r20
    3f56:	22 0f       	add	r18, r18
    3f58:	33 1f       	adc	r19, r19
    3f5a:	22 0f       	add	r18, r18
    3f5c:	33 1f       	adc	r19, r19
    3f5e:	42 0f       	add	r20, r18
    3f60:	53 1f       	adc	r21, r19
    3f62:	45 01       	movw	r8, r10
    3f64:	9b 83       	std	Y+3, r25	; 0x03
    3f66:	8a 83       	std	Y+2, r24	; 0x02
    3f68:	9d 83       	std	Y+5, r25	; 0x05
    3f6a:	8c 83       	std	Y+4, r24	; 0x04
    3f6c:	1e 82       	std	Y+6, r1	; 0x06
    3f6e:	46 53       	subi	r20, 0x36	; 54
    3f70:	5b 4f       	sbci	r21, 0xFB	; 251
    3f72:	9a 01       	movw	r18, r20
    3f74:	28 1b       	sub	r18, r24
    3f76:	39 0b       	sbc	r19, r25
    3f78:	3a 87       	std	Y+10, r19	; 0x0a
    3f7a:	29 87       	std	Y+9, r18	; 0x09
    3f7c:	6f 83       	std	Y+7, r22	; 0x07
    3f7e:	78 87       	std	Y+8, r23	; 0x08
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          LCD_drawPixel(xs+i, ys+j, color);
        else { // big size
          LCD_fillRect(xs+(i*size), ys+(j*size), size, size, color);
    3f80:	28 01       	movw	r4, r16
    3f82:	1e 2d       	mov	r17, r14
  if((xs >= LCD_X) ||(ys >= LCD_Y) || ((xs + 5 * size - 1) < 0) || ((ys + 8 * size - 1) < 0))
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5)
    3f84:	3e 81       	ldd	r19, Y+6	; 0x06
    3f86:	35 30       	cpi	r19, 0x05	; 5
    3f88:	09 f4       	brne	.+2      	; 0x3f8c <LCD_drawChar+0xbc>
    3f8a:	51 c0       	rjmp	.+162    	; 0x402e <LCD_drawChar+0x15e>
    3f8c:	e9 85       	ldd	r30, Y+9	; 0x09
    3f8e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	9b 81       	ldd	r25, Y+3	; 0x03
    3f94:	e8 0f       	add	r30, r24
    3f96:	f9 1f       	adc	r31, r25
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    3f98:	04 91       	lpm	r16, Z
    3f9a:	4a c0       	rjmp	.+148    	; 0x4030 <LCD_drawChar+0x160>
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
    3f9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f9e:	90 ff       	sbrs	r25, 0
    3fa0:	13 c0       	rjmp	.+38     	; 0x3fc8 <LCD_drawChar+0xf8>
        if (size == 1) // default size
    3fa2:	ab 85       	ldd	r26, Y+11	; 0x0b
    3fa4:	a1 30       	cpi	r26, 0x01	; 1
    3fa6:	39 f4       	brne	.+14     	; 0x3fb6 <LCD_drawChar+0xe6>
          LCD_drawPixel(xs+i, ys+j, color);
    3fa8:	a1 01       	movw	r20, r2
    3faa:	b6 01       	movw	r22, r12
    3fac:	8a 81       	ldd	r24, Y+2	; 0x02
    3fae:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb0:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <LCD_drawPixel>
    3fb4:	1e c0       	rjmp	.+60     	; 0x3ff2 <LCD_drawChar+0x122>
        else { // big size
          LCD_fillRect(xs+(i*size), ys+(j*size), size, size, color);
    3fb6:	81 01       	movw	r16, r2
    3fb8:	95 01       	movw	r18, r10
    3fba:	a5 01       	movw	r20, r10
    3fbc:	b7 01       	movw	r22, r14
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	96 2d       	mov	r25, r6
    3fc2:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <LCD_fillRect>
    3fc6:	15 c0       	rjmp	.+42     	; 0x3ff2 <LCD_drawChar+0x122>
        }
      } else if (bg != color) {
    3fc8:	42 14       	cp	r4, r2
    3fca:	53 04       	cpc	r5, r3
    3fcc:	91 f0       	breq	.+36     	; 0x3ff2 <LCD_drawChar+0x122>
        if (size == 1) // default size
    3fce:	bb 85       	ldd	r27, Y+11	; 0x0b
    3fd0:	b1 30       	cpi	r27, 0x01	; 1
    3fd2:	39 f4       	brne	.+14     	; 0x3fe2 <LCD_drawChar+0x112>
          LCD_drawPixel(xs+i, ys+j, bg);
    3fd4:	a2 01       	movw	r20, r4
    3fd6:	b6 01       	movw	r22, r12
    3fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fda:	9b 81       	ldd	r25, Y+3	; 0x03
    3fdc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <LCD_drawPixel>
    3fe0:	08 c0       	rjmp	.+16     	; 0x3ff2 <LCD_drawChar+0x122>
        else { // big size
          LCD_fillRect(xs+i*size, ys+j*size, size, size, bg);
    3fe2:	82 01       	movw	r16, r4
    3fe4:	95 01       	movw	r18, r10
    3fe6:	a5 01       	movw	r20, r10
    3fe8:	b7 01       	movw	r22, r14
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	96 2d       	mov	r25, r6
    3fee:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <LCD_fillRect>
        }
      }
      line >>= 1;
    3ff2:	ec 85       	ldd	r30, Y+12	; 0x0c
    3ff4:	e6 95       	lsr	r30
    3ff6:	ec 87       	std	Y+12, r30	; 0x0c
    3ff8:	7a 94       	dec	r7
    3ffa:	e8 0c       	add	r14, r8
    3ffc:	f9 1c       	adc	r15, r9
    3ffe:	ff ef       	ldi	r31, 0xFF	; 255
    4000:	cf 1a       	sub	r12, r31
    4002:	df 0a       	sbc	r13, r31
    uint8_t line;
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
    4004:	71 10       	cpse	r7, r1
    4006:	ca cf       	rjmp	.-108    	; 0x3f9c <LCD_drawChar+0xcc>
    4008:	1b 85       	ldd	r17, Y+11	; 0x0b
void LCD_drawChar(int16_t xs, int16_t ys, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {

  if((xs >= LCD_X) ||(ys >= LCD_Y) || ((xs + 5 * size - 1) < 0) || ((ys + 8 * size - 1) < 0))
    return;

  for (int8_t i=0; i<6; i++ ) {
    400a:	2e 81       	ldd	r18, Y+6	; 0x06
    400c:	2f 5f       	subi	r18, 0xFF	; 255
    400e:	2e 83       	std	Y+6, r18	; 0x06
    4010:	8c 81       	ldd	r24, Y+4	; 0x04
    4012:	9d 81       	ldd	r25, Y+5	; 0x05
    4014:	88 0d       	add	r24, r8
    4016:	99 1d       	adc	r25, r9
    4018:	9d 83       	std	Y+5, r25	; 0x05
    401a:	8c 83       	std	Y+4, r24	; 0x04
    401c:	aa 81       	ldd	r26, Y+2	; 0x02
    401e:	bb 81       	ldd	r27, Y+3	; 0x03
    4020:	11 96       	adiw	r26, 0x01	; 1
    4022:	bb 83       	std	Y+3, r27	; 0x03
    4024:	aa 83       	std	Y+2, r26	; 0x02
    4026:	26 30       	cpi	r18, 0x06	; 6
    4028:	09 f0       	breq	.+2      	; 0x402c <LCD_drawChar+0x15c>
    402a:	ac cf       	rjmp	.-168    	; 0x3f84 <LCD_drawChar+0xb4>
    402c:	0e c0       	rjmp	.+28     	; 0x404a <LCD_drawChar+0x17a>
    uint8_t line;
    if (i == 5)
      line = 0x0;
    402e:	00 e0       	ldi	r16, 0x00	; 0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          LCD_drawPixel(xs+i, ys+j, color);
        else { // big size
          LCD_fillRect(xs+(i*size), ys+(j*size), size, size, color);
    4030:	bc 81       	ldd	r27, Y+4	; 0x04
    4032:	b9 83       	std	Y+1, r27	; 0x01
    4034:	6d 80       	ldd	r6, Y+5	; 0x05
    4036:	ef 80       	ldd	r14, Y+7	; 0x07
    4038:	f8 84       	ldd	r15, Y+8	; 0x08
    403a:	ce 2c       	mov	r12, r14
    403c:	df 2c       	mov	r13, r15
    403e:	68 94       	set
    4040:	77 24       	eor	r7, r7
    4042:	73 f8       	bld	r7, 3
    4044:	0c 87       	std	Y+12, r16	; 0x0c
    4046:	1b 87       	std	Y+11, r17	; 0x0b
    4048:	a9 cf       	rjmp	.-174    	; 0x3f9c <LCD_drawChar+0xcc>
        }
      }
      line >>= 1;
    }
  }
}
    404a:	2c 96       	adiw	r28, 0x0c	; 12
    404c:	0f b6       	in	r0, 0x3f	; 63
    404e:	f8 94       	cli
    4050:	de bf       	out	0x3e, r29	; 62
    4052:	0f be       	out	0x3f, r0	; 63
    4054:	cd bf       	out	0x3d, r28	; 61
    4056:	df 91       	pop	r29
    4058:	cf 91       	pop	r28
    405a:	1f 91       	pop	r17
    405c:	0f 91       	pop	r16
    405e:	ff 90       	pop	r15
    4060:	ef 90       	pop	r14
    4062:	df 90       	pop	r13
    4064:	cf 90       	pop	r12
    4066:	bf 90       	pop	r11
    4068:	af 90       	pop	r10
    406a:	9f 90       	pop	r9
    406c:	8f 90       	pop	r8
    406e:	7f 90       	pop	r7
    4070:	6f 90       	pop	r6
    4072:	5f 90       	pop	r5
    4074:	4f 90       	pop	r4
    4076:	3f 90       	pop	r3
    4078:	2f 90       	pop	r2
    407a:	08 95       	ret

0000407c <LCD_write2>:
	  y = ypos;
      Cursor_X = xpos * FONT_WIDTH * textsize;
      Cursor_Y = ypos * FONT_HEIGHT * textsize;
}

uint8_t LCD_write2(uint8_t c) {
    407c:	ef 92       	push	r14
    407e:	ff 92       	push	r15
    4080:	0f 93       	push	r16
    4082:	1f 93       	push	r17
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
	int txsize,tysize;
    LCD_drawChar(Cursor_X, Cursor_Y, c, textcolor, textbgcolor, textsize);
    4088:	c0 91 1e 01 	lds	r28, 0x011E
    408c:	60 91 23 03 	lds	r22, 0x0323
    4090:	77 27       	eor	r23, r23
    4092:	67 fd       	sbrc	r22, 7
    4094:	70 95       	com	r23
    4096:	90 91 24 03 	lds	r25, 0x0324
    409a:	ec 2e       	mov	r14, r28
    409c:	00 e0       	ldi	r16, 0x00	; 0
    409e:	10 e0       	ldi	r17, 0x00	; 0
    40a0:	2f ef       	ldi	r18, 0xFF	; 255
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	48 2f       	mov	r20, r24
    40a6:	89 2f       	mov	r24, r25
    40a8:	99 27       	eor	r25, r25
    40aa:	87 fd       	sbrc	r24, 7
    40ac:	90 95       	com	r25
    40ae:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <LCD_drawChar>

    txsize = FONT_WIDTH * textsize;
    40b2:	ec 2e       	mov	r14, r28
    40b4:	f1 2c       	mov	r15, r1
    40b6:	e7 01       	movw	r28, r14
    40b8:	cc 0f       	add	r28, r28
    40ba:	dd 1f       	adc	r29, r29
    40bc:	ce 0d       	add	r28, r14
    40be:	df 1d       	adc	r29, r15
    40c0:	cc 0f       	add	r28, r28
    40c2:	dd 1f       	adc	r29, r29
    tysize = FONT_HEIGHT * textsize;
    40c4:	ee 0c       	add	r14, r14
    40c6:	ff 1c       	adc	r15, r15
    40c8:	ee 0c       	add	r14, r14
    40ca:	ff 1c       	adc	r15, r15
    40cc:	ee 0c       	add	r14, r14
    40ce:	ff 1c       	adc	r15, r15

	if(x + 1 < LCD_COLUMN_NUMBER) x += 1;
    40d0:	80 91 29 03 	lds	r24, 0x0329
    40d4:	90 91 2a 03 	lds	r25, 0x032A
    40d8:	01 96       	adiw	r24, 0x01	; 1
    40da:	80 31       	cpi	r24, 0x10	; 16
    40dc:	91 05       	cpc	r25, r1
    40de:	28 f4       	brcc	.+10     	; 0x40ea <LCD_write2+0x6e>
    40e0:	90 93 2a 03 	sts	0x032A, r25
    40e4:	80 93 29 03 	sts	0x0329, r24
    40e8:	13 c0       	rjmp	.+38     	; 0x4110 <LCD_write2+0x94>
	else {	x=0;
    40ea:	10 92 2a 03 	sts	0x032A, r1
    40ee:	10 92 29 03 	sts	0x0329, r1
		if (y < LCD_LINE_NUMBER - 1) y += 1;
    40f2:	80 91 27 03 	lds	r24, 0x0327
    40f6:	90 91 28 03 	lds	r25, 0x0328
    40fa:	87 30       	cpi	r24, 0x07	; 7
    40fc:	91 05       	cpc	r25, r1
    40fe:	30 f4       	brcc	.+12     	; 0x410c <LCD_write2+0x90>
    4100:	01 96       	adiw	r24, 0x01	; 1
    4102:	90 93 28 03 	sts	0x0328, r25
    4106:	80 93 27 03 	sts	0x0327, r24
    410a:	02 c0       	rjmp	.+4      	; 0x4110 <LCD_write2+0x94>
			else LCD_CLEAR();
    410c:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
	}
	Cursor_X = x * txsize;
    4110:	80 91 29 03 	lds	r24, 0x0329
    4114:	8c 9f       	mul	r24, r28
    4116:	c0 2d       	mov	r28, r0
    4118:	11 24       	eor	r1, r1
    411a:	c0 93 24 03 	sts	0x0324, r28
	Cursor_Y = y * tysize;
    411e:	80 91 27 03 	lds	r24, 0x0327
    4122:	8e 9d       	mul	r24, r14
    4124:	e0 2c       	mov	r14, r0
    4126:	11 24       	eor	r1, r1
    4128:	e0 92 23 03 	sts	0x0323, r14
      }
      if(Cursor_Y > LCD_Y - tysize)
    	  Cursor_Y = 0;
*/
  return 0;
}
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	1f 91       	pop	r17
    4134:	0f 91       	pop	r16
    4136:	ff 90       	pop	r15
    4138:	ef 90       	pop	r14
    413a:	08 95       	ret

0000413c <LCD_draw_string2>:
		LCD_write2(pgm_read_byte(&text[i]));
	}
}
*/
void LCD_draw_string2(char* text)
{
    413c:	1f 93       	push	r17
    413e:	cf 93       	push	r28
    4140:	df 93       	push	r29
    4142:	ec 01       	movw	r28, r24
	for (unsigned char i = 0; text[i]; i++)
    4144:	88 81       	ld	r24, Y
    4146:	88 23       	and	r24, r24
    4148:	51 f0       	breq	.+20     	; 0x415e <LCD_draw_string2+0x22>
    414a:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_write2(text[i]);
    414c:	0e 94 3e 20 	call	0x407c	; 0x407c <LCD_write2>
	}
}
*/
void LCD_draw_string2(char* text)
{
	for (unsigned char i = 0; text[i]; i++)
    4150:	1f 5f       	subi	r17, 0xFF	; 255
    4152:	fe 01       	movw	r30, r28
    4154:	e1 0f       	add	r30, r17
    4156:	f1 1d       	adc	r31, r1
    4158:	80 81       	ld	r24, Z
    415a:	81 11       	cpse	r24, r1
    415c:	f7 cf       	rjmp	.-18     	; 0x414c <LCD_draw_string2+0x10>
	{
		LCD_write2(text[i]);
	}
}
    415e:	df 91       	pop	r29
    4160:	cf 91       	pop	r28
    4162:	1f 91       	pop	r17
    4164:	08 95       	ret

00004166 <LCD_draw_string3>:

void LCD_draw_string3(const char* text)
{
	strncpy_P(wbuffer,(PGM_P)text,LCD_COLUMN_NUMBER);
    4166:	40 e1       	ldi	r20, 0x10	; 16
    4168:	50 e0       	ldi	r21, 0x00	; 0
    416a:	bc 01       	movw	r22, r24
    416c:	88 e4       	ldi	r24, 0x48	; 72
    416e:	93 e0       	ldi	r25, 0x03	; 3
    4170:	0e 94 76 29 	call	0x52ec	; 0x52ec <strncpy_P>
	wbuffer[LCD_COLUMN_NUMBER]='\0';
    4174:	10 92 58 03 	sts	0x0358, r1
	LCD_draw_string2(wbuffer);
    4178:	88 e4       	ldi	r24, 0x48	; 72
    417a:	93 e0       	ldi	r25, 0x03	; 3
    417c:	0e 94 9e 20 	call	0x413c	; 0x413c <LCD_draw_string2>
    4180:	08 95       	ret

00004182 <LCD_drawFastHLine>:

void LCD_drawFastVLine(int16_t xq, int16_t yq, int16_t h, uint16_t color) {
  LCD_drawLine(xq, yq, xq, yq+h-1, color);
}

void LCD_drawFastHLine(int16_t xq, int16_t yq, int16_t w, uint16_t color) {
    4182:	0f 93       	push	r16
    4184:	1f 93       	push	r17
  LCD_drawLine(xq, yq, xq+w-1, yq, color);
    4186:	48 0f       	add	r20, r24
    4188:	59 1f       	adc	r21, r25
    418a:	41 50       	subi	r20, 0x01	; 1
    418c:	51 09       	sbc	r21, r1
    418e:	89 01       	movw	r16, r18
    4190:	9b 01       	movw	r18, r22
    4192:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <LCD_drawLine>
}
    4196:	1f 91       	pop	r17
    4198:	0f 91       	pop	r16
    419a:	08 95       	ret

0000419c <LCD_setTextSize>:
    }
  }
}
*/
void LCD_setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
    419c:	81 11       	cpse	r24, r1
    419e:	01 c0       	rjmp	.+2      	; 0x41a2 <LCD_setTextSize+0x6>
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	80 93 1e 01 	sts	0x011E, r24
    41a6:	08 95       	ret

000041a8 <NoneFunc>:

*/

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void NoneFunc()
{
    41a8:	08 95       	ret

000041aa <LcdPutInt>:
//	_delay_ms(50);
}
//
void LcdPutInt(int i)
{
    41aa:	cf 93       	push	r28
    41ac:	df 93       	push	r29
    41ae:	cd b7       	in	r28, 0x3d	; 61
    41b0:	de b7       	in	r29, 0x3e	; 62
    41b2:	61 97       	sbiw	r28, 0x11	; 17
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	de bf       	out	0x3e, r29	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	cd bf       	out	0x3d, r28	; 61
    41be:	4a e0       	ldi	r20, 0x0A	; 10
    41c0:	be 01       	movw	r22, r28
    41c2:	6f 5f       	subi	r22, 0xFF	; 255
    41c4:	7f 4f       	sbci	r23, 0xFF	; 255
    41c6:	0e 94 fe 29 	call	0x53fc	; 0x53fc <__itoa_ncheck>
//	uint8_t ln, k;
	char printbuff[17];
//	ln = strlen(itoa(i, printbuff, 10));
	itoa(i, printbuff, 10);
	LCD_STR(FONT_1X,printbuff);
    41ca:	ce 01       	movw	r24, r28
    41cc:	01 96       	adiw	r24, 0x01	; 1
    41ce:	0e 94 9e 20 	call	0x413c	; 0x413c <LCD_draw_string2>
		if (y < LCD_LINE_NUMBER - 1) y += 1;
			else {y = 0; LCD_CLEAR();}
			x = ln - k;
	}
*/
}
    41d2:	61 96       	adiw	r28, 0x11	; 17
    41d4:	0f b6       	in	r0, 0x3f	; 63
    41d6:	f8 94       	cli
    41d8:	de bf       	out	0x3e, r29	; 62
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	cd bf       	out	0x3d, r28	; 61
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	08 95       	ret

000041e4 <LcdNextStr>:
	LCD_STR(FONT_1X,(unsigned char*) printbuff);
}
*/
void LcdNextStr(void)
{
	if (y < LCD_LINE_NUMBER - 1) {
    41e4:	60 91 27 03 	lds	r22, 0x0327
    41e8:	70 91 28 03 	lds	r23, 0x0328
    41ec:	67 30       	cpi	r22, 0x07	; 7
    41ee:	71 05       	cpc	r23, r1
    41f0:	50 f4       	brcc	.+20     	; 0x4206 <LcdNextStr+0x22>
		y += 1;
    41f2:	6f 5f       	subi	r22, 0xFF	; 255
    41f4:	7f 4f       	sbci	r23, 0xFF	; 255
    41f6:	70 93 28 03 	sts	0x0328, r23
    41fa:	60 93 27 03 	sts	0x0327, r22
		LCD_GOTO_XY(0,y);
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <LCD_set_position2>
    4204:	08 95       	ret
	} else LCD_CLEAR();
    4206:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_Clear>
    420a:	08 95       	ret

0000420c <LcdFirstLine>:
/*
	x=0;
	y=0;
	LCD_GOTO_XY(x,y);
*/
	LCD_GOTO_XY(0,0);
    420c:	60 e0       	ldi	r22, 0x00	; 0
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <LCD_set_position2>
    4214:	08 95       	ret

00004216 <ReturnXPos>:
	
}

void ReturnXPos(uint8_t ps){
	if (x >= ps) x -= ps;
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	20 91 29 03 	lds	r18, 0x0329
    421c:	30 91 2a 03 	lds	r19, 0x032A
    4220:	28 17       	cp	r18, r24
    4222:	39 07       	cpc	r19, r25
    4224:	38 f0       	brcs	.+14     	; 0x4234 <ReturnXPos+0x1e>
    4226:	28 1b       	sub	r18, r24
    4228:	39 0b       	sbc	r19, r25
    422a:	30 93 2a 03 	sts	0x032A, r19
    422e:	20 93 29 03 	sts	0x0329, r18
    4232:	15 c0       	rjmp	.+42     	; 0x425e <ReturnXPos+0x48>
	else {
		if ( y > 0 ) y -= 1;
    4234:	40 91 27 03 	lds	r20, 0x0327
    4238:	50 91 28 03 	lds	r21, 0x0328
    423c:	41 15       	cp	r20, r1
    423e:	51 05       	cpc	r21, r1
    4240:	31 f0       	breq	.+12     	; 0x424e <ReturnXPos+0x38>
    4242:	41 50       	subi	r20, 0x01	; 1
    4244:	51 09       	sbc	r21, r1
    4246:	50 93 28 03 	sts	0x0328, r21
    424a:	40 93 27 03 	sts	0x0327, r20
		  x = LCD_COLUMN_NUMBER - (ps - x);
    424e:	20 5f       	subi	r18, 0xF0	; 240
    4250:	3f 4f       	sbci	r19, 0xFF	; 255
    4252:	28 1b       	sub	r18, r24
    4254:	39 0b       	sbc	r19, r25
    4256:	30 93 2a 03 	sts	0x032A, r19
    425a:	20 93 29 03 	sts	0x0329, r18
	}
	LCD_GOTO_XY(x,y);
    425e:	60 91 27 03 	lds	r22, 0x0327
    4262:	80 91 29 03 	lds	r24, 0x0329
    4266:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <LCD_set_position2>
    426a:	08 95       	ret

0000426c <LcdWrite>:
}
//
//FILE lcd_str = FDEV_SETUP_STREAM(LcdWrite, NULL, _FDEV_SETUP_WRITE);
int LcdWrite ( char c, FILE *stream ){
	if (c == 0x0A)
    426c:	8a 30       	cpi	r24, 0x0A	; 10
    426e:	19 f4       	brne	.+6      	; 0x4276 <LcdWrite+0xa>
		LCD_NEXTSTR();
    4270:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <LcdNextStr>
    4274:	04 c0       	rjmp	.+8      	; 0x427e <LcdWrite+0x12>
	else if (c >= 0x20){
    4276:	80 32       	cpi	r24, 0x20	; 32
    4278:	10 f0       	brcs	.+4      	; 0x427e <LcdWrite+0x12>
		LCD_PUTCHAR(FONT_1X,c);
    427a:	0e 94 3e 20 	call	0x407c	; 0x407c <LCD_write2>
		}
*/
	}

	return 0;
}
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	08 95       	ret

00004284 <__vector_21>:
#include <avr/pgmspace.h>
#include "adc.h"

ISR(ADC_vect, ISR_NAKED)
{
    asm volatile(
    4284:	0c 94 12 05 	jmp	0xa24	; 0xa24 <IntAdc>

00004288 <__vector_23>:
    ::);
}
//
ISR(ANALOG_COMP_vect, ISR_NAKED)
{
    asm volatile(
    4288:	0c 94 30 05 	jmp	0xa60	; 0xa60 <IntAnalogComp>

0000428c <gsm_init>:

extern void DoWatchDog(void);

// gsm_init Doesn't work ?
void gsm_init(void (*sendByte_func)(unsigned char c), int (*getByte_func)(void)){
	gsm_send_byte = sendByte_func;
    428c:	90 93 22 01 	sts	0x0122, r25
    4290:	80 93 21 01 	sts	0x0121, r24
	gsm_get_byte = getByte_func;
    4294:	70 93 24 01 	sts	0x0124, r23
    4298:	60 93 23 01 	sts	0x0123, r22
    429c:	08 95       	ret

0000429e <gsm_del_sms>:

	return -1;
}

//----------------------------------
int gsm_del_sms( int index ){
    429e:	cf 93       	push	r28
    42a0:	df 93       	push	r29
    42a2:	ec 01       	movw	r28, r24
	//lcd_clear(); lcd_print("del-1"); _delay_ms(10); lcd_clear();
	//rprintfInit(gsm_send_byte);
	//lcd_clear(); lcd_print("del-2"); _delay_ms(10); lcd_clear();
	//ozh rprintf("AT+CMGD=%d\n", index);

	uart_puts_p(PSTR("AT+CMGD="));
    42a4:	85 ec       	ldi	r24, 0xC5	; 197
    42a6:	99 e0       	ldi	r25, 0x09	; 9
    42a8:	0e 94 47 18 	call	0x308e	; 0x308e <uart_puts_p>
	uart_put_int(index);
    42ac:	ce 01       	movw	r24, r28
    42ae:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <uart_put_int>
	uart_puts_p("\n");
    42b2:	89 e4       	ldi	r24, 0x49	; 73
    42b4:	92 e0       	ldi	r25, 0x02	; 2
    42b6:	0e 94 47 18 	call	0x308e	; 0x308e <uart_puts_p>

	//lcd_clear(); lcd_print("del-3"); _delay_ms(10); lcd_clear();
	DoWatchDog();
    42ba:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    42be:	2f ef       	ldi	r18, 0xFF	; 255
    42c0:	84 e3       	ldi	r24, 0x34	; 52
    42c2:	9c e0       	ldi	r25, 0x0C	; 12
    42c4:	21 50       	subi	r18, 0x01	; 1
    42c6:	80 40       	sbci	r24, 0x00	; 0
    42c8:	90 40       	sbci	r25, 0x00	; 0
    42ca:	e1 f7       	brne	.-8      	; 0x42c4 <gsm_del_sms+0x26>
    42cc:	00 c0       	rjmp	.+0      	; 0x42ce <gsm_del_sms+0x30>
    42ce:	00 00       	nop
	_delay_ms(500);

	return TRUE;
}
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	df 91       	pop	r29
    42d6:	cf 91       	pop	r28
    42d8:	08 95       	ret

000042da <gsm_read_token>:
}
*/


//-----------------------------------
int gsm_read_token( char *src, char *dest, char lenght, char nToken, char *delimiter ){
    42da:	9f 92       	push	r9
    42dc:	af 92       	push	r10
    42de:	bf 92       	push	r11
    42e0:	cf 92       	push	r12
    42e2:	df 92       	push	r13
    42e4:	ef 92       	push	r14
    42e6:	ff 92       	push	r15
    42e8:	0f 93       	push	r16
    42ea:	1f 93       	push	r17
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	ec 01       	movw	r28, r24
    42f2:	5b 01       	movw	r10, r22
    42f4:	94 2e       	mov	r9, r20
    42f6:	e2 2e       	mov	r14, r18
  int i;
  char *temp_p = malloc( strlen(src) );
    42f8:	fc 01       	movw	r30, r24
    42fa:	01 90       	ld	r0, Z+
    42fc:	00 20       	and	r0, r0
    42fe:	e9 f7       	brne	.-6      	; 0x42fa <gsm_read_token+0x20>
    4300:	cf 01       	movw	r24, r30
    4302:	01 97       	sbiw	r24, 0x01	; 1
    4304:	8c 1b       	sub	r24, r28
    4306:	9d 0b       	sbc	r25, r29
    4308:	0e 94 2c 28 	call	0x5058	; 0x5058 <malloc>
    430c:	6c 01       	movw	r12, r24
  char *token;

  // make backup from src and store in temp_p space
  strcpy( temp_p, src );
    430e:	be 01       	movw	r22, r28
    4310:	0e 94 97 29 	call	0x532e	; 0x532e <strcpy>
  token = strtok( temp_p, delimiter );
    4314:	b8 01       	movw	r22, r16
    4316:	c6 01       	movw	r24, r12
    4318:	0e 94 85 29 	call	0x530a	; 0x530a <strtok>

  // seek to specified token
  for(i=1; i<=nToken; i++)
    431c:	f1 2c       	mov	r15, r1
    431e:	1e 14       	cp	r1, r14
    4320:	1f 04       	cpc	r1, r15
    4322:	5c f4       	brge	.+22     	; 0x433a <gsm_read_token+0x60>
    4324:	c1 e0       	ldi	r28, 0x01	; 1
    4326:	d0 e0       	ldi	r29, 0x00	; 0
    token = strtok( NULL, delimiter );
    4328:	b8 01       	movw	r22, r16
    432a:	80 e0       	ldi	r24, 0x00	; 0
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	0e 94 85 29 	call	0x530a	; 0x530a <strtok>
  // make backup from src and store in temp_p space
  strcpy( temp_p, src );
  token = strtok( temp_p, delimiter );

  // seek to specified token
  for(i=1; i<=nToken; i++)
    4332:	21 96       	adiw	r28, 0x01	; 1
    4334:	ec 16       	cp	r14, r28
    4336:	fd 06       	cpc	r15, r29
    4338:	bc f7       	brge	.-18     	; 0x4328 <gsm_read_token+0x4e>
    token = strtok( NULL, delimiter );

  // return specified token if availabe
  // AND check lenght of this token
  if( token != NULL && strlen(token) < lenght){
    433a:	00 97       	sbiw	r24, 0x00	; 0
    433c:	b1 f0       	breq	.+44     	; 0x436a <gsm_read_token+0x90>
    433e:	fc 01       	movw	r30, r24
    4340:	01 90       	ld	r0, Z+
    4342:	00 20       	and	r0, r0
    4344:	e9 f7       	brne	.-6      	; 0x4340 <gsm_read_token+0x66>
    4346:	31 97       	sbiw	r30, 0x01	; 1
    4348:	e8 1b       	sub	r30, r24
    434a:	f9 0b       	sbc	r31, r25
    434c:	29 2d       	mov	r18, r9
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	e2 17       	cp	r30, r18
    4352:	f3 07       	cpc	r31, r19
    4354:	50 f4       	brcc	.+20     	; 0x436a <gsm_read_token+0x90>
    strcpy(dest, token);
    4356:	bc 01       	movw	r22, r24
    4358:	c5 01       	movw	r24, r10
    435a:	0e 94 97 29 	call	0x532e	; 0x532e <strcpy>
    free( temp_p );
    435e:	c6 01       	movw	r24, r12
    4360:	0e 94 c4 28 	call	0x5188	; 0x5188 <free>
    return 0;
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	07 c0       	rjmp	.+14     	; 0x4378 <gsm_read_token+0x9e>
  }

  // Terminate destination with null and return error code
  *dest = 0;
    436a:	f5 01       	movw	r30, r10
    436c:	10 82       	st	Z, r1
  free( temp_p );
    436e:	c6 01       	movw	r24, r12
    4370:	0e 94 c4 28 	call	0x5188	; 0x5188 <free>
  return 1;
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
}
    4378:	df 91       	pop	r29
    437a:	cf 91       	pop	r28
    437c:	1f 91       	pop	r17
    437e:	0f 91       	pop	r16
    4380:	ff 90       	pop	r15
    4382:	ef 90       	pop	r14
    4384:	df 90       	pop	r13
    4386:	cf 90       	pop	r12
    4388:	bf 90       	pop	r11
    438a:	af 90       	pop	r10
    438c:	9f 90       	pop	r9
    438e:	08 95       	ret

00004390 <gsm_remove_char>:

//-----------------------------------
void gsm_remove_char( char *dest, char *src, char c ){
    4390:	df 92       	push	r13
    4392:	ef 92       	push	r14
    4394:	ff 92       	push	r15
    4396:	0f 93       	push	r16
    4398:	1f 93       	push	r17
    439a:	cf 93       	push	r28
    439c:	df 93       	push	r29
    439e:	8c 01       	movw	r16, r24
    43a0:	eb 01       	movw	r28, r22
    43a2:	f4 2e       	mov	r15, r20
	char *buffer = malloc( strlen(src) );
    43a4:	fb 01       	movw	r30, r22
    43a6:	01 90       	ld	r0, Z+
    43a8:	00 20       	and	r0, r0
    43aa:	e9 f7       	brne	.-6      	; 0x43a6 <gsm_remove_char+0x16>
    43ac:	31 97       	sbiw	r30, 0x01	; 1
    43ae:	cf 01       	movw	r24, r30
    43b0:	86 1b       	sub	r24, r22
    43b2:	97 0b       	sbc	r25, r23
    43b4:	0e 94 2c 28 	call	0x5058	; 0x5058 <malloc>
    43b8:	d8 2e       	mov	r13, r24
    43ba:	e9 2e       	mov	r14, r25
	char *p = buffer;

	printf("%s\n", src);
    43bc:	ce 01       	movw	r24, r28
    43be:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <puts>

	for( ; *src != 0; src++ ){
    43c2:	28 81       	ld	r18, Y
    43c4:	22 23       	and	r18, r18
    43c6:	51 f0       	breq	.+20     	; 0x43dc <gsm_remove_char+0x4c>
    43c8:	fe 01       	movw	r30, r28
    43ca:	31 96       	adiw	r30, 0x01	; 1
}

//-----------------------------------
void gsm_remove_char( char *dest, char *src, char c ){
	char *buffer = malloc( strlen(src) );
	char *p = buffer;
    43cc:	ad 2d       	mov	r26, r13
    43ce:	be 2d       	mov	r27, r14

	printf("%s\n", src);

	for( ; *src != 0; src++ ){
		if( *src != c ){
    43d0:	2f 11       	cpse	r18, r15
			*p = *src;
    43d2:	2d 93       	st	X+, r18
	char *buffer = malloc( strlen(src) );
	char *p = buffer;

	printf("%s\n", src);

	for( ; *src != 0; src++ ){
    43d4:	21 91       	ld	r18, Z+
    43d6:	21 11       	cpse	r18, r1
    43d8:	fb cf       	rjmp	.-10     	; 0x43d0 <gsm_remove_char+0x40>
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <gsm_remove_char+0x50>
}

//-----------------------------------
void gsm_remove_char( char *dest, char *src, char c ){
	char *buffer = malloc( strlen(src) );
	char *p = buffer;
    43dc:	ad 2d       	mov	r26, r13
    43de:	be 2d       	mov	r27, r14
			*p = *src;
			p++;
		}
	}

	*p = 0;
    43e0:	1c 92       	st	X, r1
	strcpy(dest, buffer);
    43e2:	6d 2d       	mov	r22, r13
    43e4:	7e 2d       	mov	r23, r14
    43e6:	c8 01       	movw	r24, r16
    43e8:	0e 94 97 29 	call	0x532e	; 0x532e <strcpy>
	free( buffer );
    43ec:	8d 2d       	mov	r24, r13
    43ee:	9e 2d       	mov	r25, r14
    43f0:	0e 94 c4 28 	call	0x5188	; 0x5188 <free>
}
    43f4:	df 91       	pop	r29
    43f6:	cf 91       	pop	r28
    43f8:	1f 91       	pop	r17
    43fa:	0f 91       	pop	r16
    43fc:	ff 90       	pop	r15
    43fe:	ef 90       	pop	r14
    4400:	df 90       	pop	r13
    4402:	08 95       	ret

00004404 <gsm_command>:
int gsm_command(char *command ){
	//gsm_rprintf_init();
	//rprintfInit(gsm_send_byte);

	//ozh rprintfStr( command );
	uart_puts(command);
    4404:	0e 94 38 18 	call	0x3070	; 0x3070 <uart_puts>
	//ozh rprintfChar('\n');
	uart_putc('\n');
    4408:	8a e0       	ldi	r24, 0x0A	; 10
    440a:	0e 94 23 18 	call	0x3046	; 0x3046 <uart_putc>
	DoWatchDog();
    440e:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    4412:	2f ef       	ldi	r18, 0xFF	; 255
    4414:	89 e6       	ldi	r24, 0x69	; 105
    4416:	98 e1       	ldi	r25, 0x18	; 24
    4418:	21 50       	subi	r18, 0x01	; 1
    441a:	80 40       	sbci	r24, 0x00	; 0
    441c:	90 40       	sbci	r25, 0x00	; 0
    441e:	e1 f7       	brne	.-8      	; 0x4418 <gsm_command+0x14>
    4420:	00 c0       	rjmp	.+0      	; 0x4422 <gsm_command+0x1e>
    4422:	00 00       	nop
	_delay_ms(1000);
	DoWatchDog();
    4424:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
	return TRUE;
}
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	08 95       	ret

0000442e <gsm_text_sms>:
// ##################################################################################
// #               SMS FUNCTIONS																								#####
// ##################################################################################

void gsm_text_sms(void){
	gsm_command("AT+CMGF=1");
    442e:	8b e4       	ldi	r24, 0x4B	; 75
    4430:	92 e0       	ldi	r25, 0x02	; 2
    4432:	0e 94 02 22 	call	0x4404	; 0x4404 <gsm_command>
    4436:	08 95       	ret

00004438 <gsm_flush_buffer>:
//-----------------------------------
void gsm_flush_buffer( void ){
	int i;
	// Read uart buffer until no byte available
	do{
		i = gsm_get_byte();
    4438:	e0 91 23 01 	lds	r30, 0x0123
    443c:	f0 91 24 01 	lds	r31, 0x0124
    4440:	09 95       	icall
	//}while( i != -1UART_NO_DATA );
	}while( i != UART_NO_DATA );
    4442:	81 15       	cp	r24, r1
    4444:	91 40       	sbci	r25, 0x01	; 1
    4446:	c1 f7       	brne	.-16     	; 0x4438 <gsm_flush_buffer>
}
    4448:	08 95       	ret

0000444a <gsm_readline>:

// ##################################################################################
// #               LOW LEVEL FUNCTIONS                                              #
// ##################################################################################
int gsm_readline( char *str, int lenght ){
    444a:	cf 92       	push	r12
    444c:	df 92       	push	r13
    444e:	ef 92       	push	r14
    4450:	ff 92       	push	r15
    4452:	0f 93       	push	r16
    4454:	1f 93       	push	r17
    4456:	cf 93       	push	r28
    4458:	df 93       	push	r29
    445a:	6c 01       	movw	r12, r24
    445c:	7b 01       	movw	r14, r22
	int count=0;
	// make a backup from str pointer
	char *p = str;

	// Terminate string with null
	*str = 0;
    445e:	dc 01       	movw	r26, r24
    4460:	1c 92       	st	X, r1
    4462:	8c 01       	movw	r16, r24
// ##################################################################################
// #               LOW LEVEL FUNCTIONS                                              #
// ##################################################################################
int gsm_readline( char *str, int lenght ){
	int i;
	int count=0;
    4464:	c0 e0       	ldi	r28, 0x00	; 0
    4466:	d0 e0       	ldi	r29, 0x00	; 0
	// Terminate string with null
	*str = 0;

	while(1){
		// Read serial input buffer
		i = gsm_get_byte();
    4468:	e0 91 23 01 	lds	r30, 0x0123
    446c:	f0 91 24 01 	lds	r31, 0x0124
    4470:	09 95       	icall

		// break from while if no byte available
		//ozh if( i == -1 ) break;
		if( i == UART_NO_DATA ) break;
    4472:	81 15       	cp	r24, r1
    4474:	b1 e0       	ldi	r27, 0x01	; 1
    4476:	9b 07       	cpc	r25, r27
    4478:	b1 f0       	breq	.+44     	; 0x44a6 <gsm_readline+0x5c>

		// check for ascii characters
		if( i >= 0x20 && i <= 0x7F ){
    447a:	9c 01       	movw	r18, r24
    447c:	20 52       	subi	r18, 0x20	; 32
    447e:	31 09       	sbc	r19, r1
    4480:	20 36       	cpi	r18, 0x60	; 96
    4482:	31 05       	cpc	r19, r1
    4484:	58 f4       	brcc	.+22     	; 0x449c <gsm_readline+0x52>
			if( count < lenght ){
    4486:	ce 15       	cp	r28, r14
    4488:	df 05       	cpc	r29, r15
    448a:	74 f7       	brge	.-36     	; 0x4468 <gsm_readline+0x1e>
				*str = i;
    448c:	f8 01       	movw	r30, r16
    448e:	81 93       	st	Z+, r24
				str++; count++;
    4490:	21 96       	adiw	r28, 0x01	; 1
				*str = 0;
    4492:	d8 01       	movw	r26, r16
    4494:	11 96       	adiw	r26, 0x01	; 1
    4496:	1c 92       	st	X, r1

		// check for ascii characters
		if( i >= 0x20 && i <= 0x7F ){
			if( count < lenght ){
				*str = i;
				str++; count++;
    4498:	8f 01       	movw	r16, r30
    449a:	e6 cf       	rjmp	.-52     	; 0x4468 <gsm_readline+0x1e>
				*str = 0;
			}
		// check carriage return and line feed characters
		}else if( i == '\r' || i == '\n' ){
    449c:	8d 30       	cpi	r24, 0x0D	; 13
    449e:	91 05       	cpc	r25, r1
    44a0:	11 f0       	breq	.+4      	; 0x44a6 <gsm_readline+0x5c>
    44a2:	0a 97       	sbiw	r24, 0x0a	; 10
    44a4:	09 f7       	brne	.-62     	; 0x4468 <gsm_readline+0x1e>
		}
	}

	// Recover str pointer for check lenght of recieved line
	str = p;
	if( strlen(str) > 0 )
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	f6 01       	movw	r30, r12
    44ac:	20 81       	ld	r18, Z
    44ae:	21 11       	cpse	r18, r1
    44b0:	02 c0       	rjmp	.+4      	; 0x44b6 <gsm_readline+0x6c>
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	90 e0       	ldi	r25, 0x00	; 0
		return TRUE;
	else
		return FALSE;
}
    44b6:	df 91       	pop	r29
    44b8:	cf 91       	pop	r28
    44ba:	1f 91       	pop	r17
    44bc:	0f 91       	pop	r16
    44be:	ff 90       	pop	r15
    44c0:	ef 90       	pop	r14
    44c2:	df 90       	pop	r13
    44c4:	cf 90       	pop	r12
    44c6:	08 95       	ret

000044c8 <gsm_read_sms>:
	// return 0 if no new sms available
	return 0;
}

//----------------------------------
int gsm_read_sms( int index, SMS *sms ){
    44c8:	cf 92       	push	r12
    44ca:	df 92       	push	r13
    44cc:	ef 92       	push	r14
    44ce:	ff 92       	push	r15
    44d0:	0f 93       	push	r16
    44d2:	1f 93       	push	r17
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
    44dc:	c0 59       	subi	r28, 0x90	; 144
    44de:	d1 40       	sbci	r29, 0x01	; 1
    44e0:	0f b6       	in	r0, 0x3f	; 63
    44e2:	f8 94       	cli
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	cd bf       	out	0x3d, r28	; 61
    44ea:	8c 01       	movw	r16, r24
    44ec:	6b 01       	movw	r12, r22
	char line[200], token[200];

	//uartFlushReceiveBuffer(gsm_nUart);
	//gsm_rprintf_init();

	gsm_flush_buffer();
    44ee:	0e 94 1c 22 	call	0x4438	; 0x4438 <gsm_flush_buffer>
	//ozh rprintfInit(gsm_send_byte);
	//ozh rprintf("AT+CMGR=%d\n", index);
	uart_puts_P("AT+CMGR=");
    44f2:	8d ed       	ldi	r24, 0xDD	; 221
    44f4:	99 e0       	ldi	r25, 0x09	; 9
    44f6:	0e 94 47 18 	call	0x308e	; 0x308e <uart_puts_p>
	uart_put_int(index);
    44fa:	c8 01       	movw	r24, r16
    44fc:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <uart_put_int>
	uart_puts_P("\n");
    4500:	8b ed       	ldi	r24, 0xDB	; 219
    4502:	99 e0       	ldi	r25, 0x09	; 9
    4504:	0e 94 47 18 	call	0x308e	; 0x308e <uart_puts_p>
	DoWatchDog();
    4508:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    450c:	2f ef       	ldi	r18, 0xFF	; 255
    450e:	89 e6       	ldi	r24, 0x69	; 105
    4510:	98 e1       	ldi	r25, 0x18	; 24
    4512:	21 50       	subi	r18, 0x01	; 1
    4514:	80 40       	sbci	r24, 0x00	; 0
    4516:	90 40       	sbci	r25, 0x00	; 0
    4518:	e1 f7       	brne	.-8      	; 0x4512 <gsm_read_sms+0x4a>
    451a:	00 c0       	rjmp	.+0      	; 0x451c <gsm_read_sms+0x54>
    451c:	00 00       	nop
	_delay_ms(1000);
	DoWatchDog();
    451e:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    4522:	08 ec       	ldi	r16, 0xC8	; 200
    4524:	10 e0       	ldi	r17, 0x00	; 0

	// Make a finite loop
	for(i=0; i<200; i++){
		if( gsm_readline(line, sizeof(line)) == TRUE ){
    4526:	68 ec       	ldi	r22, 0xC8	; 200
    4528:	70 e0       	ldi	r23, 0x00	; 0
    452a:	ce 01       	movw	r24, r28
    452c:	01 96       	adiw	r24, 0x01	; 1
    452e:	0e 94 25 22 	call	0x444a	; 0x444a <gsm_readline>
    4532:	7c 01       	movw	r14, r24
    4534:	81 30       	cpi	r24, 0x01	; 1
    4536:	91 05       	cpc	r25, r1
    4538:	09 f0       	breq	.+2      	; 0x453c <gsm_read_sms+0x74>
    453a:	64 c0       	rjmp	.+200    	; 0x4604 <gsm_read_sms+0x13c>
			if( strstr(line, "+CMGR") != NULL ){
    453c:	65 e5       	ldi	r22, 0x55	; 85
    453e:	72 e0       	ldi	r23, 0x02	; 2
    4540:	ce 01       	movw	r24, r28
    4542:	01 96       	adiw	r24, 0x01	; 1
    4544:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    4548:	89 2b       	or	r24, r25
    454a:	09 f4       	brne	.+2      	; 0x454e <gsm_read_sms+0x86>
    454c:	5b c0       	rjmp	.+182    	; 0x4604 <gsm_read_sms+0x13c>
				// CMGR output format :
				// +CMGR: "REC READ","+989372391694","","2011/08/27 09:10:06+18"
				// Message Body

				if( strstr(line, "REC READ") != NULL )
    454e:	6b e5       	ldi	r22, 0x5B	; 91
    4550:	72 e0       	ldi	r23, 0x02	; 2
    4552:	ce 01       	movw	r24, r28
    4554:	01 96       	adiw	r24, 0x01	; 1
    4556:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    455a:	89 2b       	or	r24, r25
    455c:	31 f0       	breq	.+12     	; 0x456a <gsm_read_sms+0xa2>
					sms->stat = SMS_READ;
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	f6 01       	movw	r30, r12
    4562:	e3 53       	subi	r30, 0x33	; 51
    4564:	ff 4f       	sbci	r31, 0xFF	; 255
    4566:	80 83       	st	Z, r24
    4568:	0c c0       	rjmp	.+24     	; 0x4582 <gsm_read_sms+0xba>
				else if( strstr(line, "REC UNREAD") != NULL )
    456a:	64 e6       	ldi	r22, 0x64	; 100
    456c:	72 e0       	ldi	r23, 0x02	; 2
    456e:	ce 01       	movw	r24, r28
    4570:	01 96       	adiw	r24, 0x01	; 1
    4572:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    4576:	89 2b       	or	r24, r25
    4578:	21 f0       	breq	.+8      	; 0x4582 <gsm_read_sms+0xba>
					sms->stat = SMS_UNREAD;
    457a:	f6 01       	movw	r30, r12
    457c:	e3 53       	subi	r30, 0x33	; 51
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	10 82       	st	Z, r1

				// store sms Number in sms->number
				gsm_read_token( line, token, sizeof(token), 1, "," );
    4582:	0f e6       	ldi	r16, 0x6F	; 111
    4584:	12 e0       	ldi	r17, 0x02	; 2
    4586:	21 e0       	ldi	r18, 0x01	; 1
    4588:	48 ec       	ldi	r20, 0xC8	; 200
    458a:	be 01       	movw	r22, r28
    458c:	67 53       	subi	r22, 0x37	; 55
    458e:	7f 4f       	sbci	r23, 0xFF	; 255
    4590:	ce 01       	movw	r24, r28
    4592:	01 96       	adiw	r24, 0x01	; 1
    4594:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
				// Remove " from start and end of token
				gsm_remove_char(token, token, '"');
    4598:	42 e2       	ldi	r20, 0x22	; 34
    459a:	be 01       	movw	r22, r28
    459c:	67 53       	subi	r22, 0x37	; 55
    459e:	7f 4f       	sbci	r23, 0xFF	; 255
    45a0:	cb 01       	movw	r24, r22
    45a2:	0e 94 c8 21 	call	0x4390	; 0x4390 <gsm_remove_char>
				strcpy(sms->number, token );
    45a6:	be 01       	movw	r22, r28
    45a8:	67 53       	subi	r22, 0x37	; 55
    45aa:	7f 4f       	sbci	r23, 0xFF	; 255
    45ac:	c6 01       	movw	r24, r12
    45ae:	80 56       	subi	r24, 0x60	; 96
    45b0:	9f 4f       	sbci	r25, 0xFF	; 255
    45b2:	0e 94 97 29 	call	0x532e	; 0x532e <strcpy>

				// store sms Date in sms->date
				gsm_read_token( line, token, sizeof(token), 3, "," );
    45b6:	23 e0       	ldi	r18, 0x03	; 3
    45b8:	48 ec       	ldi	r20, 0xC8	; 200
    45ba:	be 01       	movw	r22, r28
    45bc:	67 53       	subi	r22, 0x37	; 55
    45be:	7f 4f       	sbci	r23, 0xFF	; 255
    45c0:	ce 01       	movw	r24, r28
    45c2:	01 96       	adiw	r24, 0x01	; 1
    45c4:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
				gsm_remove_char(token, token, '"');
    45c8:	42 e2       	ldi	r20, 0x22	; 34
    45ca:	be 01       	movw	r22, r28
    45cc:	67 53       	subi	r22, 0x37	; 55
    45ce:	7f 4f       	sbci	r23, 0xFF	; 255
    45d0:	cb 01       	movw	r24, r22
    45d2:	0e 94 c8 21 	call	0x4390	; 0x4390 <gsm_remove_char>
				strcpy(sms->date, token );
    45d6:	be 01       	movw	r22, r28
    45d8:	67 53       	subi	r22, 0x37	; 55
    45da:	7f 4f       	sbci	r23, 0xFF	; 255
    45dc:	c6 01       	movw	r24, r12
    45de:	8c 54       	subi	r24, 0x4C	; 76
    45e0:	9f 4f       	sbci	r25, 0xFF	; 255
    45e2:	0e 94 97 29 	call	0x532e	; 0x532e <strcpy>

				while( gsm_readline(line, sizeof(line)) == FALSE );
    45e6:	68 ec       	ldi	r22, 0xC8	; 200
    45e8:	70 e0       	ldi	r23, 0x00	; 0
    45ea:	ce 01       	movw	r24, r28
    45ec:	01 96       	adiw	r24, 0x01	; 1
    45ee:	0e 94 25 22 	call	0x444a	; 0x444a <gsm_readline>
    45f2:	89 2b       	or	r24, r25
    45f4:	c1 f3       	breq	.-16     	; 0x45e6 <gsm_read_sms+0x11e>
				strcpy(sms->body, line);
    45f6:	be 01       	movw	r22, r28
    45f8:	6f 5f       	subi	r22, 0xFF	; 255
    45fa:	7f 4f       	sbci	r23, 0xFF	; 255
    45fc:	c6 01       	movw	r24, r12
    45fe:	0e 94 97 29 	call	0x532e	; 0x532e <strcpy>
				return TRUE;
    4602:	08 c0       	rjmp	.+16     	; 0x4614 <gsm_read_sms+0x14c>
    4604:	01 50       	subi	r16, 0x01	; 1
    4606:	11 09       	sbc	r17, r1
	DoWatchDog();
	_delay_ms(1000);
	DoWatchDog();

	// Make a finite loop
	for(i=0; i<200; i++){
    4608:	01 15       	cp	r16, r1
    460a:	11 05       	cpc	r17, r1
    460c:	09 f0       	breq	.+2      	; 0x4610 <gsm_read_sms+0x148>
    460e:	8b cf       	rjmp	.-234    	; 0x4526 <gsm_read_sms+0x5e>
				return TRUE;
			}
		}
	}

	return FALSE;
    4610:	e1 2c       	mov	r14, r1
    4612:	f1 2c       	mov	r15, r1
}
    4614:	c7 01       	movw	r24, r14
    4616:	c0 57       	subi	r28, 0x70	; 112
    4618:	de 4f       	sbci	r29, 0xFE	; 254
    461a:	0f b6       	in	r0, 0x3f	; 63
    461c:	f8 94       	cli
    461e:	de bf       	out	0x3e, r29	; 62
    4620:	0f be       	out	0x3f, r0	; 63
    4622:	cd bf       	out	0x3d, r28	; 61
    4624:	df 91       	pop	r29
    4626:	cf 91       	pop	r28
    4628:	1f 91       	pop	r17
    462a:	0f 91       	pop	r16
    462c:	ff 90       	pop	r15
    462e:	ef 90       	pop	r14
    4630:	df 90       	pop	r13
    4632:	cf 90       	pop	r12
    4634:	08 95       	ret

00004636 <gsm_check_new_sms>:
void gsm_text_sms(void){
	gsm_command("AT+CMGF=1");
}

//----------------------------------
int gsm_check_new_sms( SMS *sms ){
    4636:	af 92       	push	r10
    4638:	bf 92       	push	r11
    463a:	cf 92       	push	r12
    463c:	df 92       	push	r13
    463e:	ef 92       	push	r14
    4640:	ff 92       	push	r15
    4642:	0f 93       	push	r16
    4644:	1f 93       	push	r17
    4646:	cf 93       	push	r28
    4648:	df 93       	push	r29
    464a:	cd b7       	in	r28, 0x3d	; 61
    464c:	de b7       	in	r29, 0x3e	; 62
    464e:	ce 55       	subi	r28, 0x5E	; 94
    4650:	d1 40       	sbci	r29, 0x01	; 1
    4652:	0f b6       	in	r0, 0x3f	; 63
    4654:	f8 94       	cli
    4656:	de bf       	out	0x3e, r29	; 62
    4658:	0f be       	out	0x3f, r0	; 63
    465a:	cd bf       	out	0x3d, r28	; 61
    465c:	7c 01       	movw	r14, r24
	char *index_p = index;
	char line[300], token[50];

	// Check index for new sms
	for(i=0; i<15; i++){
		if( index[i] != 0 ){
    465e:	80 91 2b 03 	lds	r24, 0x032B
    4662:	81 11       	cpse	r24, r1
    4664:	08 c0       	rjmp	.+16     	; 0x4676 <gsm_check_new_sms+0x40>
    4666:	ec e2       	ldi	r30, 0x2C	; 44
    4668:	f3 e0       	ldi	r31, 0x03	; 3
	static char index[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char *index_p = index;
	char line[300], token[50];

	// Check index for new sms
	for(i=0; i<15; i++){
    466a:	01 e0       	ldi	r16, 0x01	; 1
    466c:	10 e0       	ldi	r17, 0x00	; 0
		if( index[i] != 0 ){
    466e:	81 91       	ld	r24, Z+
    4670:	88 23       	and	r24, r24
    4672:	71 f0       	breq	.+28     	; 0x4690 <gsm_check_new_sms+0x5a>
    4674:	02 c0       	rjmp	.+4      	; 0x467a <gsm_check_new_sms+0x44>
	static char index[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char *index_p = index;
	char line[300], token[50];

	// Check index for new sms
	for(i=0; i<15; i++){
    4676:	00 e0       	ldi	r16, 0x00	; 0
    4678:	10 e0       	ldi	r17, 0x00	; 0
		if( index[i] != 0 ){
			gsm_read_sms( index[i], sms );
    467a:	b7 01       	movw	r22, r14
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	0e 94 64 22 	call	0x44c8	; 0x44c8 <gsm_read_sms>
			location = index[i];
    4682:	f8 01       	movw	r30, r16
    4684:	e5 5d       	subi	r30, 0xD5	; 213
    4686:	fc 4f       	sbci	r31, 0xFC	; 252
    4688:	80 81       	ld	r24, Z
			index[i] = 0;
    468a:	10 82       	st	Z, r1
			return location;
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	76 c0       	rjmp	.+236    	; 0x477c <gsm_check_new_sms+0x146>
	static char index[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char *index_p = index;
	char line[300], token[50];

	// Check index for new sms
	for(i=0; i<15; i++){
    4690:	0f 5f       	subi	r16, 0xFF	; 255
    4692:	1f 4f       	sbci	r17, 0xFF	; 255
    4694:	0f 30       	cpi	r16, 0x0F	; 15
    4696:	11 05       	cpc	r17, r1
    4698:	51 f7       	brne	.-44     	; 0x466e <gsm_check_new_sms+0x38>
		}
	}


	//gsm_flush_buffer();
	gsm_command("AT+CMGL");
    469a:	81 e7       	ldi	r24, 0x71	; 113
    469c:	92 e0       	ldi	r25, 0x02	; 2
    469e:	0e 94 02 22 	call	0x4404	; 0x4404 <gsm_command>
	DoWatchDog();
    46a2:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    46a6:	2f ef       	ldi	r18, 0xFF	; 255
    46a8:	89 e6       	ldi	r24, 0x69	; 105
    46aa:	98 e1       	ldi	r25, 0x18	; 24
    46ac:	21 50       	subi	r18, 0x01	; 1
    46ae:	80 40       	sbci	r24, 0x00	; 0
    46b0:	90 40       	sbci	r25, 0x00	; 0
    46b2:	e1 f7       	brne	.-8      	; 0x46ac <gsm_check_new_sms+0x76>
    46b4:	00 c0       	rjmp	.+0      	; 0x46b6 <gsm_check_new_sms+0x80>
    46b6:	00 00       	nop
	_delay_ms(1000);
	DoWatchDog();
    46b8:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>

//----------------------------------
int gsm_check_new_sms( SMS *sms ){
	int i, location;
	static char index[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char *index_p = index;
    46bc:	0f 2e       	mov	r0, r31
    46be:	fb e2       	ldi	r31, 0x2B	; 43
    46c0:	cf 2e       	mov	r12, r31
    46c2:	f3 e0       	ldi	r31, 0x03	; 3
    46c4:	df 2e       	mov	r13, r31
    46c6:	f0 2d       	mov	r31, r0
	DoWatchDog();
	_delay_ms(1000);
	DoWatchDog();

	// Make a finite loop
	for(i=0; i<200; i++){
    46c8:	00 e0       	ldi	r16, 0x00	; 0
    46ca:	10 e0       	ldi	r17, 0x00	; 0
    46cc:	aa 24       	eor	r10, r10
    46ce:	a3 94       	inc	r10
    46d0:	b1 2c       	mov	r11, r1
		if( gsm_readline(line, sizeof(line)) == TRUE ){
    46d2:	6c e2       	ldi	r22, 0x2C	; 44
    46d4:	71 e0       	ldi	r23, 0x01	; 1
    46d6:	ce 01       	movw	r24, r28
    46d8:	01 96       	adiw	r24, 0x01	; 1
    46da:	0e 94 25 22 	call	0x444a	; 0x444a <gsm_readline>
    46de:	01 97       	sbiw	r24, 0x01	; 1
    46e0:	41 f5       	brne	.+80     	; 0x4732 <gsm_check_new_sms+0xfc>
			if( strstr(line, "REC UNREAD") != NULL ){
    46e2:	64 e6       	ldi	r22, 0x64	; 100
    46e4:	72 e0       	ldi	r23, 0x02	; 2
    46e6:	ce 01       	movw	r24, r28
    46e8:	01 96       	adiw	r24, 0x01	; 1
    46ea:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    46ee:	89 2b       	or	r24, r25
    46f0:	01 f1       	breq	.+64     	; 0x4732 <gsm_check_new_sms+0xfc>
				// CMGL output format :
				// +CMGL: 3,"REC UNREAD","+989372391694","","2011/08/27 09:12:04+18"
				gsm_read_token( line, token, sizeof(token), 0, "," );
    46f2:	0f e6       	ldi	r16, 0x6F	; 111
    46f4:	12 e0       	ldi	r17, 0x02	; 2
    46f6:	20 e0       	ldi	r18, 0x00	; 0
    46f8:	42 e3       	ldi	r20, 0x32	; 50
    46fa:	be 01       	movw	r22, r28
    46fc:	63 5d       	subi	r22, 0xD3	; 211
    46fe:	7e 4f       	sbci	r23, 0xFE	; 254
    4700:	ce 01       	movw	r24, r28
    4702:	01 96       	adiw	r24, 0x01	; 1
    4704:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
				gsm_read_token( token,token, sizeof(token), 1, ":" );
    4708:	09 e7       	ldi	r16, 0x79	; 121
    470a:	12 e0       	ldi	r17, 0x02	; 2
    470c:	21 e0       	ldi	r18, 0x01	; 1
    470e:	42 e3       	ldi	r20, 0x32	; 50
    4710:	be 01       	movw	r22, r28
    4712:	63 5d       	subi	r22, 0xD3	; 211
    4714:	7e 4f       	sbci	r23, 0xFE	; 254
    4716:	cb 01       	movw	r24, r22
    4718:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
				// store unread SMS index
				*index_p = atoi( token );
    471c:	ce 01       	movw	r24, r28
    471e:	83 5d       	subi	r24, 0xD3	; 211
    4720:	9e 4f       	sbci	r25, 0xFE	; 254
    4722:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
    4726:	f6 01       	movw	r30, r12
    4728:	81 93       	st	Z+, r24
    472a:	6f 01       	movw	r12, r30
	DoWatchDog();
	_delay_ms(1000);
	DoWatchDog();

	// Make a finite loop
	for(i=0; i<200; i++){
    472c:	0a 2d       	mov	r16, r10
    472e:	1b 2d       	mov	r17, r11
    4730:	d0 cf       	rjmp	.-96     	; 0x46d2 <gsm_check_new_sms+0x9c>
    4732:	0f 5f       	subi	r16, 0xFF	; 255
    4734:	1f 4f       	sbci	r17, 0xFF	; 255
    4736:	08 3c       	cpi	r16, 0xC8	; 200
    4738:	11 05       	cpc	r17, r1
    473a:	5c f2       	brlt	.-106    	; 0x46d2 <gsm_check_new_sms+0x9c>
		}
	}

	// Check index for new sms
	for(i=0; i<15; i++){
		if( index[i] != 0 ){
    473c:	80 91 2b 03 	lds	r24, 0x032B
    4740:	81 11       	cpse	r24, r1
    4742:	08 c0       	rjmp	.+16     	; 0x4754 <gsm_check_new_sms+0x11e>
    4744:	ec e2       	ldi	r30, 0x2C	; 44
    4746:	f3 e0       	ldi	r31, 0x03	; 3
			}
		}
	}

	// Check index for new sms
	for(i=0; i<15; i++){
    4748:	01 e0       	ldi	r16, 0x01	; 1
    474a:	10 e0       	ldi	r17, 0x00	; 0
		if( index[i] != 0 ){
    474c:	81 91       	ld	r24, Z+
    474e:	88 23       	and	r24, r24
    4750:	71 f0       	breq	.+28     	; 0x476e <gsm_check_new_sms+0x138>
    4752:	02 c0       	rjmp	.+4      	; 0x4758 <gsm_check_new_sms+0x122>
    4754:	00 e0       	ldi	r16, 0x00	; 0
    4756:	10 e0       	ldi	r17, 0x00	; 0
			//lcd_clear(); rprintfInit(lcd_putchar); rprintf("Rindex=%d", index[i]); _delay_ms(1000);
			gsm_read_sms( index[i], sms );
    4758:	b7 01       	movw	r22, r14
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	0e 94 64 22 	call	0x44c8	; 0x44c8 <gsm_read_sms>
			location = index[i];
    4760:	f8 01       	movw	r30, r16
    4762:	e5 5d       	subi	r30, 0xD5	; 213
    4764:	fc 4f       	sbci	r31, 0xFC	; 252
    4766:	80 81       	ld	r24, Z
			index[i] = 0;
    4768:	10 82       	st	Z, r1
			return location;
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	07 c0       	rjmp	.+14     	; 0x477c <gsm_check_new_sms+0x146>
			}
		}
	}

	// Check index for new sms
	for(i=0; i<15; i++){
    476e:	0f 5f       	subi	r16, 0xFF	; 255
    4770:	1f 4f       	sbci	r17, 0xFF	; 255
    4772:	0f 30       	cpi	r16, 0x0F	; 15
    4774:	11 05       	cpc	r17, r1
    4776:	51 f7       	brne	.-44     	; 0x474c <gsm_check_new_sms+0x116>
			return location;
		}
	}

	// return 0 if no new sms available
	return 0;
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	90 e0       	ldi	r25, 0x00	; 0
}
    477c:	c2 5a       	subi	r28, 0xA2	; 162
    477e:	de 4f       	sbci	r29, 0xFE	; 254
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	f8 94       	cli
    4784:	de bf       	out	0x3e, r29	; 62
    4786:	0f be       	out	0x3f, r0	; 63
    4788:	cd bf       	out	0x3d, r28	; 61
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	1f 91       	pop	r17
    4790:	0f 91       	pop	r16
    4792:	ff 90       	pop	r15
    4794:	ef 90       	pop	r14
    4796:	df 90       	pop	r13
    4798:	cf 90       	pop	r12
    479a:	bf 90       	pop	r11
    479c:	af 90       	pop	r10
    479e:	08 95       	ret

000047a0 <gsm_send_sms>:

	return FALSE;
}

//----------------------------------
int gsm_send_sms( char *number, char *text, int try_num ){
    47a0:	2f 92       	push	r2
    47a2:	3f 92       	push	r3
    47a4:	4f 92       	push	r4
    47a6:	5f 92       	push	r5
    47a8:	6f 92       	push	r6
    47aa:	7f 92       	push	r7
    47ac:	8f 92       	push	r8
    47ae:	9f 92       	push	r9
    47b0:	af 92       	push	r10
    47b2:	bf 92       	push	r11
    47b4:	cf 92       	push	r12
    47b6:	df 92       	push	r13
    47b8:	ef 92       	push	r14
    47ba:	ff 92       	push	r15
    47bc:	0f 93       	push	r16
    47be:	1f 93       	push	r17
    47c0:	cf 93       	push	r28
    47c2:	df 93       	push	r29
    47c4:	cd b7       	in	r28, 0x3d	; 61
    47c6:	de b7       	in	r29, 0x3e	; 62
    47c8:	c6 59       	subi	r28, 0x96	; 150
    47ca:	d1 09       	sbc	r29, r1
    47cc:	0f b6       	in	r0, 0x3f	; 63
    47ce:	f8 94       	cli
    47d0:	de bf       	out	0x3e, r29	; 62
    47d2:	0f be       	out	0x3f, r0	; 63
    47d4:	cd bf       	out	0x3d, r28	; 61
    47d6:	3c 01       	movw	r6, r24
    47d8:	1b 01       	movw	r2, r22
    47da:	2a 01       	movw	r4, r20
	int try, i;
	int refnum=0;
	char line[100], token[50];

	for( try=0; try<=try_num; try++ ){
    47dc:	55 23       	and	r21, r21
    47de:	0c f4       	brge	.+2      	; 0x47e2 <gsm_send_sms+0x42>
    47e0:	ee c0       	rjmp	.+476    	; 0x49be <gsm_send_sms+0x21e>
}

//----------------------------------
int gsm_send_sms( char *number, char *text, int try_num ){
	int try, i;
	int refnum=0;
    47e2:	a1 2c       	mov	r10, r1
    47e4:	b1 2c       	mov	r11, r1
	char line[100], token[50];

	for( try=0; try<=try_num; try++ ){
    47e6:	81 2c       	mov	r8, r1
    47e8:	91 2c       	mov	r9, r1
		//lcd_clear(); rprintfInit(lcd_putchar); rprintf("Try%d", try); _delay_ms(1000);
		// Send sms ------------------
		gsm_flush_buffer();
    47ea:	0e 94 1c 22 	call	0x4438	; 0x4438 <gsm_flush_buffer>

		//ozh rprintfInit(gsm_send_byte);
		//ozh rprintf("AT+CMGS=\"");
		uart_puts_p(PSTR("AT+CMGS=\""));
    47ee:	81 ed       	ldi	r24, 0xD1	; 209
    47f0:	99 e0       	ldi	r25, 0x09	; 9
    47f2:	0e 94 47 18 	call	0x308e	; 0x308e <uart_puts_p>

		//ozh rprintfStr(number);
		uart_puts(number);
    47f6:	c3 01       	movw	r24, r6
    47f8:	0e 94 38 18 	call	0x3070	; 0x3070 <uart_puts>
		//ozh rprintf("\"\n");
		uart_puts_p(PSTR("\"\n"));
    47fc:	8e ec       	ldi	r24, 0xCE	; 206
    47fe:	99 e0       	ldi	r25, 0x09	; 9
    4800:	0e 94 47 18 	call	0x308e	; 0x308e <uart_puts_p>
		//ozh rprintfStr(text);
		uart_puts(text);
    4804:	c1 01       	movw	r24, r2
    4806:	0e 94 38 18 	call	0x3070	; 0x3070 <uart_puts>

		gsm_send_byte(26);
    480a:	e0 91 21 01 	lds	r30, 0x0121
    480e:	f0 91 22 01 	lds	r31, 0x0122
    4812:	8a e1       	ldi	r24, 0x1A	; 26
    4814:	09 95       	icall
		//uart_putc(0x1A);
		DoWatchDog();
    4816:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    481a:	2f ef       	ldi	r18, 0xFF	; 255
    481c:	89 e6       	ldi	r24, 0x69	; 105
    481e:	98 e1       	ldi	r25, 0x18	; 24
    4820:	21 50       	subi	r18, 0x01	; 1
    4822:	80 40       	sbci	r24, 0x00	; 0
    4824:	90 40       	sbci	r25, 0x00	; 0
    4826:	e1 f7       	brne	.-8      	; 0x4820 <gsm_send_sms+0x80>
    4828:	00 c0       	rjmp	.+0      	; 0x482a <gsm_send_sms+0x8a>
    482a:	00 00       	nop
		_delay_ms(1000);
		DoWatchDog();
    482c:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    4830:	2f ef       	ldi	r18, 0xFF	; 255
    4832:	89 e6       	ldi	r24, 0x69	; 105
    4834:	98 e1       	ldi	r25, 0x18	; 24
    4836:	21 50       	subi	r18, 0x01	; 1
    4838:	80 40       	sbci	r24, 0x00	; 0
    483a:	90 40       	sbci	r25, 0x00	; 0
    483c:	e1 f7       	brne	.-8      	; 0x4836 <gsm_send_sms+0x96>
    483e:	00 c0       	rjmp	.+0      	; 0x4840 <gsm_send_sms+0xa0>
    4840:	00 00       	nop
		_delay_ms(1000);
		DoWatchDog();
    4842:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    4846:	2f ef       	ldi	r18, 0xFF	; 255
    4848:	89 e6       	ldi	r24, 0x69	; 105
    484a:	98 e1       	ldi	r25, 0x18	; 24
    484c:	21 50       	subi	r18, 0x01	; 1
    484e:	80 40       	sbci	r24, 0x00	; 0
    4850:	90 40       	sbci	r25, 0x00	; 0
    4852:	e1 f7       	brne	.-8      	; 0x484c <gsm_send_sms+0xac>
    4854:	00 c0       	rjmp	.+0      	; 0x4856 <gsm_send_sms+0xb6>
    4856:	00 00       	nop
		_delay_ms(1000);
		DoWatchDog();
    4858:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    485c:	02 e3       	ldi	r16, 0x32	; 50
    485e:	10 e0       	ldi	r17, 0x00	; 0
		// wait for getting SMS refnum
		for(i=0; i<50; i++){
			// wait for new line
			DoWatchDog();
    4860:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    4864:	2f ef       	ldi	r18, 0xFF	; 255
    4866:	80 e7       	ldi	r24, 0x70	; 112
    4868:	92 e0       	ldi	r25, 0x02	; 2
    486a:	21 50       	subi	r18, 0x01	; 1
    486c:	80 40       	sbci	r24, 0x00	; 0
    486e:	90 40       	sbci	r25, 0x00	; 0
    4870:	e1 f7       	brne	.-8      	; 0x486a <gsm_send_sms+0xca>
    4872:	00 c0       	rjmp	.+0      	; 0x4874 <gsm_send_sms+0xd4>
    4874:	00 00       	nop
			_delay_ms(100);
			if( gsm_readline(line, sizeof(line)) != TRUE ) continue;
    4876:	64 e6       	ldi	r22, 0x64	; 100
    4878:	70 e0       	ldi	r23, 0x00	; 0
    487a:	ce 01       	movw	r24, r28
    487c:	01 96       	adiw	r24, 0x01	; 1
    487e:	0e 94 25 22 	call	0x444a	; 0x444a <gsm_readline>
    4882:	01 97       	sbiw	r24, 0x01	; 1
    4884:	31 f5       	brne	.+76     	; 0x48d2 <gsm_send_sms+0x132>
			// AT+CMGS="09372391694"
			// > SMS Body...
			// +CMGS: 157

			// check for error
			if( strstr(line, "ERROR") != NULL ) return FALSE;
    4886:	6b e7       	ldi	r22, 0x7B	; 123
    4888:	72 e0       	ldi	r23, 0x02	; 2
    488a:	ce 01       	movw	r24, r28
    488c:	01 96       	adiw	r24, 0x01	; 1
    488e:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    4892:	89 2b       	or	r24, r25
    4894:	09 f0       	breq	.+2      	; 0x4898 <gsm_send_sms+0xf8>
    4896:	96 c0       	rjmp	.+300    	; 0x49c4 <gsm_send_sms+0x224>
			// check +CMGS for refnum
			if( strstr(line, "+CMGS") != NULL ){
    4898:	61 e8       	ldi	r22, 0x81	; 129
    489a:	72 e0       	ldi	r23, 0x02	; 2
    489c:	ce 01       	movw	r24, r28
    489e:	01 96       	adiw	r24, 0x01	; 1
    48a0:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    48a4:	89 2b       	or	r24, r25
    48a6:	a9 f0       	breq	.+42     	; 0x48d2 <gsm_send_sms+0x132>
				gsm_read_token(line, token, sizeof(token), 1, ":");
    48a8:	09 e7       	ldi	r16, 0x79	; 121
    48aa:	12 e0       	ldi	r17, 0x02	; 2
    48ac:	21 e0       	ldi	r18, 0x01	; 1
    48ae:	42 e3       	ldi	r20, 0x32	; 50
    48b0:	be 01       	movw	r22, r28
    48b2:	6b 59       	subi	r22, 0x9B	; 155
    48b4:	7f 4f       	sbci	r23, 0xFF	; 255
    48b6:	ce 01       	movw	r24, r28
    48b8:	01 96       	adiw	r24, 0x01	; 1
    48ba:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
				refnum = atoi(token);
    48be:	ce 01       	movw	r24, r28
    48c0:	8b 59       	subi	r24, 0x9B	; 155
    48c2:	9f 4f       	sbci	r25, 0xFF	; 255
    48c4:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
    48c8:	5c 01       	movw	r10, r24
				if( try_num == 0 )
    48ca:	41 14       	cp	r4, r1
    48cc:	51 04       	cpc	r5, r1
    48ce:	31 f4       	brne	.+12     	; 0x48dc <gsm_send_sms+0x13c>
    48d0:	7c c0       	rjmp	.+248    	; 0x49ca <gsm_send_sms+0x22a>
    48d2:	01 50       	subi	r16, 0x01	; 1
    48d4:	11 09       	sbc	r17, r1
		_delay_ms(1000);
		DoWatchDog();
		_delay_ms(1000);
		DoWatchDog();
		// wait for getting SMS refnum
		for(i=0; i<50; i++){
    48d6:	01 15       	cp	r16, r1
    48d8:	11 05       	cpc	r17, r1
    48da:	11 f6       	brne	.-124    	; 0x4860 <gsm_send_sms+0xc0>
					break;
			}
		}

		// check refnum
		if( refnum <= 0 ) return FALSE;
    48dc:	1a 14       	cp	r1, r10
    48de:	1b 04       	cpc	r1, r11
    48e0:	0c f0       	brlt	.+2      	; 0x48e4 <gsm_send_sms+0x144>
    48e2:	75 c0       	rjmp	.+234    	; 0x49ce <gsm_send_sms+0x22e>
    48e4:	0f 2e       	mov	r0, r31
    48e6:	f8 e2       	ldi	r31, 0x28	; 40
    48e8:	ef 2e       	mov	r14, r31
    48ea:	f1 2c       	mov	r15, r1
    48ec:	f0 2d       	mov	r31, r0

		// Check delivery phase ---------------
    for(i=0; i<40; i++){
			// Wait for new line
    		DoWatchDog();
    48ee:	0e 94 88 07 	call	0xf10	; 0xf10 <DoWatchDog>
    48f2:	2f ef       	ldi	r18, 0xFF	; 255
    48f4:	84 e3       	ldi	r24, 0x34	; 52
    48f6:	9c e0       	ldi	r25, 0x0C	; 12
    48f8:	21 50       	subi	r18, 0x01	; 1
    48fa:	80 40       	sbci	r24, 0x00	; 0
    48fc:	90 40       	sbci	r25, 0x00	; 0
    48fe:	e1 f7       	brne	.-8      	; 0x48f8 <gsm_send_sms+0x158>
    4900:	00 c0       	rjmp	.+0      	; 0x4902 <gsm_send_sms+0x162>
    4902:	00 00       	nop
			_delay_ms(500);
			if( gsm_readline(line, sizeof(line)) != TRUE ) continue;
    4904:	64 e6       	ldi	r22, 0x64	; 100
    4906:	70 e0       	ldi	r23, 0x00	; 0
    4908:	ce 01       	movw	r24, r28
    490a:	01 96       	adiw	r24, 0x01	; 1
    490c:	0e 94 25 22 	call	0x444a	; 0x444a <gsm_readline>
    4910:	6c 01       	movw	r12, r24
    4912:	81 30       	cpi	r24, 0x01	; 1
    4914:	91 05       	cpc	r25, r1
    4916:	09 f0       	breq	.+2      	; 0x491a <gsm_send_sms+0x17a>
    4918:	43 c0       	rjmp	.+134    	; 0x49a0 <gsm_send_sms+0x200>

			// check +CDS in new line
			if( strstr(line, "+CDS: 6") == NULL ) continue;
    491a:	67 e8       	ldi	r22, 0x87	; 135
    491c:	72 e0       	ldi	r23, 0x02	; 2
    491e:	ce 01       	movw	r24, r28
    4920:	01 96       	adiw	r24, 0x01	; 1
    4922:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    4926:	89 2b       	or	r24, r25
    4928:	d9 f1       	breq	.+118    	; 0x49a0 <gsm_send_sms+0x200>

			// read second field of +CDS line as delivery ref number
			if( gsm_read_token(line, token, sizeof(token), 1, ",") != 0 ) continue;
    492a:	0f e6       	ldi	r16, 0x6F	; 111
    492c:	12 e0       	ldi	r17, 0x02	; 2
    492e:	21 e0       	ldi	r18, 0x01	; 1
    4930:	42 e3       	ldi	r20, 0x32	; 50
    4932:	be 01       	movw	r22, r28
    4934:	6b 59       	subi	r22, 0x9B	; 155
    4936:	7f 4f       	sbci	r23, 0xFF	; 255
    4938:	ce 01       	movw	r24, r28
    493a:	01 96       	adiw	r24, 0x01	; 1
    493c:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
    4940:	89 2b       	or	r24, r25
    4942:	71 f5       	brne	.+92     	; 0x49a0 <gsm_send_sms+0x200>

			// Compare delivery refnum with given refnum
			if( atoi(token) != refnum ) continue;
    4944:	ce 01       	movw	r24, r28
    4946:	8b 59       	subi	r24, 0x9B	; 155
    4948:	9f 4f       	sbci	r25, 0xFF	; 255
    494a:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
    494e:	8a 15       	cp	r24, r10
    4950:	9b 05       	cpc	r25, r11
    4952:	31 f5       	brne	.+76     	; 0x49a0 <gsm_send_sms+0x200>

			// check delivery report value (for Operators that that contain , in date like Irancell)
			// Example: +CDS: 6,46,"+989372391694",145,"11/10/13,11:22:45+14","11/10/13,11:22:50+14",0
			if( gsm_read_token(line, token, sizeof(token), 8, ",") == 0 )
    4954:	28 e0       	ldi	r18, 0x08	; 8
    4956:	42 e3       	ldi	r20, 0x32	; 50
    4958:	be 01       	movw	r22, r28
    495a:	6b 59       	subi	r22, 0x9B	; 155
    495c:	7f 4f       	sbci	r23, 0xFF	; 255
    495e:	ce 01       	movw	r24, r28
    4960:	01 96       	adiw	r24, 0x01	; 1
    4962:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
    4966:	89 2b       	or	r24, r25
    4968:	39 f4       	brne	.+14     	; 0x4978 <gsm_send_sms+0x1d8>
				if( atoi(token) == 0 ) return TRUE;
    496a:	ce 01       	movw	r24, r28
    496c:	8b 59       	subi	r24, 0x9B	; 155
    496e:	9f 4f       	sbci	r25, 0xFF	; 255
    4970:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
    4974:	89 2b       	or	r24, r25
    4976:	81 f1       	breq	.+96     	; 0x49d8 <gsm_send_sms+0x238>

			// check delivery report value (for Operators that that contain / in date like MCI)
			// Example: +CDS: 6,26,"+099372391694",129,"2011/10/13 13:08:35+14","2011/10/13 13:08:39+14",0
			if( gsm_read_token(line, token, sizeof(token), 6, ",") == 0 )
    4978:	0f e6       	ldi	r16, 0x6F	; 111
    497a:	12 e0       	ldi	r17, 0x02	; 2
    497c:	26 e0       	ldi	r18, 0x06	; 6
    497e:	42 e3       	ldi	r20, 0x32	; 50
    4980:	be 01       	movw	r22, r28
    4982:	6b 59       	subi	r22, 0x9B	; 155
    4984:	7f 4f       	sbci	r23, 0xFF	; 255
    4986:	ce 01       	movw	r24, r28
    4988:	01 96       	adiw	r24, 0x01	; 1
    498a:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
    498e:	89 2b       	or	r24, r25
    4990:	39 f4       	brne	.+14     	; 0x49a0 <gsm_send_sms+0x200>
				if( atoi(token) == 0 ) return TRUE;
    4992:	ce 01       	movw	r24, r28
    4994:	8b 59       	subi	r24, 0x9B	; 155
    4996:	9f 4f       	sbci	r25, 0xFF	; 255
    4998:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
    499c:	89 2b       	or	r24, r25
    499e:	e1 f0       	breq	.+56     	; 0x49d8 <gsm_send_sms+0x238>
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	e8 1a       	sub	r14, r24
    49a4:	f1 08       	sbc	r15, r1

		// check refnum
		if( refnum <= 0 ) return FALSE;

		// Check delivery phase ---------------
    for(i=0; i<40; i++){
    49a6:	e1 14       	cp	r14, r1
    49a8:	f1 04       	cpc	r15, r1
    49aa:	09 f0       	breq	.+2      	; 0x49ae <gsm_send_sms+0x20e>
    49ac:	a0 cf       	rjmp	.-192    	; 0x48ee <gsm_send_sms+0x14e>
int gsm_send_sms( char *number, char *text, int try_num ){
	int try, i;
	int refnum=0;
	char line[100], token[50];

	for( try=0; try<=try_num; try++ ){
    49ae:	9f ef       	ldi	r25, 0xFF	; 255
    49b0:	89 1a       	sub	r8, r25
    49b2:	99 0a       	sbc	r9, r25
    49b4:	48 14       	cp	r4, r8
    49b6:	59 04       	cpc	r5, r9
    49b8:	0c f0       	brlt	.+2      	; 0x49bc <gsm_send_sms+0x21c>
    49ba:	17 cf       	rjmp	.-466    	; 0x47ea <gsm_send_sms+0x4a>
    49bc:	0b c0       	rjmp	.+22     	; 0x49d4 <gsm_send_sms+0x234>
			if( gsm_read_token(line, token, sizeof(token), 6, ",") == 0 )
				if( atoi(token) == 0 ) return TRUE;
		}
	}

	return FALSE;
    49be:	c1 2c       	mov	r12, r1
    49c0:	d1 2c       	mov	r13, r1
    49c2:	0a c0       	rjmp	.+20     	; 0x49d8 <gsm_send_sms+0x238>
			// AT+CMGS="09372391694"
			// > SMS Body...
			// +CMGS: 157

			// check for error
			if( strstr(line, "ERROR") != NULL ) return FALSE;
    49c4:	c1 2c       	mov	r12, r1
    49c6:	d1 2c       	mov	r13, r1
    49c8:	07 c0       	rjmp	.+14     	; 0x49d8 <gsm_send_sms+0x238>
			// check +CMGS for refnum
			if( strstr(line, "+CMGS") != NULL ){
				gsm_read_token(line, token, sizeof(token), 1, ":");
				refnum = atoi(token);
    49ca:	6c 01       	movw	r12, r24
    49cc:	05 c0       	rjmp	.+10     	; 0x49d8 <gsm_send_sms+0x238>
					break;
			}
		}

		// check refnum
		if( refnum <= 0 ) return FALSE;
    49ce:	c1 2c       	mov	r12, r1
    49d0:	d1 2c       	mov	r13, r1
    49d2:	02 c0       	rjmp	.+4      	; 0x49d8 <gsm_send_sms+0x238>
			if( gsm_read_token(line, token, sizeof(token), 6, ",") == 0 )
				if( atoi(token) == 0 ) return TRUE;
		}
	}

	return FALSE;
    49d4:	c1 2c       	mov	r12, r1
    49d6:	d1 2c       	mov	r13, r1
}
    49d8:	c6 01       	movw	r24, r12
    49da:	ca 56       	subi	r28, 0x6A	; 106
    49dc:	df 4f       	sbci	r29, 0xFF	; 255
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	1f 91       	pop	r17
    49ee:	0f 91       	pop	r16
    49f0:	ff 90       	pop	r15
    49f2:	ef 90       	pop	r14
    49f4:	df 90       	pop	r13
    49f6:	cf 90       	pop	r12
    49f8:	bf 90       	pop	r11
    49fa:	af 90       	pop	r10
    49fc:	9f 90       	pop	r9
    49fe:	8f 90       	pop	r8
    4a00:	7f 90       	pop	r7
    4a02:	6f 90       	pop	r6
    4a04:	5f 90       	pop	r5
    4a06:	4f 90       	pop	r4
    4a08:	3f 90       	pop	r3
    4a0a:	2f 90       	pop	r2
    4a0c:	08 95       	ret

00004a0e <gsm_SIM_mem_used>:

//----------------------------------
int gsm_SIM_mem_used( int *total_mem ){
    4a0e:	af 92       	push	r10
    4a10:	bf 92       	push	r11
    4a12:	cf 92       	push	r12
    4a14:	df 92       	push	r13
    4a16:	ef 92       	push	r14
    4a18:	ff 92       	push	r15
    4a1a:	0f 93       	push	r16
    4a1c:	1f 93       	push	r17
    4a1e:	cf 93       	push	r28
    4a20:	df 93       	push	r29
    4a22:	cd b7       	in	r28, 0x3d	; 61
    4a24:	de b7       	in	r29, 0x3e	; 62
    4a26:	c6 59       	subi	r28, 0x96	; 150
    4a28:	d1 09       	sbc	r29, r1
    4a2a:	0f b6       	in	r0, 0x3f	; 63
    4a2c:	f8 94       	cli
    4a2e:	de bf       	out	0x3e, r29	; 62
    4a30:	0f be       	out	0x3f, r0	; 63
    4a32:	cd bf       	out	0x3d, r28	; 61
    4a34:	6c 01       	movw	r12, r24
	int i, used, total;
	char line[100], token[50], *p;

	gsm_command("AT+CPMS?");
    4a36:	8f e8       	ldi	r24, 0x8F	; 143
    4a38:	92 e0       	ldi	r25, 0x02	; 2
    4a3a:	0e 94 02 22 	call	0x4404	; 0x4404 <gsm_command>
    4a3e:	08 ec       	ldi	r16, 0xC8	; 200
    4a40:	10 e0       	ldi	r17, 0x00	; 0

	// Make a finite loop
	for(i=0; i<200; i++){
		if( gsm_readline(line, sizeof(line)) == TRUE ){
    4a42:	64 e6       	ldi	r22, 0x64	; 100
    4a44:	70 e0       	ldi	r23, 0x00	; 0
    4a46:	ce 01       	movw	r24, r28
    4a48:	01 96       	adiw	r24, 0x01	; 1
    4a4a:	0e 94 25 22 	call	0x444a	; 0x444a <gsm_readline>
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	09 f0       	breq	.+2      	; 0x4a54 <gsm_SIM_mem_used+0x46>
    4a52:	3f c0       	rjmp	.+126    	; 0x4ad2 <gsm_SIM_mem_used+0xc4>
			if( strstr(line, "+CPMS") != NULL ){
    4a54:	68 e9       	ldi	r22, 0x98	; 152
    4a56:	72 e0       	ldi	r23, 0x02	; 2
    4a58:	ce 01       	movw	r24, r28
    4a5a:	01 96       	adiw	r24, 0x01	; 1
    4a5c:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    4a60:	89 2b       	or	r24, r25
    4a62:	b9 f1       	breq	.+110    	; 0x4ad2 <gsm_SIM_mem_used+0xc4>
				// +CPMS output format :
				// +CPMS: "SM",used,total,"SM",used,total,"SM",used,total

				p = strstr(line, "SM");		// Find SIM storage location
    4a64:	6e e9       	ldi	r22, 0x9E	; 158
    4a66:	72 e0       	ldi	r23, 0x02	; 2
    4a68:	ce 01       	movw	r24, r28
    4a6a:	01 96       	adiw	r24, 0x01	; 1
    4a6c:	0e 94 bd 29 	call	0x537a	; 0x537a <strstr>
    4a70:	7c 01       	movw	r14, r24
				if( gsm_read_token( p, token, sizeof(token), 1, "," ) != 0 ) return -1;
    4a72:	0f e6       	ldi	r16, 0x6F	; 111
    4a74:	12 e0       	ldi	r17, 0x02	; 2
    4a76:	21 e0       	ldi	r18, 0x01	; 1
    4a78:	42 e3       	ldi	r20, 0x32	; 50
    4a7a:	be 01       	movw	r22, r28
    4a7c:	6b 59       	subi	r22, 0x9B	; 155
    4a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a80:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
    4a84:	89 2b       	or	r24, r25
    4a86:	61 f5       	brne	.+88     	; 0x4ae0 <gsm_SIM_mem_used+0xd2>
				used = atoi(token);
    4a88:	ce 01       	movw	r24, r28
    4a8a:	8b 59       	subi	r24, 0x9B	; 155
    4a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a8e:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
    4a92:	5c 01       	movw	r10, r24

				if( gsm_read_token( p, token, sizeof(token), 2, "," ) != 0 ) return -1;
    4a94:	22 e0       	ldi	r18, 0x02	; 2
    4a96:	42 e3       	ldi	r20, 0x32	; 50
    4a98:	be 01       	movw	r22, r28
    4a9a:	6b 59       	subi	r22, 0x9B	; 155
    4a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9e:	c7 01       	movw	r24, r14
    4aa0:	0e 94 6d 21 	call	0x42da	; 0x42da <gsm_read_token>
    4aa4:	89 2b       	or	r24, r25
    4aa6:	f9 f4       	brne	.+62     	; 0x4ae6 <gsm_SIM_mem_used+0xd8>
				total = atoi(token);
    4aa8:	ce 01       	movw	r24, r28
    4aaa:	8b 59       	subi	r24, 0x9B	; 155
    4aac:	9f 4f       	sbci	r25, 0xFF	; 255
    4aae:	0e 94 58 29 	call	0x52b0	; 0x52b0 <atoi>
    4ab2:	bc 01       	movw	r22, r24
				if( total == 0 ) return -1;
    4ab4:	00 97       	sbiw	r24, 0x00	; 0
    4ab6:	d1 f0       	breq	.+52     	; 0x4aec <gsm_SIM_mem_used+0xde>

				*total_mem = total;
    4ab8:	f6 01       	movw	r30, r12
    4aba:	91 83       	std	Z+1, r25	; 0x01
    4abc:	80 83       	st	Z, r24
				return used * 100 / total;		// Return used memory in percent
    4abe:	24 e6       	ldi	r18, 0x64	; 100
    4ac0:	2a 9d       	mul	r18, r10
    4ac2:	c0 01       	movw	r24, r0
    4ac4:	2b 9d       	mul	r18, r11
    4ac6:	90 0d       	add	r25, r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__divmodhi4>
    4ace:	cb 01       	movw	r24, r22
    4ad0:	12 c0       	rjmp	.+36     	; 0x4af6 <gsm_SIM_mem_used+0xe8>
    4ad2:	01 50       	subi	r16, 0x01	; 1
    4ad4:	11 09       	sbc	r17, r1
	char line[100], token[50], *p;

	gsm_command("AT+CPMS?");

	// Make a finite loop
	for(i=0; i<200; i++){
    4ad6:	01 15       	cp	r16, r1
    4ad8:	11 05       	cpc	r17, r1
    4ada:	09 f0       	breq	.+2      	; 0x4ade <gsm_SIM_mem_used+0xd0>
    4adc:	b2 cf       	rjmp	.-156    	; 0x4a42 <gsm_SIM_mem_used+0x34>
    4ade:	09 c0       	rjmp	.+18     	; 0x4af2 <gsm_SIM_mem_used+0xe4>
			if( strstr(line, "+CPMS") != NULL ){
				// +CPMS output format :
				// +CPMS: "SM",used,total,"SM",used,total,"SM",used,total

				p = strstr(line, "SM");		// Find SIM storage location
				if( gsm_read_token( p, token, sizeof(token), 1, "," ) != 0 ) return -1;
    4ae0:	8f ef       	ldi	r24, 0xFF	; 255
    4ae2:	9f ef       	ldi	r25, 0xFF	; 255
    4ae4:	08 c0       	rjmp	.+16     	; 0x4af6 <gsm_SIM_mem_used+0xe8>
				used = atoi(token);

				if( gsm_read_token( p, token, sizeof(token), 2, "," ) != 0 ) return -1;
    4ae6:	8f ef       	ldi	r24, 0xFF	; 255
    4ae8:	9f ef       	ldi	r25, 0xFF	; 255
    4aea:	05 c0       	rjmp	.+10     	; 0x4af6 <gsm_SIM_mem_used+0xe8>
				total = atoi(token);
				if( total == 0 ) return -1;
    4aec:	8f ef       	ldi	r24, 0xFF	; 255
    4aee:	9f ef       	ldi	r25, 0xFF	; 255
    4af0:	02 c0       	rjmp	.+4      	; 0x4af6 <gsm_SIM_mem_used+0xe8>
				return used * 100 / total;		// Return used memory in percent
			}
		}
	}

	return -1;
    4af2:	8f ef       	ldi	r24, 0xFF	; 255
    4af4:	9f ef       	ldi	r25, 0xFF	; 255
}
    4af6:	ca 56       	subi	r28, 0x6A	; 106
    4af8:	df 4f       	sbci	r29, 0xFF	; 255
    4afa:	0f b6       	in	r0, 0x3f	; 63
    4afc:	f8 94       	cli
    4afe:	de bf       	out	0x3e, r29	; 62
    4b00:	0f be       	out	0x3f, r0	; 63
    4b02:	cd bf       	out	0x3d, r28	; 61
    4b04:	df 91       	pop	r29
    4b06:	cf 91       	pop	r28
    4b08:	1f 91       	pop	r17
    4b0a:	0f 91       	pop	r16
    4b0c:	ff 90       	pop	r15
    4b0e:	ef 90       	pop	r14
    4b10:	df 90       	pop	r13
    4b12:	cf 90       	pop	r12
    4b14:	bf 90       	pop	r11
    4b16:	af 90       	pop	r10
    4b18:	08 95       	ret

00004b1a <ExtInt0Enable>:
uint8_t extstate = 0;
uint8_t powergone = 0;
extern char wait_powergone;

void ExtInt0Enable(){
		EIMSK &= ~(1 << INT0); 						// DISABLE INT0
    4b1a:	e8 98       	cbi	0x1d, 0	; 29
//	    EICRA |= ( (1 << ISC01) | (1 << ISC00) );	// INTERRUPT ON RISING EDGE
//		EICRA |= (1 << ISC00);		// Any logical change on INT0 generates an interrupt request.
		EICRA &= ~( (1 << ISC01) | (1 << ISC00) );	// Low Level on INT0 generates an interrupt request.
    4b1c:	e9 e6       	ldi	r30, 0x69	; 105
    4b1e:	f0 e0       	ldi	r31, 0x00	; 0
    4b20:	80 81       	ld	r24, Z
    4b22:	8c 7f       	andi	r24, 0xFC	; 252
    4b24:	80 83       	st	Z, r24
//		EICRA |= (1 << ISC00);		// Any logical change on INT0 generates an interrupt request.
//	    DDRD &= ~(1 << PD2);						// PD2 as input
		INT0_DDR &= ~(1 << INT0_DDR_PIN);				// INT0_PIN as input
    4b26:	52 98       	cbi	0x0a, 2	; 10
	    EIFR |= (1 << INTF0);
    4b28:	e0 9a       	sbi	0x1c, 0	; 28
	    EIMSK |= (1 << INT0); 						// ENABLE INT0
    4b2a:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
    4b2c:	78 94       	sei
    4b2e:	08 95       	ret

00004b30 <ExtInt0Disable>:
}
//
void ExtInt0Disable(){
	//PCMSK0 &= 0x00;			// DISABLE PCINT7-0
	EIMSK &= ~(1 << INT0); 	//DISABLE INT0
    4b30:	e8 98       	cbi	0x1d, 0	; 29
	EIFR |= (1 << INTF0);
    4b32:	e0 9a       	sbi	0x1c, 0	; 28
    4b34:	08 95       	ret

00004b36 <__vector_1>:
}
//

ISR(INT0_vect) {
    4b36:	1f 92       	push	r1
    4b38:	0f 92       	push	r0
    4b3a:	0f b6       	in	r0, 0x3f	; 63
    4b3c:	0f 92       	push	r0
    4b3e:	11 24       	eor	r1, r1
    4b40:	8f 93       	push	r24
	if(extstate >= EXT_STATE_COUNT)
    4b42:	80 91 3b 03 	lds	r24, 0x033B
    4b46:	83 30       	cpi	r24, 0x03	; 3
    4b48:	18 f0       	brcs	.+6      	; 0x4b50 <__vector_1+0x1a>
		extstate=0;
    4b4a:	10 92 3b 03 	sts	0x033B, r1
    4b4e:	03 c0       	rjmp	.+6      	; 0x4b56 <__vector_1+0x20>
	else
		extstate++;
    4b50:	8f 5f       	subi	r24, 0xFF	; 255
    4b52:	80 93 3b 03 	sts	0x033B, r24

}
    4b56:	8f 91       	pop	r24
    4b58:	0f 90       	pop	r0
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	0f 90       	pop	r0
    4b5e:	1f 90       	pop	r1
    4b60:	18 95       	reti

00004b62 <ExtInt1Enable>:
//
void ExtInt1Enable(){
		EIMSK &= ~(1 << INT1); 						// DISABLE INT1
    4b62:	e9 98       	cbi	0x1d, 1	; 29
//	    EICRA |= ( (1 << ISC01) | (1 << ISC00) );	// INTERRUPT ON RISING EDGE
//		EICRA |= (1 << ISC00);		// Any logical change on INT0 generates an interrupt request.
//		EICRA &= ~( (1 << ISC11) | (1 << ISC10) );	// Low Level on INT1 generates an interrupt request.
		EICRA &= ~( (1 << ISC11)); EICRA |= (1 << ISC10);//Any logical change on INT1 generates an interrupt request.
    4b64:	e9 e6       	ldi	r30, 0x69	; 105
    4b66:	f0 e0       	ldi	r31, 0x00	; 0
    4b68:	80 81       	ld	r24, Z
    4b6a:	87 7f       	andi	r24, 0xF7	; 247
    4b6c:	80 83       	st	Z, r24
    4b6e:	80 81       	ld	r24, Z
    4b70:	84 60       	ori	r24, 0x04	; 4
    4b72:	80 83       	st	Z, r24
//	    DDRD &= ~(1 << PD3);						// PD3 as input
		INT1_DDR &= ~(1 << INT1_DDR_PIN);				// INT1_PIN as input
    4b74:	53 98       	cbi	0x0a, 3	; 10
	    // PD1 (PCINT0 pin) is now an input
	    //PORTD |= (1 << PORTD3);    // turn On the Pull-up
				// PD3 is now an input with pull-up enabled
	    INT1_PORT |= (1 << INT1_PORT_PIN);    // turn On the Pull-up
    4b76:	5b 9a       	sbi	0x0b, 3	; 11
	        	// INT1_PIN is now an input with pull-up enabled
	    EIFR |= (1 << INTF1);
    4b78:	e1 9a       	sbi	0x1c, 1	; 28
	    EIMSK |= (1 << INT1); 						// ENABLE INT1
    4b7a:	e9 9a       	sbi	0x1d, 1	; 29
	sei();
    4b7c:	78 94       	sei
    4b7e:	08 95       	ret

00004b80 <ExtInt1Disable>:
}
//
void ExtInt1Disable(){
	EIMSK &= ~(1 << INT1); 	//DISABLE INT1
    4b80:	e9 98       	cbi	0x1d, 1	; 29
	EIFR |= (1 << INTF1);
    4b82:	e1 9a       	sbi	0x1c, 1	; 28
    4b84:	08 95       	ret

00004b86 <__vector_2>:
}
//
ISR(INT1_vect) {
    4b86:	1f 92       	push	r1
    4b88:	0f 92       	push	r0
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	0f 92       	push	r0
    4b8e:	11 24       	eor	r1, r1
    4b90:	8f 93       	push	r24
	//if(PORTD & (1 << PD3)){ // rising edge Power Phase Gone!
	if(INT1_PIN & (1 << INT1_PIN_PIN)){ // rising edge Power Phase Gone!
    4b92:	4b 9b       	sbis	0x09, 3	; 9
    4b94:	0c c0       	rjmp	.+24     	; 0x4bae <__vector_2+0x28>
		if(powergone >= POWERGONE_STATE_COUNT)
    4b96:	80 91 3a 03 	lds	r24, 0x033A
    4b9a:	84 36       	cpi	r24, 0x64	; 100
    4b9c:	20 f0       	brcs	.+8      	; 0x4ba6 <__vector_2+0x20>
			powergone=1;
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	80 93 3a 03 	sts	0x033A, r24
    4ba4:	08 c0       	rjmp	.+16     	; 0x4bb6 <__vector_2+0x30>
		else
			powergone++;
    4ba6:	8f 5f       	subi	r24, 0xFF	; 255
    4ba8:	80 93 3a 03 	sts	0x033A, r24
    4bac:	04 c0       	rjmp	.+8      	; 0x4bb6 <__vector_2+0x30>
	} else {wait_powergone = 0; powergone=0;}	// falling edge Power Power Phase OK !
    4bae:	10 92 22 03 	sts	0x0322, r1
    4bb2:	10 92 3a 03 	sts	0x033A, r1

}
    4bb6:	8f 91       	pop	r24
    4bb8:	0f 90       	pop	r0
    4bba:	0f be       	out	0x3f, r0	; 63
    4bbc:	0f 90       	pop	r0
    4bbe:	1f 90       	pop	r1
    4bc0:	18 95       	reti

00004bc2 <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
    4bc2:	61 15       	cp	r22, r1
    4bc4:	71 05       	cpc	r23, r1
    4bc6:	b1 f0       	breq	.+44     	; 0x4bf4 <crc8+0x32>
    4bc8:	fc 01       	movw	r30, r24
    4bca:	68 0f       	add	r22, r24
    4bcc:	79 1f       	adc	r23, r25
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
    4bce:	80 e0       	ldi	r24, 0x00	; 0

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
    4bd0:	58 e0       	ldi	r21, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
    4bd2:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
    4bd4:	21 91       	ld	r18, Z+
    4bd6:	95 2f       	mov	r25, r21
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
    4bd8:	32 2f       	mov	r19, r18
    4bda:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
    4bdc:	30 ff       	sbrs	r19, 0
    4bde:	0c c0       	rjmp	.+24     	; 0x4bf8 <crc8+0x36>
				crc = crc ^ CRC8POLY;
    4be0:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
    4be2:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
    4be4:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
    4be6:	26 95       	lsr	r18
    4be8:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
    4bea:	b1 f7       	brne	.-20     	; 0x4bd8 <crc8+0x16>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
    4bec:	e6 17       	cp	r30, r22
    4bee:	f7 07       	cpc	r31, r23
    4bf0:	89 f7       	brne	.-30     	; 0x4bd4 <crc8+0x12>
    4bf2:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
    4bf4:	80 e0       	ldi	r24, 0x00	; 0
    4bf6:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
    4bf8:	86 95       	lsr	r24
    4bfa:	f5 cf       	rjmp	.-22     	; 0x4be6 <crc8+0x24>

00004bfc <DS18X20_raw_to_decicelsius>:

#if DS18X20_DECICELSIUS

/* convert scratchpad data to physical value in unit decicelsius */
static int16_t DS18X20_raw_to_decicelsius( uint8_t familycode, uint8_t sp[] )
{
    4bfc:	fb 01       	movw	r30, r22
	uint16_t measure;
	uint8_t  negative;
	int16_t  decicelsius;
	uint16_t fract;

	measure = sp[0] | (sp[1] << 8);
    4bfe:	21 81       	ldd	r18, Z+1	; 0x01
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	32 2f       	mov	r19, r18
    4c04:	22 27       	eor	r18, r18
    4c06:	90 81       	ld	r25, Z
    4c08:	29 2b       	or	r18, r25
	//measure = 0xFF5E; // test -10.125
	//measure = 0xFE6F; // test -25.0625

	if( familycode == DS18S20_FAMILY_CODE ) {   // 9 -> 12 bit if 18S20
    4c0a:	80 31       	cpi	r24, 0x10	; 16
    4c0c:	79 f4       	brne	.+30     	; 0x4c2c <DS18X20_raw_to_decicelsius+0x30>
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		measure &= (uint16_t)0xfffe;   // Discard LSB, needed for later extended precicion calc
    4c0e:	2e 7f       	andi	r18, 0xFE	; 254
		measure <<= 3;                 // Convert to 12-bit, now degrees are in 1/16 degrees units
    4c10:	a9 01       	movw	r20, r18
    4c12:	44 0f       	add	r20, r20
    4c14:	55 1f       	adc	r21, r21
    4c16:	44 0f       	add	r20, r20
    4c18:	55 1f       	adc	r21, r21
    4c1a:	44 0f       	add	r20, r20
    4c1c:	55 1f       	adc	r21, r21
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
    4c1e:	96 81       	ldd	r25, Z+6	; 0x06
    4c20:	2c e0       	ldi	r18, 0x0C	; 12
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	29 1b       	sub	r18, r25
    4c26:	31 09       	sbc	r19, r1
    4c28:	24 0f       	add	r18, r20
    4c2a:	35 1f       	adc	r19, r21
	}

	// check for negative 
	if ( measure & 0x8000 )  {
    4c2c:	33 23       	and	r19, r19
    4c2e:	2c f4       	brge	.+10     	; 0x4c3a <DS18X20_raw_to_decicelsius+0x3e>
		negative = 1;       // mark negative
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
    4c30:	31 95       	neg	r19
    4c32:	21 95       	neg	r18
    4c34:	31 09       	sbc	r19, r1
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
	}

	// check for negative 
	if ( measure & 0x8000 )  {
		negative = 1;       // mark negative
    4c36:	61 e0       	ldi	r22, 0x01	; 1
    4c38:	01 c0       	rjmp	.+2      	; 0x4c3c <DS18X20_raw_to_decicelsius+0x40>
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
	}
	else {
		negative = 0;
    4c3a:	60 e0       	ldi	r22, 0x00	; 0
	}

	// clear undefined bits for DS18B20 != 12bit resolution
	if ( familycode == DS18B20_FAMILY_CODE || familycode == DS1822_FAMILY_CODE ) {
    4c3c:	88 32       	cpi	r24, 0x28	; 40
    4c3e:	11 f0       	breq	.+4      	; 0x4c44 <DS18X20_raw_to_decicelsius+0x48>
    4c40:	82 32       	cpi	r24, 0x22	; 34
    4c42:	69 f4       	brne	.+26     	; 0x4c5e <DS18X20_raw_to_decicelsius+0x62>
		switch( sp[DS18B20_CONF_REG] & DS18B20_RES_MASK ) {
    4c44:	84 81       	ldd	r24, Z+4	; 0x04
    4c46:	80 76       	andi	r24, 0x60	; 96
    4c48:	80 32       	cpi	r24, 0x20	; 32
    4c4a:	31 f0       	breq	.+12     	; 0x4c58 <DS18X20_raw_to_decicelsius+0x5c>
    4c4c:	80 34       	cpi	r24, 0x40	; 64
    4c4e:	31 f0       	breq	.+12     	; 0x4c5c <DS18X20_raw_to_decicelsius+0x60>
    4c50:	81 11       	cpse	r24, r1
    4c52:	05 c0       	rjmp	.+10     	; 0x4c5e <DS18X20_raw_to_decicelsius+0x62>
		case DS18B20_9_BIT:
			measure &= ~(DS18B20_9_BIT_UNDF);
    4c54:	28 7f       	andi	r18, 0xF8	; 248
			break;
    4c56:	03 c0       	rjmp	.+6      	; 0x4c5e <DS18X20_raw_to_decicelsius+0x62>
		case DS18B20_10_BIT:
			measure &= ~(DS18B20_10_BIT_UNDF);
    4c58:	2c 7f       	andi	r18, 0xFC	; 252
			break;
    4c5a:	01 c0       	rjmp	.+2      	; 0x4c5e <DS18X20_raw_to_decicelsius+0x62>
		case DS18B20_11_BIT:
			measure &= ~(DS18B20_11_BIT_UNDF);
    4c5c:	2e 7f       	andi	r18, 0xFE	; 254
			// 12 bit - all bits valid
			break;
		}
	}

	decicelsius = (measure >> 4);
    4c5e:	c9 01       	movw	r24, r18
    4c60:	92 95       	swap	r25
    4c62:	82 95       	swap	r24
    4c64:	8f 70       	andi	r24, 0x0F	; 15
    4c66:	89 27       	eor	r24, r25
    4c68:	9f 70       	andi	r25, 0x0F	; 15
    4c6a:	89 27       	eor	r24, r25
	decicelsius *= 10;
    4c6c:	ac 01       	movw	r20, r24
    4c6e:	44 0f       	add	r20, r20
    4c70:	55 1f       	adc	r21, r21
    4c72:	88 0f       	add	r24, r24
    4c74:	99 1f       	adc	r25, r25
    4c76:	88 0f       	add	r24, r24
    4c78:	99 1f       	adc	r25, r25
    4c7a:	88 0f       	add	r24, r24
    4c7c:	99 1f       	adc	r25, r25
    4c7e:	84 0f       	add	r24, r20
    4c80:	95 1f       	adc	r25, r21

	// decicelsius += ((measure & 0x000F) * 640 + 512) / 1024;
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
    4c82:	2f 70       	andi	r18, 0x0F	; 15
    4c84:	33 27       	eor	r19, r19
    4c86:	a9 01       	movw	r20, r18
    4c88:	56 95       	lsr	r21
    4c8a:	54 2f       	mov	r21, r20
    4c8c:	44 27       	eor	r20, r20
    4c8e:	57 95       	ror	r21
    4c90:	47 95       	ror	r20
    4c92:	32 2f       	mov	r19, r18
    4c94:	22 27       	eor	r18, r18
    4c96:	33 0f       	add	r19, r19
    4c98:	24 0f       	add	r18, r20
    4c9a:	35 1f       	adc	r19, r21
	if ( !negative ) {
    4c9c:	61 11       	cpse	r22, r1
    4c9e:	13 c0       	rjmp	.+38     	; 0x4cc6 <DS18X20_raw_to_decicelsius+0xca>
		fract += 512;
    4ca0:	3e 5f       	subi	r19, 0xFE	; 254
	}
	fract /= 1024;
    4ca2:	23 2f       	mov	r18, r19
    4ca4:	33 27       	eor	r19, r19
    4ca6:	26 95       	lsr	r18
    4ca8:	26 95       	lsr	r18
	decicelsius += fract;
    4caa:	28 0f       	add	r18, r24
    4cac:	39 1f       	adc	r19, r25

	if ( negative ) {
		decicelsius = -decicelsius;
	}

	if ( /* decicelsius == 850 || */ decicelsius < -550 || decicelsius > 1250 ) {
    4cae:	c9 01       	movw	r24, r18
    4cb0:	8a 5d       	subi	r24, 0xDA	; 218
    4cb2:	9d 4f       	sbci	r25, 0xFD	; 253
    4cb4:	89 30       	cpi	r24, 0x09	; 9
    4cb6:	97 40       	sbci	r25, 0x07	; 7
    4cb8:	18 f0       	brcs	.+6      	; 0x4cc0 <DS18X20_raw_to_decicelsius+0xc4>
		return DS18X20_INVALID_DECICELSIUS;
    4cba:	80 ed       	ldi	r24, 0xD0	; 208
    4cbc:	97 e0       	ldi	r25, 0x07	; 7
    4cbe:	08 95       	ret
	} else {
		return decicelsius;
    4cc0:	82 2f       	mov	r24, r18
    4cc2:	93 2f       	mov	r25, r19
    4cc4:	08 95       	ret
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
	if ( !negative ) {
		fract += 512;
	}
	fract /= 1024;
    4cc6:	23 2f       	mov	r18, r19
    4cc8:	33 27       	eor	r19, r19
    4cca:	26 95       	lsr	r18
    4ccc:	26 95       	lsr	r18
	decicelsius += fract;
    4cce:	82 0f       	add	r24, r18
    4cd0:	93 1f       	adc	r25, r19

	if ( negative ) {
		decicelsius = -decicelsius;
    4cd2:	22 27       	eor	r18, r18
    4cd4:	33 27       	eor	r19, r19
    4cd6:	28 1b       	sub	r18, r24
    4cd8:	39 0b       	sbc	r19, r25
    4cda:	e9 cf       	rjmp	.-46     	; 0x4cae <DS18X20_raw_to_decicelsius+0xb2>

00004cdc <read_scratchpad>:
#endif
   return ibit;
}

static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
{
    4cdc:	ef 92       	push	r14
    4cde:	ff 92       	push	r15
    4ce0:	0f 93       	push	r16
    4ce2:	1f 93       	push	r17
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
    4ce8:	e6 2e       	mov	r14, r22
    4cea:	f7 2e       	mov	r15, r23
    4cec:	04 2f       	mov	r16, r20
	uint8_t i;
	uint8_t ret;
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4cee:	5d 98       	cbi	0x0b, 5	; 11
    4cf0:	2a e0       	ldi	r18, 0x0A	; 10
    4cf2:	2a 95       	dec	r18
    4cf4:	f1 f7       	brne	.-4      	; 0x4cf2 <read_scratchpad+0x16>
#endif
	ow_command( DS18X20_READ, id );
    4cf6:	bc 01       	movw	r22, r24
    4cf8:	8e eb       	ldi	r24, 0xBE	; 190
    4cfa:	0e 94 ab 1c 	call	0x3956	; 0x3956 <ow_command>

	for ( i = 0; i < n; i++ ) {
    4cfe:	00 23       	and	r16, r16
    4d00:	49 f0       	breq	.+18     	; 0x4d14 <read_scratchpad+0x38>
    4d02:	ce 2d       	mov	r28, r14
    4d04:	df 2d       	mov	r29, r15
    4d06:	10 e0       	ldi	r17, 0x00	; 0
		sp[i] = ow_byte_rd();
    4d08:	0e 94 a7 1c 	call	0x394e	; 0x394e <ow_byte_rd>
    4d0c:	89 93       	st	Y+, r24
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
#endif
	ow_command( DS18X20_READ, id );

	for ( i = 0; i < n; i++ ) {
    4d0e:	1f 5f       	subi	r17, 0xFF	; 255
    4d10:	10 13       	cpse	r17, r16
    4d12:	fa cf       	rjmp	.-12     	; 0x4d08 <read_scratchpad+0x2c>
		sp[i] = ow_byte_rd();
	}
	if ( crc8( &sp[0], DS18X20_SP_SIZE ) ) {
    4d14:	69 e0       	ldi	r22, 0x09	; 9
    4d16:	70 e0       	ldi	r23, 0x00	; 0
    4d18:	8e 2d       	mov	r24, r14
    4d1a:	9f 2d       	mov	r25, r15
    4d1c:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <crc8>
    4d20:	88 23       	and	r24, r24
    4d22:	11 f0       	breq	.+4      	; 0x4d28 <read_scratchpad+0x4c>
		ret = DS18X20_ERROR_CRC;
    4d24:	83 e0       	ldi	r24, 0x03	; 3
    4d26:	01 c0       	rjmp	.+2      	; 0x4d2a <read_scratchpad+0x4e>
	} else {
		ret = DS18X20_OK;
    4d28:	80 e0       	ldi	r24, 0x00	; 0
	}
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_HIGH();
    4d2a:	5d 9a       	sbi	0x0b, 5	; 11
#endif

	return ret;
}
    4d2c:	df 91       	pop	r29
    4d2e:	cf 91       	pop	r28
    4d30:	1f 91       	pop	r17
    4d32:	0f 91       	pop	r16
    4d34:	ff 90       	pop	r15
    4d36:	ef 90       	pop	r14
    4d38:	08 95       	ret

00004d3a <send_power_10ms>:

// About ( 10 miliseconds)

void send_power_10ms() {

	DS_PWR_DIR_OUT();
    4d3a:	55 9a       	sbi	0x0a, 5	; 10
	DS_PWR_OUT_HIGH();
    4d3c:	5d 9a       	sbi	0x0b, 5	; 11
    4d3e:	8f e4       	ldi	r24, 0x4F	; 79
    4d40:	96 e4       	ldi	r25, 0x46	; 70
    4d42:	01 97       	sbiw	r24, 0x01	; 1
    4d44:	f1 f7       	brne	.-4      	; 0x4d42 <send_power_10ms+0x8>
    4d46:	00 c0       	rjmp	.+0      	; 0x4d48 <send_power_10ms+0xe>
    4d48:	00 00       	nop
// Using in _delay_loop_1 function as DS_PWR_TIME_TO_OPEN_FET* F_OSC/1000000
// Need to be about ( 10 miliseconds)

	_delay_ms(DS18X20_COPYSP_DELAY-1); // wait for about 10 ms 
		
	DS_PWR_OUT_LOW();
    4d4a:	5d 98       	cbi	0x0b, 5	; 11
    4d4c:	8a e0       	ldi	r24, 0x0A	; 10
    4d4e:	8a 95       	dec	r24
    4d50:	f1 f7       	brne	.-4      	; 0x4d4e <send_power_10ms+0x14>
    4d52:	08 95       	ret

00004d54 <DS18X20_get_power_status>:

/* get power status of DS18x20 
   input:   id = rom_code 
   returns: DS18X20_POWER_EXTERN or DS18X20_POWER_PARASITE */
uint8_t DS18X20_get_power_status( uint8_t id[] )
{
    4d54:	cf 93       	push	r28
    4d56:	df 93       	push	r29
    4d58:	ec 01       	movw	r28, r24
	uint8_t pstat;
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4d5a:	5d 98       	cbi	0x0b, 5	; 11
    4d5c:	8a e0       	ldi	r24, 0x0A	; 10
    4d5e:	8a 95       	dec	r24
    4d60:	f1 f7       	brne	.-4      	; 0x4d5e <DS18X20_get_power_status+0xa>
#endif
	NOINTERRUPT();
    4d62:	f8 94       	cli
#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    4d64:	0e 94 a1 19 	call	0x3342	; 0x3342 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();
	ow_command( DS18X20_READ_POWER_SUPPLY, id );
    4d68:	be 01       	movw	r22, r28
    4d6a:	84 eb       	ldi	r24, 0xB4	; 180
    4d6c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <ow_command>
	pstat = ow_bit_io( 1 );
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	0e 94 4a 1c 	call	0x3894	; 0x3894 <ow_bit_io>
    4d76:	c8 2f       	mov	r28, r24
#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    4d78:	0e 94 a1 19 	call	0x3342	; 0x3342 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();
	DOINTERRUPT();
    4d7c:	78 94       	sei
   //For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
    DS_PWR_OUT_HIGH();
    4d7e:	5d 9a       	sbi	0x0b, 5	; 11
#endif

	return ( pstat ) ? DS18X20_POWER_EXTERN : DS18X20_POWER_PARASITE;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	c1 11       	cpse	r28, r1
    4d84:	01 c0       	rjmp	.+2      	; 0x4d88 <DS18X20_get_power_status+0x34>
    4d86:	80 e0       	ldi	r24, 0x00	; 0
}
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	08 95       	ret

00004d8e <DS18X20_start_meas>:

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas( uint8_t with_power_extern, uint8_t id[])
{
    4d8e:	1f 93       	push	r17
    4d90:	cf 93       	push	r28
    4d92:	df 93       	push	r29
    4d94:	18 2f       	mov	r17, r24
    4d96:	eb 01       	movw	r28, r22
	uint8_t ret;
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4d98:	5d 98       	cbi	0x0b, 5	; 11
    4d9a:	9a e0       	ldi	r25, 0x0A	; 10
    4d9c:	9a 95       	dec	r25
    4d9e:	f1 f7       	brne	.-4      	; 0x4d9c <DS18X20_start_meas+0xe>
#endif
	NOINTERRUPT();
    4da0:	f8 94       	cli
#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    4da2:	0e 94 a1 19 	call	0x3342	; 0x3342 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();
	DOINTERRUPT();
    4da6:	78 94       	sei
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
    4da8:	0e 94 c2 1b 	call	0x3784	; 0x3784 <ow_input_pin_state>
    4dac:	88 23       	and	r24, r24
    4dae:	91 f0       	breq	.+36     	; 0x4dd4 <DS18X20_start_meas+0x46>
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
    4db0:	11 30       	cpi	r17, 0x01	; 1
    4db2:	41 f0       	breq	.+16     	; 0x4dc4 <DS18X20_start_meas+0x36>
			NOINTERRUPT();
    4db4:	f8 94       	cli
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
    4db6:	be 01       	movw	r22, r28
    4db8:	84 e4       	ldi	r24, 0x44	; 68
    4dba:	0e 94 af 1c 	call	0x395e	; 0x395e <ow_command_with_parasite_enable>
			DOINTERRUPT();
    4dbe:	78 94       	sei
			NOINTERRUPT();
			ow_command( DS18X20_CONVERT_T, id );
			DOINTERRUPT();
		}
		
		ret = DS18X20_OK;
    4dc0:	80 e0       	ldi	r24, 0x00	; 0
    4dc2:	09 c0       	rjmp	.+18     	; 0x4dd6 <DS18X20_start_meas+0x48>
			NOINTERRUPT();
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
			DOINTERRUPT();
			/* not longer needed: ow_parasite_enable(); */
		} else {
			NOINTERRUPT();
    4dc4:	f8 94       	cli
			ow_command( DS18X20_CONVERT_T, id );
    4dc6:	be 01       	movw	r22, r28
    4dc8:	84 e4       	ldi	r24, 0x44	; 68
    4dca:	0e 94 ab 1c 	call	0x3956	; 0x3956 <ow_command>
			DOINTERRUPT();
    4dce:	78 94       	sei
		}
		
		ret = DS18X20_OK;
    4dd0:	80 e0       	ldi	r24, 0x00	; 0
    4dd2:	01 c0       	rjmp	.+2      	; 0x4dd6 <DS18X20_start_meas+0x48>
	} 
	else { 
#ifdef DEBUG
		uart_puts_P_verbose( "DS18X20_start_meas: Short Circuit!\r" );
#endif
		ret = DS18X20_START_FAIL;
    4dd4:	82 e0       	ldi	r24, 0x02	; 2
	}
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
       DS_PWR_OUT_HIGH();
    4dd6:	5d 9a       	sbi	0x0b, 5	; 11
#endif

	return ret;
}
    4dd8:	df 91       	pop	r29
    4dda:	cf 91       	pop	r28
    4ddc:	1f 91       	pop	r17
    4dde:	08 95       	ret

00004de0 <DS18X20_conversion_in_progress>:
uint8_t DS18X20_conversion_in_progress(void)
{
   uint8_t ibit;
   //For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4de0:	5d 98       	cbi	0x0b, 5	; 11
    4de2:	8a e0       	ldi	r24, 0x0A	; 10
    4de4:	8a 95       	dec	r24
    4de6:	f1 f7       	brne	.-4      	; 0x4de4 <DS18X20_conversion_in_progress+0x4>
#endif
	ibit =  ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	0e 94 4a 1c 	call	0x3894	; 0x3894 <ow_bit_io>
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_HIGH();
    4dee:	5d 9a       	sbi	0x0b, 5	; 11
   uint8_t ibit;
   //For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
#endif
	ibit =  ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
    4df0:	91 e0       	ldi	r25, 0x01	; 1
    4df2:	81 11       	cpse	r24, r1
    4df4:	90 e0       	ldi	r25, 0x00	; 0
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_HIGH();
#endif
   return ibit;
}
    4df6:	89 2f       	mov	r24, r25
    4df8:	08 95       	ret

00004dfa <DS18X20_format_from_decicelsius>:
/* format decicelsius-value into string, itoa method inspired 
   by code from Chris Takahashi for the MSP430 libc, BSD-license 
   modifications mthomas: variable-types, fixed radix 10, use div(), 
   insert decimal-point */
uint8_t DS18X20_format_from_decicelsius( int16_t decicelsius, char str[], uint8_t n)
{
    4dfa:	ef 92       	push	r14
    4dfc:	ff 92       	push	r15
    4dfe:	0f 93       	push	r16
    4e00:	1f 93       	push	r17
    4e02:	cf 93       	push	r28
    4e04:	df 93       	push	r29
    4e06:	cd b7       	in	r28, 0x3d	; 61
    4e08:	de b7       	in	r29, 0x3e	; 62
    4e0a:	27 97       	sbiw	r28, 0x07	; 7
    4e0c:	0f b6       	in	r0, 0x3f	; 63
    4e0e:	f8 94       	cli
    4e10:	de bf       	out	0x3e, r29	; 62
    4e12:	0f be       	out	0x3f, r0	; 63
    4e14:	cd bf       	out	0x3d, r28	; 61
    4e16:	8b 01       	movw	r16, r22
	uint8_t str_loc = 0;
	div_t dt;
	uint8_t ret;

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {
    4e18:	47 30       	cpi	r20, 0x07	; 7
    4e1a:	08 f4       	brcc	.+2      	; 0x4e1e <DS18X20_format_from_decicelsius+0x24>
    4e1c:	63 c0       	rjmp	.+198    	; 0x4ee4 <DS18X20_format_from_decicelsius+0xea>
    4e1e:	9c 01       	movw	r18, r24
    4e20:	29 51       	subi	r18, 0x19	; 25
    4e22:	3c 4f       	sbci	r19, 0xFC	; 252
    4e24:	27 3f       	cpi	r18, 0xF7	; 247
    4e26:	3a 42       	sbci	r19, 0x2A	; 42
    4e28:	08 f0       	brcs	.+2      	; 0x4e2c <DS18X20_format_from_decicelsius+0x32>
    4e2a:	5e c0       	rjmp	.+188    	; 0x4ee8 <DS18X20_format_from_decicelsius+0xee>

		if ( decicelsius < 0) {
    4e2c:	99 23       	and	r25, r25
    4e2e:	34 f4       	brge	.+12     	; 0x4e3c <DS18X20_format_from_decicelsius+0x42>
			sign = 1;
			decicelsius = -decicelsius;
    4e30:	91 95       	neg	r25
    4e32:	81 95       	neg	r24
    4e34:	91 09       	sbc	r25, r1

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {

		if ( decicelsius < 0) {
			sign = 1;
    4e36:	ee 24       	eor	r14, r14
    4e38:	e3 94       	inc	r14
    4e3a:	01 c0       	rjmp	.+2      	; 0x4e3e <DS18X20_format_from_decicelsius+0x44>
   by code from Chris Takahashi for the MSP430 libc, BSD-license 
   modifications mthomas: variable-types, fixed radix 10, use div(), 
   insert decimal-point */
uint8_t DS18X20_format_from_decicelsius( int16_t decicelsius, char str[], uint8_t n)
{
	uint8_t sign = 0;
    4e3c:	e1 2c       	mov	r14, r1

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {

		if ( decicelsius < 0) {
			sign = 1;
    4e3e:	f1 2c       	mov	r15, r1
			decicelsius = -decicelsius;
		}

		// construct a backward string of the number.
		do {
			dt = div(decicelsius,10);
    4e40:	6a e0       	ldi	r22, 0x0A	; 10
    4e42:	70 e0       	ldi	r23, 0x00	; 0
    4e44:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__divmodhi4>
			temp[temp_loc++] = dt.rem + '0';
    4e48:	21 e0       	ldi	r18, 0x01	; 1
    4e4a:	2f 0d       	add	r18, r15
    4e4c:	e1 e0       	ldi	r30, 0x01	; 1
    4e4e:	f0 e0       	ldi	r31, 0x00	; 0
    4e50:	ec 0f       	add	r30, r28
    4e52:	fd 1f       	adc	r31, r29
    4e54:	ef 0d       	add	r30, r15
    4e56:	f1 1d       	adc	r31, r1
    4e58:	f7 fc       	sbrc	r15, 7
    4e5a:	fa 95       	dec	r31
    4e5c:	80 5d       	subi	r24, 0xD0	; 208
    4e5e:	80 83       	st	Z, r24
			decicelsius = dt.quot;
    4e60:	86 2f       	mov	r24, r22
    4e62:	97 2f       	mov	r25, r23
		} while ( decicelsius > 0 );
    4e64:	18 16       	cp	r1, r24
    4e66:	19 06       	cpc	r1, r25
    4e68:	14 f4       	brge	.+4      	; 0x4e6e <DS18X20_format_from_decicelsius+0x74>
		}

		// construct a backward string of the number.
		do {
			dt = div(decicelsius,10);
			temp[temp_loc++] = dt.rem + '0';
    4e6a:	f2 2e       	mov	r15, r18
    4e6c:	e9 cf       	rjmp	.-46     	; 0x4e40 <DS18X20_format_from_decicelsius+0x46>
    4e6e:	82 2f       	mov	r24, r18
			decicelsius = dt.quot;
		} while ( decicelsius > 0 );

		if ( sign ) {
    4e70:	ee 20       	and	r14, r14
    4e72:	59 f0       	breq	.+22     	; 0x4e8a <DS18X20_format_from_decicelsius+0x90>
			temp[temp_loc] = '-';
    4e74:	9d e2       	ldi	r25, 0x2D	; 45
    4e76:	fe 01       	movw	r30, r28
    4e78:	e2 0f       	add	r30, r18
    4e7a:	f1 1d       	adc	r31, r1
    4e7c:	27 fd       	sbrc	r18, 7
    4e7e:	fa 95       	dec	r31
    4e80:	91 83       	std	Z+1, r25	; 0x01
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
    4e82:	88 23       	and	r24, r24
    4e84:	54 f4       	brge	.+20     	; 0x4e9a <DS18X20_format_from_decicelsius+0xa0>
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	27 c0       	rjmp	.+78     	; 0x4ed8 <DS18X20_format_from_decicelsius+0xde>

		if ( sign ) {
			temp[temp_loc] = '-';
		} else {
			///temp_loc--;
			temp[temp_loc] = '+';
    4e8a:	9b e2       	ldi	r25, 0x2B	; 43
    4e8c:	fe 01       	movw	r30, r28
    4e8e:	e2 0f       	add	r30, r18
    4e90:	f1 1d       	adc	r31, r1
    4e92:	27 fd       	sbrc	r18, 7
    4e94:	fa 95       	dec	r31
    4e96:	91 83       	std	Z+1, r25	; 0x01
    4e98:	f4 cf       	rjmp	.-24     	; 0x4e82 <DS18X20_format_from_decicelsius+0x88>
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 0 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
    4e9c:	4e e2       	ldi	r20, 0x2E	; 46
    4e9e:	02 c0       	rjmp	.+4      	; 0x4ea4 <DS18X20_format_from_decicelsius+0xaa>
    4ea0:	93 2f       	mov	r25, r19
    4ea2:	28 2f       	mov	r18, r24
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
			str[str_loc++] = temp[(uint8_t)temp_loc--];
    4ea4:	31 e0       	ldi	r19, 0x01	; 1
    4ea6:	39 0f       	add	r19, r25
    4ea8:	8f ef       	ldi	r24, 0xFF	; 255
    4eaa:	82 0f       	add	r24, r18
    4eac:	e1 e0       	ldi	r30, 0x01	; 1
    4eae:	f0 e0       	ldi	r31, 0x00	; 0
    4eb0:	ec 0f       	add	r30, r28
    4eb2:	fd 1f       	adc	r31, r29
    4eb4:	e2 0f       	add	r30, r18
    4eb6:	f1 1d       	adc	r31, r1
    4eb8:	20 81       	ld	r18, Z
    4eba:	f8 01       	movw	r30, r16
    4ebc:	e9 0f       	add	r30, r25
    4ebe:	f1 1d       	adc	r31, r1
    4ec0:	20 83       	st	Z, r18
			if ( temp_loc == 0 ) {
    4ec2:	81 11       	cpse	r24, r1
    4ec4:	07 c0       	rjmp	.+14     	; 0x4ed4 <DS18X20_format_from_decicelsius+0xda>
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
    4ec6:	f8 01       	movw	r30, r16
    4ec8:	e3 0f       	add	r30, r19
    4eca:	f1 1d       	adc	r31, r1
    4ecc:	40 83       	st	Z, r20
    4ece:	32 e0       	ldi	r19, 0x02	; 2
    4ed0:	39 0f       	add	r19, r25
    4ed2:	e6 cf       	rjmp	.-52     	; 0x4ea0 <DS18X20_format_from_decicelsius+0xa6>
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
    4ed4:	88 23       	and	r24, r24
    4ed6:	24 f7       	brge	.-56     	; 0x4ea0 <DS18X20_format_from_decicelsius+0xa6>
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 0 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
			}
		}
		str[str_loc] = '\0';
    4ed8:	f8 01       	movw	r30, r16
    4eda:	e3 0f       	add	r30, r19
    4edc:	f1 1d       	adc	r31, r1
    4ede:	10 82       	st	Z, r1

		ret = DS18X20_OK;
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    4ee2:	03 c0       	rjmp	.+6      	; 0x4eea <DS18X20_format_from_decicelsius+0xf0>
	} else {
		ret = DS18X20_ERROR;
    4ee4:	81 e0       	ldi	r24, 0x01	; 1
    4ee6:	01 c0       	rjmp	.+2      	; 0x4eea <DS18X20_format_from_decicelsius+0xf0>
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return ret;
}
    4eea:	27 96       	adiw	r28, 0x07	; 7
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	f8 94       	cli
    4ef0:	de bf       	out	0x3e, r29	; 62
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	cd bf       	out	0x3d, r28	; 61
    4ef6:	df 91       	pop	r29
    4ef8:	cf 91       	pop	r28
    4efa:	1f 91       	pop	r17
    4efc:	0f 91       	pop	r16
    4efe:	ff 90       	pop	r15
    4f00:	ef 90       	pop	r14
    4f02:	08 95       	ret

00004f04 <DS18X20_read_decicelsius>:

/* reads temperature (scratchpad) of sensor with rom-code id
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius( uint8_t id[], int16_t *decicelsius )
{
    4f04:	df 92       	push	r13
    4f06:	ef 92       	push	r14
    4f08:	ff 92       	push	r15
    4f0a:	0f 93       	push	r16
    4f0c:	1f 93       	push	r17
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	cd b7       	in	r28, 0x3d	; 61
    4f14:	de b7       	in	r29, 0x3e	; 62
    4f16:	29 97       	sbiw	r28, 0x09	; 9
    4f18:	0f b6       	in	r0, 0x3f	; 63
    4f1a:	f8 94       	cli
    4f1c:	de bf       	out	0x3e, r29	; 62
    4f1e:	0f be       	out	0x3f, r0	; 63
    4f20:	cd bf       	out	0x3d, r28	; 61
    4f22:	8c 01       	movw	r16, r24
    4f24:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4f26:	5d 98       	cbi	0x0b, 5	; 11
    4f28:	8a e0       	ldi	r24, 0x0A	; 10
    4f2a:	8a 95       	dec	r24
    4f2c:	f1 f7       	brne	.-4      	; 0x4f2a <DS18X20_read_decicelsius+0x26>
#endif
#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    4f2e:	0e 94 a1 19 	call	0x3342	; 0x3342 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();
   
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
    4f32:	49 e0       	ldi	r20, 0x09	; 9
    4f34:	be 01       	movw	r22, r28
    4f36:	6f 5f       	subi	r22, 0xFF	; 255
    4f38:	7f 4f       	sbci	r23, 0xFF	; 255
    4f3a:	c8 01       	movw	r24, r16
    4f3c:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <read_scratchpad>
    4f40:	d8 2e       	mov	r13, r24
	if ( ret == DS18X20_OK ) {
    4f42:	81 11       	cpse	r24, r1
    4f44:	0a c0       	rjmp	.+20     	; 0x4f5a <DS18X20_read_decicelsius+0x56>
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
    4f46:	be 01       	movw	r22, r28
    4f48:	6f 5f       	subi	r22, 0xFF	; 255
    4f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f4c:	f8 01       	movw	r30, r16
    4f4e:	80 81       	ld	r24, Z
    4f50:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <DS18X20_raw_to_decicelsius>
    4f54:	f7 01       	movw	r30, r14
    4f56:	91 83       	std	Z+1, r25	; 0x01
    4f58:	80 83       	st	Z, r24
	}
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_HIGH();
    4f5a:	5d 9a       	sbi	0x0b, 5	; 11
#endif
	return ret;
}
    4f5c:	8d 2d       	mov	r24, r13
    4f5e:	29 96       	adiw	r28, 0x09	; 9
    4f60:	0f b6       	in	r0, 0x3f	; 63
    4f62:	f8 94       	cli
    4f64:	de bf       	out	0x3e, r29	; 62
    4f66:	0f be       	out	0x3f, r0	; 63
    4f68:	cd bf       	out	0x3d, r28	; 61
    4f6a:	df 91       	pop	r29
    4f6c:	cf 91       	pop	r28
    4f6e:	1f 91       	pop	r17
    4f70:	0f 91       	pop	r16
    4f72:	ff 90       	pop	r15
    4f74:	ef 90       	pop	r14
    4f76:	df 90       	pop	r13
    4f78:	08 95       	ret

00004f7a <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
    4f7a:	ef 92       	push	r14
    4f7c:	ff 92       	push	r15
    4f7e:	0f 93       	push	r16
    4f80:	1f 93       	push	r17
    4f82:	cf 93       	push	r28
    4f84:	df 93       	push	r29
    4f86:	cd b7       	in	r28, 0x3d	; 61
    4f88:	de b7       	in	r29, 0x3e	; 62
    4f8a:	29 97       	sbiw	r28, 0x09	; 9
    4f8c:	0f b6       	in	r0, 0x3f	; 63
    4f8e:	f8 94       	cli
    4f90:	de bf       	out	0x3e, r29	; 62
    4f92:	0f be       	out	0x3f, r0	; 63
    4f94:	cd bf       	out	0x3d, r28	; 61
    4f96:	e8 2e       	mov	r14, r24
    4f98:	8b 01       	movw	r16, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;

	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
    4f9a:	49 e0       	ldi	r20, 0x09	; 9
    4f9c:	be 01       	movw	r22, r28
    4f9e:	6f 5f       	subi	r22, 0xFF	; 255
    4fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa2:	80 e0       	ldi	r24, 0x00	; 0
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <read_scratchpad>
    4faa:	f8 2e       	mov	r15, r24
	if ( ret == DS18X20_OK ) {
    4fac:	81 11       	cpse	r24, r1
    4fae:	09 c0       	rjmp	.+18     	; 0x4fc2 <DS18X20_read_decicelsius_single+0x48>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
    4fb0:	be 01       	movw	r22, r28
    4fb2:	6f 5f       	subi	r22, 0xFF	; 255
    4fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fb6:	8e 2d       	mov	r24, r14
    4fb8:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <DS18X20_raw_to_decicelsius>
    4fbc:	f8 01       	movw	r30, r16
    4fbe:	91 83       	std	Z+1, r25	; 0x01
    4fc0:	80 83       	st	Z, r24
	}
	return ret;
}
    4fc2:	8f 2d       	mov	r24, r15
    4fc4:	29 96       	adiw	r28, 0x09	; 9
    4fc6:	0f b6       	in	r0, 0x3f	; 63
    4fc8:	f8 94       	cli
    4fca:	de bf       	out	0x3e, r29	; 62
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	cd bf       	out	0x3d, r28	; 61
    4fd0:	df 91       	pop	r29
    4fd2:	cf 91       	pop	r28
    4fd4:	1f 91       	pop	r17
    4fd6:	0f 91       	pop	r16
    4fd8:	ff 90       	pop	r15
    4fda:	ef 90       	pop	r14
    4fdc:	08 95       	ret

00004fde <__divmodhi4>:
    4fde:	97 fb       	bst	r25, 7
    4fe0:	07 2e       	mov	r0, r23
    4fe2:	16 f4       	brtc	.+4      	; 0x4fe8 <__divmodhi4+0xa>
    4fe4:	00 94       	com	r0
    4fe6:	07 d0       	rcall	.+14     	; 0x4ff6 <__divmodhi4_neg1>
    4fe8:	77 fd       	sbrc	r23, 7
    4fea:	09 d0       	rcall	.+18     	; 0x4ffe <__divmodhi4_neg2>
    4fec:	0e 94 18 28 	call	0x5030	; 0x5030 <__udivmodhi4>
    4ff0:	07 fc       	sbrc	r0, 7
    4ff2:	05 d0       	rcall	.+10     	; 0x4ffe <__divmodhi4_neg2>
    4ff4:	3e f4       	brtc	.+14     	; 0x5004 <__divmodhi4_exit>

00004ff6 <__divmodhi4_neg1>:
    4ff6:	90 95       	com	r25
    4ff8:	81 95       	neg	r24
    4ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    4ffc:	08 95       	ret

00004ffe <__divmodhi4_neg2>:
    4ffe:	70 95       	com	r23
    5000:	61 95       	neg	r22
    5002:	7f 4f       	sbci	r23, 0xFF	; 255

00005004 <__divmodhi4_exit>:
    5004:	08 95       	ret

00005006 <__tablejump2__>:
    5006:	ee 0f       	add	r30, r30
    5008:	ff 1f       	adc	r31, r31

0000500a <__tablejump__>:
    500a:	05 90       	lpm	r0, Z+
    500c:	f4 91       	lpm	r31, Z
    500e:	e0 2d       	mov	r30, r0
    5010:	09 94       	ijmp

00005012 <__umulhisi3>:
    5012:	a2 9f       	mul	r26, r18
    5014:	b0 01       	movw	r22, r0
    5016:	b3 9f       	mul	r27, r19
    5018:	c0 01       	movw	r24, r0
    501a:	a3 9f       	mul	r26, r19
    501c:	70 0d       	add	r23, r0
    501e:	81 1d       	adc	r24, r1
    5020:	11 24       	eor	r1, r1
    5022:	91 1d       	adc	r25, r1
    5024:	b2 9f       	mul	r27, r18
    5026:	70 0d       	add	r23, r0
    5028:	81 1d       	adc	r24, r1
    502a:	11 24       	eor	r1, r1
    502c:	91 1d       	adc	r25, r1
    502e:	08 95       	ret

00005030 <__udivmodhi4>:
    5030:	aa 1b       	sub	r26, r26
    5032:	bb 1b       	sub	r27, r27
    5034:	51 e1       	ldi	r21, 0x11	; 17
    5036:	07 c0       	rjmp	.+14     	; 0x5046 <__udivmodhi4_ep>

00005038 <__udivmodhi4_loop>:
    5038:	aa 1f       	adc	r26, r26
    503a:	bb 1f       	adc	r27, r27
    503c:	a6 17       	cp	r26, r22
    503e:	b7 07       	cpc	r27, r23
    5040:	10 f0       	brcs	.+4      	; 0x5046 <__udivmodhi4_ep>
    5042:	a6 1b       	sub	r26, r22
    5044:	b7 0b       	sbc	r27, r23

00005046 <__udivmodhi4_ep>:
    5046:	88 1f       	adc	r24, r24
    5048:	99 1f       	adc	r25, r25
    504a:	5a 95       	dec	r21
    504c:	a9 f7       	brne	.-22     	; 0x5038 <__udivmodhi4_loop>
    504e:	80 95       	com	r24
    5050:	90 95       	com	r25
    5052:	bc 01       	movw	r22, r24
    5054:	cd 01       	movw	r24, r26
    5056:	08 95       	ret

00005058 <malloc>:
    5058:	cf 93       	push	r28
    505a:	df 93       	push	r29
    505c:	82 30       	cpi	r24, 0x02	; 2
    505e:	91 05       	cpc	r25, r1
    5060:	10 f4       	brcc	.+4      	; 0x5066 <malloc+0xe>
    5062:	82 e0       	ldi	r24, 0x02	; 2
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	e0 91 f7 06 	lds	r30, 0x06F7
    506a:	f0 91 f8 06 	lds	r31, 0x06F8
    506e:	20 e0       	ldi	r18, 0x00	; 0
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	a0 e0       	ldi	r26, 0x00	; 0
    5074:	b0 e0       	ldi	r27, 0x00	; 0
    5076:	30 97       	sbiw	r30, 0x00	; 0
    5078:	39 f1       	breq	.+78     	; 0x50c8 <malloc+0x70>
    507a:	40 81       	ld	r20, Z
    507c:	51 81       	ldd	r21, Z+1	; 0x01
    507e:	48 17       	cp	r20, r24
    5080:	59 07       	cpc	r21, r25
    5082:	b8 f0       	brcs	.+46     	; 0x50b2 <malloc+0x5a>
    5084:	48 17       	cp	r20, r24
    5086:	59 07       	cpc	r21, r25
    5088:	71 f4       	brne	.+28     	; 0x50a6 <malloc+0x4e>
    508a:	82 81       	ldd	r24, Z+2	; 0x02
    508c:	93 81       	ldd	r25, Z+3	; 0x03
    508e:	10 97       	sbiw	r26, 0x00	; 0
    5090:	29 f0       	breq	.+10     	; 0x509c <malloc+0x44>
    5092:	13 96       	adiw	r26, 0x03	; 3
    5094:	9c 93       	st	X, r25
    5096:	8e 93       	st	-X, r24
    5098:	12 97       	sbiw	r26, 0x02	; 2
    509a:	2c c0       	rjmp	.+88     	; 0x50f4 <malloc+0x9c>
    509c:	90 93 f8 06 	sts	0x06F8, r25
    50a0:	80 93 f7 06 	sts	0x06F7, r24
    50a4:	27 c0       	rjmp	.+78     	; 0x50f4 <malloc+0x9c>
    50a6:	21 15       	cp	r18, r1
    50a8:	31 05       	cpc	r19, r1
    50aa:	31 f0       	breq	.+12     	; 0x50b8 <malloc+0x60>
    50ac:	42 17       	cp	r20, r18
    50ae:	53 07       	cpc	r21, r19
    50b0:	18 f0       	brcs	.+6      	; 0x50b8 <malloc+0x60>
    50b2:	a9 01       	movw	r20, r18
    50b4:	db 01       	movw	r26, r22
    50b6:	01 c0       	rjmp	.+2      	; 0x50ba <malloc+0x62>
    50b8:	ef 01       	movw	r28, r30
    50ba:	9a 01       	movw	r18, r20
    50bc:	bd 01       	movw	r22, r26
    50be:	df 01       	movw	r26, r30
    50c0:	02 80       	ldd	r0, Z+2	; 0x02
    50c2:	f3 81       	ldd	r31, Z+3	; 0x03
    50c4:	e0 2d       	mov	r30, r0
    50c6:	d7 cf       	rjmp	.-82     	; 0x5076 <malloc+0x1e>
    50c8:	21 15       	cp	r18, r1
    50ca:	31 05       	cpc	r19, r1
    50cc:	f9 f0       	breq	.+62     	; 0x510c <malloc+0xb4>
    50ce:	28 1b       	sub	r18, r24
    50d0:	39 0b       	sbc	r19, r25
    50d2:	24 30       	cpi	r18, 0x04	; 4
    50d4:	31 05       	cpc	r19, r1
    50d6:	80 f4       	brcc	.+32     	; 0x50f8 <malloc+0xa0>
    50d8:	8a 81       	ldd	r24, Y+2	; 0x02
    50da:	9b 81       	ldd	r25, Y+3	; 0x03
    50dc:	61 15       	cp	r22, r1
    50de:	71 05       	cpc	r23, r1
    50e0:	21 f0       	breq	.+8      	; 0x50ea <malloc+0x92>
    50e2:	fb 01       	movw	r30, r22
    50e4:	93 83       	std	Z+3, r25	; 0x03
    50e6:	82 83       	std	Z+2, r24	; 0x02
    50e8:	04 c0       	rjmp	.+8      	; 0x50f2 <malloc+0x9a>
    50ea:	90 93 f8 06 	sts	0x06F8, r25
    50ee:	80 93 f7 06 	sts	0x06F7, r24
    50f2:	fe 01       	movw	r30, r28
    50f4:	32 96       	adiw	r30, 0x02	; 2
    50f6:	44 c0       	rjmp	.+136    	; 0x5180 <malloc+0x128>
    50f8:	fe 01       	movw	r30, r28
    50fa:	e2 0f       	add	r30, r18
    50fc:	f3 1f       	adc	r31, r19
    50fe:	81 93       	st	Z+, r24
    5100:	91 93       	st	Z+, r25
    5102:	22 50       	subi	r18, 0x02	; 2
    5104:	31 09       	sbc	r19, r1
    5106:	39 83       	std	Y+1, r19	; 0x01
    5108:	28 83       	st	Y, r18
    510a:	3a c0       	rjmp	.+116    	; 0x5180 <malloc+0x128>
    510c:	20 91 f5 06 	lds	r18, 0x06F5
    5110:	30 91 f6 06 	lds	r19, 0x06F6
    5114:	23 2b       	or	r18, r19
    5116:	41 f4       	brne	.+16     	; 0x5128 <malloc+0xd0>
    5118:	20 91 04 01 	lds	r18, 0x0104
    511c:	30 91 05 01 	lds	r19, 0x0105
    5120:	30 93 f6 06 	sts	0x06F6, r19
    5124:	20 93 f5 06 	sts	0x06F5, r18
    5128:	20 91 02 01 	lds	r18, 0x0102
    512c:	30 91 03 01 	lds	r19, 0x0103
    5130:	21 15       	cp	r18, r1
    5132:	31 05       	cpc	r19, r1
    5134:	41 f4       	brne	.+16     	; 0x5146 <malloc+0xee>
    5136:	2d b7       	in	r18, 0x3d	; 61
    5138:	3e b7       	in	r19, 0x3e	; 62
    513a:	40 91 06 01 	lds	r20, 0x0106
    513e:	50 91 07 01 	lds	r21, 0x0107
    5142:	24 1b       	sub	r18, r20
    5144:	35 0b       	sbc	r19, r21
    5146:	e0 91 f5 06 	lds	r30, 0x06F5
    514a:	f0 91 f6 06 	lds	r31, 0x06F6
    514e:	e2 17       	cp	r30, r18
    5150:	f3 07       	cpc	r31, r19
    5152:	a0 f4       	brcc	.+40     	; 0x517c <malloc+0x124>
    5154:	2e 1b       	sub	r18, r30
    5156:	3f 0b       	sbc	r19, r31
    5158:	28 17       	cp	r18, r24
    515a:	39 07       	cpc	r19, r25
    515c:	78 f0       	brcs	.+30     	; 0x517c <malloc+0x124>
    515e:	ac 01       	movw	r20, r24
    5160:	4e 5f       	subi	r20, 0xFE	; 254
    5162:	5f 4f       	sbci	r21, 0xFF	; 255
    5164:	24 17       	cp	r18, r20
    5166:	35 07       	cpc	r19, r21
    5168:	48 f0       	brcs	.+18     	; 0x517c <malloc+0x124>
    516a:	4e 0f       	add	r20, r30
    516c:	5f 1f       	adc	r21, r31
    516e:	50 93 f6 06 	sts	0x06F6, r21
    5172:	40 93 f5 06 	sts	0x06F5, r20
    5176:	81 93       	st	Z+, r24
    5178:	91 93       	st	Z+, r25
    517a:	02 c0       	rjmp	.+4      	; 0x5180 <malloc+0x128>
    517c:	e0 e0       	ldi	r30, 0x00	; 0
    517e:	f0 e0       	ldi	r31, 0x00	; 0
    5180:	cf 01       	movw	r24, r30
    5182:	df 91       	pop	r29
    5184:	cf 91       	pop	r28
    5186:	08 95       	ret

00005188 <free>:
    5188:	cf 93       	push	r28
    518a:	df 93       	push	r29
    518c:	00 97       	sbiw	r24, 0x00	; 0
    518e:	09 f4       	brne	.+2      	; 0x5192 <free+0xa>
    5190:	87 c0       	rjmp	.+270    	; 0x52a0 <free+0x118>
    5192:	fc 01       	movw	r30, r24
    5194:	32 97       	sbiw	r30, 0x02	; 2
    5196:	13 82       	std	Z+3, r1	; 0x03
    5198:	12 82       	std	Z+2, r1	; 0x02
    519a:	c0 91 f7 06 	lds	r28, 0x06F7
    519e:	d0 91 f8 06 	lds	r29, 0x06F8
    51a2:	20 97       	sbiw	r28, 0x00	; 0
    51a4:	81 f4       	brne	.+32     	; 0x51c6 <free+0x3e>
    51a6:	20 81       	ld	r18, Z
    51a8:	31 81       	ldd	r19, Z+1	; 0x01
    51aa:	28 0f       	add	r18, r24
    51ac:	39 1f       	adc	r19, r25
    51ae:	80 91 f5 06 	lds	r24, 0x06F5
    51b2:	90 91 f6 06 	lds	r25, 0x06F6
    51b6:	82 17       	cp	r24, r18
    51b8:	93 07       	cpc	r25, r19
    51ba:	79 f5       	brne	.+94     	; 0x521a <free+0x92>
    51bc:	f0 93 f6 06 	sts	0x06F6, r31
    51c0:	e0 93 f5 06 	sts	0x06F5, r30
    51c4:	6d c0       	rjmp	.+218    	; 0x52a0 <free+0x118>
    51c6:	de 01       	movw	r26, r28
    51c8:	20 e0       	ldi	r18, 0x00	; 0
    51ca:	30 e0       	ldi	r19, 0x00	; 0
    51cc:	ae 17       	cp	r26, r30
    51ce:	bf 07       	cpc	r27, r31
    51d0:	50 f4       	brcc	.+20     	; 0x51e6 <free+0x5e>
    51d2:	12 96       	adiw	r26, 0x02	; 2
    51d4:	4d 91       	ld	r20, X+
    51d6:	5c 91       	ld	r21, X
    51d8:	13 97       	sbiw	r26, 0x03	; 3
    51da:	9d 01       	movw	r18, r26
    51dc:	41 15       	cp	r20, r1
    51de:	51 05       	cpc	r21, r1
    51e0:	09 f1       	breq	.+66     	; 0x5224 <free+0x9c>
    51e2:	da 01       	movw	r26, r20
    51e4:	f3 cf       	rjmp	.-26     	; 0x51cc <free+0x44>
    51e6:	b3 83       	std	Z+3, r27	; 0x03
    51e8:	a2 83       	std	Z+2, r26	; 0x02
    51ea:	40 81       	ld	r20, Z
    51ec:	51 81       	ldd	r21, Z+1	; 0x01
    51ee:	84 0f       	add	r24, r20
    51f0:	95 1f       	adc	r25, r21
    51f2:	8a 17       	cp	r24, r26
    51f4:	9b 07       	cpc	r25, r27
    51f6:	71 f4       	brne	.+28     	; 0x5214 <free+0x8c>
    51f8:	8d 91       	ld	r24, X+
    51fa:	9c 91       	ld	r25, X
    51fc:	11 97       	sbiw	r26, 0x01	; 1
    51fe:	84 0f       	add	r24, r20
    5200:	95 1f       	adc	r25, r21
    5202:	02 96       	adiw	r24, 0x02	; 2
    5204:	91 83       	std	Z+1, r25	; 0x01
    5206:	80 83       	st	Z, r24
    5208:	12 96       	adiw	r26, 0x02	; 2
    520a:	8d 91       	ld	r24, X+
    520c:	9c 91       	ld	r25, X
    520e:	13 97       	sbiw	r26, 0x03	; 3
    5210:	93 83       	std	Z+3, r25	; 0x03
    5212:	82 83       	std	Z+2, r24	; 0x02
    5214:	21 15       	cp	r18, r1
    5216:	31 05       	cpc	r19, r1
    5218:	29 f4       	brne	.+10     	; 0x5224 <free+0x9c>
    521a:	f0 93 f8 06 	sts	0x06F8, r31
    521e:	e0 93 f7 06 	sts	0x06F7, r30
    5222:	3e c0       	rjmp	.+124    	; 0x52a0 <free+0x118>
    5224:	d9 01       	movw	r26, r18
    5226:	13 96       	adiw	r26, 0x03	; 3
    5228:	fc 93       	st	X, r31
    522a:	ee 93       	st	-X, r30
    522c:	12 97       	sbiw	r26, 0x02	; 2
    522e:	4d 91       	ld	r20, X+
    5230:	5d 91       	ld	r21, X+
    5232:	a4 0f       	add	r26, r20
    5234:	b5 1f       	adc	r27, r21
    5236:	ea 17       	cp	r30, r26
    5238:	fb 07       	cpc	r31, r27
    523a:	79 f4       	brne	.+30     	; 0x525a <free+0xd2>
    523c:	80 81       	ld	r24, Z
    523e:	91 81       	ldd	r25, Z+1	; 0x01
    5240:	84 0f       	add	r24, r20
    5242:	95 1f       	adc	r25, r21
    5244:	02 96       	adiw	r24, 0x02	; 2
    5246:	d9 01       	movw	r26, r18
    5248:	11 96       	adiw	r26, 0x01	; 1
    524a:	9c 93       	st	X, r25
    524c:	8e 93       	st	-X, r24
    524e:	82 81       	ldd	r24, Z+2	; 0x02
    5250:	93 81       	ldd	r25, Z+3	; 0x03
    5252:	13 96       	adiw	r26, 0x03	; 3
    5254:	9c 93       	st	X, r25
    5256:	8e 93       	st	-X, r24
    5258:	12 97       	sbiw	r26, 0x02	; 2
    525a:	e0 e0       	ldi	r30, 0x00	; 0
    525c:	f0 e0       	ldi	r31, 0x00	; 0
    525e:	8a 81       	ldd	r24, Y+2	; 0x02
    5260:	9b 81       	ldd	r25, Y+3	; 0x03
    5262:	00 97       	sbiw	r24, 0x00	; 0
    5264:	19 f0       	breq	.+6      	; 0x526c <free+0xe4>
    5266:	fe 01       	movw	r30, r28
    5268:	ec 01       	movw	r28, r24
    526a:	f9 cf       	rjmp	.-14     	; 0x525e <free+0xd6>
    526c:	ce 01       	movw	r24, r28
    526e:	02 96       	adiw	r24, 0x02	; 2
    5270:	28 81       	ld	r18, Y
    5272:	39 81       	ldd	r19, Y+1	; 0x01
    5274:	82 0f       	add	r24, r18
    5276:	93 1f       	adc	r25, r19
    5278:	20 91 f5 06 	lds	r18, 0x06F5
    527c:	30 91 f6 06 	lds	r19, 0x06F6
    5280:	28 17       	cp	r18, r24
    5282:	39 07       	cpc	r19, r25
    5284:	69 f4       	brne	.+26     	; 0x52a0 <free+0x118>
    5286:	30 97       	sbiw	r30, 0x00	; 0
    5288:	29 f4       	brne	.+10     	; 0x5294 <free+0x10c>
    528a:	10 92 f8 06 	sts	0x06F8, r1
    528e:	10 92 f7 06 	sts	0x06F7, r1
    5292:	02 c0       	rjmp	.+4      	; 0x5298 <free+0x110>
    5294:	13 82       	std	Z+3, r1	; 0x03
    5296:	12 82       	std	Z+2, r1	; 0x02
    5298:	d0 93 f6 06 	sts	0x06F6, r29
    529c:	c0 93 f5 06 	sts	0x06F5, r28
    52a0:	df 91       	pop	r29
    52a2:	cf 91       	pop	r28
    52a4:	08 95       	ret

000052a6 <abort>:
    52a6:	81 e0       	ldi	r24, 0x01	; 1
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	f8 94       	cli
    52ac:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <_exit>

000052b0 <atoi>:
    52b0:	fc 01       	movw	r30, r24
    52b2:	88 27       	eor	r24, r24
    52b4:	99 27       	eor	r25, r25
    52b6:	e8 94       	clt
    52b8:	21 91       	ld	r18, Z+
    52ba:	20 32       	cpi	r18, 0x20	; 32
    52bc:	e9 f3       	breq	.-6      	; 0x52b8 <atoi+0x8>
    52be:	29 30       	cpi	r18, 0x09	; 9
    52c0:	10 f0       	brcs	.+4      	; 0x52c6 <atoi+0x16>
    52c2:	2e 30       	cpi	r18, 0x0E	; 14
    52c4:	c8 f3       	brcs	.-14     	; 0x52b8 <atoi+0x8>
    52c6:	2b 32       	cpi	r18, 0x2B	; 43
    52c8:	41 f0       	breq	.+16     	; 0x52da <atoi+0x2a>
    52ca:	2d 32       	cpi	r18, 0x2D	; 45
    52cc:	39 f4       	brne	.+14     	; 0x52dc <atoi+0x2c>
    52ce:	68 94       	set
    52d0:	04 c0       	rjmp	.+8      	; 0x52da <atoi+0x2a>
    52d2:	0e 94 09 2a 	call	0x5412	; 0x5412 <__mulhi_const_10>
    52d6:	82 0f       	add	r24, r18
    52d8:	91 1d       	adc	r25, r1
    52da:	21 91       	ld	r18, Z+
    52dc:	20 53       	subi	r18, 0x30	; 48
    52de:	2a 30       	cpi	r18, 0x0A	; 10
    52e0:	c0 f3       	brcs	.-16     	; 0x52d2 <atoi+0x22>
    52e2:	1e f4       	brtc	.+6      	; 0x52ea <atoi+0x3a>
    52e4:	90 95       	com	r25
    52e6:	81 95       	neg	r24
    52e8:	9f 4f       	sbci	r25, 0xFF	; 255
    52ea:	08 95       	ret

000052ec <strncpy_P>:
    52ec:	fb 01       	movw	r30, r22
    52ee:	dc 01       	movw	r26, r24
    52f0:	41 50       	subi	r20, 0x01	; 1
    52f2:	50 40       	sbci	r21, 0x00	; 0
    52f4:	48 f0       	brcs	.+18     	; 0x5308 <strncpy_P+0x1c>
    52f6:	05 90       	lpm	r0, Z+
    52f8:	0d 92       	st	X+, r0
    52fa:	00 20       	and	r0, r0
    52fc:	c9 f7       	brne	.-14     	; 0x52f0 <strncpy_P+0x4>
    52fe:	01 c0       	rjmp	.+2      	; 0x5302 <strncpy_P+0x16>
    5300:	1d 92       	st	X+, r1
    5302:	41 50       	subi	r20, 0x01	; 1
    5304:	50 40       	sbci	r21, 0x00	; 0
    5306:	e0 f7       	brcc	.-8      	; 0x5300 <strncpy_P+0x14>
    5308:	08 95       	ret

0000530a <strtok>:
    530a:	42 ea       	ldi	r20, 0xA2	; 162
    530c:	52 e0       	ldi	r21, 0x02	; 2
    530e:	0e 94 d7 29 	call	0x53ae	; 0x53ae <strtok_r>
    5312:	08 95       	ret

00005314 <memcmp>:
    5314:	fb 01       	movw	r30, r22
    5316:	dc 01       	movw	r26, r24
    5318:	04 c0       	rjmp	.+8      	; 0x5322 <memcmp+0xe>
    531a:	8d 91       	ld	r24, X+
    531c:	01 90       	ld	r0, Z+
    531e:	80 19       	sub	r24, r0
    5320:	21 f4       	brne	.+8      	; 0x532a <memcmp+0x16>
    5322:	41 50       	subi	r20, 0x01	; 1
    5324:	50 40       	sbci	r21, 0x00	; 0
    5326:	c8 f7       	brcc	.-14     	; 0x531a <memcmp+0x6>
    5328:	88 1b       	sub	r24, r24
    532a:	99 0b       	sbc	r25, r25
    532c:	08 95       	ret

0000532e <strcpy>:
    532e:	fb 01       	movw	r30, r22
    5330:	dc 01       	movw	r26, r24
    5332:	01 90       	ld	r0, Z+
    5334:	0d 92       	st	X+, r0
    5336:	00 20       	and	r0, r0
    5338:	e1 f7       	brne	.-8      	; 0x5332 <strcpy+0x4>
    533a:	08 95       	ret

0000533c <strncat>:
    533c:	fb 01       	movw	r30, r22
    533e:	dc 01       	movw	r26, r24
    5340:	0d 90       	ld	r0, X+
    5342:	00 20       	and	r0, r0
    5344:	e9 f7       	brne	.-6      	; 0x5340 <strncat+0x4>
    5346:	11 97       	sbiw	r26, 0x01	; 1
    5348:	41 50       	subi	r20, 0x01	; 1
    534a:	50 40       	sbci	r21, 0x00	; 0
    534c:	28 f0       	brcs	.+10     	; 0x5358 <strncat+0x1c>
    534e:	01 90       	ld	r0, Z+
    5350:	00 20       	and	r0, r0
    5352:	0d 92       	st	X+, r0
    5354:	c9 f7       	brne	.-14     	; 0x5348 <strncat+0xc>
    5356:	08 95       	ret
    5358:	1c 92       	st	X, r1
    535a:	08 95       	ret

0000535c <strncpy>:
    535c:	fb 01       	movw	r30, r22
    535e:	dc 01       	movw	r26, r24
    5360:	41 50       	subi	r20, 0x01	; 1
    5362:	50 40       	sbci	r21, 0x00	; 0
    5364:	48 f0       	brcs	.+18     	; 0x5378 <strncpy+0x1c>
    5366:	01 90       	ld	r0, Z+
    5368:	0d 92       	st	X+, r0
    536a:	00 20       	and	r0, r0
    536c:	c9 f7       	brne	.-14     	; 0x5360 <strncpy+0x4>
    536e:	01 c0       	rjmp	.+2      	; 0x5372 <strncpy+0x16>
    5370:	1d 92       	st	X+, r1
    5372:	41 50       	subi	r20, 0x01	; 1
    5374:	50 40       	sbci	r21, 0x00	; 0
    5376:	e0 f7       	brcc	.-8      	; 0x5370 <strncpy+0x14>
    5378:	08 95       	ret

0000537a <strstr>:
    537a:	fb 01       	movw	r30, r22
    537c:	51 91       	ld	r21, Z+
    537e:	55 23       	and	r21, r21
    5380:	a9 f0       	breq	.+42     	; 0x53ac <strstr+0x32>
    5382:	bf 01       	movw	r22, r30
    5384:	dc 01       	movw	r26, r24
    5386:	4d 91       	ld	r20, X+
    5388:	45 17       	cp	r20, r21
    538a:	41 11       	cpse	r20, r1
    538c:	e1 f7       	brne	.-8      	; 0x5386 <strstr+0xc>
    538e:	59 f4       	brne	.+22     	; 0x53a6 <strstr+0x2c>
    5390:	cd 01       	movw	r24, r26
    5392:	01 90       	ld	r0, Z+
    5394:	00 20       	and	r0, r0
    5396:	49 f0       	breq	.+18     	; 0x53aa <strstr+0x30>
    5398:	4d 91       	ld	r20, X+
    539a:	40 15       	cp	r20, r0
    539c:	41 11       	cpse	r20, r1
    539e:	c9 f3       	breq	.-14     	; 0x5392 <strstr+0x18>
    53a0:	fb 01       	movw	r30, r22
    53a2:	41 11       	cpse	r20, r1
    53a4:	ef cf       	rjmp	.-34     	; 0x5384 <strstr+0xa>
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	08 95       	ret

000053ae <strtok_r>:
    53ae:	fa 01       	movw	r30, r20
    53b0:	a1 91       	ld	r26, Z+
    53b2:	b0 81       	ld	r27, Z
    53b4:	00 97       	sbiw	r24, 0x00	; 0
    53b6:	19 f4       	brne	.+6      	; 0x53be <strtok_r+0x10>
    53b8:	10 97       	sbiw	r26, 0x00	; 0
    53ba:	e1 f0       	breq	.+56     	; 0x53f4 <strtok_r+0x46>
    53bc:	cd 01       	movw	r24, r26
    53be:	dc 01       	movw	r26, r24
    53c0:	cd 01       	movw	r24, r26
    53c2:	0d 90       	ld	r0, X+
    53c4:	00 20       	and	r0, r0
    53c6:	11 f4       	brne	.+4      	; 0x53cc <strtok_r+0x1e>
    53c8:	c0 01       	movw	r24, r0
    53ca:	13 c0       	rjmp	.+38     	; 0x53f2 <strtok_r+0x44>
    53cc:	fb 01       	movw	r30, r22
    53ce:	21 91       	ld	r18, Z+
    53d0:	22 23       	and	r18, r18
    53d2:	19 f0       	breq	.+6      	; 0x53da <strtok_r+0x2c>
    53d4:	20 15       	cp	r18, r0
    53d6:	d9 f7       	brne	.-10     	; 0x53ce <strtok_r+0x20>
    53d8:	f3 cf       	rjmp	.-26     	; 0x53c0 <strtok_r+0x12>
    53da:	fb 01       	movw	r30, r22
    53dc:	21 91       	ld	r18, Z+
    53de:	20 15       	cp	r18, r0
    53e0:	19 f4       	brne	.+6      	; 0x53e8 <strtok_r+0x3a>
    53e2:	1e 92       	st	-X, r1
    53e4:	11 96       	adiw	r26, 0x01	; 1
    53e6:	06 c0       	rjmp	.+12     	; 0x53f4 <strtok_r+0x46>
    53e8:	22 23       	and	r18, r18
    53ea:	c1 f7       	brne	.-16     	; 0x53dc <strtok_r+0x2e>
    53ec:	0d 90       	ld	r0, X+
    53ee:	00 20       	and	r0, r0
    53f0:	a1 f7       	brne	.-24     	; 0x53da <strtok_r+0x2c>
    53f2:	d0 01       	movw	r26, r0
    53f4:	fa 01       	movw	r30, r20
    53f6:	a1 93       	st	Z+, r26
    53f8:	b0 83       	st	Z, r27
    53fa:	08 95       	ret

000053fc <__itoa_ncheck>:
    53fc:	bb 27       	eor	r27, r27
    53fe:	4a 30       	cpi	r20, 0x0A	; 10
    5400:	31 f4       	brne	.+12     	; 0x540e <__itoa_ncheck+0x12>
    5402:	99 23       	and	r25, r25
    5404:	22 f4       	brpl	.+8      	; 0x540e <__itoa_ncheck+0x12>
    5406:	bd e2       	ldi	r27, 0x2D	; 45
    5408:	90 95       	com	r25
    540a:	81 95       	neg	r24
    540c:	9f 4f       	sbci	r25, 0xFF	; 255
    540e:	0c 94 12 2a 	jmp	0x5424	; 0x5424 <__utoa_common>

00005412 <__mulhi_const_10>:
    5412:	7a e0       	ldi	r23, 0x0A	; 10
    5414:	97 9f       	mul	r25, r23
    5416:	90 2d       	mov	r25, r0
    5418:	87 9f       	mul	r24, r23
    541a:	80 2d       	mov	r24, r0
    541c:	91 0d       	add	r25, r1
    541e:	11 24       	eor	r1, r1
    5420:	08 95       	ret

00005422 <__utoa_ncheck>:
    5422:	bb 27       	eor	r27, r27

00005424 <__utoa_common>:
    5424:	fb 01       	movw	r30, r22
    5426:	55 27       	eor	r21, r21
    5428:	aa 27       	eor	r26, r26
    542a:	88 0f       	add	r24, r24
    542c:	99 1f       	adc	r25, r25
    542e:	aa 1f       	adc	r26, r26
    5430:	a4 17       	cp	r26, r20
    5432:	10 f0       	brcs	.+4      	; 0x5438 <__utoa_common+0x14>
    5434:	a4 1b       	sub	r26, r20
    5436:	83 95       	inc	r24
    5438:	50 51       	subi	r21, 0x10	; 16
    543a:	b9 f7       	brne	.-18     	; 0x542a <__utoa_common+0x6>
    543c:	a0 5d       	subi	r26, 0xD0	; 208
    543e:	aa 33       	cpi	r26, 0x3A	; 58
    5440:	08 f0       	brcs	.+2      	; 0x5444 <__utoa_common+0x20>
    5442:	a9 5d       	subi	r26, 0xD9	; 217
    5444:	a1 93       	st	Z+, r26
    5446:	00 97       	sbiw	r24, 0x00	; 0
    5448:	79 f7       	brne	.-34     	; 0x5428 <__utoa_common+0x4>
    544a:	b1 11       	cpse	r27, r1
    544c:	b1 93       	st	Z+, r27
    544e:	11 92       	st	Z+, r1
    5450:	cb 01       	movw	r24, r22
    5452:	0c 94 f1 2c 	jmp	0x59e2	; 0x59e2 <strrev>

00005456 <printf>:
    5456:	a0 e0       	ldi	r26, 0x00	; 0
    5458:	b0 e0       	ldi	r27, 0x00	; 0
    545a:	e1 e3       	ldi	r30, 0x31	; 49
    545c:	fa e2       	ldi	r31, 0x2A	; 42
    545e:	0c 94 a1 2d 	jmp	0x5b42	; 0x5b42 <__prologue_saves__+0x20>
    5462:	fe 01       	movw	r30, r28
    5464:	35 96       	adiw	r30, 0x05	; 5
    5466:	61 91       	ld	r22, Z+
    5468:	71 91       	ld	r23, Z+
    546a:	af 01       	movw	r20, r30
    546c:	80 91 fb 06 	lds	r24, 0x06FB
    5470:	90 91 fc 06 	lds	r25, 0x06FC
    5474:	0e 94 b7 2a 	call	0x556e	; 0x556e <vfprintf>
    5478:	e2 e0       	ldi	r30, 0x02	; 2
    547a:	0c 94 bd 2d 	jmp	0x5b7a	; 0x5b7a <__epilogue_restores__+0x20>

0000547e <printf_P>:
    547e:	a0 e0       	ldi	r26, 0x00	; 0
    5480:	b0 e0       	ldi	r27, 0x00	; 0
    5482:	e5 e4       	ldi	r30, 0x45	; 69
    5484:	fa e2       	ldi	r31, 0x2A	; 42
    5486:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <__prologue_saves__+0x1c>
    548a:	fe 01       	movw	r30, r28
    548c:	37 96       	adiw	r30, 0x07	; 7
    548e:	61 91       	ld	r22, Z+
    5490:	71 91       	ld	r23, Z+
    5492:	0b ef       	ldi	r16, 0xFB	; 251
    5494:	16 e0       	ldi	r17, 0x06	; 6
    5496:	d8 01       	movw	r26, r16
    5498:	8d 91       	ld	r24, X+
    549a:	9c 91       	ld	r25, X
    549c:	dc 01       	movw	r26, r24
    549e:	13 96       	adiw	r26, 0x03	; 3
    54a0:	2c 91       	ld	r18, X
    54a2:	13 97       	sbiw	r26, 0x03	; 3
    54a4:	28 60       	ori	r18, 0x08	; 8
    54a6:	13 96       	adiw	r26, 0x03	; 3
    54a8:	2c 93       	st	X, r18
    54aa:	af 01       	movw	r20, r30
    54ac:	0e 94 b7 2a 	call	0x556e	; 0x556e <vfprintf>
    54b0:	d8 01       	movw	r26, r16
    54b2:	ed 91       	ld	r30, X+
    54b4:	fc 91       	ld	r31, X
    54b6:	23 81       	ldd	r18, Z+3	; 0x03
    54b8:	27 7f       	andi	r18, 0xF7	; 247
    54ba:	23 83       	std	Z+3, r18	; 0x03
    54bc:	e4 e0       	ldi	r30, 0x04	; 4
    54be:	0c 94 bb 2d 	jmp	0x5b76	; 0x5b76 <__epilogue_restores__+0x1c>

000054c2 <putchar>:
    54c2:	60 91 fb 06 	lds	r22, 0x06FB
    54c6:	70 91 fc 06 	lds	r23, 0x06FC
    54ca:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    54ce:	08 95       	ret

000054d0 <puts>:
    54d0:	0f 93       	push	r16
    54d2:	1f 93       	push	r17
    54d4:	cf 93       	push	r28
    54d6:	df 93       	push	r29
    54d8:	e0 91 fb 06 	lds	r30, 0x06FB
    54dc:	f0 91 fc 06 	lds	r31, 0x06FC
    54e0:	23 81       	ldd	r18, Z+3	; 0x03
    54e2:	21 ff       	sbrs	r18, 1
    54e4:	1b c0       	rjmp	.+54     	; 0x551c <puts+0x4c>
    54e6:	ec 01       	movw	r28, r24
    54e8:	00 e0       	ldi	r16, 0x00	; 0
    54ea:	10 e0       	ldi	r17, 0x00	; 0
    54ec:	89 91       	ld	r24, Y+
    54ee:	60 91 fb 06 	lds	r22, 0x06FB
    54f2:	70 91 fc 06 	lds	r23, 0x06FC
    54f6:	db 01       	movw	r26, r22
    54f8:	18 96       	adiw	r26, 0x08	; 8
    54fa:	ed 91       	ld	r30, X+
    54fc:	fc 91       	ld	r31, X
    54fe:	19 97       	sbiw	r26, 0x09	; 9
    5500:	88 23       	and	r24, r24
    5502:	31 f0       	breq	.+12     	; 0x5510 <puts+0x40>
    5504:	09 95       	icall
    5506:	89 2b       	or	r24, r25
    5508:	89 f3       	breq	.-30     	; 0x54ec <puts+0x1c>
    550a:	0f ef       	ldi	r16, 0xFF	; 255
    550c:	1f ef       	ldi	r17, 0xFF	; 255
    550e:	ee cf       	rjmp	.-36     	; 0x54ec <puts+0x1c>
    5510:	8a e0       	ldi	r24, 0x0A	; 10
    5512:	09 95       	icall
    5514:	89 2b       	or	r24, r25
    5516:	11 f4       	brne	.+4      	; 0x551c <puts+0x4c>
    5518:	c8 01       	movw	r24, r16
    551a:	02 c0       	rjmp	.+4      	; 0x5520 <puts+0x50>
    551c:	8f ef       	ldi	r24, 0xFF	; 255
    551e:	9f ef       	ldi	r25, 0xFF	; 255
    5520:	df 91       	pop	r29
    5522:	cf 91       	pop	r28
    5524:	1f 91       	pop	r17
    5526:	0f 91       	pop	r16
    5528:	08 95       	ret

0000552a <sprintf_P>:
    552a:	ae e0       	ldi	r26, 0x0E	; 14
    552c:	b0 e0       	ldi	r27, 0x00	; 0
    552e:	eb e9       	ldi	r30, 0x9B	; 155
    5530:	fa e2       	ldi	r31, 0x2A	; 42
    5532:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <__prologue_saves__+0x1c>
    5536:	0d 89       	ldd	r16, Y+21	; 0x15
    5538:	1e 89       	ldd	r17, Y+22	; 0x16
    553a:	8e e0       	ldi	r24, 0x0E	; 14
    553c:	8c 83       	std	Y+4, r24	; 0x04
    553e:	1a 83       	std	Y+2, r17	; 0x02
    5540:	09 83       	std	Y+1, r16	; 0x01
    5542:	8f ef       	ldi	r24, 0xFF	; 255
    5544:	9f e7       	ldi	r25, 0x7F	; 127
    5546:	9e 83       	std	Y+6, r25	; 0x06
    5548:	8d 83       	std	Y+5, r24	; 0x05
    554a:	ae 01       	movw	r20, r28
    554c:	47 5e       	subi	r20, 0xE7	; 231
    554e:	5f 4f       	sbci	r21, 0xFF	; 255
    5550:	6f 89       	ldd	r22, Y+23	; 0x17
    5552:	78 8d       	ldd	r23, Y+24	; 0x18
    5554:	ce 01       	movw	r24, r28
    5556:	01 96       	adiw	r24, 0x01	; 1
    5558:	0e 94 b7 2a 	call	0x556e	; 0x556e <vfprintf>
    555c:	ef 81       	ldd	r30, Y+7	; 0x07
    555e:	f8 85       	ldd	r31, Y+8	; 0x08
    5560:	e0 0f       	add	r30, r16
    5562:	f1 1f       	adc	r31, r17
    5564:	10 82       	st	Z, r1
    5566:	2e 96       	adiw	r28, 0x0e	; 14
    5568:	e4 e0       	ldi	r30, 0x04	; 4
    556a:	0c 94 bb 2d 	jmp	0x5b76	; 0x5b76 <__epilogue_restores__+0x1c>

0000556e <vfprintf>:
    556e:	ac e0       	ldi	r26, 0x0C	; 12
    5570:	b0 e0       	ldi	r27, 0x00	; 0
    5572:	ed eb       	ldi	r30, 0xBD	; 189
    5574:	fa e2       	ldi	r31, 0x2A	; 42
    5576:	0c 94 91 2d 	jmp	0x5b22	; 0x5b22 <__prologue_saves__>
    557a:	7c 01       	movw	r14, r24
    557c:	6b 01       	movw	r12, r22
    557e:	8a 01       	movw	r16, r20
    5580:	fc 01       	movw	r30, r24
    5582:	17 82       	std	Z+7, r1	; 0x07
    5584:	16 82       	std	Z+6, r1	; 0x06
    5586:	83 81       	ldd	r24, Z+3	; 0x03
    5588:	81 ff       	sbrs	r24, 1
    558a:	bd c1       	rjmp	.+890    	; 0x5906 <vfprintf+0x398>
    558c:	ce 01       	movw	r24, r28
    558e:	01 96       	adiw	r24, 0x01	; 1
    5590:	4c 01       	movw	r8, r24
    5592:	f7 01       	movw	r30, r14
    5594:	93 81       	ldd	r25, Z+3	; 0x03
    5596:	f6 01       	movw	r30, r12
    5598:	93 fd       	sbrc	r25, 3
    559a:	85 91       	lpm	r24, Z+
    559c:	93 ff       	sbrs	r25, 3
    559e:	81 91       	ld	r24, Z+
    55a0:	6f 01       	movw	r12, r30
    55a2:	88 23       	and	r24, r24
    55a4:	09 f4       	brne	.+2      	; 0x55a8 <vfprintf+0x3a>
    55a6:	ab c1       	rjmp	.+854    	; 0x58fe <vfprintf+0x390>
    55a8:	85 32       	cpi	r24, 0x25	; 37
    55aa:	39 f4       	brne	.+14     	; 0x55ba <vfprintf+0x4c>
    55ac:	93 fd       	sbrc	r25, 3
    55ae:	85 91       	lpm	r24, Z+
    55b0:	93 ff       	sbrs	r25, 3
    55b2:	81 91       	ld	r24, Z+
    55b4:	6f 01       	movw	r12, r30
    55b6:	85 32       	cpi	r24, 0x25	; 37
    55b8:	29 f4       	brne	.+10     	; 0x55c4 <vfprintf+0x56>
    55ba:	b7 01       	movw	r22, r14
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    55c2:	e7 cf       	rjmp	.-50     	; 0x5592 <vfprintf+0x24>
    55c4:	51 2c       	mov	r5, r1
    55c6:	31 2c       	mov	r3, r1
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	20 32       	cpi	r18, 0x20	; 32
    55cc:	a0 f4       	brcc	.+40     	; 0x55f6 <vfprintf+0x88>
    55ce:	8b 32       	cpi	r24, 0x2B	; 43
    55d0:	69 f0       	breq	.+26     	; 0x55ec <vfprintf+0x7e>
    55d2:	30 f4       	brcc	.+12     	; 0x55e0 <vfprintf+0x72>
    55d4:	80 32       	cpi	r24, 0x20	; 32
    55d6:	59 f0       	breq	.+22     	; 0x55ee <vfprintf+0x80>
    55d8:	83 32       	cpi	r24, 0x23	; 35
    55da:	69 f4       	brne	.+26     	; 0x55f6 <vfprintf+0x88>
    55dc:	20 61       	ori	r18, 0x10	; 16
    55de:	2c c0       	rjmp	.+88     	; 0x5638 <vfprintf+0xca>
    55e0:	8d 32       	cpi	r24, 0x2D	; 45
    55e2:	39 f0       	breq	.+14     	; 0x55f2 <vfprintf+0x84>
    55e4:	80 33       	cpi	r24, 0x30	; 48
    55e6:	39 f4       	brne	.+14     	; 0x55f6 <vfprintf+0x88>
    55e8:	21 60       	ori	r18, 0x01	; 1
    55ea:	26 c0       	rjmp	.+76     	; 0x5638 <vfprintf+0xca>
    55ec:	22 60       	ori	r18, 0x02	; 2
    55ee:	24 60       	ori	r18, 0x04	; 4
    55f0:	23 c0       	rjmp	.+70     	; 0x5638 <vfprintf+0xca>
    55f2:	28 60       	ori	r18, 0x08	; 8
    55f4:	21 c0       	rjmp	.+66     	; 0x5638 <vfprintf+0xca>
    55f6:	27 fd       	sbrc	r18, 7
    55f8:	27 c0       	rjmp	.+78     	; 0x5648 <vfprintf+0xda>
    55fa:	30 ed       	ldi	r19, 0xD0	; 208
    55fc:	38 0f       	add	r19, r24
    55fe:	3a 30       	cpi	r19, 0x0A	; 10
    5600:	78 f4       	brcc	.+30     	; 0x5620 <vfprintf+0xb2>
    5602:	26 ff       	sbrs	r18, 6
    5604:	06 c0       	rjmp	.+12     	; 0x5612 <vfprintf+0xa4>
    5606:	fa e0       	ldi	r31, 0x0A	; 10
    5608:	5f 9e       	mul	r5, r31
    560a:	30 0d       	add	r19, r0
    560c:	11 24       	eor	r1, r1
    560e:	53 2e       	mov	r5, r19
    5610:	13 c0       	rjmp	.+38     	; 0x5638 <vfprintf+0xca>
    5612:	8a e0       	ldi	r24, 0x0A	; 10
    5614:	38 9e       	mul	r3, r24
    5616:	30 0d       	add	r19, r0
    5618:	11 24       	eor	r1, r1
    561a:	33 2e       	mov	r3, r19
    561c:	20 62       	ori	r18, 0x20	; 32
    561e:	0c c0       	rjmp	.+24     	; 0x5638 <vfprintf+0xca>
    5620:	8e 32       	cpi	r24, 0x2E	; 46
    5622:	21 f4       	brne	.+8      	; 0x562c <vfprintf+0xbe>
    5624:	26 fd       	sbrc	r18, 6
    5626:	6b c1       	rjmp	.+726    	; 0x58fe <vfprintf+0x390>
    5628:	20 64       	ori	r18, 0x40	; 64
    562a:	06 c0       	rjmp	.+12     	; 0x5638 <vfprintf+0xca>
    562c:	8c 36       	cpi	r24, 0x6C	; 108
    562e:	11 f4       	brne	.+4      	; 0x5634 <vfprintf+0xc6>
    5630:	20 68       	ori	r18, 0x80	; 128
    5632:	02 c0       	rjmp	.+4      	; 0x5638 <vfprintf+0xca>
    5634:	88 36       	cpi	r24, 0x68	; 104
    5636:	41 f4       	brne	.+16     	; 0x5648 <vfprintf+0xda>
    5638:	f6 01       	movw	r30, r12
    563a:	93 fd       	sbrc	r25, 3
    563c:	85 91       	lpm	r24, Z+
    563e:	93 ff       	sbrs	r25, 3
    5640:	81 91       	ld	r24, Z+
    5642:	6f 01       	movw	r12, r30
    5644:	81 11       	cpse	r24, r1
    5646:	c1 cf       	rjmp	.-126    	; 0x55ca <vfprintf+0x5c>
    5648:	98 2f       	mov	r25, r24
    564a:	9f 7d       	andi	r25, 0xDF	; 223
    564c:	95 54       	subi	r25, 0x45	; 69
    564e:	93 30       	cpi	r25, 0x03	; 3
    5650:	28 f4       	brcc	.+10     	; 0x565c <vfprintf+0xee>
    5652:	0c 5f       	subi	r16, 0xFC	; 252
    5654:	1f 4f       	sbci	r17, 0xFF	; 255
    5656:	ff e3       	ldi	r31, 0x3F	; 63
    5658:	f9 83       	std	Y+1, r31	; 0x01
    565a:	0d c0       	rjmp	.+26     	; 0x5676 <vfprintf+0x108>
    565c:	83 36       	cpi	r24, 0x63	; 99
    565e:	31 f0       	breq	.+12     	; 0x566c <vfprintf+0xfe>
    5660:	83 37       	cpi	r24, 0x73	; 115
    5662:	71 f0       	breq	.+28     	; 0x5680 <vfprintf+0x112>
    5664:	83 35       	cpi	r24, 0x53	; 83
    5666:	09 f0       	breq	.+2      	; 0x566a <vfprintf+0xfc>
    5668:	5b c0       	rjmp	.+182    	; 0x5720 <vfprintf+0x1b2>
    566a:	22 c0       	rjmp	.+68     	; 0x56b0 <vfprintf+0x142>
    566c:	f8 01       	movw	r30, r16
    566e:	80 81       	ld	r24, Z
    5670:	89 83       	std	Y+1, r24	; 0x01
    5672:	0e 5f       	subi	r16, 0xFE	; 254
    5674:	1f 4f       	sbci	r17, 0xFF	; 255
    5676:	44 24       	eor	r4, r4
    5678:	43 94       	inc	r4
    567a:	51 2c       	mov	r5, r1
    567c:	54 01       	movw	r10, r8
    567e:	15 c0       	rjmp	.+42     	; 0x56aa <vfprintf+0x13c>
    5680:	38 01       	movw	r6, r16
    5682:	f2 e0       	ldi	r31, 0x02	; 2
    5684:	6f 0e       	add	r6, r31
    5686:	71 1c       	adc	r7, r1
    5688:	f8 01       	movw	r30, r16
    568a:	a0 80       	ld	r10, Z
    568c:	b1 80       	ldd	r11, Z+1	; 0x01
    568e:	26 ff       	sbrs	r18, 6
    5690:	03 c0       	rjmp	.+6      	; 0x5698 <vfprintf+0x12a>
    5692:	65 2d       	mov	r22, r5
    5694:	70 e0       	ldi	r23, 0x00	; 0
    5696:	02 c0       	rjmp	.+4      	; 0x569c <vfprintf+0x12e>
    5698:	6f ef       	ldi	r22, 0xFF	; 255
    569a:	7f ef       	ldi	r23, 0xFF	; 255
    569c:	c5 01       	movw	r24, r10
    569e:	2c 87       	std	Y+12, r18	; 0x0c
    56a0:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <strnlen>
    56a4:	2c 01       	movw	r4, r24
    56a6:	83 01       	movw	r16, r6
    56a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    56aa:	2f 77       	andi	r18, 0x7F	; 127
    56ac:	22 2e       	mov	r2, r18
    56ae:	17 c0       	rjmp	.+46     	; 0x56de <vfprintf+0x170>
    56b0:	38 01       	movw	r6, r16
    56b2:	f2 e0       	ldi	r31, 0x02	; 2
    56b4:	6f 0e       	add	r6, r31
    56b6:	71 1c       	adc	r7, r1
    56b8:	f8 01       	movw	r30, r16
    56ba:	a0 80       	ld	r10, Z
    56bc:	b1 80       	ldd	r11, Z+1	; 0x01
    56be:	26 ff       	sbrs	r18, 6
    56c0:	03 c0       	rjmp	.+6      	; 0x56c8 <vfprintf+0x15a>
    56c2:	65 2d       	mov	r22, r5
    56c4:	70 e0       	ldi	r23, 0x00	; 0
    56c6:	02 c0       	rjmp	.+4      	; 0x56cc <vfprintf+0x15e>
    56c8:	6f ef       	ldi	r22, 0xFF	; 255
    56ca:	7f ef       	ldi	r23, 0xFF	; 255
    56cc:	c5 01       	movw	r24, r10
    56ce:	2c 87       	std	Y+12, r18	; 0x0c
    56d0:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <strnlen_P>
    56d4:	2c 01       	movw	r4, r24
    56d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    56d8:	20 68       	ori	r18, 0x80	; 128
    56da:	22 2e       	mov	r2, r18
    56dc:	83 01       	movw	r16, r6
    56de:	23 fc       	sbrc	r2, 3
    56e0:	1b c0       	rjmp	.+54     	; 0x5718 <vfprintf+0x1aa>
    56e2:	83 2d       	mov	r24, r3
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	48 16       	cp	r4, r24
    56e8:	59 06       	cpc	r5, r25
    56ea:	b0 f4       	brcc	.+44     	; 0x5718 <vfprintf+0x1aa>
    56ec:	b7 01       	movw	r22, r14
    56ee:	80 e2       	ldi	r24, 0x20	; 32
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    56f6:	3a 94       	dec	r3
    56f8:	f4 cf       	rjmp	.-24     	; 0x56e2 <vfprintf+0x174>
    56fa:	f5 01       	movw	r30, r10
    56fc:	27 fc       	sbrc	r2, 7
    56fe:	85 91       	lpm	r24, Z+
    5700:	27 fe       	sbrs	r2, 7
    5702:	81 91       	ld	r24, Z+
    5704:	5f 01       	movw	r10, r30
    5706:	b7 01       	movw	r22, r14
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    570e:	31 10       	cpse	r3, r1
    5710:	3a 94       	dec	r3
    5712:	f1 e0       	ldi	r31, 0x01	; 1
    5714:	4f 1a       	sub	r4, r31
    5716:	51 08       	sbc	r5, r1
    5718:	41 14       	cp	r4, r1
    571a:	51 04       	cpc	r5, r1
    571c:	71 f7       	brne	.-36     	; 0x56fa <vfprintf+0x18c>
    571e:	e5 c0       	rjmp	.+458    	; 0x58ea <vfprintf+0x37c>
    5720:	84 36       	cpi	r24, 0x64	; 100
    5722:	11 f0       	breq	.+4      	; 0x5728 <vfprintf+0x1ba>
    5724:	89 36       	cpi	r24, 0x69	; 105
    5726:	39 f5       	brne	.+78     	; 0x5776 <vfprintf+0x208>
    5728:	f8 01       	movw	r30, r16
    572a:	27 ff       	sbrs	r18, 7
    572c:	07 c0       	rjmp	.+14     	; 0x573c <vfprintf+0x1ce>
    572e:	60 81       	ld	r22, Z
    5730:	71 81       	ldd	r23, Z+1	; 0x01
    5732:	82 81       	ldd	r24, Z+2	; 0x02
    5734:	93 81       	ldd	r25, Z+3	; 0x03
    5736:	0c 5f       	subi	r16, 0xFC	; 252
    5738:	1f 4f       	sbci	r17, 0xFF	; 255
    573a:	08 c0       	rjmp	.+16     	; 0x574c <vfprintf+0x1de>
    573c:	60 81       	ld	r22, Z
    573e:	71 81       	ldd	r23, Z+1	; 0x01
    5740:	88 27       	eor	r24, r24
    5742:	77 fd       	sbrc	r23, 7
    5744:	80 95       	com	r24
    5746:	98 2f       	mov	r25, r24
    5748:	0e 5f       	subi	r16, 0xFE	; 254
    574a:	1f 4f       	sbci	r17, 0xFF	; 255
    574c:	2f 76       	andi	r18, 0x6F	; 111
    574e:	b2 2e       	mov	r11, r18
    5750:	97 ff       	sbrs	r25, 7
    5752:	09 c0       	rjmp	.+18     	; 0x5766 <vfprintf+0x1f8>
    5754:	90 95       	com	r25
    5756:	80 95       	com	r24
    5758:	70 95       	com	r23
    575a:	61 95       	neg	r22
    575c:	7f 4f       	sbci	r23, 0xFF	; 255
    575e:	8f 4f       	sbci	r24, 0xFF	; 255
    5760:	9f 4f       	sbci	r25, 0xFF	; 255
    5762:	20 68       	ori	r18, 0x80	; 128
    5764:	b2 2e       	mov	r11, r18
    5766:	2a e0       	ldi	r18, 0x0A	; 10
    5768:	30 e0       	ldi	r19, 0x00	; 0
    576a:	a4 01       	movw	r20, r8
    576c:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__ultoa_invert>
    5770:	a8 2e       	mov	r10, r24
    5772:	a8 18       	sub	r10, r8
    5774:	44 c0       	rjmp	.+136    	; 0x57fe <vfprintf+0x290>
    5776:	85 37       	cpi	r24, 0x75	; 117
    5778:	29 f4       	brne	.+10     	; 0x5784 <vfprintf+0x216>
    577a:	2f 7e       	andi	r18, 0xEF	; 239
    577c:	b2 2e       	mov	r11, r18
    577e:	2a e0       	ldi	r18, 0x0A	; 10
    5780:	30 e0       	ldi	r19, 0x00	; 0
    5782:	25 c0       	rjmp	.+74     	; 0x57ce <vfprintf+0x260>
    5784:	f2 2f       	mov	r31, r18
    5786:	f9 7f       	andi	r31, 0xF9	; 249
    5788:	bf 2e       	mov	r11, r31
    578a:	8f 36       	cpi	r24, 0x6F	; 111
    578c:	c1 f0       	breq	.+48     	; 0x57be <vfprintf+0x250>
    578e:	18 f4       	brcc	.+6      	; 0x5796 <vfprintf+0x228>
    5790:	88 35       	cpi	r24, 0x58	; 88
    5792:	79 f0       	breq	.+30     	; 0x57b2 <vfprintf+0x244>
    5794:	b4 c0       	rjmp	.+360    	; 0x58fe <vfprintf+0x390>
    5796:	80 37       	cpi	r24, 0x70	; 112
    5798:	19 f0       	breq	.+6      	; 0x57a0 <vfprintf+0x232>
    579a:	88 37       	cpi	r24, 0x78	; 120
    579c:	21 f0       	breq	.+8      	; 0x57a6 <vfprintf+0x238>
    579e:	af c0       	rjmp	.+350    	; 0x58fe <vfprintf+0x390>
    57a0:	2f 2f       	mov	r18, r31
    57a2:	20 61       	ori	r18, 0x10	; 16
    57a4:	b2 2e       	mov	r11, r18
    57a6:	b4 fe       	sbrs	r11, 4
    57a8:	0d c0       	rjmp	.+26     	; 0x57c4 <vfprintf+0x256>
    57aa:	8b 2d       	mov	r24, r11
    57ac:	84 60       	ori	r24, 0x04	; 4
    57ae:	b8 2e       	mov	r11, r24
    57b0:	09 c0       	rjmp	.+18     	; 0x57c4 <vfprintf+0x256>
    57b2:	24 ff       	sbrs	r18, 4
    57b4:	0a c0       	rjmp	.+20     	; 0x57ca <vfprintf+0x25c>
    57b6:	9f 2f       	mov	r25, r31
    57b8:	96 60       	ori	r25, 0x06	; 6
    57ba:	b9 2e       	mov	r11, r25
    57bc:	06 c0       	rjmp	.+12     	; 0x57ca <vfprintf+0x25c>
    57be:	28 e0       	ldi	r18, 0x08	; 8
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	05 c0       	rjmp	.+10     	; 0x57ce <vfprintf+0x260>
    57c4:	20 e1       	ldi	r18, 0x10	; 16
    57c6:	30 e0       	ldi	r19, 0x00	; 0
    57c8:	02 c0       	rjmp	.+4      	; 0x57ce <vfprintf+0x260>
    57ca:	20 e1       	ldi	r18, 0x10	; 16
    57cc:	32 e0       	ldi	r19, 0x02	; 2
    57ce:	f8 01       	movw	r30, r16
    57d0:	b7 fe       	sbrs	r11, 7
    57d2:	07 c0       	rjmp	.+14     	; 0x57e2 <vfprintf+0x274>
    57d4:	60 81       	ld	r22, Z
    57d6:	71 81       	ldd	r23, Z+1	; 0x01
    57d8:	82 81       	ldd	r24, Z+2	; 0x02
    57da:	93 81       	ldd	r25, Z+3	; 0x03
    57dc:	0c 5f       	subi	r16, 0xFC	; 252
    57de:	1f 4f       	sbci	r17, 0xFF	; 255
    57e0:	06 c0       	rjmp	.+12     	; 0x57ee <vfprintf+0x280>
    57e2:	60 81       	ld	r22, Z
    57e4:	71 81       	ldd	r23, Z+1	; 0x01
    57e6:	80 e0       	ldi	r24, 0x00	; 0
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	0e 5f       	subi	r16, 0xFE	; 254
    57ec:	1f 4f       	sbci	r17, 0xFF	; 255
    57ee:	a4 01       	movw	r20, r8
    57f0:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__ultoa_invert>
    57f4:	a8 2e       	mov	r10, r24
    57f6:	a8 18       	sub	r10, r8
    57f8:	fb 2d       	mov	r31, r11
    57fa:	ff 77       	andi	r31, 0x7F	; 127
    57fc:	bf 2e       	mov	r11, r31
    57fe:	b6 fe       	sbrs	r11, 6
    5800:	0b c0       	rjmp	.+22     	; 0x5818 <vfprintf+0x2aa>
    5802:	2b 2d       	mov	r18, r11
    5804:	2e 7f       	andi	r18, 0xFE	; 254
    5806:	a5 14       	cp	r10, r5
    5808:	50 f4       	brcc	.+20     	; 0x581e <vfprintf+0x2b0>
    580a:	b4 fe       	sbrs	r11, 4
    580c:	0a c0       	rjmp	.+20     	; 0x5822 <vfprintf+0x2b4>
    580e:	b2 fc       	sbrc	r11, 2
    5810:	08 c0       	rjmp	.+16     	; 0x5822 <vfprintf+0x2b4>
    5812:	2b 2d       	mov	r18, r11
    5814:	2e 7e       	andi	r18, 0xEE	; 238
    5816:	05 c0       	rjmp	.+10     	; 0x5822 <vfprintf+0x2b4>
    5818:	7a 2c       	mov	r7, r10
    581a:	2b 2d       	mov	r18, r11
    581c:	03 c0       	rjmp	.+6      	; 0x5824 <vfprintf+0x2b6>
    581e:	7a 2c       	mov	r7, r10
    5820:	01 c0       	rjmp	.+2      	; 0x5824 <vfprintf+0x2b6>
    5822:	75 2c       	mov	r7, r5
    5824:	24 ff       	sbrs	r18, 4
    5826:	0d c0       	rjmp	.+26     	; 0x5842 <vfprintf+0x2d4>
    5828:	fe 01       	movw	r30, r28
    582a:	ea 0d       	add	r30, r10
    582c:	f1 1d       	adc	r31, r1
    582e:	80 81       	ld	r24, Z
    5830:	80 33       	cpi	r24, 0x30	; 48
    5832:	11 f4       	brne	.+4      	; 0x5838 <vfprintf+0x2ca>
    5834:	29 7e       	andi	r18, 0xE9	; 233
    5836:	09 c0       	rjmp	.+18     	; 0x584a <vfprintf+0x2dc>
    5838:	22 ff       	sbrs	r18, 2
    583a:	06 c0       	rjmp	.+12     	; 0x5848 <vfprintf+0x2da>
    583c:	73 94       	inc	r7
    583e:	73 94       	inc	r7
    5840:	04 c0       	rjmp	.+8      	; 0x584a <vfprintf+0x2dc>
    5842:	82 2f       	mov	r24, r18
    5844:	86 78       	andi	r24, 0x86	; 134
    5846:	09 f0       	breq	.+2      	; 0x584a <vfprintf+0x2dc>
    5848:	73 94       	inc	r7
    584a:	23 fd       	sbrc	r18, 3
    584c:	13 c0       	rjmp	.+38     	; 0x5874 <vfprintf+0x306>
    584e:	20 ff       	sbrs	r18, 0
    5850:	06 c0       	rjmp	.+12     	; 0x585e <vfprintf+0x2f0>
    5852:	5a 2c       	mov	r5, r10
    5854:	73 14       	cp	r7, r3
    5856:	18 f4       	brcc	.+6      	; 0x585e <vfprintf+0x2f0>
    5858:	53 0c       	add	r5, r3
    585a:	57 18       	sub	r5, r7
    585c:	73 2c       	mov	r7, r3
    585e:	73 14       	cp	r7, r3
    5860:	68 f4       	brcc	.+26     	; 0x587c <vfprintf+0x30e>
    5862:	b7 01       	movw	r22, r14
    5864:	80 e2       	ldi	r24, 0x20	; 32
    5866:	90 e0       	ldi	r25, 0x00	; 0
    5868:	2c 87       	std	Y+12, r18	; 0x0c
    586a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    586e:	73 94       	inc	r7
    5870:	2c 85       	ldd	r18, Y+12	; 0x0c
    5872:	f5 cf       	rjmp	.-22     	; 0x585e <vfprintf+0x2f0>
    5874:	73 14       	cp	r7, r3
    5876:	10 f4       	brcc	.+4      	; 0x587c <vfprintf+0x30e>
    5878:	37 18       	sub	r3, r7
    587a:	01 c0       	rjmp	.+2      	; 0x587e <vfprintf+0x310>
    587c:	31 2c       	mov	r3, r1
    587e:	24 ff       	sbrs	r18, 4
    5880:	12 c0       	rjmp	.+36     	; 0x58a6 <vfprintf+0x338>
    5882:	b7 01       	movw	r22, r14
    5884:	80 e3       	ldi	r24, 0x30	; 48
    5886:	90 e0       	ldi	r25, 0x00	; 0
    5888:	2c 87       	std	Y+12, r18	; 0x0c
    588a:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    588e:	2c 85       	ldd	r18, Y+12	; 0x0c
    5890:	22 ff       	sbrs	r18, 2
    5892:	17 c0       	rjmp	.+46     	; 0x58c2 <vfprintf+0x354>
    5894:	21 ff       	sbrs	r18, 1
    5896:	03 c0       	rjmp	.+6      	; 0x589e <vfprintf+0x330>
    5898:	88 e5       	ldi	r24, 0x58	; 88
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <vfprintf+0x334>
    589e:	88 e7       	ldi	r24, 0x78	; 120
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	b7 01       	movw	r22, r14
    58a4:	0c c0       	rjmp	.+24     	; 0x58be <vfprintf+0x350>
    58a6:	82 2f       	mov	r24, r18
    58a8:	86 78       	andi	r24, 0x86	; 134
    58aa:	59 f0       	breq	.+22     	; 0x58c2 <vfprintf+0x354>
    58ac:	21 fd       	sbrc	r18, 1
    58ae:	02 c0       	rjmp	.+4      	; 0x58b4 <vfprintf+0x346>
    58b0:	80 e2       	ldi	r24, 0x20	; 32
    58b2:	01 c0       	rjmp	.+2      	; 0x58b6 <vfprintf+0x348>
    58b4:	8b e2       	ldi	r24, 0x2B	; 43
    58b6:	27 fd       	sbrc	r18, 7
    58b8:	8d e2       	ldi	r24, 0x2D	; 45
    58ba:	b7 01       	movw	r22, r14
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    58c2:	a5 14       	cp	r10, r5
    58c4:	38 f4       	brcc	.+14     	; 0x58d4 <vfprintf+0x366>
    58c6:	b7 01       	movw	r22, r14
    58c8:	80 e3       	ldi	r24, 0x30	; 48
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    58d0:	5a 94       	dec	r5
    58d2:	f7 cf       	rjmp	.-18     	; 0x58c2 <vfprintf+0x354>
    58d4:	aa 94       	dec	r10
    58d6:	f4 01       	movw	r30, r8
    58d8:	ea 0d       	add	r30, r10
    58da:	f1 1d       	adc	r31, r1
    58dc:	80 81       	ld	r24, Z
    58de:	b7 01       	movw	r22, r14
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    58e6:	a1 10       	cpse	r10, r1
    58e8:	f5 cf       	rjmp	.-22     	; 0x58d4 <vfprintf+0x366>
    58ea:	33 20       	and	r3, r3
    58ec:	09 f4       	brne	.+2      	; 0x58f0 <vfprintf+0x382>
    58ee:	51 ce       	rjmp	.-862    	; 0x5592 <vfprintf+0x24>
    58f0:	b7 01       	movw	r22, r14
    58f2:	80 e2       	ldi	r24, 0x20	; 32
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <fputc>
    58fa:	3a 94       	dec	r3
    58fc:	f6 cf       	rjmp	.-20     	; 0x58ea <vfprintf+0x37c>
    58fe:	f7 01       	movw	r30, r14
    5900:	86 81       	ldd	r24, Z+6	; 0x06
    5902:	97 81       	ldd	r25, Z+7	; 0x07
    5904:	02 c0       	rjmp	.+4      	; 0x590a <vfprintf+0x39c>
    5906:	8f ef       	ldi	r24, 0xFF	; 255
    5908:	9f ef       	ldi	r25, 0xFF	; 255
    590a:	2c 96       	adiw	r28, 0x0c	; 12
    590c:	e2 e1       	ldi	r30, 0x12	; 18
    590e:	0c 94 ad 2d 	jmp	0x5b5a	; 0x5b5a <__epilogue_restores__>

00005912 <__eerd_block_m328p>:
    5912:	dc 01       	movw	r26, r24
    5914:	cb 01       	movw	r24, r22

00005916 <__eerd_blraw_m328p>:
    5916:	fc 01       	movw	r30, r24
    5918:	f9 99       	sbic	0x1f, 1	; 31
    591a:	fe cf       	rjmp	.-4      	; 0x5918 <__eerd_blraw_m328p+0x2>
    591c:	06 c0       	rjmp	.+12     	; 0x592a <__eerd_blraw_m328p+0x14>
    591e:	f2 bd       	out	0x22, r31	; 34
    5920:	e1 bd       	out	0x21, r30	; 33
    5922:	f8 9a       	sbi	0x1f, 0	; 31
    5924:	31 96       	adiw	r30, 0x01	; 1
    5926:	00 b4       	in	r0, 0x20	; 32
    5928:	0d 92       	st	X+, r0
    592a:	41 50       	subi	r20, 0x01	; 1
    592c:	50 40       	sbci	r21, 0x00	; 0
    592e:	b8 f7       	brcc	.-18     	; 0x591e <__eerd_blraw_m328p+0x8>
    5930:	08 95       	ret

00005932 <__eerd_byte_m328p>:
    5932:	f9 99       	sbic	0x1f, 1	; 31
    5934:	fe cf       	rjmp	.-4      	; 0x5932 <__eerd_byte_m328p>
    5936:	92 bd       	out	0x22, r25	; 34
    5938:	81 bd       	out	0x21, r24	; 33
    593a:	f8 9a       	sbi	0x1f, 0	; 31
    593c:	99 27       	eor	r25, r25
    593e:	80 b5       	in	r24, 0x20	; 32
    5940:	08 95       	ret

00005942 <__eeupd_block_m328p>:
    5942:	dc 01       	movw	r26, r24
    5944:	a4 0f       	add	r26, r20
    5946:	b5 1f       	adc	r27, r21
    5948:	41 50       	subi	r20, 0x01	; 1
    594a:	50 40       	sbci	r21, 0x00	; 0
    594c:	48 f0       	brcs	.+18     	; 0x5960 <__eeupd_block_m328p+0x1e>
    594e:	cb 01       	movw	r24, r22
    5950:	84 0f       	add	r24, r20
    5952:	95 1f       	adc	r25, r21
    5954:	2e 91       	ld	r18, -X
    5956:	0e 94 b2 2c 	call	0x5964	; 0x5964 <__eeupd_r18_m328p>
    595a:	41 50       	subi	r20, 0x01	; 1
    595c:	50 40       	sbci	r21, 0x00	; 0
    595e:	d0 f7       	brcc	.-12     	; 0x5954 <__eeupd_block_m328p+0x12>
    5960:	08 95       	ret

00005962 <__eeupd_byte_m328p>:
    5962:	26 2f       	mov	r18, r22

00005964 <__eeupd_r18_m328p>:
    5964:	f9 99       	sbic	0x1f, 1	; 31
    5966:	fe cf       	rjmp	.-4      	; 0x5964 <__eeupd_r18_m328p>
    5968:	92 bd       	out	0x22, r25	; 34
    596a:	81 bd       	out	0x21, r24	; 33
    596c:	f8 9a       	sbi	0x1f, 0	; 31
    596e:	01 97       	sbiw	r24, 0x01	; 1
    5970:	00 b4       	in	r0, 0x20	; 32
    5972:	02 16       	cp	r0, r18
    5974:	39 f0       	breq	.+14     	; 0x5984 <__eeupd_r18_m328p+0x20>
    5976:	1f ba       	out	0x1f, r1	; 31
    5978:	20 bd       	out	0x20, r18	; 32
    597a:	0f b6       	in	r0, 0x3f	; 63
    597c:	f8 94       	cli
    597e:	fa 9a       	sbi	0x1f, 2	; 31
    5980:	f9 9a       	sbi	0x1f, 1	; 31
    5982:	0f be       	out	0x3f, r0	; 63
    5984:	08 95       	ret

00005986 <__eewr_block_m328p>:
    5986:	dc 01       	movw	r26, r24
    5988:	cb 01       	movw	r24, r22
    598a:	03 c0       	rjmp	.+6      	; 0x5992 <__eewr_block_m328p+0xc>
    598c:	2d 91       	ld	r18, X+
    598e:	0e 94 ce 2c 	call	0x599c	; 0x599c <__eewr_r18_m328p>
    5992:	41 50       	subi	r20, 0x01	; 1
    5994:	50 40       	sbci	r21, 0x00	; 0
    5996:	d0 f7       	brcc	.-12     	; 0x598c <__eewr_block_m328p+0x6>
    5998:	08 95       	ret

0000599a <__eewr_byte_m328p>:
    599a:	26 2f       	mov	r18, r22

0000599c <__eewr_r18_m328p>:
    599c:	f9 99       	sbic	0x1f, 1	; 31
    599e:	fe cf       	rjmp	.-4      	; 0x599c <__eewr_r18_m328p>
    59a0:	1f ba       	out	0x1f, r1	; 31
    59a2:	92 bd       	out	0x22, r25	; 34
    59a4:	81 bd       	out	0x21, r24	; 33
    59a6:	20 bd       	out	0x20, r18	; 32
    59a8:	0f b6       	in	r0, 0x3f	; 63
    59aa:	f8 94       	cli
    59ac:	fa 9a       	sbi	0x1f, 2	; 31
    59ae:	f9 9a       	sbi	0x1f, 1	; 31
    59b0:	0f be       	out	0x3f, r0	; 63
    59b2:	01 96       	adiw	r24, 0x01	; 1
    59b4:	08 95       	ret

000059b6 <strnlen_P>:
    59b6:	fc 01       	movw	r30, r24
    59b8:	05 90       	lpm	r0, Z+
    59ba:	61 50       	subi	r22, 0x01	; 1
    59bc:	70 40       	sbci	r23, 0x00	; 0
    59be:	01 10       	cpse	r0, r1
    59c0:	d8 f7       	brcc	.-10     	; 0x59b8 <strnlen_P+0x2>
    59c2:	80 95       	com	r24
    59c4:	90 95       	com	r25
    59c6:	8e 0f       	add	r24, r30
    59c8:	9f 1f       	adc	r25, r31
    59ca:	08 95       	ret

000059cc <strnlen>:
    59cc:	fc 01       	movw	r30, r24
    59ce:	61 50       	subi	r22, 0x01	; 1
    59d0:	70 40       	sbci	r23, 0x00	; 0
    59d2:	01 90       	ld	r0, Z+
    59d4:	01 10       	cpse	r0, r1
    59d6:	d8 f7       	brcc	.-10     	; 0x59ce <strnlen+0x2>
    59d8:	80 95       	com	r24
    59da:	90 95       	com	r25
    59dc:	8e 0f       	add	r24, r30
    59de:	9f 1f       	adc	r25, r31
    59e0:	08 95       	ret

000059e2 <strrev>:
    59e2:	dc 01       	movw	r26, r24
    59e4:	fc 01       	movw	r30, r24
    59e6:	67 2f       	mov	r22, r23
    59e8:	71 91       	ld	r23, Z+
    59ea:	77 23       	and	r23, r23
    59ec:	e1 f7       	brne	.-8      	; 0x59e6 <strrev+0x4>
    59ee:	32 97       	sbiw	r30, 0x02	; 2
    59f0:	04 c0       	rjmp	.+8      	; 0x59fa <strrev+0x18>
    59f2:	7c 91       	ld	r23, X
    59f4:	6d 93       	st	X+, r22
    59f6:	70 83       	st	Z, r23
    59f8:	62 91       	ld	r22, -Z
    59fa:	ae 17       	cp	r26, r30
    59fc:	bf 07       	cpc	r27, r31
    59fe:	c8 f3       	brcs	.-14     	; 0x59f2 <strrev+0x10>
    5a00:	08 95       	ret

00005a02 <fputc>:
    5a02:	0f 93       	push	r16
    5a04:	1f 93       	push	r17
    5a06:	cf 93       	push	r28
    5a08:	df 93       	push	r29
    5a0a:	18 2f       	mov	r17, r24
    5a0c:	09 2f       	mov	r16, r25
    5a0e:	eb 01       	movw	r28, r22
    5a10:	8b 81       	ldd	r24, Y+3	; 0x03
    5a12:	81 fd       	sbrc	r24, 1
    5a14:	03 c0       	rjmp	.+6      	; 0x5a1c <fputc+0x1a>
    5a16:	8f ef       	ldi	r24, 0xFF	; 255
    5a18:	9f ef       	ldi	r25, 0xFF	; 255
    5a1a:	20 c0       	rjmp	.+64     	; 0x5a5c <fputc+0x5a>
    5a1c:	82 ff       	sbrs	r24, 2
    5a1e:	10 c0       	rjmp	.+32     	; 0x5a40 <fputc+0x3e>
    5a20:	4e 81       	ldd	r20, Y+6	; 0x06
    5a22:	5f 81       	ldd	r21, Y+7	; 0x07
    5a24:	2c 81       	ldd	r18, Y+4	; 0x04
    5a26:	3d 81       	ldd	r19, Y+5	; 0x05
    5a28:	42 17       	cp	r20, r18
    5a2a:	53 07       	cpc	r21, r19
    5a2c:	7c f4       	brge	.+30     	; 0x5a4c <fputc+0x4a>
    5a2e:	e8 81       	ld	r30, Y
    5a30:	f9 81       	ldd	r31, Y+1	; 0x01
    5a32:	9f 01       	movw	r18, r30
    5a34:	2f 5f       	subi	r18, 0xFF	; 255
    5a36:	3f 4f       	sbci	r19, 0xFF	; 255
    5a38:	39 83       	std	Y+1, r19	; 0x01
    5a3a:	28 83       	st	Y, r18
    5a3c:	10 83       	st	Z, r17
    5a3e:	06 c0       	rjmp	.+12     	; 0x5a4c <fputc+0x4a>
    5a40:	e8 85       	ldd	r30, Y+8	; 0x08
    5a42:	f9 85       	ldd	r31, Y+9	; 0x09
    5a44:	81 2f       	mov	r24, r17
    5a46:	09 95       	icall
    5a48:	89 2b       	or	r24, r25
    5a4a:	29 f7       	brne	.-54     	; 0x5a16 <fputc+0x14>
    5a4c:	2e 81       	ldd	r18, Y+6	; 0x06
    5a4e:	3f 81       	ldd	r19, Y+7	; 0x07
    5a50:	2f 5f       	subi	r18, 0xFF	; 255
    5a52:	3f 4f       	sbci	r19, 0xFF	; 255
    5a54:	3f 83       	std	Y+7, r19	; 0x07
    5a56:	2e 83       	std	Y+6, r18	; 0x06
    5a58:	81 2f       	mov	r24, r17
    5a5a:	90 2f       	mov	r25, r16
    5a5c:	df 91       	pop	r29
    5a5e:	cf 91       	pop	r28
    5a60:	1f 91       	pop	r17
    5a62:	0f 91       	pop	r16
    5a64:	08 95       	ret

00005a66 <__ultoa_invert>:
    5a66:	fa 01       	movw	r30, r20
    5a68:	aa 27       	eor	r26, r26
    5a6a:	28 30       	cpi	r18, 0x08	; 8
    5a6c:	51 f1       	breq	.+84     	; 0x5ac2 <__ultoa_invert+0x5c>
    5a6e:	20 31       	cpi	r18, 0x10	; 16
    5a70:	81 f1       	breq	.+96     	; 0x5ad2 <__ultoa_invert+0x6c>
    5a72:	e8 94       	clt
    5a74:	6f 93       	push	r22
    5a76:	6e 7f       	andi	r22, 0xFE	; 254
    5a78:	6e 5f       	subi	r22, 0xFE	; 254
    5a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a80:	af 4f       	sbci	r26, 0xFF	; 255
    5a82:	b1 e0       	ldi	r27, 0x01	; 1
    5a84:	3e d0       	rcall	.+124    	; 0x5b02 <__ultoa_invert+0x9c>
    5a86:	b4 e0       	ldi	r27, 0x04	; 4
    5a88:	3c d0       	rcall	.+120    	; 0x5b02 <__ultoa_invert+0x9c>
    5a8a:	67 0f       	add	r22, r23
    5a8c:	78 1f       	adc	r23, r24
    5a8e:	89 1f       	adc	r24, r25
    5a90:	9a 1f       	adc	r25, r26
    5a92:	a1 1d       	adc	r26, r1
    5a94:	68 0f       	add	r22, r24
    5a96:	79 1f       	adc	r23, r25
    5a98:	8a 1f       	adc	r24, r26
    5a9a:	91 1d       	adc	r25, r1
    5a9c:	a1 1d       	adc	r26, r1
    5a9e:	6a 0f       	add	r22, r26
    5aa0:	71 1d       	adc	r23, r1
    5aa2:	81 1d       	adc	r24, r1
    5aa4:	91 1d       	adc	r25, r1
    5aa6:	a1 1d       	adc	r26, r1
    5aa8:	20 d0       	rcall	.+64     	; 0x5aea <__ultoa_invert+0x84>
    5aaa:	09 f4       	brne	.+2      	; 0x5aae <__ultoa_invert+0x48>
    5aac:	68 94       	set
    5aae:	3f 91       	pop	r19
    5ab0:	2a e0       	ldi	r18, 0x0A	; 10
    5ab2:	26 9f       	mul	r18, r22
    5ab4:	11 24       	eor	r1, r1
    5ab6:	30 19       	sub	r19, r0
    5ab8:	30 5d       	subi	r19, 0xD0	; 208
    5aba:	31 93       	st	Z+, r19
    5abc:	de f6       	brtc	.-74     	; 0x5a74 <__ultoa_invert+0xe>
    5abe:	cf 01       	movw	r24, r30
    5ac0:	08 95       	ret
    5ac2:	46 2f       	mov	r20, r22
    5ac4:	47 70       	andi	r20, 0x07	; 7
    5ac6:	40 5d       	subi	r20, 0xD0	; 208
    5ac8:	41 93       	st	Z+, r20
    5aca:	b3 e0       	ldi	r27, 0x03	; 3
    5acc:	0f d0       	rcall	.+30     	; 0x5aec <__ultoa_invert+0x86>
    5ace:	c9 f7       	brne	.-14     	; 0x5ac2 <__ultoa_invert+0x5c>
    5ad0:	f6 cf       	rjmp	.-20     	; 0x5abe <__ultoa_invert+0x58>
    5ad2:	46 2f       	mov	r20, r22
    5ad4:	4f 70       	andi	r20, 0x0F	; 15
    5ad6:	40 5d       	subi	r20, 0xD0	; 208
    5ad8:	4a 33       	cpi	r20, 0x3A	; 58
    5ada:	18 f0       	brcs	.+6      	; 0x5ae2 <__ultoa_invert+0x7c>
    5adc:	49 5d       	subi	r20, 0xD9	; 217
    5ade:	31 fd       	sbrc	r19, 1
    5ae0:	40 52       	subi	r20, 0x20	; 32
    5ae2:	41 93       	st	Z+, r20
    5ae4:	02 d0       	rcall	.+4      	; 0x5aea <__ultoa_invert+0x84>
    5ae6:	a9 f7       	brne	.-22     	; 0x5ad2 <__ultoa_invert+0x6c>
    5ae8:	ea cf       	rjmp	.-44     	; 0x5abe <__ultoa_invert+0x58>
    5aea:	b4 e0       	ldi	r27, 0x04	; 4
    5aec:	a6 95       	lsr	r26
    5aee:	97 95       	ror	r25
    5af0:	87 95       	ror	r24
    5af2:	77 95       	ror	r23
    5af4:	67 95       	ror	r22
    5af6:	ba 95       	dec	r27
    5af8:	c9 f7       	brne	.-14     	; 0x5aec <__ultoa_invert+0x86>
    5afa:	00 97       	sbiw	r24, 0x00	; 0
    5afc:	61 05       	cpc	r22, r1
    5afe:	71 05       	cpc	r23, r1
    5b00:	08 95       	ret
    5b02:	9b 01       	movw	r18, r22
    5b04:	ac 01       	movw	r20, r24
    5b06:	0a 2e       	mov	r0, r26
    5b08:	06 94       	lsr	r0
    5b0a:	57 95       	ror	r21
    5b0c:	47 95       	ror	r20
    5b0e:	37 95       	ror	r19
    5b10:	27 95       	ror	r18
    5b12:	ba 95       	dec	r27
    5b14:	c9 f7       	brne	.-14     	; 0x5b08 <__ultoa_invert+0xa2>
    5b16:	62 0f       	add	r22, r18
    5b18:	73 1f       	adc	r23, r19
    5b1a:	84 1f       	adc	r24, r20
    5b1c:	95 1f       	adc	r25, r21
    5b1e:	a0 1d       	adc	r26, r0
    5b20:	08 95       	ret

00005b22 <__prologue_saves__>:
    5b22:	2f 92       	push	r2
    5b24:	3f 92       	push	r3
    5b26:	4f 92       	push	r4
    5b28:	5f 92       	push	r5
    5b2a:	6f 92       	push	r6
    5b2c:	7f 92       	push	r7
    5b2e:	8f 92       	push	r8
    5b30:	9f 92       	push	r9
    5b32:	af 92       	push	r10
    5b34:	bf 92       	push	r11
    5b36:	cf 92       	push	r12
    5b38:	df 92       	push	r13
    5b3a:	ef 92       	push	r14
    5b3c:	ff 92       	push	r15
    5b3e:	0f 93       	push	r16
    5b40:	1f 93       	push	r17
    5b42:	cf 93       	push	r28
    5b44:	df 93       	push	r29
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
    5b4a:	ca 1b       	sub	r28, r26
    5b4c:	db 0b       	sbc	r29, r27
    5b4e:	0f b6       	in	r0, 0x3f	; 63
    5b50:	f8 94       	cli
    5b52:	de bf       	out	0x3e, r29	; 62
    5b54:	0f be       	out	0x3f, r0	; 63
    5b56:	cd bf       	out	0x3d, r28	; 61
    5b58:	09 94       	ijmp

00005b5a <__epilogue_restores__>:
    5b5a:	2a 88       	ldd	r2, Y+18	; 0x12
    5b5c:	39 88       	ldd	r3, Y+17	; 0x11
    5b5e:	48 88       	ldd	r4, Y+16	; 0x10
    5b60:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b62:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b64:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b66:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b68:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b6c:	b9 84       	ldd	r11, Y+9	; 0x09
    5b6e:	c8 84       	ldd	r12, Y+8	; 0x08
    5b70:	df 80       	ldd	r13, Y+7	; 0x07
    5b72:	ee 80       	ldd	r14, Y+6	; 0x06
    5b74:	fd 80       	ldd	r15, Y+5	; 0x05
    5b76:	0c 81       	ldd	r16, Y+4	; 0x04
    5b78:	1b 81       	ldd	r17, Y+3	; 0x03
    5b7a:	aa 81       	ldd	r26, Y+2	; 0x02
    5b7c:	b9 81       	ldd	r27, Y+1	; 0x01
    5b7e:	ce 0f       	add	r28, r30
    5b80:	d1 1d       	adc	r29, r1
    5b82:	0f b6       	in	r0, 0x3f	; 63
    5b84:	f8 94       	cli
    5b86:	de bf       	out	0x3e, r29	; 62
    5b88:	0f be       	out	0x3f, r0	; 63
    5b8a:	cd bf       	out	0x3d, r28	; 61
    5b8c:	ed 01       	movw	r28, r26
    5b8e:	08 95       	ret

00005b90 <_exit>:
    5b90:	f8 94       	cli

00005b92 <__stop_program>:
    5b92:	ff cf       	rjmp	.-2      	; 0x5b92 <__stop_program>
