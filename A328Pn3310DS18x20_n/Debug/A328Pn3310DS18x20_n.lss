
A328Pn3310DS18x20_n.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800100  00005d78  00005e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d78  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000459  008002a2  008002a2  00005fee  2**0
                  ALLOC
  3 .eeprom       00000037  00810000  00810000  00005fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  00006025  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         00000510  00000000  00000000  00006028  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000021  00000000  00000000  00006538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      0000005c  00000000  00000000  00006559  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000180  00000000  00000000  000065b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006bb1  00000000  00000000  00006735  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001939  00000000  00000000  0000d2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000018a7  00000000  00000000  0000ec1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001058  00000000  00000000  000104c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000014af  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005c92  00000000  00000000  000129cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  00018661  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__ctors_end>
       4:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__vector_1>
       8:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__vector_2>
       c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      10:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      14:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      18:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__vector_6>
      1c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      20:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      24:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__vector_9>
      28:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      2c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      30:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      34:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      38:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      3c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      40:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      44:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      48:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <__vector_18>
      4c:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__vector_19>
      50:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      54:	0c 94 34 22 	jmp	0x4468	; 0x4468 <__vector_21>
      58:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      5c:	0c 94 36 22 	jmp	0x446c	; 0x446c <__vector_23>
      60:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      64:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__bad_interrupt>
      68:	f1 0e       	add	r15, r17
      6a:	04 0f       	add	r16, r20
      6c:	04 0f       	add	r16, r20
      6e:	04 0f       	add	r16, r20
      70:	04 0f       	add	r16, r20
      72:	04 0f       	add	r16, r20
      74:	04 0f       	add	r16, r20
      76:	04 0f       	add	r16, r20
      78:	04 0f       	add	r16, r20
      7a:	04 0f       	add	r16, r20
      7c:	04 0f       	add	r16, r20
      7e:	04 0f       	add	r16, r20
      80:	04 0f       	add	r16, r20
      82:	9c 0e       	add	r9, r28
      84:	a4 0e       	add	r10, r20
      86:	ac 0e       	add	r10, r28
      88:	b4 0e       	add	r11, r20
      8a:	bc 0e       	add	r11, r28
      8c:	c4 0e       	add	r12, r20
      8e:	d1 0e       	add	r13, r17
      90:	d9 0e       	add	r13, r25
      92:	e1 0e       	add	r14, r17
      94:	e9 0e       	add	r14, r25
      96:	11 0f       	add	r17, r17
      98:	99 10       	cpse	r9, r9
      9a:	12 12       	cpse	r1, r18
      9c:	7e 12       	cpse	r7, r30
      9e:	af 13       	cpse	r26, r31
      a0:	96 16       	cp	r9, r22
      a2:	6d 16       	cp	r6, r29
      a4:	dd 12       	cpse	r13, r29
      a6:	07 10       	cpse	r0, r7
      a8:	ae 0f       	add	r26, r30
      aa:	c8 0f       	add	r28, r24
      ac:	66 17       	cp	r22, r22
      ae:	c3 13       	cpse	r28, r19
      b0:	fe 13       	cpse	r31, r30
      b2:	39 14       	cp	r3, r9
      b4:	74 14       	cp	r7, r4
      b6:	af 14       	cp	r10, r15
      b8:	ea 14       	cp	r14, r10
      ba:	25 15       	cp	r18, r5
      bc:	60 15       	cp	r22, r0
      be:	11 16       	cp	r1, r17
      c0:	15 16       	cp	r1, r21
      c2:	9b 15       	cp	r25, r11
      c4:	b5 15       	cp	r27, r5

000000c6 <__trampolines_end>:
      c6:	20 61       	ori	r18, 0x10	; 16
      c8:	74 20       	and	r7, r4
      ca:	25 30       	cpi	r18, 0x05	; 5
      cc:	32 64       	ori	r19, 0x42	; 66
      ce:	3a 25       	eor	r19, r10
      d0:	30 32       	cpi	r19, 0x20	; 32
      d2:	64 3a       	cpi	r22, 0xA4	; 164
      d4:	25 30       	cpi	r18, 0x05	; 5
      d6:	32 64       	ori	r19, 0x42	; 66
	...

000000d9 <__c.3171>:
      d9:	20 61 74 20 25 30 32 64 3a 25 30 32 64 3a 25 30      at %02d:%02d:%0
      e9:	32 64 00                                            2d.

000000ec <__c.3169>:
      ec:	25 64 3a 20 00                                      %d: .

000000f1 <__c.3144>:
      f1:	0a 25 69 2d 25 53 00                                .%i-%S.

000000f8 <__c.3142>:
      f8:	0a 25 69 2d 25 53 00                                .%i-%S.

000000ff <__c.3140>:
      ff:	0a 25 69 2d 25 53 00                                .%i-%S.

00000106 <__c.3138>:
     106:	0a 25 69 2d 25 53 00                                .%i-%S.

0000010d <__c.3136>:
     10d:	0a 25 53 20 25 53 00                                .%S %S.

00000114 <__c.3094>:
     114:	0a 20 25 53 3a 20 25 69 00                          . %S: %i.

0000011d <__c.3092>:
     11d:	0a 20 25 53 3a 20 25 69 00                          . %S: %i.

00000126 <__c.3090>:
     126:	0a 20 25 53 3a 20 25 69 00                          . %S: %i.

0000012f <__c.3088>:
     12f:	0a 20 25 53 3a 20 25 69 00                          . %S: %i.

00000138 <__c.3086>:
     138:	20 20 25 30 32 64 3a 25 30 32 64 3a 25 30 32 64       %02d:%02d:%02d
     148:	0a 00                                               ..

0000014a <__c.3076>:
     14a:	25 53 00                                            %S.

0000014d <__c.3036>:
     14d:	20 20 00                                              .

00000150 <__c.3033>:
     150:	0a 25 53 3a 00                                      .%S:.

00000155 <__c.3030>:
     155:	0a 25 53 3a 00                                      .%S:.

0000015a <__c.3026>:
     15a:	0a 25 53 3a 00                                      .%S:.

0000015f <__c.3022>:
     15f:	0a 25 30 32 64 3a 25 30 32 64 3a 25 30 32 64 00     .%02d:%02d:%02d.

0000016f <__c.3019>:
     16f:	0a 56 61 6c 75 65 20 69 73 3a 25 69 00              .Value is:%i.

0000017c <__c.3015>:
     17c:	0a 25 53 44 20 25 53 21 00                          .%SD %S!.

00000185 <__c.3012>:
     185:	25 53 20 25 53 3f 0a 00                             %S %S?..

0000018d <__c.3009>:
     18d:	20 25 53 3a 00                                       %S:.

00000192 <__c.3007>:
     192:	20 25 53 25 53 0a 00                                 %S%S..

00000199 <__c.3005>:
     199:	25 53 20 25 53 0a 00                                %S %S..

000001a0 <__c.3002>:
     1a0:	20 25 53 3a 00                                       %S:.

000001a5 <__c.3000>:
     1a5:	20 25 53 25 53 0a 00                                 %S%S..

000001ac <__c.2998>:
     1ac:	25 53 20 25 53 0a 00                                %S %S..

000001b3 <__c.2995>:
     1b3:	20 25 53 3a 00                                       %S:.

000001b8 <__c.2993>:
     1b8:	20 25 53 25 53 0a 00                                 %S%S..

000001bf <__c.2991>:
     1bf:	25 53 20 25 53 0a 00                                %S %S..

000001c6 <__c.2988>:
     1c6:	20 25 53 3a 00                                       %S:.

000001cb <__c.2986>:
     1cb:	20 25 53 25 53 0a 00                                 %S%S..

000001d2 <__c.2984>:
     1d2:	25 53 20 25 53 0a 00                                %S %S..

000001d9 <__c.2981>:
     1d9:	20 25 53 3a 00                                       %S:.

000001de <__c.2979>:
     1de:	20 25 53 25 53 0a 00                                 %S%S..

000001e5 <__c.2977>:
     1e5:	25 53 20 25 53 0a 00                                %S %S..

000001ec <__c.2974>:
     1ec:	20 25 53 3a 00                                       %S:.

000001f1 <__c.2972>:
     1f1:	20 25 53 25 53 0a 00                                 %S%S..

000001f8 <__c.2970>:
     1f8:	25 53 20 25 53 0a 00                                %S %S..

000001ff <__c.2967>:
     1ff:	20 25 53 3a 00                                       %S:.

00000204 <__c.2965>:
     204:	20 25 53 25 53 0a 00                                 %S%S..

0000020b <__c.2963>:
     20b:	25 53 20 25 53 0a 00                                %S %S..

00000212 <__c.2959>:
     212:	20 25 53 3a 00                                       %S:.

00000217 <__c.2957>:
     217:	20 25 53 25 53 0a 00                                 %S%S..

0000021e <__c.2955>:
     21e:	25 53 20 25 53 0a 00                                %S %S..

00000225 <__c.2951>:
     225:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

0000022e <__c.2949>:
     22e:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000237 <__c.2947>:
     237:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000240 <__c.2945>:
     240:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000249 <__c.2943>:
     249:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000252 <__c.2941>:
     252:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

0000025b <__c.2939>:
     25b:	0a 25 53 25 53 3a 25 69 00                          .%S%S:%i.

00000264 <__c.2937>:
     264:	25 53 25 53 3a 25 69 00                             %S%S:%i.

0000026c <__c.2934>:
     26c:	0a 20 20 20 25 53 00                                .   %S.

00000273 <__c.2932>:
     273:	0a 25 53 25 69 20 2d 20 25 53 00                    .%S%i - %S.

0000027e <__c.2930>:
     27e:	0a 25 53 25 69 20 2d 20 25 53 00                    .%S%i - %S.

00000289 <__c.2928>:
     289:	0a 25 53 25 69 20 2d 20 25 53 00                    .%S%i - %S.

00000294 <__c.2926>:
     294:	25 53 25 69 20 2d 20 25 53 00                       %S%i - %S.

0000029e <__c.2923>:
     29e:	20 20 20 20 25 53 00                                    %S.

000002a5 <__c.2918>:
     2a5:	25 53 00                                            %S.

000002a8 <__c.2914>:
     2a8:	20 20 20 00                                            .

000002ac <__c.2912>:
     2ac:	0a 20 25 53 3a 25 30 32 58 00                       . %S:%02X.

000002b6 <__c.2906>:
     2b6:	20 25 53 20 25 53 3a 0a 00                           %S %S:..

000002bf <__c.2904>:
     2bf:	25 53 20 25 53 0a 00                                %S %S..

000002c6 <__c.2901>:
     2c6:	20 25 53 20 25 53 3a 0a 00                           %S %S:..

000002cf <__c.2899>:
     2cf:	25 53 20 25 53 0a 00                                %S %S..

000002d6 <__c.2896>:
     2d6:	20 25 53 20 25 53 3a 0a 00                           %S %S:..

000002df <__c.2894>:
     2df:	25 53 20 25 53 0a 00                                %S %S..

000002e6 <__c.2890>:
     2e6:	20 25 53 20 25 53 3a 0a 00                           %S %S:..

000002ef <__c.2888>:
     2ef:	25 53 20 25 53 0a 00                                %S %S..

000002f6 <__c.2883>:
     2f6:	0a 25 53 44 20 25 53 21 00                          .%SD %S!.

000002ff <__c.2880>:
     2ff:	0a 25 73 00                                         .%s.

00000303 <__c.2878>:
     303:	0a 25 53 25 53 3f 00                                .%S%S?.

0000030a <__c.2874>:
     30a:	25 53 20 25 53 3a 0a 00                             %S %S:..

00000312 <__c.2870>:
     312:	0a 25 53 44 20 25 53 21 00                          .%SD %S!.

0000031b <__c.2868>:
     31b:	0a 25 53 44 20 25 53 21 00                          .%SD %S!.

00000324 <__c.2865>:
     324:	25 53 20 25 53 73 3f 0a 00                          %S %Ss?..

0000032d <__c.2861>:
     32d:	25 69 2e 25 53 20 25 53 00                          %i.%S %S.

00000336 <__c.2859>:
     336:	25 69 2e 25 53 20 25 53 0a 00                       %i.%S %S..

00000340 <__c.2857>:
     340:	25 69 2e 25 53 20 25 53 0a 00                       %i.%S %S..

0000034a <__c.2855>:
     34a:	25 69 2e 25 53 0a 00                                %i.%S..

00000351 <__c.2853>:
     351:	25 69 2e 25 53 20 25 53 2d 25 53 0a 00              %i.%S %S-%S..

0000035e <__c.2851>:
     35e:	25 69 2e 25 53 20 25 53 0a 00                       %i.%S %S..

00000368 <__c.2849>:
     368:	25 69 2e 25 53 20 25 53 73 0a 00                    %i.%S %Ss..

00000373 <__c.2847>:
     373:	25 69 2e 25 53 20 25 53 0a 00                       %i.%S %S..

0000037d <__c.2827>:
     37d:	0a 20 20 20 25 53 00                                .   %S.

00000384 <__c.2825>:
     384:	0a 20 20 20 25 53 73 00                             .   %Ss.

0000038c <__c.2823>:
     38c:	0a 20 20 20 20 25 53 00                             .    %S.

00000394 <__c.2821>:
     394:	0a 20 20 20 25 53 00                                .   %S.

0000039b <__c.2819>:
     39b:	0a 20 20 20 25 53 3a 25 30 31 69 00                 .   %S:%01i.

000003a7 <__c.2817>:
     3a7:	0a 20 20 20 20 25 53 00                             .    %S.

000003af <__c.2809>:
     3af:	25 53 00                                            %S.

000003b2 <__c.2807>:
     3b2:	25 53 00                                            %S.

000003b5 <__c.2785>:
     3b5:	43 00                                               C.

000003b7 <__c.2783>:
     3b7:	20 00                                                .

000003b9 <notReadyStr>:
     3b9:	30 32 2d 4e 6f 74 52 65 61 64 79 00                 02-NotReady.

000003c5 <startPowerGoneStr>:
     3c5:	30 31 2d 50 6f 77 65 72 20 47 6f 6e 65 21 00        01-Power Gone!.

000003d4 <startRegulatorStr>:
     3d4:	30 30 2d 52 65 67 75 6c 61 74 6f 72 20 53 74 61     00-Regulator Sta
     3e4:	72 74 65 64 21 00                                   rted!.

000003ea <errStr>:
     3ea:	45 72 72 00                                         Err.

000003ee <clearStr>:
     3ee:	43 6c 65 61 72 00                                   Clear.

000003f4 <telStr>:
     3f4:	50 48 4f 4e 45 00                                   PHONE.

000003fa <EXT>:
     3fa:	2d 45 58 54 00                                      -EXT.

000003ff <PAR>:
     3ff:	2d 50 41 52 00                                      -PAR.

00000404 <DS1822>:
     404:	2d 44 53 31 38 32 32 00                             -DS1822.

0000040c <DS18B20>:
     40c:	2d 44 53 31 38 42 32 30 00                          -DS18B20.

00000415 <DS18S20>:
     415:	2d 44 53 31 38 53 32 30 00                          -DS18S20.

0000041e <Sensorsfound>:
     41e:	20 53 65 6e 73 6f 72 73 66 6f 75 6e 64 00            Sensorsfound.

0000042c <temperStr>:
     42c:	54 2d 45 44 47 45 53 00                             T-EDGES.

00000434 <missingStr>:
     434:	4d 49 53 53 49 4e 47 00                             MISSING.

0000043c <absenceStr>:
     43c:	41 42 53 45 4e 43 45 00                             ABSENCE.

00000444 <sensorStr>:
     444:	53 65 6e 73 6f 72 00                                Sensor.

0000044b <alarmStr>:
     44b:	41 4c 41 52 4d 00                                   ALARM.

00000451 <secondStr>:
     451:	53 45 43 4f 4e 44 00                                SECOND.

00000458 <hourStr>:
     458:	48 4f 55 52 00                                      HOUR.

0000045d <minuteStr>:
     45d:	4d 49 4e 55 54 45 00                                MINUTE.

00000464 <timeStr>:
     464:	54 49 4d 45 00                                      TIME.

00000469 <saveStr>:
     469:	53 41 56 45 00                                      SAVE.

0000046e <toeepromStr>:
     46e:	54 4f 20 45 45 50 52 4f 4d 00                       TO EEPROM.

00000478 <diffStr>:
     478:	44 49 46 46 00                                      DIFF.

0000047d <tempStr>:
     47d:	54 45 4d 50 00                                      TEMP.

00000482 <maxStr>:
     482:	4d 41 58 00                                         MAX.

00000486 <minStr>:
     486:	4d 49 4e 00                                         MIN.

0000048a <assignStr>:
     48a:	41 53 53 49 47 4e 73 00                             ASSIGNs.

00000492 <viewStr>:
     492:	56 49 45 57 00                                      VIEW.

00000497 <setStr>:
     497:	53 45 54 00                                         SET.

0000049b <checksumStr>:
     49b:	43 48 45 43 4b 53 55 4d 00                          CHECKSUM.

000004a4 <nsupdownStr>:
     4a4:	4e 73 2d 55 50 53 49 44 45 2d 44 4f 57 4e 00        Ns-UPSIDE-DOWN.

000004b3 <returnStr>:
     4b3:	52 45 54 55 52 4e 00                                RETURN.

000004ba <supplyStr>:
     4ba:	53 55 50 50 4c 59 00                                SUPPLY.

000004c1 <outdoorStr>:
     4c1:	4f 55 54 44 4f 4f 52 00                             OUTDOOR.

000004c9 <indoorStr>:
     4c9:	49 4e 44 4f 4f 52 00                                INDOOR.

000004d0 <snStr>:
     4d0:	53 4e 00                                            SN.

000004d3 <nextStr>:
     4d3:	2a 2d 4e 45 58 54 00                                *-NEXT.

000004da <exitStr>:
     4da:	23 2d 45 58 49 54 00                                #-EXIT.

000004e1 <helloStr2>:
     4e1:	52 45 47 55 4c 41 54 4f 52 00                       REGULATOR.

000004eb <helloStr1>:
     4eb:	50 55 4d 50 00                                      PUMP.

000004f0 <okStr>:
     4f0:	4f 4b 00                                            OK.

000004f3 <font>:
     4f3:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     503:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     513:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     523:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     533:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     543:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     553:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     563:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     573:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     583:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     593:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     5a3:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     5b3:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     5c3:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     5d3:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     5e3:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     5f3:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     603:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     613:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     623:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     633:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     643:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     653:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     663:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     673:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     683:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     693:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     6a3:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     6b3:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     6c3:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     6d3:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     6e3:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     6f3:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     703:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     713:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     723:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     733:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     743:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     753:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     763:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx
     773:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     783:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     793:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     7a3:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     7b3:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     7c3:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     7d3:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     7e3:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     7f3:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     803:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     813:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     823:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     833:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     843:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     853:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     863:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     873:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     883:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     893:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     8a3:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     8b3:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     8c3:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     8d3:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     8e3:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     8f3:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     903:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     913:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     923:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     933:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     943:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     953:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     963:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     973:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     983:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     993:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     9a3:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     9b3:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     9c3:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     9d3:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     9e3:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

000009ee <__c.2382>:
     9ee:	41 54 2b 43 4d 47 44 3d 00                          AT+CMGD=.

000009f7 <__c.2354>:
     9f7:	22 0a 00                                            "..

000009fa <__c.2352>:
     9fa:	41 54 2b 43 4d 47 53 3d 22 00                       AT+CMGS=".

00000a04 <__c.2334>:
     a04:	0a 00                                               ..

00000a06 <__c.2332>:
     a06:	41 54 2b 43 4d 47 52 3d 00 00                       AT+CMGR=..

00000a10 <__ctors_end>:
     a10:	11 24       	eor	r1, r1
     a12:	1f be       	out	0x3f, r1	; 63
     a14:	cf ef       	ldi	r28, 0xFF	; 255
     a16:	d8 e0       	ldi	r29, 0x08	; 8
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	cd bf       	out	0x3d, r28	; 61

00000a1c <__do_copy_data>:
     a1c:	12 e0       	ldi	r17, 0x02	; 2
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b1 e0       	ldi	r27, 0x01	; 1
     a22:	e8 e7       	ldi	r30, 0x78	; 120
     a24:	fd e5       	ldi	r31, 0x5D	; 93
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <__do_copy_data+0x10>
     a28:	05 90       	lpm	r0, Z+
     a2a:	0d 92       	st	X+, r0
     a2c:	a2 3a       	cpi	r26, 0xA2	; 162
     a2e:	b1 07       	cpc	r27, r17
     a30:	d9 f7       	brne	.-10     	; 0xa28 <__do_copy_data+0xc>

00000a32 <__do_clear_bss>:
     a32:	26 e0       	ldi	r18, 0x06	; 6
     a34:	a2 ea       	ldi	r26, 0xA2	; 162
     a36:	b2 e0       	ldi	r27, 0x02	; 2
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <.do_clear_bss_start>

00000a3a <.do_clear_bss_loop>:
     a3a:	1d 92       	st	X+, r1

00000a3c <.do_clear_bss_start>:
     a3c:	ab 3f       	cpi	r26, 0xFB	; 251
     a3e:	b2 07       	cpc	r27, r18
     a40:	e1 f7       	brne	.-8      	; 0xa3a <.do_clear_bss_loop>
     a42:	0e 94 10 0c 	call	0x1820	; 0x1820 <main>
     a46:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <_exit>

00000a4a <__bad_interrupt>:
     a4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a4e <search_sensors_n>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#ifdef MAXIM_SEARCH_ENABLE

uint8_t search_sensors_n()
{
     a4e:	8f 92       	push	r8
     a50:	9f 92       	push	r9
     a52:	bf 92       	push	r11
     a54:	cf 92       	push	r12
     a56:	ef 92       	push	r14
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
#ifdef DEBUG
	uart_puts_P( NEWLINESTR "Scanning Bus for DS18X20" NEWLINESTR );
#endif

#ifdef DS_PWR_PIN
	       DS_PWR_OUT_LOW();
     a60:	5d 98       	cbi	0x0b, 5	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a62:	8a e0       	ldi	r24, 0x0A	; 10
     a64:	8a 95       	dec	r24
     a66:	f1 f7       	brne	.-4      	; 0xa64 <search_sensors_n+0x16>
     a68:	0f 2e       	mov	r0, r31
     a6a:	f3 e0       	ldi	r31, 0x03	; 3
     a6c:	cf 2e       	mov	r12, r31
     a6e:	f0 2d       	mov	r31, r0
	k = 4;	// Try three times

	do {

	   // find ALL devices
	   nSenss = 0;
     a70:	b1 2c       	mov	r11, r1
//		   if(OWVerify()){
/*
			for ( i=0; i < OW_ROMCODE_SIZE && nSenss < MAXSENSORS ; i++ )
				gSensorIDs[nSenss][i] = ROM_NO[i];
*/
				memcpy(&gSensorIDs[nSenss],&ROM_NO[0],OW_ROMCODE_SIZE);
     a72:	68 94       	set
     a74:	ee 24       	eor	r14, r14
     a76:	e3 f8       	bld	r14, 3
     a78:	0f 2e       	mov	r0, r31
     a7a:	f2 eb       	ldi	r31, 0xB2	; 178
     a7c:	8f 2e       	mov	r8, r31
     a7e:	f2 e0       	ldi	r31, 0x02	; 2
     a80:	9f 2e       	mov	r9, r31
     a82:	f0 2d       	mov	r31, r0
				if(++nSenss >= MAXSENSORS ) { k = 1; break;}
     a84:	01 e0       	ldi	r16, 0x01	; 1

	do {

	   // find ALL devices
	   nSenss = 0;
	   rslt = OWFirst();
     a86:	0e 94 a3 1b 	call	0x3746	; 0x3746 <OWFirst>
	   while (rslt)
     a8a:	88 23       	and	r24, r24
     a8c:	e9 f0       	breq	.+58     	; 0xac8 <search_sensors_n+0x7a>
//		   if(OWVerify()){
/*
			for ( i=0; i < OW_ROMCODE_SIZE && nSenss < MAXSENSORS ; i++ )
				gSensorIDs[nSenss][i] = ROM_NO[i];
*/
				memcpy(&gSensorIDs[nSenss],&ROM_NO[0],OW_ROMCODE_SIZE);
     a8e:	ed e7       	ldi	r30, 0x7D	; 125
     a90:	f3 e0       	ldi	r31, 0x03	; 3
     a92:	aa ea       	ldi	r26, 0xAA	; 170
     a94:	b2 e0       	ldi	r27, 0x02	; 2
     a96:	8e 2d       	mov	r24, r14
     a98:	01 90       	ld	r0, Z+
     a9a:	0d 92       	st	X+, r0
     a9c:	8a 95       	dec	r24
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <search_sensors_n+0x4a>
     aa0:	e4 01       	movw	r28, r8
				if(++nSenss >= MAXSENSORS ) { k = 1; break;}
     aa2:	10 2f       	mov	r17, r16
     aa4:	0c c0       	rjmp	.+24     	; 0xabe <search_sensors_n+0x70>
//		   if(OWVerify()){
/*
			for ( i=0; i < OW_ROMCODE_SIZE && nSenss < MAXSENSORS ; i++ )
				gSensorIDs[nSenss][i] = ROM_NO[i];
*/
				memcpy(&gSensorIDs[nSenss],&ROM_NO[0],OW_ROMCODE_SIZE);
     aa6:	ed e7       	ldi	r30, 0x7D	; 125
     aa8:	f3 e0       	ldi	r31, 0x03	; 3
     aaa:	de 01       	movw	r26, r28
     aac:	8e 2d       	mov	r24, r14
     aae:	01 90       	ld	r0, Z+
     ab0:	0d 92       	st	X+, r0
     ab2:	8a 95       	dec	r24
     ab4:	e1 f7       	brne	.-8      	; 0xaae <search_sensors_n+0x60>
				if(++nSenss >= MAXSENSORS ) { k = 1; break;}
     ab6:	1f 5f       	subi	r17, 0xFF	; 255
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	14 30       	cpi	r17, 0x04	; 4
     abc:	41 f0       	breq	.+16     	; 0xace <search_sensors_n+0x80>
//		   }
		   rslt = OWNext();
     abe:	0e 94 ac 1b 	call	0x3758	; 0x3758 <OWNext>
	do {

	   // find ALL devices
	   nSenss = 0;
	   rslt = OWFirst();
	   while (rslt)
     ac2:	81 11       	cpse	r24, r1
     ac4:	f0 cf       	rjmp	.-32     	; 0xaa6 <search_sensors_n+0x58>
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <search_sensors_n+0x7c>
	k = 4;	// Try three times

	do {

	   // find ALL devices
	   nSenss = 0;
     ac8:	1b 2d       	mov	r17, r11
     aca:	ca 94       	dec	r12
//		   }
		   rslt = OWNext();
	   }

		k--;
	} while (k > 1);
     acc:	e1 f6       	brne	.-72     	; 0xa86 <search_sensors_n+0x38>

#ifdef DS_PWR_PIN
       DS_PWR_OUT_HIGH();
     ace:	5d 9a       	sbi	0x0b, 5	; 11
#endif
return nSenss;

}
     ad0:	81 2f       	mov	r24, r17
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ef 90       	pop	r14
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	08 95       	ret

00000ae6 <LcdPutTemp>:
}

#endif

void LcdPutTemp(int16_t decicelsius)
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	2a 97       	sbiw	r28, 0x0a	; 10
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
	char s[10];
	DS18X20_format_from_decicelsius( decicelsius, s, 10 );
     afa:	4a e0       	ldi	r20, 0x0A	; 10
     afc:	be 01       	movw	r22, r28
     afe:	6f 5f       	subi	r22, 0xFF	; 255
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	0e 94 ef 27 	call	0x4fde	; 0x4fde <DS18X20_format_from_decicelsius>
	LCD_FSTR(FONT_1X,(const char*)PSTR(" "));
     b06:	87 eb       	ldi	r24, 0xB7	; 183
     b08:	93 e0       	ldi	r25, 0x03	; 3
     b0a:	0e 94 16 21 	call	0x422c	; 0x422c <LCD_draw_string3>
	LCD_STR(FONT_1X, s);
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 01 21 	call	0x4202	; 0x4202 <LCD_draw_string2>
	LCD_FSTR(FONT_1X,(const  char*)PSTR("C"));
     b16:	85 eb       	ldi	r24, 0xB5	; 181
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	0e 94 16 21 	call	0x422c	; 0x422c <LCD_draw_string3>
}
     b1e:	2a 96       	adiw	r28, 0x0a	; 10
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <ShutOffADC>:
/*
 *  ShutOffADC      shut down the ADC and prepare for power reduction
 */
void  ShutOffADC(void)
{
    ACSR = (1<<ACD);                        // disable A/D comparator
     b30:	80 e8       	ldi	r24, 0x80	; 128
     b32:	80 bf       	out	0x30, r24	; 48
    ADCSRA = (0<<ADEN);                     // disable A/D converter
     b34:	10 92 7a 00 	sts	0x007A, r1
    DIDR0 = 0x3f;                           // disable all A/D inputs (ADC0-ADC5)
     b38:	8f e3       	ldi	r24, 0x3F	; 63
     b3a:	80 93 7e 00 	sts	0x007E, r24
    DIDR1 = 0x03;                           // disable AIN0 and AIN1
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	80 93 7f 00 	sts	0x007F, r24
     b44:	08 95       	ret

00000b46 <test_SN_sensors>:
}
//
#ifndef DEBUG

int8_t test_SN_sensors(){
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
	int8_t i, k;
	int8_t retcode;
	for ( k = 0; k < MAXSENSORS; k++ ) {
	 retcode = 1;
	 for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[k],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
     b50:	c0 91 64 03 	lds	r28, 0x0364
     b54:	d0 91 65 03 	lds	r29, 0x0365
#ifndef DEBUG

int8_t test_SN_sensors(){
	int8_t i, k;
	int8_t retcode;
	for ( k = 0; k < MAXSENSORS; k++ ) {
     b58:	00 e0       	ldi	r16, 0x00	; 0
	 retcode = 1;
	 for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[k],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
     b5a:	10 e0       	ldi	r17, 0x00	; 0
     b5c:	f1 2c       	mov	r15, r1
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <test_SN_sensors+0x1c>
     b60:	1f 2d       	mov	r17, r15
     b62:	28 e0       	ldi	r18, 0x08	; 8
     b64:	02 02       	muls	r16, r18
     b66:	c0 01       	movw	r24, r0
     b68:	11 24       	eor	r1, r1
     b6a:	48 e0       	ldi	r20, 0x08	; 8
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	be 01       	movw	r22, r28
     b70:	28 e0       	ldi	r18, 0x08	; 8
     b72:	12 02       	muls	r17, r18
     b74:	60 0d       	add	r22, r0
     b76:	71 1d       	adc	r23, r1
     b78:	11 24       	eor	r1, r1
     b7a:	86 55       	subi	r24, 0x56	; 86
     b7c:	9d 4f       	sbci	r25, 0xFD	; 253
     b7e:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <memcmp>
     b82:	89 2b       	or	r24, r25
     b84:	29 f0       	breq	.+10     	; 0xb90 <test_SN_sensors+0x4a>
int8_t test_SN_sensors(){
	int8_t i, k;
	int8_t retcode;
	for ( k = 0; k < MAXSENSORS; k++ ) {
	 retcode = 1;
	 for ( i = 0; i < MAXSENSORS; i++ ) {
     b86:	1f 5f       	subi	r17, 0xFF	; 255
     b88:	14 30       	cpi	r17, 0x04	; 4
     b8a:	5c f3       	brlt	.-42     	; 0xb62 <test_SN_sensors+0x1c>
     b8c:	80 2f       	mov	r24, r16
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <test_SN_sensors+0x52>
#ifndef DEBUG

int8_t test_SN_sensors(){
	int8_t i, k;
	int8_t retcode;
	for ( k = 0; k < MAXSENSORS; k++ ) {
     b90:	0f 5f       	subi	r16, 0xFF	; 255
     b92:	04 30       	cpi	r16, 0x04	; 4
     b94:	2c f3       	brlt	.-54     	; 0xb60 <test_SN_sensors+0x1a>
		}
	 }	// for ( i = 0; i < MAXSENSORS; i++ )
	 if(retcode) return k;
//	 else sn_presence[k] = TRUE;
    } //for ( k = 0; k < MAXSENSORS; k++ )
	return 99;
     b96:	83 e6       	ldi	r24, 0x63	; 99
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	08 95       	ret

00000ba4 <copyrSNsTogSNs>:
	}
	if(k > 0) return 0;
	return retcode;
}
//
void copyrSNsTogSNs(void){
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for ( i = 0; i < MAXSENSORS; i++ ) {
		memcpy(&gSensorIDs[i],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE);
     ba8:	28 e0       	ldi	r18, 0x08	; 8
     baa:	dc 01       	movw	r26, r24
     bac:	a6 55       	subi	r26, 0x56	; 86
     bae:	bd 4f       	sbci	r27, 0xFD	; 253
     bb0:	e0 91 64 03 	lds	r30, 0x0364
     bb4:	f0 91 65 03 	lds	r31, 0x0365
     bb8:	e8 0f       	add	r30, r24
     bba:	f9 1f       	adc	r31, r25
     bbc:	32 2f       	mov	r19, r18
     bbe:	01 90       	ld	r0, Z+
     bc0:	0d 92       	st	X+, r0
     bc2:	3a 95       	dec	r19
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <copyrSNsTogSNs+0x1a>
     bc6:	08 96       	adiw	r24, 0x08	; 8
	return retcode;
}
//
void copyrSNsTogSNs(void){
	uint8_t i;
	for ( i = 0; i < MAXSENSORS; i++ ) {
     bc8:	80 32       	cpi	r24, 0x20	; 32
     bca:	91 05       	cpc	r25, r1
     bcc:	71 f7       	brne	.-36     	; 0xbaa <copyrSNsTogSNs+0x6>
		memcpy(&gSensorIDs[i],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE);
	}	// for ( i = 0; i < MAXSENSORS; i++ )
}
     bce:	08 95       	ret

00000bd0 <LcdPowerGoneStr>:
#endif
//
//
void LcdPowerGoneStr(void){
	LCD_CLEAR();
     bd0:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
	LCD_GOTO_XY(0,2);
     bd4:	62 e0       	ldi	r22, 0x02	; 2
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <LCD_set_position2>
	printf_P(PSTR("%S"),startPowerGoneStr);
     bdc:	85 ec       	ldi	r24, 0xC5	; 197
     bde:	93 e0       	ldi	r25, 0x03	; 3
     be0:	9f 93       	push	r25
     be2:	8f 93       	push	r24
     be4:	8a e4       	ldi	r24, 0x4A	; 74
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	9f 93       	push	r25
     bea:	8f 93       	push	r24
     bec:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
	LCD_UPDATE();
     bf0:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bf4:	2f ef       	ldi	r18, 0xFF	; 255
     bf6:	81 e1       	ldi	r24, 0x11	; 17
     bf8:	9a e7       	ldi	r25, 0x7A	; 122
     bfa:	21 50       	subi	r18, 0x01	; 1
     bfc:	80 40       	sbci	r24, 0x00	; 0
     bfe:	90 40       	sbci	r25, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <LcdPowerGoneStr+0x2a>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <LcdPowerGoneStr+0x34>
     c04:	00 00       	nop
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	08 95       	ret

00000c10 <DisplayTemperature>:
_delay_ms(5000);
}
//
void DisplayTemperature(void){
     c10:	cf 93       	push	r28
	uint8_t i,k;
	if(mausure_temperature_ok){
     c12:	80 91 00 01 	lds	r24, 0x0100
     c16:	88 23       	and	r24, r24
     c18:	09 f4       	brne	.+2      	; 0xc1c <DisplayTemperature+0xc>
     c1a:	ac c0       	rjmp	.+344    	; 0xd74 <DisplayTemperature+0x164>
     c1c:	ee e3       	ldi	r30, 0x3E	; 62
     c1e:	f3 e0       	ldi	r31, 0x03	; 3
     c20:	82 e4       	ldi	r24, 0x42	; 66
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	c0 e0       	ldi	r28, 0x00	; 0
		k = 0;
		for(i=0;i<MAXSENSORS;i++) if(temper[i] != TEMPER_BAD) k++;
     c26:	21 91       	ld	r18, Z+
     c28:	2f 37       	cpi	r18, 0x7F	; 127
     c2a:	09 f0       	breq	.+2      	; 0xc2e <DisplayTemperature+0x1e>
     c2c:	cf 5f       	subi	r28, 0xFF	; 255
     c2e:	e8 17       	cp	r30, r24
     c30:	f9 07       	cpc	r31, r25
     c32:	c9 f7       	brne	.-14     	; 0xc26 <DisplayTemperature+0x16>

		if(oldDisplaySens > k) LCD_CLEAR();
     c34:	80 91 ca 02 	lds	r24, 0x02CA
     c38:	c8 17       	cp	r28, r24
     c3a:	18 f4       	brcc	.+6      	; 0xc42 <DisplayTemperature+0x32>
     c3c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DisplayTemperature+0x36>
		else LCD_FIRSTLINE();
     c42:	0e 94 69 21 	call	0x42d2	; 0x42d2 <LcdFirstLine>
		oldDisplaySens = k;
     c46:	c0 93 ca 02 	sts	0x02CA, r28

		printf_P(PSTR("  %02d:%02d:%02d\n"),tAsync.hour,tAsync.minute,tAsync.second);
     c4a:	80 91 0f 01 	lds	r24, 0x010F
     c4e:	1f 92       	push	r1
     c50:	8f 93       	push	r24
     c52:	80 91 10 01 	lds	r24, 0x0110
     c56:	1f 92       	push	r1
     c58:	8f 93       	push	r24
     c5a:	80 91 11 01 	lds	r24, 0x0111
     c5e:	1f 92       	push	r1
     c60:	8f 93       	push	r24
     c62:	88 e3       	ldi	r24, 0x38	; 56
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
		if(sn_presence[0]){
     c6e:	8d b7       	in	r24, 0x3d	; 61
     c70:	9e b7       	in	r25, 0x3e	; 62
     c72:	08 96       	adiw	r24, 0x08	; 8
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	9e bf       	out	0x3e, r25	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	8d bf       	out	0x3d, r24	; 61
     c7e:	80 91 d6 02 	lds	r24, 0x02D6
     c82:	88 23       	and	r24, r24
     c84:	d1 f0       	breq	.+52     	; 0xcba <DisplayTemperature+0xaa>
			if(temper[0] < TEMPER_BAD)
     c86:	20 91 3e 03 	lds	r18, 0x033E
     c8a:	2f 37       	cpi	r18, 0x7F	; 127
     c8c:	b1 f0       	breq	.+44     	; 0xcba <DisplayTemperature+0xaa>
				printf_P(PSTR("\n %S: %i"),indoorStr,temper[0]);
     c8e:	82 2f       	mov	r24, r18
     c90:	99 27       	eor	r25, r25
     c92:	87 fd       	sbrc	r24, 7
     c94:	90 95       	com	r25
     c96:	9f 93       	push	r25
     c98:	2f 93       	push	r18
     c9a:	89 ec       	ldi	r24, 0xC9	; 201
     c9c:	94 e0       	ldi	r25, 0x04	; 4
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	8f e2       	ldi	r24, 0x2F	; 47
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
		}
		if(sn_presence[1]){
     cba:	80 91 d7 02 	lds	r24, 0x02D7
     cbe:	88 23       	and	r24, r24
     cc0:	d1 f0       	breq	.+52     	; 0xcf6 <DisplayTemperature+0xe6>
			if(temper[1] < TEMPER_BAD)
     cc2:	20 91 3f 03 	lds	r18, 0x033F
     cc6:	2f 37       	cpi	r18, 0x7F	; 127
     cc8:	b1 f0       	breq	.+44     	; 0xcf6 <DisplayTemperature+0xe6>
				printf_P(PSTR("\n %S: %i"),outdoorStr,temper[1]);
     cca:	82 2f       	mov	r24, r18
     ccc:	99 27       	eor	r25, r25
     cce:	87 fd       	sbrc	r24, 7
     cd0:	90 95       	com	r25
     cd2:	9f 93       	push	r25
     cd4:	2f 93       	push	r18
     cd6:	81 ec       	ldi	r24, 0xC1	; 193
     cd8:	94 e0       	ldi	r25, 0x04	; 4
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	86 e2       	ldi	r24, 0x26	; 38
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
		}
		if(sn_presence[2]){
     cf6:	80 91 d8 02 	lds	r24, 0x02D8
     cfa:	88 23       	and	r24, r24
     cfc:	d1 f0       	breq	.+52     	; 0xd32 <DisplayTemperature+0x122>
			if(temper[2] < TEMPER_BAD)
     cfe:	20 91 40 03 	lds	r18, 0x0340
     d02:	2f 37       	cpi	r18, 0x7F	; 127
     d04:	b1 f0       	breq	.+44     	; 0xd32 <DisplayTemperature+0x122>
				printf_P(PSTR("\n %S: %i"),supplyStr,temper[2]);
     d06:	82 2f       	mov	r24, r18
     d08:	99 27       	eor	r25, r25
     d0a:	87 fd       	sbrc	r24, 7
     d0c:	90 95       	com	r25
     d0e:	9f 93       	push	r25
     d10:	2f 93       	push	r18
     d12:	8a eb       	ldi	r24, 0xBA	; 186
     d14:	94 e0       	ldi	r25, 0x04	; 4
     d16:	9f 93       	push	r25
     d18:	8f 93       	push	r24
     d1a:	8d e1       	ldi	r24, 0x1D	; 29
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
		}
		if(sn_presence[3]){
     d32:	80 91 d9 02 	lds	r24, 0x02D9
     d36:	88 23       	and	r24, r24
     d38:	d1 f0       	breq	.+52     	; 0xd6e <DisplayTemperature+0x15e>
			if(temper[3] < TEMPER_BAD)
     d3a:	20 91 41 03 	lds	r18, 0x0341
     d3e:	2f 37       	cpi	r18, 0x7F	; 127
     d40:	b1 f0       	breq	.+44     	; 0xd6e <DisplayTemperature+0x15e>
				printf_P(PSTR("\n %S: %i"),returnStr,temper[3]);
     d42:	82 2f       	mov	r24, r18
     d44:	99 27       	eor	r25, r25
     d46:	87 fd       	sbrc	r24, 7
     d48:	90 95       	com	r25
     d4a:	9f 93       	push	r25
     d4c:	2f 93       	push	r18
     d4e:	83 eb       	ldi	r24, 0xB3	; 179
     d50:	94 e0       	ldi	r25, 0x04	; 4
     d52:	9f 93       	push	r25
     d54:	8f 93       	push	r24
     d56:	84 e1       	ldi	r24, 0x14	; 20
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
		}

		mausure_temperature_ok = FALSE;
     d6e:	10 92 00 01 	sts	0x0100, r1
     d72:	09 c0       	rjmp	.+18     	; 0xd86 <DisplayTemperature+0x176>
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	23 ed       	ldi	r18, 0xD3	; 211
     d78:	80 e3       	ldi	r24, 0x30	; 48
     d7a:	91 50       	subi	r25, 0x01	; 1
     d7c:	20 40       	sbci	r18, 0x00	; 0
     d7e:	80 40       	sbci	r24, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <DisplayTemperature+0x16a>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <DisplayTemperature+0x174>
     d84:	00 00       	nop
	} else _delay_ms(2000);
}
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <DoWatchDog>:
	return 0;

}
//
void DoWatchDog(void) {
	if (TLastWatchDog == tAsync.second) return;
     d8a:	90 91 0f 01 	lds	r25, 0x010F
     d8e:	80 91 a2 02 	lds	r24, 0x02A2
     d92:	98 17       	cp	r25, r24
     d94:	a1 f0       	breq	.+40     	; 0xdbe <DoWatchDog+0x34>
	if(ReadyWATCHDOG){
     d96:	80 91 76 03 	lds	r24, 0x0376
     d9a:	88 23       	and	r24, r24
     d9c:	81 f0       	breq	.+32     	; 0xdbe <DoWatchDog+0x34>
		if(WATCHDOG_STATE){
     d9e:	80 91 a3 02 	lds	r24, 0x02A3
     da2:	88 23       	and	r24, r24
     da4:	21 f0       	breq	.+8      	; 0xdae <DoWatchDog+0x24>
			WATCHDOG_PORT |= (1 << WATCHDOG_PIN); WATCHDOG_STATE = 0;
     da6:	28 9a       	sbi	0x05, 0	; 5
     da8:	10 92 a3 02 	sts	0x02A3, r1
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <DoWatchDog+0x2c>
		} else {
			WATCHDOG_PORT &= ~(1 << WATCHDOG_PIN); WATCHDOG_STATE = 1;}
     dae:	28 98       	cbi	0x05, 0	; 5
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 a3 02 	sts	0x02A3, r24
		TLastWatchDog = tAsync.second;
     db6:	80 91 0f 01 	lds	r24, 0x010F
     dba:	80 93 a2 02 	sts	0x02A2, r24
     dbe:	08 95       	ret

00000dc0 <getTemperature>:
	} else _delay_ms(2000);
}

//
int16_t getTemperature(uint8_t* sensorID)
{
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	2c 97       	sbiw	r28, 0x0c	; 12
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	8c 01       	movw	r16, r24
     ddc:	68 94       	set
     dde:	ff 24       	eor	r15, r15
     de0:	f2 f8       	bld	r15, 2
	int16_t temp;
	char s[10],k;
	k = 3; // Repeat 3 times

	do {
	if ( DS18X20_start_meas( DS18X20_POWER_PARASITE, sensorID ) == DS18X20_OK ) {
     de2:	b8 01       	movw	r22, r16
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <DS18X20_start_meas>
     dea:	81 11       	cpse	r24, r1
     dec:	22 c0       	rjmp	.+68     	; 0xe32 <getTemperature+0x72>
     dee:	2f e7       	ldi	r18, 0x7F	; 127
     df0:	8f e4       	ldi	r24, 0x4F	; 79
     df2:	92 e1       	ldi	r25, 0x12	; 18
     df4:	21 50       	subi	r18, 0x01	; 1
     df6:	80 40       	sbci	r24, 0x00	; 0
     df8:	90 40       	sbci	r25, 0x00	; 0
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <getTemperature+0x34>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <getTemperature+0x3e>
     dfe:	00 00       	nop
		_delay_ms( DS18B20_TCONV_12BIT );
		DO_WATCHDOG();
     e00:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
		if ( DS18X20_read_decicelsius( sensorID, &temp) == DS18X20_OK ) {
     e04:	be 01       	movw	r22, r28
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	c8 01       	movw	r24, r16
     e0c:	0e 94 74 28 	call	0x50e8	; 0x50e8 <DS18X20_read_decicelsius>
     e10:	81 11       	cpse	r24, r1
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <getTemperature+0x72>
			if( DS18X20_OK == DS18X20_format_from_decicelsius( temp, s, 10 ))
     e14:	4a e0       	ldi	r20, 0x0A	; 10
     e16:	be 01       	movw	r22, r28
     e18:	6d 5f       	subi	r22, 0xFD	; 253
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	0e 94 ef 27 	call	0x4fde	; 0x4fde <DS18X20_format_from_decicelsius>
     e24:	81 11       	cpse	r24, r1
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <getTemperature+0x72>
				return atoi(s);
     e28:	ce 01       	movw	r24, r28
     e2a:	03 96       	adiw	r24, 0x03	; 3
     e2c:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <getTemperature+0x7a>
     e32:	fa 94       	dec	r15
		}
	}
	} while (k--);
     e34:	b1 f6       	brne	.-84     	; 0xde2 <getTemperature+0x22>
	return TEMPER_BAD;
     e36:	8f e7       	ldi	r24, 0x7F	; 127
     e38:	90 e0       	ldi	r25, 0x00	; 0
}
     e3a:	2c 96       	adiw	r28, 0x0c	; 12
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	08 95       	ret

00000e52 <manageTemperatureEvent>:
//
	void manageTemperatureEvent(void){
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
		uint8_t i;
		uint8_t inTA;
		uint8_t sh;

		inTA = (rTempInDoorMin + rTempInDoorMax)/2;
     e5a:	10 91 3b 03 	lds	r17, 0x033B
     e5e:	00 91 3c 03 	lds	r16, 0x033C

		if(kg < MAXSENSORS - 1) kg++;
     e62:	80 91 cb 02 	lds	r24, 0x02CB
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	24 f4       	brge	.+8      	; 0xe72 <manageTemperatureEvent+0x20>
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	80 93 cb 02 	sts	0x02CB, r24
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <manageTemperatureEvent+0x24>
		else kg = 0;
     e72:	10 92 cb 02 	sts	0x02CB, r1

			if(sn_presence[kg]){
     e76:	c0 91 cb 02 	lds	r28, 0x02CB
     e7a:	dd 27       	eor	r29, r29
     e7c:	c7 fd       	sbrc	r28, 7
     e7e:	d0 95       	com	r29
     e80:	fe 01       	movw	r30, r28
     e82:	ea 52       	subi	r30, 0x2A	; 42
     e84:	fd 4f       	sbci	r31, 0xFD	; 253
     e86:	80 81       	ld	r24, Z
     e88:	88 23       	and	r24, r24
     e8a:	91 f1       	breq	.+100    	; 0xef0 <manageTemperatureEvent+0x9e>
				temper[kg] = getTemperature(&gSensorIDs[kg][0]);
     e8c:	ce 01       	movw	r24, r28
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	86 55       	subi	r24, 0x56	; 86
     e9c:	9d 4f       	sbci	r25, 0xFD	; 253
     e9e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <getTemperature>
     ea2:	c2 5c       	subi	r28, 0xC2	; 194
     ea4:	dc 4f       	sbci	r29, 0xFC	; 252
     ea6:	88 83       	st	Y, r24
				if (temper[kg] == TEMPER_BAD){
     ea8:	20 91 cb 02 	lds	r18, 0x02CB
     eac:	33 27       	eor	r19, r19
     eae:	27 fd       	sbrc	r18, 7
     eb0:	30 95       	com	r19
     eb2:	f9 01       	movw	r30, r18
     eb4:	e2 5c       	subi	r30, 0xC2	; 194
     eb6:	fc 4f       	sbci	r31, 0xFC	; 252
     eb8:	80 81       	ld	r24, Z
     eba:	8f 37       	cpi	r24, 0x7F	; 127
     ebc:	c9 f4       	brne	.+50     	; 0xef0 <manageTemperatureEvent+0x9e>
					if (sn_noready_counter[kg] < NOREADY_COUNTER_MAX )
     ebe:	f9 01       	movw	r30, r18
     ec0:	ee 52       	subi	r30, 0x2E	; 46
     ec2:	fd 4f       	sbci	r31, 0xFD	; 253
     ec4:	80 81       	ld	r24, Z
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	30 f4       	brcc	.+12     	; 0xed6 <manageTemperatureEvent+0x84>
						sn_noready_counter[kg]+=1;
     eca:	f9 01       	movw	r30, r18
     ecc:	ee 52       	subi	r30, 0x2E	; 46
     ece:	fd 4f       	sbci	r31, 0xFD	; 253
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	80 83       	st	Z, r24
     ed4:	0d c0       	rjmp	.+26     	; 0xef0 <manageTemperatureEvent+0x9e>
					else {
							sn_presence[kg] = FALSE;
     ed6:	f9 01       	movw	r30, r18
     ed8:	ea 52       	subi	r30, 0x2A	; 42
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	10 82       	st	Z, r1
							noready_sens[kg] = TRUE;
     ede:	f9 01       	movw	r30, r18
     ee0:	e4 53       	subi	r30, 0x34	; 52
     ee2:	fd 4f       	sbci	r31, 0xFD	; 253
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 83       	st	Z, r24
							sn_noready_counter[kg] = 0;
     ee8:	f9 01       	movw	r30, r18
     eea:	ee 52       	subi	r30, 0x2E	; 46
     eec:	fd 4f       	sbci	r31, 0xFD	; 253
     eee:	10 82       	st	Z, r1
				}
			}

//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	sh = 5;
	if(PrefHeatting){
     ef0:	80 91 42 03 	lds	r24, 0x0342
     ef4:	88 23       	and	r24, r24
     ef6:	a1 f0       	breq	.+40     	; 0xf20 <manageTemperatureEvent+0xce>
	// Outdoor temperature is drop down 10 degrees Celcius for an hour
		if (temper[N_INDOOR] <= rTempInDoorMax + PREHEATTING_ADDV ||
     ef8:	60 91 3e 03 	lds	r22, 0x033E
     efc:	46 2f       	mov	r20, r22
     efe:	55 27       	eor	r21, r21
     f00:	47 fd       	sbrc	r20, 7
     f02:	50 95       	com	r21
     f04:	20 91 3c 03 	lds	r18, 0x033C
     f08:	33 27       	eor	r19, r19
     f0a:	27 fd       	sbrc	r18, 7
     f0c:	30 95       	com	r19
     f0e:	2b 5f       	subi	r18, 0xFB	; 251
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	24 17       	cp	r18, r20
     f14:	35 07       	cpc	r19, r21
     f16:	34 f4       	brge	.+12     	; 0xf24 <manageTemperatureEvent+0xd2>
     f18:	6f 37       	cpi	r22, 0x7F	; 127
     f1a:	69 f1       	breq	.+90     	; 0xf76 <manageTemperatureEvent+0x124>
						 }
				}
			}

//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	sh = 5;
     f1c:	45 e0       	ldi	r20, 0x05	; 5
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <manageTemperatureEvent+0xdc>
     f20:	45 e0       	ldi	r20, 0x05	; 5
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <manageTemperatureEvent+0xd4>
	if(PrefHeatting){
	// Outdoor temperature is drop down 10 degrees Celcius for an hour
		if (temper[N_INDOOR] <= rTempInDoorMax + PREHEATTING_ADDV ||
				temper[N_INDOOR] == TEMPER_BAD) sh = 4;
     f24:	44 e0       	ldi	r20, 0x04	; 4

	}

		if(temper[N_INDOOR] != TEMPER_BAD){
     f26:	60 91 3e 03 	lds	r22, 0x033E
     f2a:	6f 37       	cpi	r22, 0x7F	; 127
     f2c:	29 f1       	breq	.+74     	; 0xf78 <manageTemperatureEvent+0x126>
			if (temper[N_INDOOR] <= rTempInDoorMin) sh = 0;
     f2e:	80 91 3b 03 	lds	r24, 0x033B
     f32:	86 17       	cp	r24, r22
     f34:	0c f0       	brlt	.+2      	; 0xf38 <manageTemperatureEvent+0xe6>
     f36:	66 c0       	rjmp	.+204    	; 0x1004 <manageTemperatureEvent+0x1b2>
			else if (temper[N_INDOOR] <= inTA) sh = 1;
     f38:	26 2f       	mov	r18, r22
     f3a:	33 27       	eor	r19, r19
     f3c:	27 fd       	sbrc	r18, 7
     f3e:	30 95       	com	r19
	void manageTemperatureEvent(void){
		uint8_t i;
		uint8_t inTA;
		uint8_t sh;

		inTA = (rTempInDoorMin + rTempInDoorMax)/2;
     f40:	80 2f       	mov	r24, r16
     f42:	99 27       	eor	r25, r25
     f44:	87 fd       	sbrc	r24, 7
     f46:	90 95       	com	r25
     f48:	81 0f       	add	r24, r17
     f4a:	91 1d       	adc	r25, r1
     f4c:	17 fd       	sbrc	r17, 7
     f4e:	9a 95       	dec	r25
     f50:	99 23       	and	r25, r25
     f52:	0c f4       	brge	.+2      	; 0xf56 <manageTemperatureEvent+0x104>
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	95 95       	asr	r25
     f58:	87 95       	ror	r24

	}

		if(temper[N_INDOOR] != TEMPER_BAD){
			if (temper[N_INDOOR] <= rTempInDoorMin) sh = 0;
			else if (temper[N_INDOOR] <= inTA) sh = 1;
     f5a:	99 27       	eor	r25, r25
     f5c:	82 17       	cp	r24, r18
     f5e:	93 07       	cpc	r25, r19
     f60:	0c f0       	brlt	.+2      	; 0xf64 <manageTemperatureEvent+0x112>
     f62:	52 c0       	rjmp	.+164    	; 0x1008 <manageTemperatureEvent+0x1b6>
			else if (temper[N_INDOOR] <= rTempInDoorMax) sh = 2;
     f64:	80 91 3c 03 	lds	r24, 0x033C
     f68:	86 17       	cp	r24, r22
     f6a:	0c f0       	brlt	.+2      	; 0xf6e <manageTemperatureEvent+0x11c>
     f6c:	4f c0       	rjmp	.+158    	; 0x100c <manageTemperatureEvent+0x1ba>
			else if (sh != 4) sh = 3;
     f6e:	44 30       	cpi	r20, 0x04	; 4
     f70:	09 f0       	breq	.+2      	; 0xf74 <manageTemperatureEvent+0x122>
     f72:	4e c0       	rjmp	.+156    	; 0x1010 <manageTemperatureEvent+0x1be>
     f74:	2b c0       	rjmp	.+86     	; 0xfcc <manageTemperatureEvent+0x17a>
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	sh = 5;
	if(PrefHeatting){
	// Outdoor temperature is drop down 10 degrees Celcius for an hour
		if (temper[N_INDOOR] <= rTempInDoorMax + PREHEATTING_ADDV ||
				temper[N_INDOOR] == TEMPER_BAD) sh = 4;
     f76:	44 e0       	ldi	r20, 0x04	; 4
		if(temper[N_INDOOR] != TEMPER_BAD){
			if (temper[N_INDOOR] <= rTempInDoorMin) sh = 0;
			else if (temper[N_INDOOR] <= inTA) sh = 1;
			else if (temper[N_INDOOR] <= rTempInDoorMax) sh = 2;
			else if (sh != 4) sh = 3;
		} else if(temper[N_SUPPLY] == TEMPER_BAD || temper[N_RETURN] == TEMPER_BAD) sh = 0;
     f78:	20 91 40 03 	lds	r18, 0x0340
     f7c:	2f 37       	cpi	r18, 0x7F	; 127
     f7e:	09 f4       	brne	.+2      	; 0xf82 <manageTemperatureEvent+0x130>
     f80:	49 c0       	rjmp	.+146    	; 0x1014 <manageTemperatureEvent+0x1c2>
     f82:	30 91 41 03 	lds	r19, 0x0341
     f86:	3f 37       	cpi	r19, 0x7F	; 127
     f88:	09 f4       	brne	.+2      	; 0xf8c <manageTemperatureEvent+0x13a>
     f8a:	46 c0       	rjmp	.+140    	; 0x1018 <manageTemperatureEvent+0x1c6>

		if (sh == 5){
     f8c:	45 30       	cpi	r20, 0x05	; 5
     f8e:	f1 f4       	brne	.+60     	; 0xfcc <manageTemperatureEvent+0x17a>
			if(temper[N_SUPPLY] != TEMPER_BAD && temper[N_RETURN] != TEMPER_BAD) {
				inTA = (rTempDiffSupplyReturnMin + rTempDiffSupplyReturnMax)/2;
     f90:	40 91 79 03 	lds	r20, 0x0379
     f94:	80 91 3d 03 	lds	r24, 0x033D
     f98:	99 27       	eor	r25, r25
     f9a:	87 fd       	sbrc	r24, 7
     f9c:	90 95       	com	r25
				i = temper[N_SUPPLY] - temper[N_RETURN];
     f9e:	62 2f       	mov	r22, r18
     fa0:	63 1b       	sub	r22, r19
				if( i > rTempDiffSupplyReturnMax) sh = 0;
     fa2:	26 2f       	mov	r18, r22
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	82 17       	cp	r24, r18
     fa8:	93 07       	cpc	r25, r19
     faa:	e4 f0       	brlt	.+56     	; 0xfe4 <manageTemperatureEvent+0x192>
			else if (sh != 4) sh = 3;
		} else if(temper[N_SUPPLY] == TEMPER_BAD || temper[N_RETURN] == TEMPER_BAD) sh = 0;

		if (sh == 5){
			if(temper[N_SUPPLY] != TEMPER_BAD && temper[N_RETURN] != TEMPER_BAD) {
				inTA = (rTempDiffSupplyReturnMin + rTempDiffSupplyReturnMax)/2;
     fac:	55 27       	eor	r21, r21
     fae:	47 fd       	sbrc	r20, 7
     fb0:	50 95       	com	r21
     fb2:	84 0f       	add	r24, r20
     fb4:	95 1f       	adc	r25, r21
     fb6:	99 23       	and	r25, r25
     fb8:	0c f4       	brge	.+2      	; 0xfbc <manageTemperatureEvent+0x16a>
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	95 95       	asr	r25
     fbe:	87 95       	ror	r24
				i = temper[N_SUPPLY] - temper[N_RETURN];
				if( i > rTempDiffSupplyReturnMax) sh = 0;
				else if( i > inTA ) sh = 1;
     fc0:	86 17       	cp	r24, r22
     fc2:	a0 f0       	brcs	.+40     	; 0xfec <manageTemperatureEvent+0x19a>
				else if(i > rTempDiffSupplyReturnMin) sh = 2;
     fc4:	42 17       	cp	r20, r18
     fc6:	53 07       	cpc	r21, r19
     fc8:	ac f0       	brlt	.+42     	; 0xff4 <manageTemperatureEvent+0x1a2>
     fca:	18 c0       	rjmp	.+48     	; 0xffc <manageTemperatureEvent+0x1aa>
				else sh = 3;
			}	//if(temper[N_SUPPLY] != TEMPER_BAD && temper[N_RETURN] != TEMPER_BAD) {
		} // if (sh == 5)

		switch (sh){
     fcc:	42 30       	cpi	r20, 0x02	; 2
     fce:	91 f0       	breq	.+36     	; 0xff4 <manageTemperatureEvent+0x1a2>
     fd0:	28 f4       	brcc	.+10     	; 0xfdc <manageTemperatureEvent+0x18a>
     fd2:	44 23       	and	r20, r20
     fd4:	39 f0       	breq	.+14     	; 0xfe4 <manageTemperatureEvent+0x192>
     fd6:	41 30       	cpi	r20, 0x01	; 1
     fd8:	49 f0       	breq	.+18     	; 0xfec <manageTemperatureEvent+0x19a>
     fda:	20 c0       	rjmp	.+64     	; 0x101c <manageTemperatureEvent+0x1ca>
     fdc:	43 30       	cpi	r20, 0x03	; 3
     fde:	71 f0       	breq	.+28     	; 0xffc <manageTemperatureEvent+0x1aa>
     fe0:	44 30       	cpi	r20, 0x04	; 4
     fe2:	e1 f4       	brne	.+56     	; 0x101c <manageTemperatureEvent+0x1ca>
		case	0:
		case	4:
			cbi(VALVE_PORT, VALVE_PIN3XVALVE);
     fe4:	43 98       	cbi	0x08, 3	; 8
			sbi(PUMP0_PORT, PUMP0_PIN0);
     fe6:	45 9a       	sbi	0x08, 5	; 8
			sbi(PUMP0_PORT, PUMP0_PIN1);
     fe8:	44 9a       	sbi	0x08, 4	; 8
			break;
     fea:	18 c0       	rjmp	.+48     	; 0x101c <manageTemperatureEvent+0x1ca>
		case	1:
			sbi(PUMP0_PORT, PUMP0_PIN0);
     fec:	45 9a       	sbi	0x08, 5	; 8
			cbi(VALVE_PORT, VALVE_PIN3XVALVE);
     fee:	43 98       	cbi	0x08, 3	; 8
			cbi(PUMP0_PORT, PUMP0_PIN1);
     ff0:	44 98       	cbi	0x08, 4	; 8
			break;
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <manageTemperatureEvent+0x1ca>
		case	2:
			cbi(PUMP0_PORT, PUMP0_PIN0);
     ff4:	45 98       	cbi	0x08, 5	; 8
			cbi(VALVE_PORT, VALVE_PIN3XVALVE);
     ff6:	43 98       	cbi	0x08, 3	; 8
			cbi(PUMP0_PORT, PUMP0_PIN1);
     ff8:	44 98       	cbi	0x08, 4	; 8
			break;
     ffa:	10 c0       	rjmp	.+32     	; 0x101c <manageTemperatureEvent+0x1ca>
		case	3:
			sbi(PUMP0_PORT, PUMP0_PIN0);
     ffc:	45 9a       	sbi	0x08, 5	; 8
			sbi(VALVE_PORT, VALVE_PIN3XVALVE);
     ffe:	43 9a       	sbi	0x08, 3	; 8
			cbi(PUMP0_PORT, PUMP0_PIN1);
    1000:	44 98       	cbi	0x08, 4	; 8
			break;
    1002:	0c c0       	rjmp	.+24     	; 0x101c <manageTemperatureEvent+0x1ca>
				temper[N_INDOOR] == TEMPER_BAD) sh = 4;

	}

		if(temper[N_INDOOR] != TEMPER_BAD){
			if (temper[N_INDOOR] <= rTempInDoorMin) sh = 0;
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	e2 cf       	rjmp	.-60     	; 0xfcc <manageTemperatureEvent+0x17a>
			else if (temper[N_INDOOR] <= inTA) sh = 1;
    1008:	41 e0       	ldi	r20, 0x01	; 1
    100a:	e0 cf       	rjmp	.-64     	; 0xfcc <manageTemperatureEvent+0x17a>
			else if (temper[N_INDOOR] <= rTempInDoorMax) sh = 2;
    100c:	42 e0       	ldi	r20, 0x02	; 2
    100e:	de cf       	rjmp	.-68     	; 0xfcc <manageTemperatureEvent+0x17a>
			else if (sh != 4) sh = 3;
    1010:	43 e0       	ldi	r20, 0x03	; 3
    1012:	dc cf       	rjmp	.-72     	; 0xfcc <manageTemperatureEvent+0x17a>
		} else if(temper[N_SUPPLY] == TEMPER_BAD || temper[N_RETURN] == TEMPER_BAD) sh = 0;
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	da cf       	rjmp	.-76     	; 0xfcc <manageTemperatureEvent+0x17a>
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	d8 cf       	rjmp	.-80     	; 0xfcc <manageTemperatureEvent+0x17a>
			sbi(PUMP0_PORT, PUMP0_PIN0);
			sbi(VALVE_PORT, VALVE_PIN3XVALVE);
			cbi(PUMP0_PORT, PUMP0_PIN1);
			break;
		}
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <ValidSensorCode>:
}
//
char ValidSensorCode(uint8_t* sensorID){
	uint8_t l;
	for (l = 0; l < OW_ROMCODE_SIZE; l++){
		if(sensorID[l] == 0xff || sensorID[l] == 0x00) continue;
    1026:	fc 01       	movw	r30, r24
    1028:	20 81       	ld	r18, Z
    102a:	21 50       	subi	r18, 0x01	; 1
    102c:	2e 3f       	cpi	r18, 0xFE	; 254
    102e:	48 f0       	brcs	.+18     	; 0x1042 <ValidSensorCode+0x1c>
    1030:	31 96       	adiw	r30, 0x01	; 1
    1032:	87 e0       	ldi	r24, 0x07	; 7
    1034:	91 91       	ld	r25, Z+
    1036:	91 50       	subi	r25, 0x01	; 1
    1038:	9e 3f       	cpi	r25, 0xFE	; 254
    103a:	28 f0       	brcs	.+10     	; 0x1046 <ValidSensorCode+0x20>
    103c:	81 50       	subi	r24, 0x01	; 1
		}
}
//
char ValidSensorCode(uint8_t* sensorID){
	uint8_t l;
	for (l = 0; l < OW_ROMCODE_SIZE; l++){
    103e:	d1 f7       	brne	.-12     	; 0x1034 <ValidSensorCode+0xe>
    1040:	04 c0       	rjmp	.+8      	; 0x104a <ValidSensorCode+0x24>
		if(sensorID[l] == 0xff || sensorID[l] == 0x00) continue;
		else return 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	08 95       	ret
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	08 95       	ret
	}
	return 0;
    104a:	80 e0       	ldi	r24, 0x00	; 0
}
    104c:	08 95       	ret

0000104e <checkPresenceSN>:
//	 else sn_presence[k] = TRUE;
    } //for ( k = 0; k < MAXSENSORS; k++ )
	return 99;
}
//
char checkPresenceSN(){
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	c0 e0       	ldi	r28, 0x00	; 0
    1064:	d0 e0       	ldi	r29, 0x00	; 0
    1066:	00 e0       	ldi	r16, 0x00	; 0
    1068:	10 e0       	ldi	r17, 0x00	; 0
	char retcode;
	uint8_t i,k;

	k = 0;
    106a:	d1 2c       	mov	r13, r1
	retcode = 1;
    106c:	cc 24       	eor	r12, r12
    106e:	c3 94       	inc	r12
	for ( i = 0; i < MAXSENSORS; i++ ) {
		if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
			if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) == TEMPER_BAD)
				retcode = 0;
    1070:	a1 2c       	mov	r10, r1
			else sn_presence[i] = TRUE;
    1072:	bb 24       	eor	r11, r11
    1074:	b3 94       	inc	r11
	uint8_t i,k;

	k = 0;
	retcode = 1;
	for ( i = 0; i < MAXSENSORS; i++ ) {
		if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
    1076:	e0 90 64 03 	lds	r14, 0x0364
    107a:	f0 90 65 03 	lds	r15, 0x0365
    107e:	ec 0e       	add	r14, r28
    1080:	fd 1e       	adc	r15, r29
    1082:	c7 01       	movw	r24, r14
    1084:	0e 94 13 08 	call	0x1026	; 0x1026 <ValidSensorCode>
    1088:	88 23       	and	r24, r24
    108a:	b1 f0       	breq	.+44     	; 0x10b8 <checkPresenceSN+0x6a>
			if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) == TEMPER_BAD)
    108c:	c7 01       	movw	r24, r14
    108e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <getTemperature>
    1092:	f8 01       	movw	r30, r16
    1094:	e2 5c       	subi	r30, 0xC2	; 194
    1096:	fc 4f       	sbci	r31, 0xFC	; 252
    1098:	80 83       	st	Z, r24
    109a:	8f 37       	cpi	r24, 0x7F	; 127
    109c:	29 f0       	breq	.+10     	; 0x10a8 <checkPresenceSN+0x5a>
    109e:	f8 01       	movw	r30, r16
    10a0:	ea 52       	subi	r30, 0x2A	; 42
    10a2:	fd 4f       	sbci	r31, 0xFD	; 253
				retcode = 0;
			else sn_presence[i] = TRUE;
    10a4:	b0 82       	st	Z, r11
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <checkPresenceSN+0x5c>
	k = 0;
	retcode = 1;
	for ( i = 0; i < MAXSENSORS; i++ ) {
		if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
			if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) == TEMPER_BAD)
				retcode = 0;
    10a8:	ca 2c       	mov	r12, r10
    10aa:	8f e6       	ldi	r24, 0x6F	; 111
    10ac:	97 e1       	ldi	r25, 0x17	; 23
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <checkPresenceSN+0x60>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <checkPresenceSN+0x66>
    10b4:	00 00       	nop
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <checkPresenceSN+0x6c>
			else sn_presence[i] = TRUE;
			_delay_ms(3);
		} else k++;
    10b8:	d3 94       	inc	r13
    10ba:	0f 5f       	subi	r16, 0xFF	; 255
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	28 96       	adiw	r28, 0x08	; 8
	char retcode;
	uint8_t i,k;

	k = 0;
	retcode = 1;
	for ( i = 0; i < MAXSENSORS; i++ ) {
    10c0:	c0 32       	cpi	r28, 0x20	; 32
    10c2:	d1 05       	cpc	r29, r1
    10c4:	c1 f6       	brne	.-80     	; 0x1076 <checkPresenceSN+0x28>
				retcode = 0;
			else sn_presence[i] = TRUE;
			_delay_ms(3);
		} else k++;
	}
	if(k > 0) return 0;
    10c6:	dd 20       	and	r13, r13
    10c8:	11 f0       	breq	.+4      	; 0x10ce <checkPresenceSN+0x80>
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <checkPresenceSN+0x82>
    10ce:	8c 2d       	mov	r24, r12
	return retcode;
}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	08 95       	ret

000010e6 <manage_new_sensors>:

//
// Return TRUE if exit from PHASE
//

uint8_t manage_new_sensors(char ch){
    10e6:	2f 92       	push	r2
    10e8:	3f 92       	push	r3
    10ea:	4f 92       	push	r4
    10ec:	5f 92       	push	r5
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	00 d0       	rcall	.+0      	; 0x110c <manage_new_sensors+0x26>
    110c:	00 d0       	rcall	.+0      	; 0x110e <manage_new_sensors+0x28>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
	uint8_t sensID, l, val;
	int8_t retcode, i, fl4, fl3;

	switch(nwSen_Phase){
    1112:	90 91 d1 02 	lds	r25, 0x02D1
    1116:	92 30       	cpi	r25, 0x02	; 2
    1118:	09 f4       	brne	.+2      	; 0x111c <manage_new_sensors+0x36>
    111a:	a2 c0       	rjmp	.+324    	; 0x1260 <manage_new_sensors+0x17a>
    111c:	28 f4       	brcc	.+10     	; 0x1128 <manage_new_sensors+0x42>
    111e:	99 23       	and	r25, r25
    1120:	51 f0       	breq	.+20     	; 0x1136 <manage_new_sensors+0x50>
    1122:	91 30       	cpi	r25, 0x01	; 1
    1124:	79 f0       	breq	.+30     	; 0x1144 <manage_new_sensors+0x5e>
    1126:	7a c1       	rjmp	.+756    	; 0x141c <manage_new_sensors+0x336>
    1128:	93 30       	cpi	r25, 0x03	; 3
    112a:	09 f4       	brne	.+2      	; 0x112e <manage_new_sensors+0x48>
    112c:	33 c1       	rjmp	.+614    	; 0x1394 <manage_new_sensors+0x2ae>
    112e:	95 30       	cpi	r25, 0x05	; 5
    1130:	09 f4       	brne	.+2      	; 0x1134 <manage_new_sensors+0x4e>
    1132:	61 c1       	rjmp	.+706    	; 0x13f6 <manage_new_sensors+0x310>
    1134:	73 c1       	rjmp	.+742    	; 0x141c <manage_new_sensors+0x336>
	case REORDER_NWSENS:
		kg = 0;
    1136:	10 92 cb 02 	sts	0x02CB, r1
		nwSen_Phase = REORDER_NWSENS2;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 d1 02 	sts	0x02D1, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1140:	80 e0       	ldi	r24, 0x00	; 0

	switch(nwSen_Phase){
	case REORDER_NWSENS:
		kg = 0;
		nwSen_Phase = REORDER_NWSENS2;
	break;
    1142:	77 c1       	rjmp	.+750    	; 0x1432 <manage_new_sensors+0x34c>

	case REORDER_NWSENS2:
	 if(ValidSensorCode((uint8_t*) &gSensorIDs[kg])){
    1144:	30 90 cb 02 	lds	r3, 0x02CB
    1148:	03 2d       	mov	r16, r3
    114a:	11 27       	eor	r17, r17
    114c:	07 fd       	sbrc	r16, 7
    114e:	10 95       	com	r17
    1150:	c8 01       	movw	r24, r16
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	9c 01       	movw	r18, r24
    1160:	26 55       	subi	r18, 0x56	; 86
    1162:	3d 4f       	sbci	r19, 0xFD	; 253
    1164:	69 01       	movw	r12, r18
    1166:	c9 01       	movw	r24, r18
    1168:	0e 94 13 08 	call	0x1026	; 0x1026 <ValidSensorCode>
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <manage_new_sensors+0x8c>
    1170:	57 c1       	rjmp	.+686    	; 0x1420 <manage_new_sensors+0x33a>
    1172:	e0 90 64 03 	lds	r14, 0x0364
    1176:	f0 90 65 03 	lds	r15, 0x0365
    117a:	0f 2e       	mov	r0, r31
    117c:	fa ea       	ldi	r31, 0xAA	; 170
    117e:	8f 2e       	mov	r8, r31
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	9f 2e       	mov	r9, r31
    1184:	f0 2d       	mov	r31, r0
    1186:	0f 2e       	mov	r0, r31
    1188:	f6 ed       	ldi	r31, 0xD6	; 214
    118a:	af 2e       	mov	r10, r31
    118c:	f2 e0       	ldi	r31, 0x02	; 2
    118e:	bf 2e       	mov	r11, r31
    1190:	f0 2d       	mov	r31, r0
    1192:	0f 2e       	mov	r0, r31
    1194:	fa ec       	ldi	r31, 0xCA	; 202
    1196:	6f 2e       	mov	r6, r31
    1198:	f2 e0       	ldi	r31, 0x02	; 2
    119a:	7f 2e       	mov	r7, r31
    119c:	f0 2d       	mov	r31, r0
	  fl4 = 1;
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[kg],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
    119e:	bc 82       	std	Y+4, r11	; 0x04
    11a0:	ab 82       	std	Y+3, r10	; 0x03
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	a1 e0       	ldi	r26, 0x01	; 1
    11a8:	a9 83       	std	Y+1, r26	; 0x01
    11aa:	26 01       	movw	r4, r12
			else fl3 = FALSE;
			for (l = 0; l < OW_ROMCODE_SIZE; l++){
				sensID = gSensorIDs[i][l];
				gSensorIDs[i][l] = gSensorIDs[kg][l];
				val = sn_presence[i];
				sn_presence[i] = sn_presence[kg];
    11ac:	0a 52       	subi	r16, 0x2A	; 42
    11ae:	1d 4f       	sbci	r17, 0xFD	; 253
				} else {
					gSensorIDs[kg][l] = sensID;
					sn_presence[kg] = val;
				}
			}
			fl4 = 0;
    11b0:	21 2c       	mov	r2, r1
	case REORDER_NWSENS2:
	 if(ValidSensorCode((uint8_t*) &gSensorIDs[kg])){
	  fl4 = 1;
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[kg],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
    11b2:	48 e0       	ldi	r20, 0x08	; 8
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	b7 01       	movw	r22, r14
    11b8:	c6 01       	movw	r24, r12
    11ba:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <memcmp>
    11be:	89 2b       	or	r24, r25
    11c0:	49 f5       	brne	.+82     	; 0x1214 <manage_new_sensors+0x12e>
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	8a 19       	sub	r24, r10
			retcode = 0;
			if (kg == i) break;
    11c6:	38 16       	cp	r3, r24
    11c8:	e9 f1       	breq	.+122    	; 0x1244 <manage_new_sensors+0x15e>
			if(!memcmp(&gSensorIDs[kg],&gSensorIDs[i],OW_ROMCODE_SIZE)) fl3 = TRUE;
    11ca:	48 e0       	ldi	r20, 0x08	; 8
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	b4 01       	movw	r22, r8
    11d0:	c6 01       	movw	r24, r12
    11d2:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <memcmp>
    11d6:	f2 01       	movw	r30, r4
    11d8:	b4 01       	movw	r22, r8
    11da:	28 e0       	ldi	r18, 0x08	; 8
			else fl3 = FALSE;
			for (l = 0; l < OW_ROMCODE_SIZE; l++){
				sensID = gSensorIDs[i][l];
    11dc:	db 01       	movw	r26, r22
    11de:	5c 91       	ld	r21, X
				gSensorIDs[i][l] = gSensorIDs[kg][l];
    11e0:	30 81       	ld	r19, Z
    11e2:	3d 93       	st	X+, r19
    11e4:	bd 01       	movw	r22, r26
				val = sn_presence[i];
    11e6:	ab 81       	ldd	r26, Y+3	; 0x03
    11e8:	bc 81       	ldd	r27, Y+4	; 0x04
    11ea:	4c 91       	ld	r20, X
				sn_presence[i] = sn_presence[kg];
    11ec:	d8 01       	movw	r26, r16
    11ee:	3c 91       	ld	r19, X
    11f0:	ab 81       	ldd	r26, Y+3	; 0x03
    11f2:	bc 81       	ldd	r27, Y+4	; 0x04
    11f4:	3c 93       	st	X, r19

				if(fl3){
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	21 f4       	brne	.+8      	; 0x1202 <manage_new_sensors+0x11c>
					gSensorIDs[kg][l] = 0;
    11fa:	10 82       	st	Z, r1
					sn_presence[kg] = 0;
    11fc:	d8 01       	movw	r26, r16
    11fe:	1c 92       	st	X, r1
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <manage_new_sensors+0x122>
				} else {
					gSensorIDs[kg][l] = sensID;
    1202:	50 83       	st	Z, r21
					sn_presence[kg] = val;
    1204:	d8 01       	movw	r26, r16
    1206:	4c 93       	st	X, r20
    1208:	21 50       	subi	r18, 0x01	; 1
    120a:	31 96       	adiw	r30, 0x01	; 1
		if(!memcmp(&gSensorIDs[kg],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
			retcode = 0;
			if (kg == i) break;
			if(!memcmp(&gSensorIDs[kg],&gSensorIDs[i],OW_ROMCODE_SIZE)) fl3 = TRUE;
			else fl3 = FALSE;
			for (l = 0; l < OW_ROMCODE_SIZE; l++){
    120c:	21 11       	cpse	r18, r1
    120e:	e6 cf       	rjmp	.-52     	; 0x11dc <manage_new_sensors+0xf6>
				} else {
					gSensorIDs[kg][l] = sensID;
					sn_presence[kg] = val;
				}
			}
			fl4 = 0;
    1210:	2a 82       	std	Y+2, r2	; 0x02
	 if(ValidSensorCode((uint8_t*) &gSensorIDs[kg])){
	  fl4 = 1;
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
		if(!memcmp(&gSensorIDs[kg],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE)){
			retcode = 0;
    1212:	29 82       	std	Y+1, r2	; 0x01
    1214:	b8 e0       	ldi	r27, 0x08	; 8
    1216:	eb 0e       	add	r14, r27
    1218:	f1 1c       	adc	r15, r1
    121a:	e8 e0       	ldi	r30, 0x08	; 8
    121c:	8e 0e       	add	r8, r30
    121e:	91 1c       	adc	r9, r1
    1220:	2b 81       	ldd	r18, Y+3	; 0x03
    1222:	3c 81       	ldd	r19, Y+4	; 0x04
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	3c 83       	std	Y+4, r19	; 0x04
    122a:	2b 83       	std	Y+3, r18	; 0x03

	case REORDER_NWSENS2:
	 if(ValidSensorCode((uint8_t*) &gSensorIDs[kg])){
	  fl4 = 1;
	  retcode = 1;
	  for ( i = 0; i < MAXSENSORS; i++ ) {
    122c:	86 14       	cp	r8, r6
    122e:	97 04       	cpc	r9, r7
    1230:	09 f0       	breq	.+2      	; 0x1234 <manage_new_sensors+0x14e>
    1232:	bf cf       	rjmp	.-130    	; 0x11b2 <manage_new_sensors+0xcc>
				}
			}
			fl4 = 0;
		}	// if(memcmp(&gSensorIDs[i],&rSensorIDs[i],OW_ROMCODE_SIZE))
	  }	// for ( i = 0; i < MAXSENSORS; i++ )
	  if(retcode != 0) nwSen_Phase = ASSIGN_NEWSENS;
    1234:	39 81       	ldd	r19, Y+1	; 0x01
    1236:	33 23       	and	r19, r19
    1238:	29 f0       	breq	.+10     	; 0x1244 <manage_new_sensors+0x15e>
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	80 93 d1 02 	sts	0x02D1, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	f7 c0       	rjmp	.+494    	; 0x1432 <manage_new_sensors+0x34c>
			fl4 = 0;
		}	// if(memcmp(&gSensorIDs[i],&rSensorIDs[i],OW_ROMCODE_SIZE))
	  }	// for ( i = 0; i < MAXSENSORS; i++ )
	  if(retcode != 0) nwSen_Phase = ASSIGN_NEWSENS;
	  else {
		 if(fl4){
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	88 23       	and	r24, r24
    1248:	09 f4       	brne	.+2      	; 0x124c <manage_new_sensors+0x166>
    124a:	ec c0       	rjmp	.+472    	; 0x1424 <manage_new_sensors+0x33e>
			 if (kg < MAXSENSORS - 1) kg++;
    124c:	80 91 cb 02 	lds	r24, 0x02CB
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	0c f0       	brlt	.+2      	; 0x1256 <manage_new_sensors+0x170>
    1254:	e9 c0       	rjmp	.+466    	; 0x1428 <manage_new_sensors+0x342>
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	80 93 cb 02 	sts	0x02CB, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	e9 c0       	rjmp	.+466    	; 0x1432 <manage_new_sensors+0x34c>
	  }
	 } else return 1;
	break;
	case ASSIGN_NEWSENS:
		 // new sensor found
			 LCD_CLEAR();
    1260:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
			 //printf_P(PSTR("\n%S %S"),setStr,assignStr);
             printf("%02X%02X%02X%02X%02X%02X%02X",
                      gSensorIDs[kg][0],\
                      gSensorIDs[kg][1],gSensorIDs[kg][2],\
                      gSensorIDs[kg][3],gSensorIDs[kg][4],\
                      gSensorIDs[kg][5],gSensorIDs[kg][6]);
    1264:	e0 91 cb 02 	lds	r30, 0x02CB
    1268:	98 e0       	ldi	r25, 0x08	; 8
    126a:	e9 02       	muls	r30, r25
    126c:	f0 01       	movw	r30, r0
    126e:	11 24       	eor	r1, r1
    1270:	e6 55       	subi	r30, 0x56	; 86
    1272:	fd 4f       	sbci	r31, 0xFD	; 253
	case ASSIGN_NEWSENS:
		 // new sensor found
			 LCD_CLEAR();
			 //printf_P(PSTR("%s"),&gSensorIDs[kg]);
			 //printf_P(PSTR("\n%S %S"),setStr,assignStr);
             printf("%02X%02X%02X%02X%02X%02X%02X",
    1274:	86 81       	ldd	r24, Z+6	; 0x06
    1276:	1f 92       	push	r1
    1278:	8f 93       	push	r24
    127a:	85 81       	ldd	r24, Z+5	; 0x05
    127c:	1f 92       	push	r1
    127e:	8f 93       	push	r24
    1280:	84 81       	ldd	r24, Z+4	; 0x04
    1282:	1f 92       	push	r1
    1284:	8f 93       	push	r24
    1286:	83 81       	ldd	r24, Z+3	; 0x03
    1288:	1f 92       	push	r1
    128a:	8f 93       	push	r24
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	1f 92       	push	r1
    1290:	8f 93       	push	r24
    1292:	81 81       	ldd	r24, Z+1	; 0x01
    1294:	1f 92       	push	r1
    1296:	8f 93       	push	r24
    1298:	80 81       	ld	r24, Z
    129a:	1f 92       	push	r1
    129c:	8f 93       	push	r24
    129e:	8c e2       	ldi	r24, 0x2C	; 44
    12a0:	92 e0       	ldi	r25, 0x02	; 2
    12a2:	9f 93       	push	r25
    12a4:	8f 93       	push	r24
    12a6:	0e 94 1d 2b 	call	0x563a	; 0x563a <printf>
                      gSensorIDs[kg][3],gSensorIDs[kg][4],\
                      gSensorIDs[kg][5],gSensorIDs[kg][6]);
#ifdef SN_SENSOR_SIZE
             printf_P(PSTR("%S %S"),setStr,assignStr);
#else
             printf_P(PSTR("\n%S %S"),setStr,assignStr);
    12aa:	8a e8       	ldi	r24, 0x8A	; 138
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	9f 93       	push	r25
    12b0:	8f 93       	push	r24
    12b2:	87 e9       	ldi	r24, 0x97	; 151
    12b4:	94 e0       	ldi	r25, 0x04	; 4
    12b6:	9f 93       	push	r25
    12b8:	8f 93       	push	r24
    12ba:	8d e0       	ldi	r24, 0x0D	; 13
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	9f 93       	push	r25
    12c0:	8f 93       	push	r24
    12c2:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
#endif
			 if(!sn_presence[0]) printf_P(PSTR("\n%i-%S"),0,indoorStr);
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	80 91 d6 02 	lds	r24, 0x02D6
    12d4:	81 11       	cpse	r24, r1
    12d6:	12 c0       	rjmp	.+36     	; 0x12fc <manage_new_sensors+0x216>
    12d8:	89 ec       	ldi	r24, 0xC9	; 201
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	9f 93       	push	r25
    12de:	8f 93       	push	r24
    12e0:	1f 92       	push	r1
    12e2:	1f 92       	push	r1
    12e4:	86 e0       	ldi	r24, 0x06	; 6
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	9f 93       	push	r25
    12ea:	8f 93       	push	r24
    12ec:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
			 if(!sn_presence[1]) printf_P(PSTR("\n%i-%S"),1,outdoorStr);
    12fc:	80 91 d7 02 	lds	r24, 0x02D7
    1300:	81 11       	cpse	r24, r1
    1302:	13 c0       	rjmp	.+38     	; 0x132a <manage_new_sensors+0x244>
    1304:	81 ec       	ldi	r24, 0xC1	; 193
    1306:	94 e0       	ldi	r25, 0x04	; 4
    1308:	9f 93       	push	r25
    130a:	8f 93       	push	r24
    130c:	1f 92       	push	r1
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	8f 93       	push	r24
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9f 93       	push	r25
    1318:	8f 93       	push	r24
    131a:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
			 if(!sn_presence[2]) printf_P(PSTR("\n%i-%S"),2,supplyStr);
    132a:	80 91 d8 02 	lds	r24, 0x02D8
    132e:	81 11       	cpse	r24, r1
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <manage_new_sensors+0x272>
    1332:	8a eb       	ldi	r24, 0xBA	; 186
    1334:	94 e0       	ldi	r25, 0x04	; 4
    1336:	9f 93       	push	r25
    1338:	8f 93       	push	r24
    133a:	1f 92       	push	r1
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	8f 93       	push	r24
    1340:	88 ef       	ldi	r24, 0xF8	; 248
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9f 93       	push	r25
    1346:	8f 93       	push	r24
    1348:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
			 if(!sn_presence[3]) printf_P(PSTR("\n%i-%S"),3,returnStr);
    1358:	80 91 d9 02 	lds	r24, 0x02D9
    135c:	81 11       	cpse	r24, r1
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <manage_new_sensors+0x2a0>
    1360:	83 eb       	ldi	r24, 0xB3	; 179
    1362:	94 e0       	ldi	r25, 0x04	; 4
    1364:	9f 93       	push	r25
    1366:	8f 93       	push	r24
    1368:	1f 92       	push	r1
    136a:	83 e0       	ldi	r24, 0x03	; 3
    136c:	8f 93       	push	r24
    136e:	81 ef       	ldi	r24, 0xF1	; 241
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9f 93       	push	r25
    1374:	8f 93       	push	r24
    1376:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
			 LCD_UPDATE();
    1386:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>
			 nwSen_Phase = ASSIGN_NEWSENS2;
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	80 93 d1 02 	sts	0x02D1, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1390:	80 e0       	ldi	r24, 0x00	; 0
			 if(!sn_presence[1]) printf_P(PSTR("\n%i-%S"),1,outdoorStr);
			 if(!sn_presence[2]) printf_P(PSTR("\n%i-%S"),2,supplyStr);
			 if(!sn_presence[3]) printf_P(PSTR("\n%i-%S"),3,returnStr);
			 LCD_UPDATE();
			 nwSen_Phase = ASSIGN_NEWSENS2;
		break;
    1392:	4f c0       	rjmp	.+158    	; 0x1432 <manage_new_sensors+0x34c>
	case ASSIGN_NEWSENS2:
		 	 switch(ch){
    1394:	90 ed       	ldi	r25, 0xD0	; 208
    1396:	98 0f       	add	r25, r24
    1398:	94 30       	cpi	r25, 0x04	; 4
    139a:	08 f0       	brcs	.+2      	; 0x139e <manage_new_sensors+0x2b8>
    139c:	47 c0       	rjmp	.+142    	; 0x142c <manage_new_sensors+0x346>
		 	 case '0':
		 	 case '1':
		 	 case '2':
		 	 case '3':
		 		 	l = ch - '0';
			 		if(!sn_presence[l]){
    139e:	89 2f       	mov	r24, r25
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	ea 52       	subi	r30, 0x2A	; 42
    13a6:	fd 4f       	sbci	r31, 0xFD	; 253
    13a8:	20 81       	ld	r18, Z
    13aa:	21 11       	cpse	r18, r1
    13ac:	1f c0       	rjmp	.+62     	; 0x13ec <manage_new_sensors+0x306>
			 			memcpy((uint8_t*)(rSensorIDs + l * OW_ROMCODE_SIZE),&gSensorIDs[kg][0],OW_ROMCODE_SIZE);
    13ae:	9c 01       	movw	r18, r24
    13b0:	22 0f       	add	r18, r18
    13b2:	33 1f       	adc	r19, r19
    13b4:	22 0f       	add	r18, r18
    13b6:	33 1f       	adc	r19, r19
    13b8:	22 0f       	add	r18, r18
    13ba:	33 1f       	adc	r19, r19
    13bc:	a0 91 64 03 	lds	r26, 0x0364
    13c0:	b0 91 65 03 	lds	r27, 0x0365
    13c4:	a2 0f       	add	r26, r18
    13c6:	b3 1f       	adc	r27, r19
    13c8:	e0 91 cb 02 	lds	r30, 0x02CB
    13cc:	28 e0       	ldi	r18, 0x08	; 8
    13ce:	e2 02       	muls	r30, r18
    13d0:	f0 01       	movw	r30, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	e6 55       	subi	r30, 0x56	; 86
    13d6:	fd 4f       	sbci	r31, 0xFD	; 253
    13d8:	28 e0       	ldi	r18, 0x08	; 8
    13da:	01 90       	ld	r0, Z+
    13dc:	0d 92       	st	X+, r0
    13de:	2a 95       	dec	r18
    13e0:	e1 f7       	brne	.-8      	; 0x13da <manage_new_sensors+0x2f4>
			 			sn_presence[l] = TRUE;
    13e2:	fc 01       	movw	r30, r24
    13e4:	ea 52       	subi	r30, 0x2A	; 42
    13e6:	fd 4f       	sbci	r31, 0xFD	; 253
    13e8:	21 e0       	ldi	r18, 0x01	; 1
    13ea:	20 83       	st	Z, r18
			 		}
		 		 nwSen_Phase = ASSIGN_TOEEPROM;
    13ec:	85 e0       	ldi	r24, 0x05	; 5
    13ee:	80 93 d1 02 	sts	0x02D1, r24
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    13f2:	80 e0       	ldi	r24, 0x00	; 0
			 		if(!sn_presence[l]){
			 			memcpy((uint8_t*)(rSensorIDs + l * OW_ROMCODE_SIZE),&gSensorIDs[kg][0],OW_ROMCODE_SIZE);
			 			sn_presence[l] = TRUE;
			 		}
		 		 nwSen_Phase = ASSIGN_TOEEPROM;
			 	 break;
    13f4:	1e c0       	rjmp	.+60     	; 0x1432 <manage_new_sensors+0x34c>

		 	 }
	break;
	case ASSIGN_TOEEPROM:
		eeprom_update_block((void *)rSensorIDs , (void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	6f e0       	ldi	r22, 0x0F	; 15
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	80 91 64 03 	lds	r24, 0x0364
    1402:	90 91 65 03 	lds	r25, 0x0365
    1406:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <__eeupd_block_m328p>
	 	 if (kg < MAXSENSORS - 1)
    140a:	80 91 cb 02 	lds	r24, 0x02CB
    140e:	83 30       	cpi	r24, 0x03	; 3
    1410:	7c f4       	brge	.+30     	; 0x1430 <manage_new_sensors+0x34a>
	 		 nwSen_Phase = REORDER_NWSENS2;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	80 93 d1 02 	sts	0x02D1, r24
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1418:	80 e0       	ldi	r24, 0x00	; 0
	case ASSIGN_TOEEPROM:
		eeprom_update_block((void *)rSensorIDs , (void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
    141a:	0b c0       	rjmp	.+22     	; 0x1432 <manage_new_sensors+0x34c>
	} // switch(nwSen_Phase){
	return 0;
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	09 c0       	rjmp	.+18     	; 0x1432 <manage_new_sensors+0x34c>
		 if(fl4){
			 if (kg < MAXSENSORS - 1) kg++;
			 else if(retcode == 0) return 1;
		 }
	  }
	 } else return 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	07 c0       	rjmp	.+14     	; 0x1432 <manage_new_sensors+0x34c>
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	05 c0       	rjmp	.+10     	; 0x1432 <manage_new_sensors+0x34c>
	  }	// for ( i = 0; i < MAXSENSORS; i++ )
	  if(retcode != 0) nwSen_Phase = ASSIGN_NEWSENS;
	  else {
		 if(fl4){
			 if (kg < MAXSENSORS - 1) kg++;
			 else if(retcode == 0) return 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <manage_new_sensors+0x34c>
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
		break;
	} // switch(nwSen_Phase){
	return 0;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <manage_new_sensors+0x34c>
	break;
	case ASSIGN_TOEEPROM:
		eeprom_update_block((void *)rSensorIDs , (void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	 	 if (kg < MAXSENSORS - 1)
	 		 nwSen_Phase = REORDER_NWSENS2;
		else return 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} // switch(nwSen_Phase){
	return 0;

}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	bf 90       	pop	r11
    144c:	af 90       	pop	r10
    144e:	9f 90       	pop	r9
    1450:	8f 90       	pop	r8
    1452:	7f 90       	pop	r7
    1454:	6f 90       	pop	r6
    1456:	5f 90       	pop	r5
    1458:	4f 90       	pop	r4
    145a:	3f 90       	pop	r3
    145c:	2f 90       	pop	r2
    145e:	08 95       	ret

00001460 <resetSensNumber>:
	noready_sens[sensNumber] = FALSE;
	resetSensNumber(sensNumber);

}
//
void resetSensNumber(uint8_t sensNumber){
    1460:	28 e0       	ldi	r18, 0x08	; 8
    1462:	82 9f       	mul	r24, r18
    1464:	c0 01       	movw	r24, r0
    1466:	11 24       	eor	r1, r1
    1468:	fc 01       	movw	r30, r24
    146a:	e6 55       	subi	r30, 0x56	; 86
    146c:	fd 4f       	sbci	r31, 0xFD	; 253
	int8_t i;
	for(i = 0;i < OW_ROMCODE_SIZE; i++)
    146e:	80 e0       	ldi	r24, 0x00	; 0
		gSensorIDs[sensNumber][i] = 0x00;
    1470:	11 92       	st	Z+, r1

}
//
void resetSensNumber(uint8_t sensNumber){
	int8_t i;
	for(i = 0;i < OW_ROMCODE_SIZE; i++)
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	e1 f7       	brne	.-8      	; 0x1470 <resetSensNumber+0x10>
		gSensorIDs[sensNumber][i] = 0x00;
}
    1478:	08 95       	ret

0000147a <sms_noready_sens>:
		else return 1;
	}
	return 0;
}
//
void sms_noready_sens(uint8_t sensNumber){
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	b8 2e       	mov	r11, r24
	size_t size;
	SMS *psms;
	size = sizeof(SMS)+1;
	if((psms = (SMS*)malloc(size)) != NULL){
    148e:	8f ec       	ldi	r24, 0xCF	; 207
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 1e 29 	call	0x523c	; 0x523c <malloc>
    1496:	ec 01       	movw	r28, r24
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	09 f4       	brne	.+2      	; 0x149e <sms_noready_sens+0x24>
    149c:	7d c0       	rjmp	.+250    	; 0x1598 <sms_noready_sens+0x11e>
		strncpy(psms->number, telNumber, SMSlenNumber);
    149e:	6c 01       	movw	r12, r24
    14a0:	80 ea       	ldi	r24, 0xA0	; 160
    14a2:	c8 0e       	add	r12, r24
    14a4:	d1 1c       	adc	r13, r1
    14a6:	44 e1       	ldi	r20, 0x14	; 20
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	67 e6       	ldi	r22, 0x67	; 103
    14ac:	73 e0       	ldi	r23, 0x03	; 3
    14ae:	c6 01       	movw	r24, r12
    14b0:	0e 94 a0 2a 	call	0x5540	; 0x5540 <strncpy>
		//strncpy_P(wbuffer, notReadyStr, LCD_COLUMN_NUMBER);
		//strncat(psms->body, wbuffer, SMSlenBody - strlen(psms->body));
		strncpy_P(psms->body, notReadyStr, SMSlenBody);
    14b4:	40 ea       	ldi	r20, 0xA0	; 160
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	69 eb       	ldi	r22, 0xB9	; 185
    14ba:	73 e0       	ldi	r23, 0x03	; 3
    14bc:	ce 01       	movw	r24, r28
    14be:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <strncpy_P>
		strncpy_P(wbuffer, snStr, WBUFFER_LEN );
    14c2:	4e e1       	ldi	r20, 0x1E	; 30
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	60 ed       	ldi	r22, 0xD0	; 208
    14c8:	74 e0       	ldi	r23, 0x04	; 4
    14ca:	83 e4       	ldi	r24, 0x43	; 67
    14cc:	93 e0       	ldi	r25, 0x03	; 3
    14ce:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <strncpy_P>
		strncat(psms->body, wbuffer, SMSlenBody - strlen(psms->body));
    14d2:	fe 01       	movw	r30, r28
    14d4:	01 90       	ld	r0, Z+
    14d6:	00 20       	and	r0, r0
    14d8:	e9 f7       	brne	.-6      	; 0x14d4 <sms_noready_sens+0x5a>
    14da:	31 97       	sbiw	r30, 0x01	; 1
    14dc:	ec 1b       	sub	r30, r28
    14de:	fd 0b       	sbc	r31, r29
    14e0:	0f 2e       	mov	r0, r31
    14e2:	f0 ea       	ldi	r31, 0xA0	; 160
    14e4:	ef 2e       	mov	r14, r31
    14e6:	f1 2c       	mov	r15, r1
    14e8:	f0 2d       	mov	r31, r0
    14ea:	a7 01       	movw	r20, r14
    14ec:	4e 1b       	sub	r20, r30
    14ee:	5f 0b       	sbc	r21, r31
    14f0:	63 e4       	ldi	r22, 0x43	; 67
    14f2:	73 e0       	ldi	r23, 0x03	; 3
    14f4:	ce 01       	movw	r24, r28
    14f6:	0e 94 90 2a 	call	0x5520	; 0x5520 <strncat>
		sprintf_P(wbuffer,PSTR("%d: "),sensNumber);
    14fa:	1f 92       	push	r1
    14fc:	bf 92       	push	r11
    14fe:	8c ee       	ldi	r24, 0xEC	; 236
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9f 93       	push	r25
    1504:	8f 93       	push	r24
    1506:	03 e4       	ldi	r16, 0x43	; 67
    1508:	13 e0       	ldi	r17, 0x03	; 3
    150a:	1f 93       	push	r17
    150c:	0f 93       	push	r16
    150e:	0e 94 87 2b 	call	0x570e	; 0x570e <sprintf_P>
		strncat(psms->body, wbuffer, SMSlenBody - strlen(psms->body));
    1512:	fe 01       	movw	r30, r28
    1514:	01 90       	ld	r0, Z+
    1516:	00 20       	and	r0, r0
    1518:	e9 f7       	brne	.-6      	; 0x1514 <sms_noready_sens+0x9a>
    151a:	31 97       	sbiw	r30, 0x01	; 1
    151c:	ec 1b       	sub	r30, r28
    151e:	fd 0b       	sbc	r31, r29
    1520:	a7 01       	movw	r20, r14
    1522:	4e 1b       	sub	r20, r30
    1524:	5f 0b       	sbc	r21, r31
    1526:	b8 01       	movw	r22, r16
    1528:	ce 01       	movw	r24, r28
    152a:	0e 94 90 2a 	call	0x5520	; 0x5520 <strncat>
		sprintf_P(wbuffer,PSTR(" at %02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
    152e:	80 91 0f 01 	lds	r24, 0x010F
    1532:	1f 92       	push	r1
    1534:	8f 93       	push	r24
    1536:	80 91 10 01 	lds	r24, 0x0110
    153a:	1f 92       	push	r1
    153c:	8f 93       	push	r24
    153e:	80 91 11 01 	lds	r24, 0x0111
    1542:	1f 92       	push	r1
    1544:	8f 93       	push	r24
    1546:	29 ed       	ldi	r18, 0xD9	; 217
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3f 93       	push	r19
    154c:	2f 93       	push	r18
    154e:	1f 93       	push	r17
    1550:	0f 93       	push	r16
    1552:	0e 94 87 2b 	call	0x570e	; 0x570e <sprintf_P>
		strncat(psms->body, wbuffer, SMSlenBody - strlen(psms->body));
    1556:	fe 01       	movw	r30, r28
    1558:	01 90       	ld	r0, Z+
    155a:	00 20       	and	r0, r0
    155c:	e9 f7       	brne	.-6      	; 0x1558 <sms_noready_sens+0xde>
    155e:	31 97       	sbiw	r30, 0x01	; 1
    1560:	ec 1b       	sub	r30, r28
    1562:	fd 0b       	sbc	r31, r29
    1564:	a7 01       	movw	r20, r14
    1566:	4e 1b       	sub	r20, r30
    1568:	5f 0b       	sbc	r21, r31
    156a:	b8 01       	movw	r22, r16
    156c:	ce 01       	movw	r24, r28
    156e:	0e 94 90 2a 	call	0x5520	; 0x5520 <strncat>
		DO_WATCHDOG();
    1572:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
		gsm_send_sms( psms->number, psms->body, 1 );
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	be 01       	movw	r22, r28
    157c:	c6 01       	movw	r24, r12
    157e:	0e 94 c2 24 	call	0x4984	; 0x4984 <gsm_send_sms>
		free(psms);
    1582:	ce 01       	movw	r24, r28
    1584:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
    1588:	8d b7       	in	r24, 0x3d	; 61
    158a:	9e b7       	in	r25, 0x3e	; 62
    158c:	40 96       	adiw	r24, 0x10	; 16
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	9e bf       	out	0x3e, r25	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	8d bf       	out	0x3d, r24	; 61
	}
	noready_sens[sensNumber] = FALSE;
    1598:	eb 2d       	mov	r30, r11
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	e4 53       	subi	r30, 0x34	; 52
    159e:	fd 4f       	sbci	r31, 0xFD	; 253
    15a0:	10 82       	st	Z, r1
	resetSensNumber(sensNumber);
    15a2:	8b 2d       	mov	r24, r11
    15a4:	0e 94 30 0a 	call	0x1460	; 0x1460 <resetSensNumber>

}
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	08 95       	ret

000015bc <sms_pumpStarted>:
	int8_t i;
	for(i = 0;i < OW_ROMCODE_SIZE; i++)
		gSensorIDs[sensNumber][i] = 0x00;
}

void sms_pumpStarted(){
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
	size_t size;
	SMS *psms;
	size = sizeof(SMS)+1;
	if((psms = (SMS*)malloc(size)) != NULL){
    15c4:	8f ec       	ldi	r24, 0xCF	; 207
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 1e 29 	call	0x523c	; 0x523c <malloc>
    15cc:	ec 01       	movw	r28, r24
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	d1 f0       	breq	.+52     	; 0x1606 <sms_pumpStarted+0x4a>
		strncpy(psms->number, telNumber, SMSlenNumber);
    15d2:	8c 01       	movw	r16, r24
    15d4:	00 56       	subi	r16, 0x60	; 96
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	44 e1       	ldi	r20, 0x14	; 20
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	67 e6       	ldi	r22, 0x67	; 103
    15de:	73 e0       	ldi	r23, 0x03	; 3
    15e0:	c8 01       	movw	r24, r16
    15e2:	0e 94 a0 2a 	call	0x5540	; 0x5540 <strncpy>
		strncpy_P(psms->body, startRegulatorStr, SMSlenBody);
    15e6:	40 ea       	ldi	r20, 0xA0	; 160
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	64 ed       	ldi	r22, 0xD4	; 212
    15ec:	73 e0       	ldi	r23, 0x03	; 3
    15ee:	ce 01       	movw	r24, r28
    15f0:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <strncpy_P>
//		sprintf_P(wbuffer,PSTR(" at %02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
//		strncat(sms.body, wbuffer, sizeof(sms.body) - strlen(sms.body));
		gsm_send_sms( psms->number, psms->body, 2 );
    15f4:	42 e0       	ldi	r20, 0x02	; 2
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	be 01       	movw	r22, r28
    15fa:	c8 01       	movw	r24, r16
    15fc:	0e 94 c2 24 	call	0x4984	; 0x4984 <gsm_send_sms>
		free(psms);
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
	}
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	08 95       	ret

00001610 <sms_powerGone>:
// if((gSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1) != NULL) MAXSENSORS][OW_ROMCODE_SIZE
void sms_powerGone(){
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
	size_t size;
	SMS *psms;
	size = sizeof(SMS)+1;
	if((psms = (SMS*)malloc(size)) != NULL){
    1618:	8f ec       	ldi	r24, 0xCF	; 207
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 1e 29 	call	0x523c	; 0x523c <malloc>
    1620:	ec 01       	movw	r28, r24
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	09 f4       	brne	.+2      	; 0x1628 <sms_powerGone+0x18>
    1626:	46 c0       	rjmp	.+140    	; 0x16b4 <sms_powerGone+0xa4>
		strncpy(psms->number, telNumber, SMSlenNumber);
    1628:	8c 01       	movw	r16, r24
    162a:	00 56       	subi	r16, 0x60	; 96
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	44 e1       	ldi	r20, 0x14	; 20
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	67 e6       	ldi	r22, 0x67	; 103
    1634:	73 e0       	ldi	r23, 0x03	; 3
    1636:	c8 01       	movw	r24, r16
    1638:	0e 94 a0 2a 	call	0x5540	; 0x5540 <strncpy>
		strncpy_P(psms->body, startPowerGoneStr, SMSlenBody);
    163c:	40 ea       	ldi	r20, 0xA0	; 160
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	65 ec       	ldi	r22, 0xC5	; 197
    1642:	73 e0       	ldi	r23, 0x03	; 3
    1644:	ce 01       	movw	r24, r28
    1646:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <strncpy_P>
		sprintf_P(wbuffer,PSTR(" at %02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
    164a:	80 91 0f 01 	lds	r24, 0x010F
    164e:	1f 92       	push	r1
    1650:	8f 93       	push	r24
    1652:	80 91 10 01 	lds	r24, 0x0110
    1656:	1f 92       	push	r1
    1658:	8f 93       	push	r24
    165a:	80 91 11 01 	lds	r24, 0x0111
    165e:	1f 92       	push	r1
    1660:	8f 93       	push	r24
    1662:	86 ec       	ldi	r24, 0xC6	; 198
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9f 93       	push	r25
    1668:	8f 93       	push	r24
    166a:	83 e4       	ldi	r24, 0x43	; 67
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	9f 93       	push	r25
    1670:	8f 93       	push	r24
    1672:	0e 94 87 2b 	call	0x570e	; 0x570e <sprintf_P>
		strncat(psms->body, wbuffer, sizeof(psms->body) - strlen(psms->body));
    1676:	fe 01       	movw	r30, r28
    1678:	01 90       	ld	r0, Z+
    167a:	00 20       	and	r0, r0
    167c:	e9 f7       	brne	.-6      	; 0x1678 <sms_powerGone+0x68>
    167e:	ae 01       	movw	r20, r28
    1680:	4e 1b       	sub	r20, r30
    1682:	5f 0b       	sbc	r21, r31
    1684:	4f 55       	subi	r20, 0x5F	; 95
    1686:	5f 4f       	sbci	r21, 0xFF	; 255
    1688:	63 e4       	ldi	r22, 0x43	; 67
    168a:	73 e0       	ldi	r23, 0x03	; 3
    168c:	ce 01       	movw	r24, r28
    168e:	0e 94 90 2a 	call	0x5520	; 0x5520 <strncat>
		gsm_send_sms( psms->number, psms->body, 2 );
    1692:	42 e0       	ldi	r20, 0x02	; 2
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	be 01       	movw	r22, r28
    1698:	c8 01       	movw	r24, r16
    169a:	0e 94 c2 24 	call	0x4984	; 0x4984 <gsm_send_sms>
		free(psms);
    169e:	ce 01       	movw	r24, r28
    16a0:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
    16a4:	8d b7       	in	r24, 0x3d	; 61
    16a6:	9e b7       	in	r25, 0x3e	; 62
    16a8:	0a 96       	adiw	r24, 0x0a	; 10
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	9e bf       	out	0x3e, r25	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	8d bf       	out	0x3d, r24	; 61
	}
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <ManageOutdoorTempEvent>:
//
//MANAGE_OUTDOOR_TEMPEVENT();
void ManageOutdoorTempEvent(){
	if (temper[N_OUTDOOR] != TEMPER_BAD ){
    16be:	20 91 3f 03 	lds	r18, 0x033F
    16c2:	2f 37       	cpi	r18, 0x7F	; 127
    16c4:	c1 f0       	breq	.+48     	; 0x16f6 <ManageOutdoorTempEvent+0x38>
		if (temp_for_hour == TEMPER_BAD) temp_for_hour = temper[N_OUTDOOR];
    16c6:	80 91 66 03 	lds	r24, 0x0366
    16ca:	8f 37       	cpi	r24, 0x7F	; 127
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <ManageOutdoorTempEvent+0x14>
    16ce:	20 93 66 03 	sts	0x0366, r18
		if (temper[N_OUTDOOR] - temp_for_hour >= DIFF_OF_OUTDOOR_TEMPER_DOWN){
    16d2:	30 91 66 03 	lds	r19, 0x0366
    16d6:	82 2f       	mov	r24, r18
    16d8:	99 27       	eor	r25, r25
    16da:	87 fd       	sbrc	r24, 7
    16dc:	90 95       	com	r25
    16de:	83 1b       	sub	r24, r19
    16e0:	91 09       	sbc	r25, r1
    16e2:	0a 97       	sbiw	r24, 0x0a	; 10
    16e4:	34 f0       	brlt	.+12     	; 0x16f2 <ManageOutdoorTempEvent+0x34>
			PrefHeatting = TRUE;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 93 42 03 	sts	0x0342, r24
			temp_for_hour = temper[N_OUTDOOR];
    16ec:	20 93 66 03 	sts	0x0366, r18
    16f0:	08 95       	ret
		}
		else PrefHeatting = FALSE;
    16f2:	10 92 42 03 	sts	0x0342, r1
    16f6:	08 95       	ret

000016f8 <TestNoReadySensors>:
	}
}
//
//TEST_NOTREADY_SENSORS();
void TestNoReadySensors(){
    16f8:	8f 92       	push	r8
    16fa:	9f 92       	push	r9
    16fc:	af 92       	push	r10
    16fe:	bf 92       	push	r11
    1700:	cf 92       	push	r12
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
	uint8_t i;

	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
    1710:	81 e2       	ldi	r24, 0x21	; 33
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 1e 29 	call	0x523c	; 0x523c <malloc>
    1718:	90 93 65 03 	sts	0x0365, r25
    171c:	80 93 64 03 	sts	0x0364, r24
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	09 f4       	brne	.+2      	; 0x1726 <TestNoReadySensors+0x2e>
    1724:	4e c0       	rjmp	.+156    	; 0x17c2 <TestNoReadySensors+0xca>
			eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	6f e0       	ldi	r22, 0x0F	; 15
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__eerd_block_m328p>
    1732:	c6 ed       	ldi	r28, 0xD6	; 214
    1734:	d2 e0       	ldi	r29, 0x02	; 2
    1736:	0f 2e       	mov	r0, r31
    1738:	fe e3       	ldi	r31, 0x3E	; 62
    173a:	ef 2e       	mov	r14, r31
    173c:	f3 e0       	ldi	r31, 0x03	; 3
    173e:	ff 2e       	mov	r15, r31
    1740:	f0 2d       	mov	r31, r0
    1742:	00 e0       	ldi	r16, 0x00	; 0
    1744:	10 e0       	ldi	r17, 0x00	; 0

		for ( i = 0; i < MAXSENSORS; i++ ) {
			if (!sn_presence[i])
				if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
					if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) != TEMPER_BAD){
						memcpy(&gSensorIDs[i],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE);
    1746:	68 94       	set
    1748:	88 24       	eor	r8, r8
    174a:	83 f8       	bld	r8, 3
						sn_presence[i] = TRUE;
    174c:	99 24       	eor	r9, r9
    174e:	93 94       	inc	r9

	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
			eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);

		for ( i = 0; i < MAXSENSORS; i++ ) {
			if (!sn_presence[i])
    1750:	88 81       	ld	r24, Y
    1752:	81 11       	cpse	r24, r1
    1754:	21 c0       	rjmp	.+66     	; 0x1798 <TestNoReadySensors+0xa0>
				if(ValidSensorCode((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))){
    1756:	c0 90 64 03 	lds	r12, 0x0364
    175a:	d0 90 65 03 	lds	r13, 0x0365
    175e:	c0 0e       	add	r12, r16
    1760:	d1 1e       	adc	r13, r17
    1762:	c6 01       	movw	r24, r12
    1764:	0e 94 13 08 	call	0x1026	; 0x1026 <ValidSensorCode>
    1768:	88 23       	and	r24, r24
    176a:	b1 f0       	breq	.+44     	; 0x1798 <TestNoReadySensors+0xa0>
					if((temper[i] = getTemperature((uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE))) != TEMPER_BAD){
    176c:	c6 01       	movw	r24, r12
    176e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <getTemperature>
    1772:	f7 01       	movw	r30, r14
    1774:	80 83       	st	Z, r24
    1776:	8f 37       	cpi	r24, 0x7F	; 127
    1778:	79 f0       	breq	.+30     	; 0x1798 <TestNoReadySensors+0xa0>
						memcpy(&gSensorIDs[i],(uint8_t*)(rSensorIDs + i * OW_ROMCODE_SIZE),OW_ROMCODE_SIZE);
    177a:	e0 91 64 03 	lds	r30, 0x0364
    177e:	f0 91 65 03 	lds	r31, 0x0365
    1782:	e0 0f       	add	r30, r16
    1784:	f1 1f       	adc	r31, r17
    1786:	d8 01       	movw	r26, r16
    1788:	a6 55       	subi	r26, 0x56	; 86
    178a:	bd 4f       	sbci	r27, 0xFD	; 253
    178c:	88 2d       	mov	r24, r8
    178e:	01 90       	ld	r0, Z+
    1790:	0d 92       	st	X+, r0
    1792:	8a 95       	dec	r24
    1794:	e1 f7       	brne	.-8      	; 0x178e <TestNoReadySensors+0x96>
						sn_presence[i] = TRUE;
    1796:	98 82       	st	Y, r9
    1798:	8f e6       	ldi	r24, 0x6F	; 111
    179a:	97 e1       	ldi	r25, 0x17	; 23
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <TestNoReadySensors+0xa4>
    17a0:	00 c0       	rjmp	.+0      	; 0x17a2 <TestNoReadySensors+0xaa>
    17a2:	00 00       	nop
    17a4:	21 96       	adiw	r28, 0x01	; 1
    17a6:	08 5f       	subi	r16, 0xF8	; 248
    17a8:	1f 4f       	sbci	r17, 0xFF	; 255
    17aa:	9f ef       	ldi	r25, 0xFF	; 255
    17ac:	e9 1a       	sub	r14, r25
    17ae:	f9 0a       	sbc	r15, r25
	uint8_t i;

	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
			eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);

		for ( i = 0; i < MAXSENSORS; i++ ) {
    17b0:	00 32       	cpi	r16, 0x20	; 32
    17b2:	11 05       	cpc	r17, r1
    17b4:	69 f6       	brne	.-102    	; 0x1750 <TestNoReadySensors+0x58>
						sn_presence[i] = TRUE;
					}
				}
			_delay_ms(3);
		}
		free(rSensorIDs);
    17b6:	80 91 64 03 	lds	r24, 0x0364
    17ba:	90 91 65 03 	lds	r25, 0x0365
    17be:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
	}
}
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	df 90       	pop	r13
    17d0:	cf 90       	pop	r12
    17d2:	bf 90       	pop	r11
    17d4:	af 90       	pop	r10
    17d6:	9f 90       	pop	r9
    17d8:	8f 90       	pop	r8
    17da:	08 95       	ret

000017dc <ClearEEPROMSensCodes>:
//
int8_t ClearEEPROMSensCodes(){

	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
    17dc:	81 e2       	ldi	r24, 0x21	; 33
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 1e 29 	call	0x523c	; 0x523c <malloc>
    17e4:	90 93 65 03 	sts	0x0365, r25
    17e8:	80 93 64 03 	sts	0x0364, r24
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	b1 f0       	breq	.+44     	; 0x181c <ClearEEPROMSensCodes+0x40>
		*rSensorIDs = 0x00;
    17f0:	dc 01       	movw	r26, r24
    17f2:	1d 92       	st	X+, r1
		memcpy(rSensorIDs+1, rSensorIDs,MAXSENSORS * OW_ROMCODE_SIZE);
    17f4:	20 e2       	ldi	r18, 0x20	; 32
    17f6:	fc 01       	movw	r30, r24
    17f8:	01 90       	ld	r0, Z+
    17fa:	0d 92       	st	X+, r0
    17fc:	2a 95       	dec	r18
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <ClearEEPROMSensCodes+0x1c>
		eeprom_write_block((const void *)rSensorIDs , (void*)eSensorIDs , MAXSENSORS * OW_ROMCODE_SIZE);
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	6f e0       	ldi	r22, 0x0F	; 15
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__eewr_block_m328p>
		free(rSensorIDs);
    180c:	80 91 64 03 	lds	r24, 0x0364
    1810:	90 91 65 03 	lds	r25, 0x0365
    1814:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
		return TRUE;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	08 95       	ret
	}
	return FALSE;
    181c:	80 e0       	ldi	r24, 0x00	; 0
}
    181e:	08 95       	ret

00001820 <main>:
}
//
#define SNLEN 7

int main( void )
{
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	64 97       	sbiw	r28, 0x14	; 20
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
	char wStr[5];
	int ki;
	byte gSensNumb[SNLEN + 1];

	//	lcd_str = FDEV_SETUP_STREAM(LcdWrite, NULL, _FDEV_SETUP_WRITE);
		stdout = &lcd_str;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	90 93 f8 06 	sts	0x06F8, r25
    183c:	80 93 f7 06 	sts	0x06F7, r24

	INT1_DDR &= ~(1 << INT1_PIN);	// INT1_PIN as input
    1840:	4a b1       	in	r20, 0x0a	; 10
    1842:	29 b1       	in	r18, 0x09	; 9
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	bc 01       	movw	r22, r24
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <main+0x30>
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	2a 95       	dec	r18
    1852:	e2 f7       	brpl	.-8      	; 0x184c <main+0x2c>
    1854:	9b 01       	movw	r18, r22
    1856:	20 95       	com	r18
    1858:	24 23       	and	r18, r20
    185a:	2a b9       	out	0x0a, r18	; 10
    INT1_PORT |= (1 << INT1_PIN);    // turn On the Pull-up
    185c:	2b b1       	in	r18, 0x0b	; 11
    185e:	39 b1       	in	r19, 0x09	; 9
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <main+0x46>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	3a 95       	dec	r19
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <main+0x42>
    186a:	82 2b       	or	r24, r18
    186c:	8b b9       	out	0x0b, r24	; 11
      	// INT1_PIN is now an input with pull-up enabled

    ReadyWATCHDOG = FALSE;
    186e:	10 92 76 03 	sts	0x0376, r1
    x = 0; y = 0;
    1872:	10 92 25 03 	sts	0x0325, r1
    1876:	10 92 24 03 	sts	0x0324, r1
    187a:	10 92 23 03 	sts	0x0323, r1
    187e:	10 92 22 03 	sts	0x0322, r1
    //fl_noready = TRUE;
    CheckNoReadySNCounter = 0;
    1882:	10 92 7b 03 	sts	0x037B, r1

    LCD_INIT();
    1886:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_initialize2>
    // If Power Phase is gone - STOP!
	if(INT1_PIN & (1 << INT1_PIN_PIN)){
    188a:	4b 9b       	sbis	0x09, 3	; 9
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <main+0x76>
		LcdPowerGoneStr();
    188e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LcdPowerGoneStr>
		HALT();
    1892:	0e 94 45 2a 	call	0x548a	; 0x548a <abort>
	}

	MainLoopPhase = DISPLAY_MAINMENU;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 93 a7 02 	sts	0x02A7, r24
	LastPhase = MainLoopPhase;
    189c:	80 93 a6 02 	sts	0x02A6, r24
	MenuPhase = MMENU_SHOW;
    18a0:	10 92 a5 02 	sts	0x02A5, r1

	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
    18a4:	81 e2       	ldi	r24, 0x21	; 33
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 1e 29 	call	0x523c	; 0x523c <malloc>
    18ac:	90 93 65 03 	sts	0x0365, r25
    18b0:	80 93 64 03 	sts	0x0364, r24
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	09 f4       	brne	.+2      	; 0x18ba <main+0x9a>
    18b8:	92 c0       	rjmp	.+292    	; 0x19de <main+0x1be>
		eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	6f e0       	ldi	r22, 0x0F	; 15
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__eerd_block_m328p>
	} else HALT();

	for ( i = 0; i < MAXSENSORS; i++ ) {
			sn_presence[i] = FALSE;
    18c6:	10 92 d6 02 	sts	0x02D6, r1
			temper[i] = TEMPER_BAD;
    18ca:	8f e7       	ldi	r24, 0x7F	; 127
    18cc:	80 93 3e 03 	sts	0x033E, r24
	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
		eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	} else HALT();

	for ( i = 0; i < MAXSENSORS; i++ ) {
			sn_presence[i] = FALSE;
    18d0:	10 92 d7 02 	sts	0x02D7, r1
			temper[i] = TEMPER_BAD;
    18d4:	80 93 3f 03 	sts	0x033F, r24
	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
		eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	} else HALT();

	for ( i = 0; i < MAXSENSORS; i++ ) {
			sn_presence[i] = FALSE;
    18d8:	10 92 d8 02 	sts	0x02D8, r1
			temper[i] = TEMPER_BAD;
    18dc:	80 93 40 03 	sts	0x0340, r24
	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
		eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	} else HALT();

	for ( i = 0; i < MAXSENSORS; i++ ) {
			sn_presence[i] = FALSE;
    18e0:	10 92 d9 02 	sts	0x02D9, r1
			temper[i] = TEMPER_BAD;
    18e4:	80 93 41 03 	sts	0x0341, r24
	}

	rTempInDoorMin = (int8_t) eeprom_read_byte((uint8_t*) &TempInDoorMin);
    18e8:	86 e3       	ldi	r24, 0x36	; 54
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__eerd_byte_m328p>
    18f0:	80 93 3b 03 	sts	0x033B, r24
	rTempInDoorMax = (int8_t) eeprom_read_byte((uint8_t*) &TempInDoorMax);
    18f4:	85 e3       	ldi	r24, 0x35	; 53
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__eerd_byte_m328p>
    18fc:	80 93 3c 03 	sts	0x033C, r24
		rTempOutDoorMin = (int8_t) eeprom_read_byte((uint8_t*) &TempOutDoorMin);
    1900:	84 e3       	ldi	r24, 0x34	; 52
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__eerd_byte_m328p>
    1908:	80 93 63 03 	sts	0x0363, r24
		rTempOutDoorMax = (int8_t) eeprom_read_byte((uint8_t*) &TempOutDoorMax);
    190c:	83 e3       	ldi	r24, 0x33	; 51
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__eerd_byte_m328p>
    1914:	80 93 7a 03 	sts	0x037A, r24
		rTempSupplyMin = (int8_t) eeprom_read_byte((uint8_t*) &TempSupplyMin);
    1918:	82 e3       	ldi	r24, 0x32	; 50
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__eerd_byte_m328p>
    1920:	80 93 77 03 	sts	0x0377, r24
		rTempSupplyMax = (int8_t) eeprom_read_byte((uint8_t*) &TempSupplyMax);
    1924:	81 e3       	ldi	r24, 0x31	; 49
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__eerd_byte_m328p>
    192c:	80 93 78 03 	sts	0x0378, r24
		rTempDiffSupplyReturnMin = (int8_t) eeprom_read_byte((uint8_t*) &TempDiffSupplyReturnMin);
    1930:	80 e3       	ldi	r24, 0x30	; 48
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__eerd_byte_m328p>
    1938:	80 93 79 03 	sts	0x0379, r24
		rTempDiffSupplyReturnMax = (int8_t) eeprom_read_byte((uint8_t*) &TempDiffSupplyReturnMax);
    193c:	8f e2       	ldi	r24, 0x2F	; 47
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <__eerd_byte_m328p>
    1944:	80 93 3d 03 	sts	0x033D, r24
//	eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	eeprom_read_block((void *)telNumber , (const void*)etelNumber ,LENNUMPHONE);
    1948:	4e e0       	ldi	r20, 0x0E	; 14
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	87 e6       	ldi	r24, 0x67	; 103
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__eerd_block_m328p>
//	set_sleep_mode(SLEEP_MODE_PWR_DOWN);

	nSNpos = 0;
	n = 0;
	k = 0;
	fl = 0;
    1958:	10 92 a4 02 	sts	0x02A4, r1
	aSN_num = 0;
	mtemp_minute = TEMPER_BAD;
	mtemp_hour = TEMPER_BAD;

	// Power Reduction
	PRR |= (1<<PRTWI) | (1<<PRTIM1) | (1<<PRTIM0);
    195c:	e4 e6       	ldi	r30, 0x64	; 100
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	88 6a       	ori	r24, 0xA8	; 168
    1964:	80 83       	st	Z, r24

// Set output pins to manage PUMP0 and Tree-State-Valve
	PUMP0_DDRS |= (1<<PUMP0_PIN0)|(1<<PUMP0_PIN1);
    1966:	87 b1       	in	r24, 0x07	; 7
    1968:	80 63       	ori	r24, 0x30	; 48
    196a:	87 b9       	out	0x07, r24	; 7
	VALVE_DDRS |= (1<<VALVE_PIN3XVALVE);
    196c:	3b 9a       	sbi	0x07, 3	; 7

#ifdef WATCHDOG
	WDT_setup();
	wdt_reset();
#else
	WDT_off();
    196e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <WDT_off>
#endif

//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_DIR_OUT();
    1972:	55 9a       	sbi	0x0a, 5	; 10
        DS_PWR_OUT_HIGH();
    1974:	5d 9a       	sbi	0x0b, 5	; 11
#endif
  
   
//	n3310
        LCD_CLEAR();
    1976:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
        LCD_GOTO_XY(5,1);
    197a:	61 e0       	ldi	r22, 0x01	; 1
    197c:	85 e0       	ldi	r24, 0x05	; 5
    197e:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <LCD_set_position2>
        printf_P(PSTR("%S"),helloStr1);
    1982:	8b ee       	ldi	r24, 0xEB	; 235
    1984:	94 e0       	ldi	r25, 0x04	; 4
    1986:	9f 93       	push	r25
    1988:	8f 93       	push	r24
    198a:	82 eb       	ldi	r24, 0xB2	; 178
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	9f 93       	push	r25
    1990:	8f 93       	push	r24
    1992:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
        LCD_GOTO_XY(3,2);
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <LCD_set_position2>
        printf_P(PSTR("%S"),helloStr2);
    199e:	81 ee       	ldi	r24, 0xE1	; 225
    19a0:	94 e0       	ldi	r25, 0x04	; 4
    19a2:	9f 93       	push	r25
    19a4:	8f 93       	push	r24
    19a6:	8f ea       	ldi	r24, 0xAF	; 175
    19a8:	93 e0       	ldi	r25, 0x03	; 3
    19aa:	9f 93       	push	r25
    19ac:	8f 93       	push	r24
    19ae:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
        LCD_UPDATE();
    19b2:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>

	 */
	//********************************************************

#ifndef OW_ONE_BUS
	ow_set_bus(&THERM_PIN,&THERM_PORT,&THERM_DDR,THERM_IO);
    19b6:	24 e0       	ldi	r18, 0x04	; 4
    19b8:	4a e2       	ldi	r20, 0x2A	; 42
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	6b e2       	ldi	r22, 0x2B	; 43
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	89 e2       	ldi	r24, 0x29	; 41
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 0e 1c 	call	0x381c	; 0x381c <ow_set_bus>
#endif
	
	sei();
    19c8:	78 94       	sei
	if(!checkPresenceSN()){
    19ca:	0e 94 27 08 	call	0x104e	; 0x104e <checkPresenceSN>
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	88 23       	and	r24, r24
    19da:	19 f0       	breq	.+6      	; 0x19e2 <main+0x1c2>
    19dc:	1f c0       	rjmp	.+62     	; 0x1a1c <main+0x1fc>
	LastPhase = MainLoopPhase;
	MenuPhase = MMENU_SHOW;

	if((rSensorIDs = (uint8_t *)malloc(MAXSENSORS * OW_ROMCODE_SIZE+1)) != NULL) {
		eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	} else HALT();
    19de:	0e 94 45 2a 	call	0x548a	; 0x548a <abort>
			nSensors = search_sensors();
			if(!k--) break;
		}

#else
		nSensors = search_sensors_n();
    19e2:	0e 94 27 05 	call	0xa4e	; 0xa4e <search_sensors_n>
    19e6:	80 93 62 03 	sts	0x0362, r24
	ow_set_bus(&THERM_PIN,&THERM_PORT,&THERM_DDR,THERM_IO);
#endif
	
	sei();
	if(!checkPresenceSN()){
		k = 3; // 3 times repeating
    19ea:	b3 e0       	ldi	r27, 0x03	; 3
    19ec:	be 87       	std	Y+14, r27	; 0x0e
    19ee:	13 e0       	ldi	r17, 0x03	; 3
		}

#else
		nSensors = search_sensors_n();

		while (nSensors != MAXSENSORS){
    19f0:	0c c0       	rjmp	.+24     	; 0x1a0a <main+0x1ea>
    19f2:	ef e6       	ldi	r30, 0x6F	; 111
    19f4:	f7 e1       	ldi	r31, 0x17	; 23
    19f6:	31 97       	sbiw	r30, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <main+0x1d6>
    19fa:	00 c0       	rjmp	.+0      	; 0x19fc <main+0x1dc>
    19fc:	00 00       	nop
			_delay_ms(3);
			nSensors = search_sensors_n();
    19fe:	0e 94 27 05 	call	0xa4e	; 0xa4e <search_sensors_n>
    1a02:	80 93 62 03 	sts	0x0362, r24
			if(!k--) break;
    1a06:	11 50       	subi	r17, 0x01	; 1
    1a08:	20 f0       	brcs	.+8      	; 0x1a12 <main+0x1f2>
		}

#else
		nSensors = search_sensors_n();

		while (nSensors != MAXSENSORS){
    1a0a:	80 91 62 03 	lds	r24, 0x0362
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	81 f7       	brne	.-32     	; 0x19f2 <main+0x1d2>
    1a12:	1e 87       	std	Y+14, r17	; 0x0e
			_delay_ms(3);
			nSensors = search_sensors_n();
			if(!k--) break;
		}

		btest_new_sensors = TRUE;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	80 93 d0 02 	sts	0x02D0, r24
    1a1a:	06 c0       	rjmp	.+12     	; 0x1a28 <main+0x208>
#endif
	} else {
		copyrSNsTogSNs();
    1a1c:	0e 94 d2 05 	call	0xba4	; 0xba4 <copyrSNsTogSNs>
		nSensors = MAXSENSORS;
    1a20:	84 e0       	ldi	r24, 0x04	; 4
    1a22:	80 93 62 03 	sts	0x0362, r24

//	set_sleep_mode(SLEEP_MODE_PWR_DOWN);

	nSNpos = 0;
	n = 0;
	k = 0;
    1a26:	1e 86       	std	Y+14, r1	; 0x0e
		copyrSNsTogSNs();
		nSensors = MAXSENSORS;
	}
	//

	uart_init((UART_BAUD_SELECT((BAUD),F_CPU)));
    1a28:	83 e3       	ldi	r24, 0x33	; 51
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 4d 18 	call	0x309a	; 0x309a <uart_init>


		 */
		//********************************************************
//
	InitAdc(ADC_CHANNEL);
    1a30:	87 e0       	ldi	r24, 0x07	; 7
    1a32:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <InitAdc>
	InitAnalogComp();
    1a36:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <InitAnalogComp>
	init_clock();
    1a3a:	0e 94 0a 19 	call	0x3214	; 0x3214 <init_clock>

	LCD_CLEAR();
    1a3e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
	//LCD_FIRSTLINE();
	//LCD_GOTO_XY(0,0);
	LCD_PUTINT(nSensors);
    1a42:	80 91 62 03 	lds	r24, 0x0362
    1a46:	99 27       	eor	r25, r25
    1a48:	87 fd       	sbrc	r24, 7
    1a4a:	90 95       	com	r25
    1a4c:	0e 94 38 21 	call	0x4270	; 0x4270 <LcdPutInt>
	//printf_P(PSTR("%i%s",nSensors,Sensorsfound);
	LCD_FSTR(FONT_1X,(const char*)Sensorsfound);
    1a50:	8e e1       	ldi	r24, 0x1E	; 30
    1a52:	94 e0       	ldi	r25, 0x04	; 4
    1a54:	0e 94 16 21 	call	0x422c	; 0x422c <LCD_draw_string3>
	LCD_UPDATE();
    1a58:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>
#ifdef SN_SENSOR_SIZE
	LCD_FIRSTLINE();
#endif
	//_delay_ms(1000);

	if(nSensors == MAXSENSORS ){
    1a5c:	80 91 62 03 	lds	r24, 0x0362
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <main+0x246>
    1a64:	7d c0       	rjmp	.+250    	; 0x1b60 <main+0x340>
		if((ki = test_SN_sensors()) == 99){
    1a66:	0e 94 a3 05 	call	0xb46	; 0xb46 <test_SN_sensors>
    1a6a:	f8 2e       	mov	r15, r24
    1a6c:	08 2f       	mov	r16, r24
    1a6e:	11 27       	eor	r17, r17
    1a70:	07 fd       	sbrc	r16, 7
    1a72:	10 95       	com	r17
    1a74:	03 36       	cpi	r16, 0x63	; 99
    1a76:	11 05       	cpc	r17, r1
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <main+0x25c>
    1a7a:	4a c0       	rjmp	.+148    	; 0x1b10 <main+0x2f0>

	for ( i = 0; i < nSensors; i++ ) {
    1a7c:	00 e0       	ldi	r16, 0x00	; 0
    1a7e:	10 e0       	ldi	r17, 0x00	; 0
	LCD_FIRSTLINE();
#endif
	//_delay_ms(1000);

	if(nSensors == MAXSENSORS ){
		if((ki = test_SN_sensors()) == 99){
    1a80:	f1 2c       	mov	r15, r1

	for ( i = 0; i < nSensors; i++ ) {
		LCD_NEXTSTR();
    1a82:	0e 94 55 21 	call	0x42aa	; 0x42aa <LcdNextStr>
		LCD_PUTINT((int)i+1);
    1a86:	c8 01       	movw	r24, r16
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	0e 94 38 21 	call	0x4270	; 0x4270 <LcdPutInt>
		if ( gSensorIDs[i][0] == DS18S20_FAMILY_CODE ) {
    1a8e:	f8 01       	movw	r30, r16
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	e6 55       	subi	r30, 0x56	; 86
    1a9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 31       	cpi	r24, 0x10	; 16
    1aa4:	29 f4       	brne	.+10     	; 0x1ab0 <main+0x290>
			LCD_FSTR(FONT_1X,DS18S20);
    1aa6:	85 e1       	ldi	r24, 0x15	; 21
    1aa8:	94 e0       	ldi	r25, 0x04	; 4
    1aaa:	0e 94 16 21 	call	0x422c	; 0x422c <LCD_draw_string3>
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <main+0x2a6>
			//printf_P(PSTR("%s",DS18S20);
		} else if ( gSensorIDs[i][0] == DS1822_FAMILY_CODE ) {
    1ab0:	82 32       	cpi	r24, 0x22	; 34
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <main+0x29e>
			LCD_FSTR(FONT_1X,DS1822);
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	94 e0       	ldi	r25, 0x04	; 4
    1ab8:	0e 94 16 21 	call	0x422c	; 0x422c <LCD_draw_string3>
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <main+0x2a6>
			//printf_P(PSTR("%s",DS1822);
		}
		else {
			LCD_FSTR(FONT_1X,(const char*)DS18B20);
    1abe:	8c e0       	ldi	r24, 0x0C	; 12
    1ac0:	94 e0       	ldi	r25, 0x04	; 4
    1ac2:	0e 94 16 21 	call	0x422c	; 0x422c <LCD_draw_string3>
			//printf_P(PSTR("%s",DS18B20);
		}

		if ( DS18X20_get_power_status( &gSensorIDs[i][0] ) == DS18X20_POWER_PARASITE ) {
    1ac6:	c8 01       	movw	r24, r16
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	86 55       	subi	r24, 0x56	; 86
    1ad6:	9d 4f       	sbci	r25, 0xFD	; 253
    1ad8:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <DS18X20_get_power_status>
    1adc:	81 11       	cpse	r24, r1
    1ade:	05 c0       	rjmp	.+10     	; 0x1aea <main+0x2ca>
			LCD_FSTR(FONT_1X,(const char*)PAR);
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	93 e0       	ldi	r25, 0x03	; 3
    1ae4:	0e 94 16 21 	call	0x422c	; 0x422c <LCD_draw_string3>
    1ae8:	04 c0       	rjmp	.+8      	; 0x1af2 <main+0x2d2>
			//printf_P(PSTR("%s",PAR);
		} else {
			LCD_FSTR(FONT_1X,(const char*)EXT);
    1aea:	8a ef       	ldi	r24, 0xFA	; 250
    1aec:	93 e0       	ldi	r25, 0x03	; 3
    1aee:	0e 94 16 21 	call	0x422c	; 0x422c <LCD_draw_string3>
	//_delay_ms(1000);

	if(nSensors == MAXSENSORS ){
		if((ki = test_SN_sensors()) == 99){

	for ( i = 0; i < nSensors; i++ ) {
    1af2:	f3 94       	inc	r15
    1af4:	0f 2d       	mov	r16, r15
    1af6:	10 e0       	ldi	r17, 0x00	; 0
    1af8:	80 91 62 03 	lds	r24, 0x0362
    1afc:	99 27       	eor	r25, r25
    1afe:	87 fd       	sbrc	r24, 7
    1b00:	90 95       	com	r25
    1b02:	08 17       	cp	r16, r24
    1b04:	19 07       	cpc	r17, r25
    1b06:	0c f4       	brge	.+2      	; 0x1b0a <main+0x2ea>
    1b08:	bc cf       	rjmp	.-136    	; 0x1a82 <main+0x262>
		} else {
			LCD_FSTR(FONT_1X,(const char*)EXT);
			//printf_P(PSTR("%s",EXT);
		}
	}	// for ( i = 0; i < nSensors; i++ )
	     LCD_UPDATE();
    1b0a:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>
    1b0e:	4d c0       	rjmp	.+154    	; 0x1baa <main+0x38a>
//)))))))))))))))))))))))))))))))))))))))))))))))))))
   } else { 	// if(test_SN_sensors())
	   printf_P(PSTR("\n    %S"),alarmStr);
    1b10:	2b e4       	ldi	r18, 0x4B	; 75
    1b12:	34 e0       	ldi	r19, 0x04	; 4
    1b14:	3f 93       	push	r19
    1b16:	2f 93       	push	r18
    1b18:	27 ea       	ldi	r18, 0xA7	; 167
    1b1a:	33 e0       	ldi	r19, 0x03	; 3
    1b1c:	3f 93       	push	r19
    1b1e:	2f 93       	push	r18
    1b20:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
	   printf_P(PSTR("\n   %S:%01i"),sensorStr,ki);
    1b24:	1f 93       	push	r17
    1b26:	ff 92       	push	r15
    1b28:	84 e4       	ldi	r24, 0x44	; 68
    1b2a:	94 e0       	ldi	r25, 0x04	; 4
    1b2c:	9f 93       	push	r25
    1b2e:	8f 93       	push	r24
    1b30:	8b e9       	ldi	r24, 0x9B	; 155
    1b32:	93 e0       	ldi	r25, 0x03	; 3
    1b34:	9f 93       	push	r25
    1b36:	8f 93       	push	r24
    1b38:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
	   printf_P(PSTR("\n   %S"),missingStr);
    1b3c:	84 e3       	ldi	r24, 0x34	; 52
    1b3e:	94 e0       	ldi	r25, 0x04	; 4
    1b40:	9f 93       	push	r25
    1b42:	8f 93       	push	r24
    1b44:	84 e9       	ldi	r24, 0x94	; 148
    1b46:	93 e0       	ldi	r25, 0x03	; 3
    1b48:	9f 93       	push	r25
    1b4a:	8f 93       	push	r24
    1b4c:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
	   LCD_UPDATE();
    1b50:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	25 c0       	rjmp	.+74     	; 0x1baa <main+0x38a>
   }	// else { if(test_SN_sensors())
  }	else { // if(nSensors == MAXSENSORS )
	   printf_P(PSTR("\n    %S"),alarmStr);
    1b60:	8b e4       	ldi	r24, 0x4B	; 75
    1b62:	94 e0       	ldi	r25, 0x04	; 4
    1b64:	9f 93       	push	r25
    1b66:	8f 93       	push	r24
    1b68:	8c e8       	ldi	r24, 0x8C	; 140
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	9f 93       	push	r25
    1b6e:	8f 93       	push	r24
    1b70:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
	   printf_P(PSTR("\n   %Ss"),sensorStr);
    1b74:	84 e4       	ldi	r24, 0x44	; 68
    1b76:	94 e0       	ldi	r25, 0x04	; 4
    1b78:	9f 93       	push	r25
    1b7a:	8f 93       	push	r24
    1b7c:	84 e8       	ldi	r24, 0x84	; 132
    1b7e:	93 e0       	ldi	r25, 0x03	; 3
    1b80:	9f 93       	push	r25
    1b82:	8f 93       	push	r24
    1b84:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
	   printf_P(PSTR("\n   %S"),absenceStr);
    1b88:	8c e3       	ldi	r24, 0x3C	; 60
    1b8a:	94 e0       	ldi	r25, 0x04	; 4
    1b8c:	9f 93       	push	r25
    1b8e:	8f 93       	push	r24
    1b90:	8d e7       	ldi	r24, 0x7D	; 125
    1b92:	93 e0       	ldi	r25, 0x03	; 3
    1b94:	9f 93       	push	r25
    1b96:	8f 93       	push	r24
    1b98:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
	   LCD_UPDATE();
    1b9c:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	7f ef       	ldi	r23, 0xFF	; 255
    1bac:	89 e6       	ldi	r24, 0x69	; 105
    1bae:	98 e1       	ldi	r25, 0x18	; 24
    1bb0:	71 50       	subi	r23, 0x01	; 1
    1bb2:	80 40       	sbci	r24, 0x00	; 0
    1bb4:	90 40       	sbci	r25, 0x00	; 0
    1bb6:	e1 f7       	brne	.-8      	; 0x1bb0 <main+0x390>
    1bb8:	00 c0       	rjmp	.+0      	; 0x1bba <main+0x39a>
    1bba:	00 00       	nop
#ifdef WATCHDOG
	wdt_reset();
	_delay_ms(50);
#endif

	LCD_CLEAR();
    1bbc:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>

	WATCHDOG_DDR |=(1 << WATCHDOG_PIN);	// As output
    1bc0:	20 9a       	sbi	0x04, 0	; 4
	TimeKeyPressed = 0;
    1bc2:	10 92 7c 03 	sts	0x037C, r1
	extstate = 0;
    1bc6:	10 92 38 03 	sts	0x0338, r1
	powergone = 0;
    1bca:	10 92 37 03 	sts	0x0337, r1
	ExtInt0Enable();
    1bce:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <ExtInt0Enable>
	ExtInt1Enable();
    1bd2:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <ExtInt1Enable>
//	===============================================================================================
	kg = 0;
    1bd6:	10 92 cb 02 	sts	0x02CB, r1
	if(!btest_new_sensors){
    1bda:	80 91 d0 02 	lds	r24, 0x02D0
    1bde:	81 11       	cpse	r24, r1
    1be0:	0c c0       	rjmp	.+24     	; 0x1bfa <main+0x3da>
		free(rSensorIDs);
    1be2:	80 91 64 03 	lds	r24, 0x0364
    1be6:	90 91 65 03 	lds	r25, 0x0365
    1bea:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
		MANAGE_TEMPEVENT();
    1bee:	0e 94 29 07 	call	0xe52	; 0xe52 <manageTemperatureEvent>
		ReadyWATCHDOG = TRUE;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 93 76 03 	sts	0x0376, r24
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <main+0x3e4>
	} else {
		MainLoopPhase = ENTER_NEW_SENSOR;
    1bfa:	83 e0       	ldi	r24, 0x03	; 3
    1bfc:	80 93 a7 02 	sts	0x02A7, r24
		nwSen_Phase = REORDER_NWSENS;
    1c00:	10 92 d1 02 	sts	0x02D1, r1
	}
	PrefHeatting = FALSE;
    1c04:	10 92 42 03 	sts	0x0342, r1
	temp_for_hour = temper[N_OUTDOOR];
    1c08:	80 91 3f 03 	lds	r24, 0x033F
    1c0c:	80 93 66 03 	sts	0x0366, r24
	k = 0;
	fl = 0;
	ks = 0;
	ActSN = INDOOR;
	ActSN_next = OUTDOOR;
	aSN_num = 0;
    1c10:	1b 8a       	std	Y+19, r1	; 0x13
	n = 0;
	k = 0;
	fl = 0;
	ks = 0;
	ActSN = INDOOR;
	ActSN_next = OUTDOOR;
    1c12:	a1 e0       	ldi	r26, 0x01	; 1
    1c14:	a9 8b       	std	Y+17, r26	; 0x11
	aSN_num = 0;
	mtemp_minute = TEMPER_BAD;
	mtemp_hour = TEMPER_BAD;
    1c16:	0f 2e       	mov	r0, r31
    1c18:	ff e7       	ldi	r31, 0x7F	; 127
    1c1a:	7f 2e       	mov	r7, r31
    1c1c:	f0 2d       	mov	r31, r0
	fl = 0;
	ks = 0;
	ActSN = INDOOR;
	ActSN_next = OUTDOOR;
	aSN_num = 0;
	mtemp_minute = TEMPER_BAD;
    1c1e:	0f 2e       	mov	r0, r31
    1c20:	ff e7       	ldi	r31, 0x7F	; 127
    1c22:	6f 2e       	mov	r6, r31
    1c24:	f0 2d       	mov	r31, r0
	eeprom_read_block((void *)telNumber , (const void*)etelNumber ,LENNUMPHONE);

//	set_sleep_mode(SLEEP_MODE_PWR_DOWN);

	nSNpos = 0;
	n = 0;
    1c26:	18 8a       	std	Y+16, r1	; 0x10
	k = 0;
	fl = 0;
	ks = 0;
	ActSN = INDOOR;
    1c28:	1f 86       	std	Y+15, r1	; 0x0f
//	eeprom_read_block((void *)rSensorIDs , (const void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
	eeprom_read_block((void *)telNumber , (const void*)etelNumber ,LENNUMPHONE);

//	set_sleep_mode(SLEEP_MODE_PWR_DOWN);

	nSNpos = 0;
    1c2a:	1a 8a       	std	Y+18, r1	; 0x12
	n = 0;
	k = 0;
	fl = 0;
	ks = 0;
    1c2c:	1c 8a       	std	Y+20, r1	; 0x14
    1c2e:	0c ec       	ldi	r16, 0xCC	; 204
    1c30:	12 e0       	ldi	r17, 0x02	; 2
    1c32:	0f 2e       	mov	r0, r31
    1c34:	f0 ed       	ldi	r31, 0xD0	; 208
    1c36:	ef 2e       	mov	r14, r31
    1c38:	f2 e0       	ldi	r31, 0x02	; 2
    1c3a:	ff 2e       	mov	r15, r31
    1c3c:	f0 2d       	mov	r31, r0
			extstate = 0;
			sei();
			LCD_CLEAR();
		}
	//
			if(tAsync.minute != mtemp_minute){
    1c3e:	0f 2e       	mov	r0, r31
    1c40:	f0 e1       	ldi	r31, 0x10	; 16
    1c42:	2f 2e       	mov	r2, r31
    1c44:	f1 e0       	ldi	r31, 0x01	; 1
    1c46:	3f 2e       	mov	r3, r31
    1c48:	f0 2d       	mov	r31, r0
				cli();
				CheckNoReadySNCounter = 0;
				sei();
			}
	//
			if(tAsync.hour != mtemp_hour){
    1c4a:	0f 2e       	mov	r0, r31
    1c4c:	f1 e1       	ldi	r31, 0x11	; 17
    1c4e:	4f 2e       	mov	r4, r31
    1c50:	f1 e0       	ldi	r31, 0x01	; 1
    1c52:	5f 2e       	mov	r5, r31
    1c54:	f0 2d       	mov	r31, r0
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <main+0x43c>
		LCD_UPDATE();

	if(MainLoopPhase != ENTER_NEW_SENSOR){
		DO_WATCHDOG();

		for(k = 0;k < MAXSENSORS;k++)
    1c58:	b4 e0       	ldi	r27, 0x04	; 4
    1c5a:	be 87       	std	Y+14, r27	; 0x0e

//
	for(;;) {   // main loop ***************************************
		//DO_WATCHDOG();
//##################################################################
		if(!wait_powergone && powergone){
    1c5c:	80 91 1f 03 	lds	r24, 0x031F
    1c60:	81 11       	cpse	r24, r1
    1c62:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <main+0x17be>
    1c66:	80 91 37 03 	lds	r24, 0x0337
    1c6a:	88 23       	and	r24, r24
    1c6c:	a1 f0       	breq	.+40     	; 0x1c96 <main+0x476>
			wait_powergone = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	80 93 1f 03 	sts	0x031F, r24
    1c74:	10 c0       	rjmp	.+32     	; 0x1c96 <main+0x476>
		}
//
		if(wait_powergone){
			if(powergone){
				if(wait_powergone >= TIMEOUT_POWERGON + 1){
    1c76:	93 30       	cpi	r25, 0x03	; 3
    1c78:	70 f0       	brcs	.+28     	; 0x1c96 <main+0x476>
					if(INT1_PIN & (1 << INT1_PIN_PIN)){
    1c7a:	4b 9b       	sbis	0x09, 3	; 9
    1c7c:	06 c0       	rjmp	.+12     	; 0x1c8a <main+0x46a>
						LcdPowerGoneStr();
    1c7e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LcdPowerGoneStr>
						sms_powerGone();
    1c82:	0e 94 08 0b 	call	0x1610	; 0x1610 <sms_powerGone>
						HALT();
    1c86:	0e 94 45 2a 	call	0x548a	; 0x548a <abort>
					} else {
						cli();
    1c8a:	f8 94       	cli
						powergone = 0;
    1c8c:	10 92 37 03 	sts	0x0337, r1
						wait_powergone = 0;
    1c90:	10 92 1f 03 	sts	0x031F, r1
						sei();
    1c94:	78 94       	sei

#ifdef WATCHDOG
	wdt_reset();
#endif

	ch = (char)GetKeyCode();
    1c96:	0e 94 00 22 	call	0x4400	; 0x4400 <GetKeyCode>
    1c9a:	b8 2e       	mov	r11, r24

	if(ch == '*' && !fl) {
    1c9c:	ea e2       	ldi	r30, 0x2A	; 42
    1c9e:	8e 13       	cpse	r24, r30
    1ca0:	10 c0       	rjmp	.+32     	; 0x1cc2 <main+0x4a2>
    1ca2:	80 91 a4 02 	lds	r24, 0x02A4
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	0c c0       	rjmp	.+24     	; 0x1cc2 <main+0x4a2>
		LastPhase = MainLoopPhase;
    1caa:	80 91 a7 02 	lds	r24, 0x02A7
    1cae:	80 93 a6 02 	sts	0x02A6, r24
		MainLoopPhase = DISPLAY_MAINMENU;
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	90 93 a7 02 	sts	0x02A7, r25
		if(LastPhase != MainLoopPhase)
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <main+0x49e>
    1cbc:	a5 c0       	rjmp	.+330    	; 0x1e08 <main+0x5e8>
			LCD_CLEAR();
    1cbe:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
	}

		switch(MainLoopPhase) {
    1cc2:	80 91 a7 02 	lds	r24, 0x02A7
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	59 f1       	breq	.+86     	; 0x1d20 <main+0x500>
    1cca:	30 f1       	brcs	.+76     	; 0x1d18 <main+0x4f8>
    1ccc:	83 30       	cpi	r24, 0x03	; 3
    1cce:	11 f0       	breq	.+4      	; 0x1cd4 <main+0x4b4>
    1cd0:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <main+0x16e0>

		case ENTER_NEW_SENSOR:

			if(manage_new_sensors(ch)){
    1cd4:	8b 2d       	mov	r24, r11
    1cd6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <manage_new_sensors>
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <main+0x4c0>
    1cde:	be cf       	rjmp	.-132    	; 0x1c5c <main+0x43c>
				MANAGE_TEMPEVENT();
    1ce0:	0e 94 29 07 	call	0xe52	; 0xe52 <manageTemperatureEvent>
				PrefHeatting = FALSE;
    1ce4:	10 92 42 03 	sts	0x0342, r1
				temp_for_hour = temper[N_OUTDOOR];
    1ce8:	80 91 3f 03 	lds	r24, 0x033F
    1cec:	80 93 66 03 	sts	0x0366, r24
				kg = 0;
    1cf0:	10 92 cb 02 	sts	0x02CB, r1
				LastPhase = MainLoopPhase;
    1cf4:	80 91 a7 02 	lds	r24, 0x02A7
    1cf8:	80 93 a6 02 	sts	0x02A6, r24
				MainLoopPhase = DISPLAY_MAINMENU;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	80 93 a7 02 	sts	0x02A7, r24
				MenuPhase = MMENU_SHOW;
    1d02:	10 92 a5 02 	sts	0x02A5, r1
				ReadyWATCHDOG = TRUE;
    1d06:	80 93 76 03 	sts	0x0376, r24
				free(rSensorIDs);
    1d0a:	80 91 64 03 	lds	r24, 0x0364
    1d0e:	90 91 65 03 	lds	r25, 0x0365
    1d12:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
    1d16:	a2 cf       	rjmp	.-188    	; 0x1c5c <main+0x43c>
			}
			continue;
		break;

		case DISPLAY_TEMPERATURE:
			DisplayTemperature();
    1d18:	0e 94 08 06 	call	0xc10	; 0xc10 <DisplayTemperature>
		break;
    1d1c:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <main+0x16e0>

		case DISPLAY_MAINMENU:

			switch(ch){
    1d20:	8b 2d       	mov	r24, r11
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	fc 01       	movw	r30, r24
    1d26:	b3 97       	sbiw	r30, 0x23	; 35
    1d28:	e7 31       	cpi	r30, 0x17	; 23
    1d2a:	f1 05       	cpc	r31, r1
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <main+0x510>
    1d2e:	6c c0       	rjmp	.+216    	; 0x1e08 <main+0x5e8>
    1d30:	ec 5c       	subi	r30, 0xCC	; 204
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	0c 94 f5 28 	jmp	0x51ea	; 0x51ea <__tablejump2__>
			case '0':
				if(MenuPhase == MMENU_SHOW ){
    1d38:	80 91 a5 02 	lds	r24, 0x02A5
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	64 c0       	rjmp	.+200    	; 0x1e08 <main+0x5e8>
					MenuPhase = CLRIDS_EEPROM;
    1d40:	89 e0       	ldi	r24, 0x09	; 9
    1d42:	80 93 a5 02 	sts	0x02A5, r24
    1d46:	60 c0       	rjmp	.+192    	; 0x1e08 <main+0x5e8>
				}
				case '1':
				if(MenuPhase == MMENU_SHOW )
    1d48:	80 91 a5 02 	lds	r24, 0x02A5
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	5c c0       	rjmp	.+184    	; 0x1e08 <main+0x5e8>
					MenuPhase = MTELPHONE_SET;
    1d50:	88 e0       	ldi	r24, 0x08	; 8
    1d52:	80 93 a5 02 	sts	0x02A5, r24
    1d56:	5b c1       	rjmp	.+694    	; 0x200e <main+0x7ee>
				break;
				case '2':
					if(MenuPhase == MMENU_SHOW )
    1d58:	80 91 a5 02 	lds	r24, 0x02A5
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	54 c0       	rjmp	.+168    	; 0x1e08 <main+0x5e8>
						MenuPhase = MVIEW_SNs;
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	80 93 a5 02 	sts	0x02A5, r24
    1d66:	5e c3       	rjmp	.+1724   	; 0x2424 <main+0xc04>
					break;
				case '3':
					if(MenuPhase == MMENU_SHOW )
    1d68:	80 91 a5 02 	lds	r24, 0x02A5
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	4c c0       	rjmp	.+152    	; 0x1e08 <main+0x5e8>
						MenuPhase = MSET_TIME;
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	80 93 a5 02 	sts	0x02A5, r24
    1d76:	da c7       	rjmp	.+4020   	; 0x2d2c <main+0x150c>
					break;
				case '4':
					if(MenuPhase == MMENU_SHOW )
    1d78:	80 91 a5 02 	lds	r24, 0x02A5
    1d7c:	81 11       	cpse	r24, r1
    1d7e:	44 c0       	rjmp	.+136    	; 0x1e08 <main+0x5e8>
						MenuPhase = MSETTEMP;
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	80 93 a5 02 	sts	0x02A5, r24
    1d86:	eb c4       	rjmp	.+2518   	; 0x275e <main+0xf3e>
					break;
				case '5':
					if(MenuPhase == MMENU_SHOW ){
    1d88:	80 91 a5 02 	lds	r24, 0x02A5
    1d8c:	81 11       	cpse	r24, r1
    1d8e:	3c c0       	rjmp	.+120    	; 0x1e08 <main+0x5e8>
						MenuPhase = MSETTEMP;
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	80 93 a5 02 	sts	0x02A5, r24
						ActSN = TOEEPROM;
						fl = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	80 93 a4 02 	sts	0x02A4, r24
						MenuPhase = MSETTEMP;
					break;
				case '5':
					if(MenuPhase == MMENU_SHOW ){
						MenuPhase = MSETTEMP;
						ActSN = TOEEPROM;
    1d9c:	fa e0       	ldi	r31, 0x0A	; 10
    1d9e:	ff 87       	std	Y+15, r31	; 0x0f
    1da0:	33 c0       	rjmp	.+102    	; 0x1e08 <main+0x5e8>
						fl = 1;
					}
					break;
				case '6':
					if(MenuPhase == MMENU_SHOW )
    1da2:	80 91 a5 02 	lds	r24, 0x02A5
    1da6:	81 11       	cpse	r24, r1
    1da8:	2f c0       	rjmp	.+94     	; 0x1e08 <main+0x5e8>
						MenuPhase = MVIEW_TIME;
    1daa:	86 e0       	ldi	r24, 0x06	; 6
    1dac:	80 93 a5 02 	sts	0x02A5, r24
    1db0:	94 c7       	rjmp	.+3880   	; 0x2cda <main+0x14ba>
					break;
				case '7':
					if(MenuPhase == MMENU_SHOW )
    1db2:	80 91 a5 02 	lds	r24, 0x02A5
    1db6:	81 11       	cpse	r24, r1
    1db8:	27 c0       	rjmp	.+78     	; 0x1e08 <main+0x5e8>
						MenuPhase = MASSIGN;
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	80 93 a5 02 	sts	0x02A5, r24
    1dc0:	9d c3       	rjmp	.+1850   	; 0x24fc <main+0xcdc>
					break;
				case '8':
					if(MenuPhase == MMENU_SHOW )
    1dc2:	80 91 a5 02 	lds	r24, 0x02A5
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	1f c0       	rjmp	.+62     	; 0x1e08 <main+0x5e8>
						MenuPhase = MVIEWTEMPR;
    1dca:	87 e0       	ldi	r24, 0x07	; 7
    1dcc:	80 93 a5 02 	sts	0x02A5, r24
    1dd0:	f4 c3       	rjmp	.+2024   	; 0x25ba <main+0xd9a>
					break;
				case '9':
				if(MenuPhase == MMENU_SHOW )
    1dd2:	80 91 a5 02 	lds	r24, 0x02A5
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	17 c0       	rjmp	.+46     	; 0x1e08 <main+0x5e8>
					MenuPhase = MSNs_SET;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	80 93 a5 02 	sts	0x02A5, r24
    1de0:	a8 c1       	rjmp	.+848    	; 0x2132 <main+0x912>
				break;

				case '#':
					LCD_CLEAR();
    1de2:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
				    LCD_UPDATE();
    1de6:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>
					if(fl){
    1dea:	80 91 a4 02 	lds	r24, 0x02A4
    1dee:	88 23       	and	r24, r24
    1df0:	29 f0       	breq	.+10     	; 0x1dfc <main+0x5dc>
						MenuPhase = MMENU_SHOW;
    1df2:	10 92 a5 02 	sts	0x02A5, r1
						fl = 0;
    1df6:	10 92 a4 02 	sts	0x02A4, r1
					} else {MainLoopPhase = DISPLAY_TEMPERATURE; mausure_temperature_ok = TRUE; continue;}
					break;
    1dfa:	06 c0       	rjmp	.+12     	; 0x1e08 <main+0x5e8>
					LCD_CLEAR();
				    LCD_UPDATE();
					if(fl){
						MenuPhase = MMENU_SHOW;
						fl = 0;
					} else {MainLoopPhase = DISPLAY_TEMPERATURE; mausure_temperature_ok = TRUE; continue;}
    1dfc:	10 92 a7 02 	sts	0x02A7, r1
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	80 93 00 01 	sts	0x0100, r24
    1e06:	2a cf       	rjmp	.-428    	; 0x1c5c <main+0x43c>
					break;
				}

			switch(MenuPhase){
    1e08:	40 91 a5 02 	lds	r20, 0x02A5
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	4c 30       	cpi	r20, 0x0C	; 12
    1e10:	51 05       	cpc	r21, r1
    1e12:	10 f0       	brcs	.+4      	; 0x1e18 <main+0x5f8>
    1e14:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <main+0x16e0>
    1e18:	fa 01       	movw	r30, r20
    1e1a:	e5 5b       	subi	r30, 0xB5	; 181
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	0c 94 f5 28 	jmp	0x51ea	; 0x51ea <__tablejump2__>
			case MMENU_SHOW:
				if(fl){ LCD_CLEAR(); fl = 0;}
    1e22:	80 91 a4 02 	lds	r24, 0x02A4
    1e26:	88 23       	and	r24, r24
    1e28:	21 f0       	breq	.+8      	; 0x1e32 <main+0x612>
    1e2a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
    1e2e:	10 92 a4 02 	sts	0x02A4, r1
				LCD_FIRSTLINE();
    1e32:	0e 94 69 21 	call	0x42d2	; 0x42d2 <LcdFirstLine>

				printf_P(PSTR("%i.%S %S\n"),1,setStr,telStr);
    1e36:	84 ef       	ldi	r24, 0xF4	; 244
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	9f 93       	push	r25
    1e3c:	8f 93       	push	r24
    1e3e:	0f 2e       	mov	r0, r31
    1e40:	f7 e9       	ldi	r31, 0x97	; 151
    1e42:	af 2e       	mov	r10, r31
    1e44:	f4 e0       	ldi	r31, 0x04	; 4
    1e46:	bf 2e       	mov	r11, r31
    1e48:	f0 2d       	mov	r31, r0
    1e4a:	bf 92       	push	r11
    1e4c:	af 92       	push	r10
    1e4e:	1f 92       	push	r1
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	8f 93       	push	r24
    1e54:	83 e7       	ldi	r24, 0x73	; 115
    1e56:	93 e0       	ldi	r25, 0x03	; 3
    1e58:	9f 93       	push	r25
    1e5a:	8f 93       	push	r24
    1e5c:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("%i.%S %Ss\n"),2,viewStr,snStr);
    1e60:	80 ed       	ldi	r24, 0xD0	; 208
    1e62:	94 e0       	ldi	r25, 0x04	; 4
    1e64:	9f 93       	push	r25
    1e66:	8f 93       	push	r24
    1e68:	0f 2e       	mov	r0, r31
    1e6a:	f2 e9       	ldi	r31, 0x92	; 146
    1e6c:	cf 2e       	mov	r12, r31
    1e6e:	f4 e0       	ldi	r31, 0x04	; 4
    1e70:	df 2e       	mov	r13, r31
    1e72:	f0 2d       	mov	r31, r0
    1e74:	df 92       	push	r13
    1e76:	cf 92       	push	r12
    1e78:	1f 92       	push	r1
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	8f 93       	push	r24
    1e7e:	88 e6       	ldi	r24, 0x68	; 104
    1e80:	93 e0       	ldi	r25, 0x03	; 3
    1e82:	9f 93       	push	r25
    1e84:	8f 93       	push	r24
    1e86:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("%i.%S %S\n"),3,setStr,timeStr);
    1e8a:	0f 2e       	mov	r0, r31
    1e8c:	f4 e6       	ldi	r31, 0x64	; 100
    1e8e:	8f 2e       	mov	r8, r31
    1e90:	f4 e0       	ldi	r31, 0x04	; 4
    1e92:	9f 2e       	mov	r9, r31
    1e94:	f0 2d       	mov	r31, r0
    1e96:	9f 92       	push	r9
    1e98:	8f 92       	push	r8
    1e9a:	bf 92       	push	r11
    1e9c:	af 92       	push	r10
    1e9e:	1f 92       	push	r1
    1ea0:	83 e0       	ldi	r24, 0x03	; 3
    1ea2:	8f 93       	push	r24
    1ea4:	8e e5       	ldi	r24, 0x5E	; 94
    1ea6:	93 e0       	ldi	r25, 0x03	; 3
    1ea8:	9f 93       	push	r25
    1eaa:	8f 93       	push	r24
    1eac:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("%i.%S %S-%S\n"),4,setStr,minStr,maxStr);
    1eb0:	82 e8       	ldi	r24, 0x82	; 130
    1eb2:	94 e0       	ldi	r25, 0x04	; 4
    1eb4:	9f 93       	push	r25
    1eb6:	8f 93       	push	r24
    1eb8:	86 e8       	ldi	r24, 0x86	; 134
    1eba:	94 e0       	ldi	r25, 0x04	; 4
    1ebc:	9f 93       	push	r25
    1ebe:	8f 93       	push	r24
    1ec0:	bf 92       	push	r11
    1ec2:	af 92       	push	r10
    1ec4:	1f 92       	push	r1
    1ec6:	84 e0       	ldi	r24, 0x04	; 4
    1ec8:	8f 93       	push	r24
    1eca:	81 e5       	ldi	r24, 0x51	; 81
    1ecc:	93 e0       	ldi	r25, 0x03	; 3
    1ece:	9f 93       	push	r25
    1ed0:	8f 93       	push	r24
    1ed2:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("%i.%S\n"),5,toeepromStr);
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	8e e6       	ldi	r24, 0x6E	; 110
    1ee2:	94 e0       	ldi	r25, 0x04	; 4
    1ee4:	9f 93       	push	r25
    1ee6:	8f 93       	push	r24
    1ee8:	1f 92       	push	r1
    1eea:	85 e0       	ldi	r24, 0x05	; 5
    1eec:	8f 93       	push	r24
    1eee:	8a e4       	ldi	r24, 0x4A	; 74
    1ef0:	93 e0       	ldi	r25, 0x03	; 3
    1ef2:	9f 93       	push	r25
    1ef4:	8f 93       	push	r24
    1ef6:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
#ifdef N1110_LCD
				printf_P(PSTR("%i.%S %S\n"),6,viewStr,timeStr);
    1efa:	9f 92       	push	r9
    1efc:	8f 92       	push	r8
    1efe:	df 92       	push	r13
    1f00:	cf 92       	push	r12
    1f02:	1f 92       	push	r1
    1f04:	86 e0       	ldi	r24, 0x06	; 6
    1f06:	8f 93       	push	r24
    1f08:	80 e4       	ldi	r24, 0x40	; 64
    1f0a:	93 e0       	ldi	r25, 0x03	; 3
    1f0c:	9f 93       	push	r25
    1f0e:	8f 93       	push	r24
    1f10:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("%i.%S %S\n"),7,viewStr,assignStr);
    1f14:	8a e8       	ldi	r24, 0x8A	; 138
    1f16:	94 e0       	ldi	r25, 0x04	; 4
    1f18:	9f 93       	push	r25
    1f1a:	8f 93       	push	r24
    1f1c:	df 92       	push	r13
    1f1e:	cf 92       	push	r12
    1f20:	1f 92       	push	r1
    1f22:	87 e0       	ldi	r24, 0x07	; 7
    1f24:	8f 93       	push	r24
    1f26:	86 e3       	ldi	r24, 0x36	; 54
    1f28:	93 e0       	ldi	r25, 0x03	; 3
    1f2a:	9f 93       	push	r25
    1f2c:	8f 93       	push	r24
    1f2e:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("%i.%S %S"),8,viewStr,temperStr);
    1f32:	8c e2       	ldi	r24, 0x2C	; 44
    1f34:	94 e0       	ldi	r25, 0x04	; 4
    1f36:	9f 93       	push	r25
    1f38:	8f 93       	push	r24
    1f3a:	df 92       	push	r13
    1f3c:	cf 92       	push	r12
    1f3e:	1f 92       	push	r1
    1f40:	88 e0       	ldi	r24, 0x08	; 8
    1f42:	8f 93       	push	r24
    1f44:	8d e2       	ldi	r24, 0x2D	; 45
    1f46:	93 e0       	ldi	r25, 0x03	; 3
    1f48:	9f 93       	push	r25
    1f4a:	8f 93       	push	r24
    1f4c:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
//				printf_P(PSTR("%i.%S %Ss\n"),9,setStr,snStr);
#else
				printf_P(PSTR("%i.%S %S"),6,viewStr,timeStr);
#endif
				break;
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	d2 c7       	rjmp	.+4004   	; 0x2f00 <main+0x16e0>
			case CLRIDS_EEPROM:
				LCD_CLEAR();
    1f5c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
				printf_P(PSTR("%S %Ss?\n"),clearStr, snStr);
    1f60:	80 ed       	ldi	r24, 0xD0	; 208
    1f62:	94 e0       	ldi	r25, 0x04	; 4
    1f64:	9f 93       	push	r25
    1f66:	8f 93       	push	r24
    1f68:	8e ee       	ldi	r24, 0xEE	; 238
    1f6a:	93 e0       	ldi	r25, 0x03	; 3
    1f6c:	9f 93       	push	r25
    1f6e:	8f 93       	push	r24
    1f70:	84 e2       	ldi	r24, 0x24	; 36
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	9f 93       	push	r25
    1f76:	8f 93       	push	r24
    1f78:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				MenuPhase = CLRIDS_EEPROM2;
    1f7c:	8a e0       	ldi	r24, 0x0A	; 10
    1f7e:	80 93 a5 02 	sts	0x02A5, r24
				break;
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	b8 c7       	rjmp	.+3952   	; 0x2f00 <main+0x16e0>
			case CLRIDS_EEPROM2:
				if(ch == '*') {
    1f90:	7a e2       	ldi	r23, 0x2A	; 42
    1f92:	b7 12       	cpse	r11, r23
    1f94:	32 c0       	rjmp	.+100    	; 0x1ffa <main+0x7da>
					if(ClearEEPROMSensCodes())
    1f96:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <ClearEEPROMSensCodes>
    1f9a:	88 23       	and	r24, r24
    1f9c:	a9 f0       	breq	.+42     	; 0x1fc8 <main+0x7a8>
						 printf_P(PSTR("\n%SD %S!"),clearStr,okStr);
    1f9e:	80 ef       	ldi	r24, 0xF0	; 240
    1fa0:	94 e0       	ldi	r25, 0x04	; 4
    1fa2:	9f 93       	push	r25
    1fa4:	8f 93       	push	r24
    1fa6:	8e ee       	ldi	r24, 0xEE	; 238
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	8b e1       	ldi	r24, 0x1B	; 27
    1fb0:	93 e0       	ldi	r25, 0x03	; 3
    1fb2:	9f 93       	push	r25
    1fb4:	8f 93       	push	r24
    1fb6:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	14 c0       	rjmp	.+40     	; 0x1ff0 <main+0x7d0>
					else printf_P(PSTR("\n%SD %S!"),clearStr,errStr);
    1fc8:	8a ee       	ldi	r24, 0xEA	; 234
    1fca:	93 e0       	ldi	r25, 0x03	; 3
    1fcc:	9f 93       	push	r25
    1fce:	8f 93       	push	r24
    1fd0:	8e ee       	ldi	r24, 0xEE	; 238
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	9f 93       	push	r25
    1fd6:	8f 93       	push	r24
    1fd8:	82 e1       	ldi	r24, 0x12	; 18
    1fda:	93 e0       	ldi	r25, 0x03	; 3
    1fdc:	9f 93       	push	r25
    1fde:	8f 93       	push	r24
    1fe0:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
					fl = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	80 93 a4 02 	sts	0x02A4, r24
					MenuPhase = MMENU_SHOW;
    1ff6:	10 92 a5 02 	sts	0x02A5, r1
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	99 e6       	ldi	r25, 0x69	; 105
    1ffe:	a8 e1       	ldi	r26, 0x18	; 24
    2000:	81 50       	subi	r24, 0x01	; 1
    2002:	90 40       	sbci	r25, 0x00	; 0
    2004:	a0 40       	sbci	r26, 0x00	; 0
    2006:	e1 f7       	brne	.-8      	; 0x2000 <main+0x7e0>
    2008:	00 c0       	rjmp	.+0      	; 0x200a <main+0x7ea>
    200a:	00 00       	nop
    200c:	79 c7       	rjmp	.+3826   	; 0x2f00 <main+0x16e0>
				}
				_delay_ms(1000);
				break;
			case  MTELPHONE_SET:
				if(fl == 0){
    200e:	80 91 a4 02 	lds	r24, 0x02A4
    2012:	81 11       	cpse	r24, r1
    2014:	04 c0       	rjmp	.+8      	; 0x201e <main+0x7fe>
					ActSN = TELPRNSTR;
					fl = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 a4 02 	sts	0x02A4, r24
    201c:	08 c0       	rjmp	.+16     	; 0x202e <main+0x80e>
				}
				switch(ActSN) {
    201e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2020:	b1 30       	cpi	r27, 0x01	; 1
    2022:	f9 f0       	breq	.+62     	; 0x2062 <main+0x842>
    2024:	20 f0       	brcs	.+8      	; 0x202e <main+0x80e>
    2026:	b2 30       	cpi	r27, 0x02	; 2
    2028:	09 f4       	brne	.+2      	; 0x202c <main+0x80c>
    202a:	5b c0       	rjmp	.+182    	; 0x20e2 <main+0x8c2>
    202c:	69 c7       	rjmp	.+3794   	; 0x2f00 <main+0x16e0>
					case TELPRNSTR:
						LCD_CLEAR();
    202e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S:\n"),setStr, telStr);
    2032:	84 ef       	ldi	r24, 0xF4	; 244
    2034:	93 e0       	ldi	r25, 0x03	; 3
    2036:	9f 93       	push	r25
    2038:	8f 93       	push	r24
    203a:	87 e9       	ldi	r24, 0x97	; 151
    203c:	94 e0       	ldi	r25, 0x04	; 4
    203e:	9f 93       	push	r25
    2040:	8f 93       	push	r24
    2042:	8a e0       	ldi	r24, 0x0A	; 10
    2044:	93 e0       	ldi	r25, 0x03	; 3
    2046:	9f 93       	push	r25
    2048:	8f 93       	push	r24
    204a:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ActSN = TELENTERNUM;
						n = 0;
						break;
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
					case TELPRNSTR:
						LCD_CLEAR();
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S:\n"),setStr, telStr);
						ActSN = TELENTERNUM;
						n = 0;
    205a:	18 8a       	std	Y+16, r1	; 0x10
				switch(ActSN) {
					case TELPRNSTR:
						LCD_CLEAR();
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S:\n"),setStr, telStr);
						ActSN = TELENTERNUM;
    205c:	e1 e0       	ldi	r30, 0x01	; 1
    205e:	ef 87       	std	Y+15, r30	; 0x0f
						n = 0;
						break;
    2060:	4f c7       	rjmp	.+3742   	; 0x2f00 <main+0x16e0>
					case TELENTERNUM:
						if(ch >= 0x30 && ch <= 0x39) {
    2062:	80 ed       	ldi	r24, 0xD0	; 208
    2064:	8b 0d       	add	r24, r11
    2066:	8a 30       	cpi	r24, 0x0A	; 10
    2068:	78 f4       	brcc	.+30     	; 0x2088 <main+0x868>
							if(n < LENNUMPHONE){
    206a:	f8 89       	ldd	r31, Y+16	; 0x10
    206c:	fe 30       	cpi	r31, 0x0E	; 14
    206e:	60 f4       	brcc	.+24     	; 0x2088 <main+0x868>
								printf("%c",ch);
    2070:	8b 2d       	mov	r24, r11
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <putchar>
								telNumber[n] = ch;
    2078:	28 89       	ldd	r18, Y+16	; 0x10
    207a:	e2 2f       	mov	r30, r18
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	e9 59       	subi	r30, 0x99	; 153
    2080:	fc 4f       	sbci	r31, 0xFC	; 252
    2082:	b0 82       	st	Z, r11
								n++;
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	28 8b       	std	Y+16, r18	; 0x10
								}
						 	 }
						if(ch == '*')
    2088:	3a e2       	ldi	r19, 0x2A	; 42
    208a:	b3 12       	cpse	r11, r19
    208c:	39 c7       	rjmp	.+3698   	; 0x2f00 <main+0x16e0>
							{
							 telNumber[n] = '\0';
    208e:	48 89       	ldd	r20, Y+16	; 0x10
    2090:	e4 2f       	mov	r30, r20
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	0f 2e       	mov	r0, r31
    2096:	f7 e6       	ldi	r31, 0x67	; 103
    2098:	cf 2e       	mov	r12, r31
    209a:	f3 e0       	ldi	r31, 0x03	; 3
    209c:	df 2e       	mov	r13, r31
    209e:	f0 2d       	mov	r31, r0
    20a0:	e9 59       	subi	r30, 0x99	; 153
    20a2:	fc 4f       	sbci	r31, 0xFC	; 252
    20a4:	10 82       	st	Z, r1
							 printf_P(PSTR("\n%S%S?"),saveStr, toeepromStr);
    20a6:	8e e6       	ldi	r24, 0x6E	; 110
    20a8:	94 e0       	ldi	r25, 0x04	; 4
    20aa:	9f 93       	push	r25
    20ac:	8f 93       	push	r24
    20ae:	89 e6       	ldi	r24, 0x69	; 105
    20b0:	94 e0       	ldi	r25, 0x04	; 4
    20b2:	9f 93       	push	r25
    20b4:	8f 93       	push	r24
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	93 e0       	ldi	r25, 0x03	; 3
    20ba:	9f 93       	push	r25
    20bc:	8f 93       	push	r24
    20be:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
							 printf_P(PSTR("\n%s"),telNumber);
    20c2:	df 92       	push	r13
    20c4:	cf 92       	push	r12
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	92 e0       	ldi	r25, 0x02	; 2
    20ca:	9f 93       	push	r25
    20cc:	8f 93       	push	r24
    20ce:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
							 ActSN = TELTOEEPROM;
    20dc:	72 e0       	ldi	r23, 0x02	; 2
    20de:	7f 87       	std	Y+15, r23	; 0x0f
    20e0:	0f c7       	rjmp	.+3614   	; 0x2f00 <main+0x16e0>
							}
						break;
					case TELTOEEPROM:

						if(ch == '*') {
    20e2:	8a e2       	ldi	r24, 0x2A	; 42
    20e4:	b8 12       	cpse	r11, r24
    20e6:	0c c7       	rjmp	.+3608   	; 0x2f00 <main+0x16e0>
							//eeprom_update_block((void *)telNumber , (void*)etelNumber ,strlen(telNumber));
							eeprom_write_block((void *)telNumber , (void*)etelNumber ,strlen(telNumber)+1);
    20e8:	e7 e6       	ldi	r30, 0x67	; 103
    20ea:	f3 e0       	ldi	r31, 0x03	; 3
    20ec:	01 90       	ld	r0, Z+
    20ee:	00 20       	and	r0, r0
    20f0:	e9 f7       	brne	.-6      	; 0x20ec <main+0x8cc>
    20f2:	af 01       	movw	r20, r30
    20f4:	47 56       	subi	r20, 0x67	; 103
    20f6:	53 40       	sbci	r21, 0x03	; 3
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	87 e6       	ldi	r24, 0x67	; 103
    20fe:	93 e0       	ldi	r25, 0x03	; 3
    2100:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__eewr_block_m328p>
							printf_P(PSTR("\n%SD %S!"),saveStr,okStr);
    2104:	80 ef       	ldi	r24, 0xF0	; 240
    2106:	94 e0       	ldi	r25, 0x04	; 4
    2108:	9f 93       	push	r25
    210a:	8f 93       	push	r24
    210c:	89 e6       	ldi	r24, 0x69	; 105
    210e:	94 e0       	ldi	r25, 0x04	; 4
    2110:	9f 93       	push	r25
    2112:	8f 93       	push	r24
    2114:	86 ef       	ldi	r24, 0xF6	; 246
    2116:	92 e0       	ldi	r25, 0x02	; 2
    2118:	9f 93       	push	r25
    211a:	8f 93       	push	r24
    211c:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
							ActSN = EXITTELSET;;
    212c:	93 e0       	ldi	r25, 0x03	; 3
    212e:	9f 87       	std	Y+15, r25	; 0x0f
    2130:	e7 c6       	rjmp	.+3534   	; 0x2f00 <main+0x16e0>
				}

				break;

			case MSNs_SET:
				if(fl == 0){
    2132:	80 91 a4 02 	lds	r24, 0x02A4
    2136:	81 11       	cpse	r24, r1
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <main+0x922>
					ActSN = INDOOR;
					fl = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	80 93 a4 02 	sts	0x02A4, r24
    2140:	14 c0       	rjmp	.+40     	; 0x216a <main+0x94a>
				}

				switch(ActSN) {
    2142:	af 85       	ldd	r26, Y+15	; 0x0f
    2144:	a2 30       	cpi	r26, 0x02	; 2
    2146:	09 f4       	brne	.+2      	; 0x214a <main+0x92a>
    2148:	67 c0       	rjmp	.+206    	; 0x2218 <main+0x9f8>
    214a:	28 f4       	brcc	.+10     	; 0x2156 <main+0x936>
    214c:	aa 23       	and	r26, r26
    214e:	69 f0       	breq	.+26     	; 0x216a <main+0x94a>
    2150:	a1 30       	cpi	r26, 0x01	; 1
    2152:	b1 f1       	breq	.+108    	; 0x21c0 <main+0x9a0>
    2154:	d5 c6       	rjmp	.+3498   	; 0x2f00 <main+0x16e0>
    2156:	bf 85       	ldd	r27, Y+15	; 0x0f
    2158:	b4 30       	cpi	r27, 0x04	; 4
    215a:	09 f4       	brne	.+2      	; 0x215e <main+0x93e>
    215c:	5f c1       	rjmp	.+702    	; 0x241c <main+0xbfc>
    215e:	08 f4       	brcc	.+2      	; 0x2162 <main+0x942>
    2160:	87 c0       	rjmp	.+270    	; 0x2270 <main+0xa50>
    2162:	b5 30       	cpi	r27, 0x05	; 5
    2164:	09 f4       	brne	.+2      	; 0x2168 <main+0x948>
    2166:	af c0       	rjmp	.+350    	; 0x22c6 <main+0xaa6>
    2168:	cb c6       	rjmp	.+3478   	; 0x2f00 <main+0x16e0>

					case INDOOR:
						LCD_CLEAR();
    216a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    216e:	83 ed       	ldi	r24, 0xD3	; 211
    2170:	94 e0       	ldi	r25, 0x04	; 4
    2172:	9f 93       	push	r25
    2174:	8f 93       	push	r24
    2176:	8a ed       	ldi	r24, 0xDA	; 218
    2178:	94 e0       	ldi	r25, 0x04	; 4
    217a:	9f 93       	push	r25
    217c:	8f 93       	push	r24
    217e:	8f ee       	ldi	r24, 0xEF	; 239
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
    218a:	80 ed       	ldi	r24, 0xD0	; 208
    218c:	94 e0       	ldi	r25, 0x04	; 4
    218e:	9f 93       	push	r25
    2190:	8f 93       	push	r24
    2192:	89 ec       	ldi	r24, 0xC9	; 201
    2194:	94 e0       	ldi	r25, 0x04	; 4
    2196:	9f 93       	push	r25
    2198:	8f 93       	push	r24
    219a:	86 ee       	ldi	r24, 0xE6	; 230
    219c:	92 e0       	ldi	r25, 0x02	; 2
    219e:	9f 93       	push	r25
    21a0:	8f 93       	push	r24
    21a2:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						n = 0;
						nSNpos = 0;
						ActSN_next = OUTDOOR;
						aSN_num = 0;
						ActSN = ENTER_SN;
						break;
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = OUTDOOR;
						aSN_num = 0;
    21b0:	1b 8a       	std	Y+19, r1	; 0x13
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = OUTDOOR;
    21b2:	f1 e0       	ldi	r31, 0x01	; 1
    21b4:	f9 8b       	std	Y+17, r31	; 0x11
						LCD_CLEAR();
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
						ch = 'z';
						n = 0;
    21b6:	18 8a       	std	Y+16, r1	; 0x10
						nSNpos = 0;
						ActSN_next = OUTDOOR;
						aSN_num = 0;
						ActSN = ENTER_SN;
    21b8:	25 e0       	ldi	r18, 0x05	; 5
    21ba:	2f 87       	std	Y+15, r18	; 0x0f
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),indoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
    21bc:	1a 8a       	std	Y+18, r1	; 0x12
						ActSN_next = OUTDOOR;
						aSN_num = 0;
						ActSN = ENTER_SN;
						break;
    21be:	a0 c6       	rjmp	.+3392   	; 0x2f00 <main+0x16e0>
					case OUTDOOR:
						LCD_CLEAR();
    21c0:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    21c4:	83 ed       	ldi	r24, 0xD3	; 211
    21c6:	94 e0       	ldi	r25, 0x04	; 4
    21c8:	9f 93       	push	r25
    21ca:	8f 93       	push	r24
    21cc:	8a ed       	ldi	r24, 0xDA	; 218
    21ce:	94 e0       	ldi	r25, 0x04	; 4
    21d0:	9f 93       	push	r25
    21d2:	8f 93       	push	r24
    21d4:	8f ed       	ldi	r24, 0xDF	; 223
    21d6:	92 e0       	ldi	r25, 0x02	; 2
    21d8:	9f 93       	push	r25
    21da:	8f 93       	push	r24
    21dc:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
    21e0:	80 ed       	ldi	r24, 0xD0	; 208
    21e2:	94 e0       	ldi	r25, 0x04	; 4
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	81 ec       	ldi	r24, 0xC1	; 193
    21ea:	94 e0       	ldi	r25, 0x04	; 4
    21ec:	9f 93       	push	r25
    21ee:	8f 93       	push	r24
    21f0:	86 ed       	ldi	r24, 0xD6	; 214
    21f2:	92 e0       	ldi	r25, 0x02	; 2
    21f4:	9f 93       	push	r25
    21f6:	8f 93       	push	r24
    21f8:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						n = 0;
						nSNpos = 0;
						ActSN_next = SUPPLY;
						aSN_num = 1;
						ActSN = ENTER_SN;
						break;
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = SUPPLY;
						aSN_num = 1;
    2206:	71 e0       	ldi	r23, 0x01	; 1
    2208:	7b 8b       	std	Y+19, r23	; 0x13
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = SUPPLY;
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	89 8b       	std	Y+17, r24	; 0x11
						LCD_CLEAR();
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
						ch = 'z';
						n = 0;
    220e:	18 8a       	std	Y+16, r1	; 0x10
						nSNpos = 0;
						ActSN_next = SUPPLY;
						aSN_num = 1;
						ActSN = ENTER_SN;
    2210:	95 e0       	ldi	r25, 0x05	; 5
    2212:	9f 87       	std	Y+15, r25	; 0x0f
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),outdoorStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
    2214:	1a 8a       	std	Y+18, r1	; 0x12
						ActSN_next = SUPPLY;
						aSN_num = 1;
						ActSN = ENTER_SN;
						break;
    2216:	74 c6       	rjmp	.+3304   	; 0x2f00 <main+0x16e0>
					case SUPPLY:
						LCD_CLEAR();
    2218:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    221c:	83 ed       	ldi	r24, 0xD3	; 211
    221e:	94 e0       	ldi	r25, 0x04	; 4
    2220:	9f 93       	push	r25
    2222:	8f 93       	push	r24
    2224:	8a ed       	ldi	r24, 0xDA	; 218
    2226:	94 e0       	ldi	r25, 0x04	; 4
    2228:	9f 93       	push	r25
    222a:	8f 93       	push	r24
    222c:	8f ec       	ldi	r24, 0xCF	; 207
    222e:	92 e0       	ldi	r25, 0x02	; 2
    2230:	9f 93       	push	r25
    2232:	8f 93       	push	r24
    2234:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
    2238:	80 ed       	ldi	r24, 0xD0	; 208
    223a:	94 e0       	ldi	r25, 0x04	; 4
    223c:	9f 93       	push	r25
    223e:	8f 93       	push	r24
    2240:	8a eb       	ldi	r24, 0xBA	; 186
    2242:	94 e0       	ldi	r25, 0x04	; 4
    2244:	9f 93       	push	r25
    2246:	8f 93       	push	r24
    2248:	86 ec       	ldi	r24, 0xC6	; 198
    224a:	92 e0       	ldi	r25, 0x02	; 2
    224c:	9f 93       	push	r25
    224e:	8f 93       	push	r24
    2250:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						n = 0;
						nSNpos = 0;
						ActSN_next = RETURN;
						aSN_num = 2;
						ActSN = ENTER_SN;
						break;
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = RETURN;
						aSN_num = 2;
    225e:	b2 e0       	ldi	r27, 0x02	; 2
    2260:	bb 8b       	std	Y+19, r27	; 0x13
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = RETURN;
    2262:	e3 e0       	ldi	r30, 0x03	; 3
    2264:	e9 8b       	std	Y+17, r30	; 0x11
						LCD_CLEAR();
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
						ch = 'z';
						n = 0;
    2266:	18 8a       	std	Y+16, r1	; 0x10
						nSNpos = 0;
						ActSN_next = RETURN;
						aSN_num = 2;
						ActSN = ENTER_SN;
    2268:	f5 e0       	ldi	r31, 0x05	; 5
    226a:	ff 87       	std	Y+15, r31	; 0x0f
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),supplyStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
    226c:	1a 8a       	std	Y+18, r1	; 0x12
						ActSN_next = RETURN;
						aSN_num = 2;
						ActSN = ENTER_SN;
						break;
    226e:	48 c6       	rjmp	.+3216   	; 0x2f00 <main+0x16e0>
					case RETURN:
						LCD_CLEAR();
    2270:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2274:	83 ed       	ldi	r24, 0xD3	; 211
    2276:	94 e0       	ldi	r25, 0x04	; 4
    2278:	9f 93       	push	r25
    227a:	8f 93       	push	r24
    227c:	8a ed       	ldi	r24, 0xDA	; 218
    227e:	94 e0       	ldi	r25, 0x04	; 4
    2280:	9f 93       	push	r25
    2282:	8f 93       	push	r24
    2284:	8f eb       	ldi	r24, 0xBF	; 191
    2286:	92 e0       	ldi	r25, 0x02	; 2
    2288:	9f 93       	push	r25
    228a:	8f 93       	push	r24
    228c:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
    2290:	80 ed       	ldi	r24, 0xD0	; 208
    2292:	94 e0       	ldi	r25, 0x04	; 4
    2294:	9f 93       	push	r25
    2296:	8f 93       	push	r24
    2298:	83 eb       	ldi	r24, 0xB3	; 179
    229a:	94 e0       	ldi	r25, 0x04	; 4
    229c:	9f 93       	push	r25
    229e:	8f 93       	push	r24
    22a0:	86 eb       	ldi	r24, 0xB6	; 182
    22a2:	92 e0       	ldi	r25, 0x02	; 2
    22a4:	9f 93       	push	r25
    22a6:	8f 93       	push	r24
    22a8:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						n = 0;
						nSNpos = 0;
						ActSN_next = INDOOR;
						aSN_num = 3;
						ActSN = ENTER_SN;
						break;
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = INDOOR;
						aSN_num = 3;
    22b6:	33 e0       	ldi	r19, 0x03	; 3
    22b8:	3b 8b       	std	Y+19, r19	; 0x13
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
						ActSN_next = INDOOR;
    22ba:	19 8a       	std	Y+17, r1	; 0x11
						LCD_CLEAR();
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
						ch = 'z';
						n = 0;
    22bc:	18 8a       	std	Y+16, r1	; 0x10
						nSNpos = 0;
						ActSN_next = INDOOR;
						aSN_num = 3;
						ActSN = ENTER_SN;
    22be:	45 e0       	ldi	r20, 0x05	; 5
    22c0:	4f 87       	std	Y+15, r20	; 0x0f
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S %S:\n"),returnStr,snStr);
						ch = 'z';
						n = 0;
						nSNpos = 0;
    22c2:	1a 8a       	std	Y+18, r1	; 0x12
						ActSN_next = INDOOR;
						aSN_num = 3;
						ActSN = ENTER_SN;
						break;
    22c4:	1d c6       	rjmp	.+3130   	; 0x2f00 <main+0x16e0>

					case ENTER_SN:
						 if(ch >= 0x30 && ch <= 0x39) {
    22c6:	80 ed       	ldi	r24, 0xD0	; 208
    22c8:	8b 0d       	add	r24, r11
    22ca:	8a 30       	cpi	r24, 0x0A	; 10
    22cc:	08 f0       	brcs	.+2      	; 0x22d0 <main+0xab0>
    22ce:	a2 c0       	rjmp	.+324    	; 0x2414 <main+0xbf4>
							if(nSNpos < SNLEN){
    22d0:	6a 89       	ldd	r22, Y+18	; 0x12
    22d2:	67 30       	cpi	r22, 0x07	; 7
    22d4:	08 f0       	brcs	.+2      	; 0x22d8 <main+0xab8>
    22d6:	9a c0       	rjmp	.+308    	; 0x240c <main+0xbec>
								printf("%c",ch);
    22d8:	8b 2d       	mov	r24, r11
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <putchar>
								wStr[n] = ch;
    22e0:	78 89       	ldd	r23, Y+16	; 0x10
    22e2:	87 2f       	mov	r24, r23
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	e1 e0       	ldi	r30, 0x01	; 1
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	ec 0f       	add	r30, r28
    22ec:	fd 1f       	adc	r31, r29
    22ee:	e8 0f       	add	r30, r24
    22f0:	f9 1f       	adc	r31, r25
    22f2:	b0 82       	st	Z, r11
							  if (n < 2) n++;
    22f4:	72 30       	cpi	r23, 0x02	; 2
    22f6:	18 f4       	brcc	.+6      	; 0x22fe <main+0xade>
    22f8:	7f 5f       	subi	r23, 0xFF	; 255
    22fa:	78 8b       	std	Y+16, r23	; 0x10
    22fc:	8b c0       	rjmp	.+278    	; 0x2414 <main+0xbf4>
							  else {
								wStr[n+1] = 0;
    22fe:	e2 e0       	ldi	r30, 0x02	; 2
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	ec 0f       	add	r30, r28
    2304:	fd 1f       	adc	r31, r29
    2306:	e8 0f       	add	r30, r24
    2308:	f9 1f       	adc	r31, r25
    230a:	10 82       	st	Z, r1
								ki = atoi(wStr);
    230c:	ce 01       	movw	r24, r28
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
								if(ki <= 255){
    2314:	8f 3f       	cpi	r24, 0xFF	; 255
    2316:	91 05       	cpc	r25, r1
    2318:	11 f0       	breq	.+4      	; 0x231e <main+0xafe>
    231a:	0c f0       	brlt	.+2      	; 0x231e <main+0xafe>
    231c:	67 c0       	rjmp	.+206    	; 0x23ec <main+0xbcc>
									gSensNumb[nSNpos] = (uint8_t) ki;
    231e:	0f 2e       	mov	r0, r31
    2320:	f6 e0       	ldi	r31, 0x06	; 6
    2322:	cf 2e       	mov	r12, r31
    2324:	d1 2c       	mov	r13, r1
    2326:	f0 2d       	mov	r31, r0
    2328:	cc 0e       	add	r12, r28
    232a:	dd 1e       	adc	r13, r29
    232c:	aa 89       	ldd	r26, Y+18	; 0x12
    232e:	ca 0e       	add	r12, r26
    2330:	d1 1c       	adc	r13, r1
    2332:	f6 01       	movw	r30, r12
    2334:	80 83       	st	Z, r24
									ReturnXPos(3);
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	0e 94 6e 21 	call	0x42dc	; 0x42dc <ReturnXPos>
									printf("%02X ",gSensNumb[nSNpos]);
    233c:	d6 01       	movw	r26, r12
    233e:	8c 91       	ld	r24, X
    2340:	1f 92       	push	r1
    2342:	8f 93       	push	r24
    2344:	85 e2       	ldi	r24, 0x25	; 37
    2346:	92 e0       	ldi	r25, 0x02	; 2
    2348:	9f 93       	push	r25
    234a:	8f 93       	push	r24
    234c:	0e 94 1d 2b 	call	0x563a	; 0x563a <printf>
							        ReturnXPos(1);
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	0e 94 6e 21 	call	0x42dc	; 0x42dc <ReturnXPos>
									nSNpos += 1;
    2356:	ba 89       	ldd	r27, Y+18	; 0x12
    2358:	bf 5f       	subi	r27, 0xFF	; 255
    235a:	ba 8b       	std	Y+18, r27	; 0x12
								   if(nSNpos == SNLEN){
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	b7 30       	cpi	r27, 0x07	; 7
    2366:	09 f0       	breq	.+2      	; 0x236a <main+0xb4a>
    2368:	54 c0       	rjmp	.+168    	; 0x2412 <main+0xbf2>
								      gSensNumb[nSNpos] = 0;
    236a:	1d 86       	std	Y+13, r1	; 0x0d
    236c:	fe 01       	movw	r30, r28
    236e:	36 96       	adiw	r30, 0x06	; 6
    2370:	3b 89       	ldd	r19, Y+19	; 0x13
    2372:	28 e0       	ldi	r18, 0x08	; 8
    2374:	32 9f       	mul	r19, r18
    2376:	a0 01       	movw	r20, r0
    2378:	11 24       	eor	r1, r1
    237a:	46 55       	subi	r20, 0x56	; 86
    237c:	5d 4f       	sbci	r21, 0xFD	; 253
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
								      for(k=0;k<SNLEN;k++)
										 gSensorIDs[aSN_num][k] = gSensNumb[k];
    2382:	23 2f       	mov	r18, r19
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	69 01       	movw	r12, r18
    2388:	61 91       	ld	r22, Z+
    238a:	da 01       	movw	r26, r20
    238c:	a8 0f       	add	r26, r24
    238e:	b9 1f       	adc	r27, r25
    2390:	6c 93       	st	X, r22
    2392:	01 96       	adiw	r24, 0x01	; 1
									printf("%02X ",gSensNumb[nSNpos]);
							        ReturnXPos(1);
									nSNpos += 1;
								   if(nSNpos == SNLEN){
								      gSensNumb[nSNpos] = 0;
								      for(k=0;k<SNLEN;k++)
    2394:	87 30       	cpi	r24, 0x07	; 7
    2396:	91 05       	cpc	r25, r1
    2398:	b1 f7       	brne	.-20     	; 0x2386 <main+0xb66>
										 gSensorIDs[aSN_num][k] = gSensNumb[k];
								      ch = crc8(&gSensNumb[0],SNLEN);
    239a:	67 e0       	ldi	r22, 0x07	; 7
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	ce 01       	movw	r24, r28
    23a0:	06 96       	adiw	r24, 0x06	; 6
    23a2:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <crc8>
    23a6:	b8 2e       	mov	r11, r24
								      gSensorIDs[aSN_num][k] = ch;
    23a8:	f6 01       	movw	r30, r12
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	e6 55       	subi	r30, 0x56	; 86
    23b8:	fd 4f       	sbci	r31, 0xFD	; 253
    23ba:	87 83       	std	Z+7, r24	; 0x07
								      printf_P(PSTR("\n %S:%02X"),checksumStr,ch);
    23bc:	1f 92       	push	r1
    23be:	8f 93       	push	r24
    23c0:	8b e9       	ldi	r24, 0x9B	; 155
    23c2:	94 e0       	ldi	r25, 0x04	; 4
    23c4:	9f 93       	push	r25
    23c6:	8f 93       	push	r24
    23c8:	8c ea       	ldi	r24, 0xAC	; 172
    23ca:	92 e0       	ldi	r25, 0x02	; 2
    23cc:	9f 93       	push	r25
    23ce:	8f 93       	push	r24
    23d0:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
								      ActSN = SN_EXIT;
								   }
								} else { ReturnXPos(3); printf_P(PSTR("   ")); ReturnXPos(3);}
								n = 0;
    23e0:	18 8a       	std	Y+16, r1	; 0x10
								      for(k=0;k<SNLEN;k++)
										 gSensorIDs[aSN_num][k] = gSensNumb[k];
								      ch = crc8(&gSensNumb[0],SNLEN);
								      gSensorIDs[aSN_num][k] = ch;
								      printf_P(PSTR("\n %S:%02X"),checksumStr,ch);
								      ActSN = SN_EXIT;
    23e2:	44 e0       	ldi	r20, 0x04	; 4
    23e4:	4f 87       	std	Y+15, r20	; 0x0f
									printf("%02X ",gSensNumb[nSNpos]);
							        ReturnXPos(1);
									nSNpos += 1;
								   if(nSNpos == SNLEN){
								      gSensNumb[nSNpos] = 0;
								      for(k=0;k<SNLEN;k++)
    23e6:	67 e0       	ldi	r22, 0x07	; 7
    23e8:	6e 87       	std	Y+14, r22	; 0x0e
    23ea:	14 c0       	rjmp	.+40     	; 0x2414 <main+0xbf4>
								      ch = crc8(&gSensNumb[0],SNLEN);
								      gSensorIDs[aSN_num][k] = ch;
								      printf_P(PSTR("\n %S:%02X"),checksumStr,ch);
								      ActSN = SN_EXIT;
								   }
								} else { ReturnXPos(3); printf_P(PSTR("   ")); ReturnXPos(3);}
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	0e 94 6e 21 	call	0x42dc	; 0x42dc <ReturnXPos>
    23f2:	88 ea       	ldi	r24, 0xA8	; 168
    23f4:	92 e0       	ldi	r25, 0x02	; 2
    23f6:	9f 93       	push	r25
    23f8:	8f 93       	push	r24
    23fa:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    23fe:	83 e0       	ldi	r24, 0x03	; 3
    2400:	0e 94 6e 21 	call	0x42dc	; 0x42dc <ReturnXPos>
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
								n = 0;
    2408:	18 8a       	std	Y+16, r1	; 0x10
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <main+0xbf4>
							  }
						    } else 	ActSN = SN_EXIT;
    240c:	74 e0       	ldi	r23, 0x04	; 4
    240e:	7f 87       	std	Y+15, r23	; 0x0f
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <main+0xbf4>
								      gSensorIDs[aSN_num][k] = ch;
								      printf_P(PSTR("\n %S:%02X"),checksumStr,ch);
								      ActSN = SN_EXIT;
								   }
								} else { ReturnXPos(3); printf_P(PSTR("   ")); ReturnXPos(3);}
								n = 0;
    2412:	18 8a       	std	Y+16, r1	; 0x10
							  }
						    } else 	ActSN = SN_EXIT;

						}

							if(ch == '*')
    2414:	8a e2       	ldi	r24, 0x2A	; 42
    2416:	b8 12       	cpse	r11, r24
    2418:	73 c5       	rjmp	.+2790   	; 0x2f00 <main+0x16e0>
    241a:	64 c5       	rjmp	.+2760   	; 0x2ee4 <main+0x16c4>
								ActSN = ActSN_next;

							break;
						case SN_EXIT:
							if(ch == '*')
    241c:	9a e2       	ldi	r25, 0x2A	; 42
    241e:	b9 12       	cpse	r11, r25
    2420:	6f c5       	rjmp	.+2782   	; 0x2f00 <main+0x16e0>
    2422:	63 c5       	rjmp	.+2758   	; 0x2eea <main+0x16ca>
					}	// switch(ActSN)

				break;

			case MVIEW_SNs:
				if(fl == 0){
    2424:	80 91 a4 02 	lds	r24, 0x02A4
    2428:	81 11       	cpse	r24, r1
    242a:	5e c0       	rjmp	.+188    	; 0x24e8 <main+0xcc8>
					fl = 1;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	80 93 a4 02 	sts	0x02A4, r24
					LCD_CLEAR();
    2432:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						ks = nSensors - LCD_NUMBLINES+2;
					}
				  LCD_CLEAR();
				}
*/
				printf_P(PSTR("%S"),nsupdownStr);
    2436:	84 ea       	ldi	r24, 0xA4	; 164
    2438:	94 e0       	ldi	r25, 0x04	; 4
    243a:	9f 93       	push	r25
    243c:	8f 93       	push	r24
    243e:	85 ea       	ldi	r24, 0xA5	; 165
    2440:	92 e0       	ldi	r25, 0x02	; 2
    2442:	9f 93       	push	r25
    2444:	8f 93       	push	r24
    2446:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    244a:	0f 2e       	mov	r0, r31
    244c:	f0 eb       	ldi	r31, 0xB0	; 176
    244e:	cf 2e       	mov	r12, r31
    2450:	f2 e0       	ldi	r31, 0x02	; 2
    2452:	df 2e       	mov	r13, r31
    2454:	f0 2d       	mov	r31, r0
    2456:	0f 2e       	mov	r0, r31
    2458:	f0 ed       	ldi	r31, 0xD0	; 208
    245a:	af 2e       	mov	r10, r31
    245c:	f2 e0       	ldi	r31, 0x02	; 2
    245e:	bf 2e       	mov	r11, r31
    2460:	f0 2d       	mov	r31, r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
//					n = y;
#ifdef SN_SENSOR_SIZE
						printf("%02X%02X%02X%02X%02X%02X%02X",
#else
						// if(sn_presence[k])
						printf("\n%02X%02X%02X%02X%02X%02X%02X",
    246a:	d6 01       	movw	r26, r12
    246c:	8c 91       	ld	r24, X
    246e:	1f 92       	push	r1
    2470:	8f 93       	push	r24
    2472:	f6 01       	movw	r30, r12
    2474:	31 97       	sbiw	r30, 0x01	; 1
    2476:	80 81       	ld	r24, Z
    2478:	1f 92       	push	r1
    247a:	8f 93       	push	r24
    247c:	31 97       	sbiw	r30, 0x01	; 1
    247e:	80 81       	ld	r24, Z
    2480:	1f 92       	push	r1
    2482:	8f 93       	push	r24
    2484:	31 97       	sbiw	r30, 0x01	; 1
    2486:	80 81       	ld	r24, Z
    2488:	1f 92       	push	r1
    248a:	8f 93       	push	r24
    248c:	31 97       	sbiw	r30, 0x01	; 1
    248e:	80 81       	ld	r24, Z
    2490:	1f 92       	push	r1
    2492:	8f 93       	push	r24
    2494:	31 97       	sbiw	r30, 0x01	; 1
    2496:	80 81       	ld	r24, Z
    2498:	1f 92       	push	r1
    249a:	8f 93       	push	r24
    249c:	31 97       	sbiw	r30, 0x01	; 1
    249e:	80 81       	ld	r24, Z
    24a0:	1f 92       	push	r1
    24a2:	8f 93       	push	r24
    24a4:	ab e2       	ldi	r26, 0x2B	; 43
    24a6:	b2 e0       	ldi	r27, 0x02	; 2
    24a8:	bf 93       	push	r27
    24aa:	af 93       	push	r26
    24ac:	0e 94 1d 2b 	call	0x563a	; 0x563a <printf>
    24b0:	f8 e0       	ldi	r31, 0x08	; 8
    24b2:	cf 0e       	add	r12, r31
    24b4:	d1 1c       	adc	r13, r1
				}
*/
				printf_P(PSTR("%S"),nsupdownStr);

//				for(k = ks;(k < ks+LCD_NUMBLINES-2) && (k < nSensors);k++){
				for(k = 0;k < MAXSENSORS;k++){
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	ca 14       	cp	r12, r10
    24c2:	db 04       	cpc	r13, r11
    24c4:	91 f6       	brne	.-92     	; 0x246a <main+0xc4a>
							gSensorIDs[k][3],gSensorIDs[k][4],\
							gSensorIDs[k][5],gSensorIDs[k][6]);

				}

				printf_P(PSTR("    %S"),exitStr);
    24c6:	8a ed       	ldi	r24, 0xDA	; 218
    24c8:	94 e0       	ldi	r25, 0x04	; 4
    24ca:	9f 93       	push	r25
    24cc:	8f 93       	push	r24
    24ce:	8e e9       	ldi	r24, 0x9E	; 158
    24d0:	92 e0       	ldi	r25, 0x02	; 2
    24d2:	9f 93       	push	r25
    24d4:	8f 93       	push	r24
    24d6:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
				}
*/
				printf_P(PSTR("%S"),nsupdownStr);

//				for(k = ks;(k < ks+LCD_NUMBLINES-2) && (k < nSensors);k++){
				for(k = 0;k < MAXSENSORS;k++){
    24e2:	34 e0       	ldi	r19, 0x04	; 4
    24e4:	3e 87       	std	Y+14, r19	; 0x0e
    24e6:	0c c5       	rjmp	.+2584   	; 0x2f00 <main+0x16e0>
    24e8:	4f ef       	ldi	r20, 0xFF	; 255
    24ea:	69 e6       	ldi	r22, 0x69	; 105
    24ec:	78 e1       	ldi	r23, 0x18	; 24
    24ee:	41 50       	subi	r20, 0x01	; 1
    24f0:	60 40       	sbci	r22, 0x00	; 0
    24f2:	70 40       	sbci	r23, 0x00	; 0
    24f4:	e1 f7       	brne	.-8      	; 0x24ee <main+0xcce>
    24f6:	00 c0       	rjmp	.+0      	; 0x24f8 <main+0xcd8>
    24f8:	00 00       	nop
    24fa:	02 c5       	rjmp	.+2564   	; 0x2f00 <main+0x16e0>
				} else _delay_ms(1000);

				break;

			case MASSIGN:
				if(fl == 0){
    24fc:	80 91 a4 02 	lds	r24, 0x02A4
    2500:	81 11       	cpse	r24, r1
    2502:	fe c4       	rjmp	.+2556   	; 0x2f00 <main+0x16e0>
					LCD_CLEAR();
    2504:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
				//LCD_FIRSTLINE();
				printf_P(PSTR("%S%i - %S"), snStr,1,indoorStr);
    2508:	89 ec       	ldi	r24, 0xC9	; 201
    250a:	94 e0       	ldi	r25, 0x04	; 4
    250c:	9f 93       	push	r25
    250e:	8f 93       	push	r24
    2510:	1f 92       	push	r1
    2512:	bb 24       	eor	r11, r11
    2514:	b3 94       	inc	r11
    2516:	bf 92       	push	r11
    2518:	0f 2e       	mov	r0, r31
    251a:	f0 ed       	ldi	r31, 0xD0	; 208
    251c:	cf 2e       	mov	r12, r31
    251e:	f4 e0       	ldi	r31, 0x04	; 4
    2520:	df 2e       	mov	r13, r31
    2522:	f0 2d       	mov	r31, r0
    2524:	df 92       	push	r13
    2526:	cf 92       	push	r12
    2528:	84 e9       	ldi	r24, 0x94	; 148
    252a:	92 e0       	ldi	r25, 0x02	; 2
    252c:	9f 93       	push	r25
    252e:	8f 93       	push	r24
    2530:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("\n%S%i - %S"),snStr,2,outdoorStr);
    2534:	81 ec       	ldi	r24, 0xC1	; 193
    2536:	94 e0       	ldi	r25, 0x04	; 4
    2538:	9f 93       	push	r25
    253a:	8f 93       	push	r24
    253c:	1f 92       	push	r1
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	8f 93       	push	r24
    2542:	df 92       	push	r13
    2544:	cf 92       	push	r12
    2546:	89 e8       	ldi	r24, 0x89	; 137
    2548:	92 e0       	ldi	r25, 0x02	; 2
    254a:	9f 93       	push	r25
    254c:	8f 93       	push	r24
    254e:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("\n%S%i - %S"),snStr,3,supplyStr);
    2552:	8a eb       	ldi	r24, 0xBA	; 186
    2554:	94 e0       	ldi	r25, 0x04	; 4
    2556:	9f 93       	push	r25
    2558:	8f 93       	push	r24
    255a:	1f 92       	push	r1
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	8f 93       	push	r24
    2560:	df 92       	push	r13
    2562:	cf 92       	push	r12
    2564:	8e e7       	ldi	r24, 0x7E	; 126
    2566:	92 e0       	ldi	r25, 0x02	; 2
    2568:	9f 93       	push	r25
    256a:	8f 93       	push	r24
    256c:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("\n%S%i - %S"),snStr,4,returnStr);
    2570:	83 eb       	ldi	r24, 0xB3	; 179
    2572:	94 e0       	ldi	r25, 0x04	; 4
    2574:	9f 93       	push	r25
    2576:	8f 93       	push	r24
    2578:	1f 92       	push	r1
    257a:	84 e0       	ldi	r24, 0x04	; 4
    257c:	8f 93       	push	r24
    257e:	df 92       	push	r13
    2580:	cf 92       	push	r12
    2582:	83 e7       	ldi	r24, 0x73	; 115
    2584:	92 e0       	ldi	r25, 0x02	; 2
    2586:	9f 93       	push	r25
    2588:	8f 93       	push	r24
    258a:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("\n   %S"),exitStr);
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	8a ed       	ldi	r24, 0xDA	; 218
    259a:	94 e0       	ldi	r25, 0x04	; 4
    259c:	9f 93       	push	r25
    259e:	8f 93       	push	r24
    25a0:	8c e6       	ldi	r24, 0x6C	; 108
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	9f 93       	push	r25
    25a6:	8f 93       	push	r24
    25a8:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				fl = 1;
    25ac:	b0 92 a4 02 	sts	0x02A4, r11
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	a3 c4       	rjmp	.+2374   	; 0x2f00 <main+0x16e0>
				}
				break;
			case MVIEWTEMPR:
				if(fl == 0){
    25ba:	80 91 a4 02 	lds	r24, 0x02A4
    25be:	81 11       	cpse	r24, r1
    25c0:	c4 c0       	rjmp	.+392    	; 0x274a <main+0xf2a>
				LCD_CLEAR();
    25c2:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
				//LCD_FIRSTLINE();

				printf_P(PSTR("%S%S:%i"),indoorStr,minStr,(int8_t)rTempInDoorMin);
    25c6:	20 91 3b 03 	lds	r18, 0x033B
    25ca:	82 2f       	mov	r24, r18
    25cc:	99 27       	eor	r25, r25
    25ce:	87 fd       	sbrc	r24, 7
    25d0:	90 95       	com	r25
    25d2:	9f 93       	push	r25
    25d4:	2f 93       	push	r18
    25d6:	0f 2e       	mov	r0, r31
    25d8:	f6 e8       	ldi	r31, 0x86	; 134
    25da:	af 2e       	mov	r10, r31
    25dc:	f4 e0       	ldi	r31, 0x04	; 4
    25de:	bf 2e       	mov	r11, r31
    25e0:	f0 2d       	mov	r31, r0
    25e2:	bf 92       	push	r11
    25e4:	af 92       	push	r10
    25e6:	0f 2e       	mov	r0, r31
    25e8:	f9 ec       	ldi	r31, 0xC9	; 201
    25ea:	8f 2e       	mov	r8, r31
    25ec:	f4 e0       	ldi	r31, 0x04	; 4
    25ee:	9f 2e       	mov	r9, r31
    25f0:	f0 2d       	mov	r31, r0
    25f2:	9f 92       	push	r9
    25f4:	8f 92       	push	r8
    25f6:	84 e6       	ldi	r24, 0x64	; 100
    25f8:	92 e0       	ldi	r25, 0x02	; 2
    25fa:	9f 93       	push	r25
    25fc:	8f 93       	push	r24
    25fe:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("\n%S%S:%i"),indoorStr,maxStr,(int8_t)rTempInDoorMax);
    2602:	20 91 3c 03 	lds	r18, 0x033C
    2606:	82 2f       	mov	r24, r18
    2608:	99 27       	eor	r25, r25
    260a:	87 fd       	sbrc	r24, 7
    260c:	90 95       	com	r25
    260e:	9f 93       	push	r25
    2610:	2f 93       	push	r18
    2612:	0f 2e       	mov	r0, r31
    2614:	f2 e8       	ldi	r31, 0x82	; 130
    2616:	cf 2e       	mov	r12, r31
    2618:	f4 e0       	ldi	r31, 0x04	; 4
    261a:	df 2e       	mov	r13, r31
    261c:	f0 2d       	mov	r31, r0
    261e:	df 92       	push	r13
    2620:	cf 92       	push	r12
    2622:	9f 92       	push	r9
    2624:	8f 92       	push	r8
    2626:	8b e5       	ldi	r24, 0x5B	; 91
    2628:	92 e0       	ldi	r25, 0x02	; 2
    262a:	9f 93       	push	r25
    262c:	8f 93       	push	r24
    262e:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("\n%S%S:%i"),outdoorStr,minStr,(int8_t)rTempOutDoorMin);
    2632:	20 91 63 03 	lds	r18, 0x0363
    2636:	82 2f       	mov	r24, r18
    2638:	99 27       	eor	r25, r25
    263a:	87 fd       	sbrc	r24, 7
    263c:	90 95       	com	r25
    263e:	9f 93       	push	r25
    2640:	2f 93       	push	r18
    2642:	bf 92       	push	r11
    2644:	af 92       	push	r10
    2646:	0f 2e       	mov	r0, r31
    2648:	f1 ec       	ldi	r31, 0xC1	; 193
    264a:	8f 2e       	mov	r8, r31
    264c:	f4 e0       	ldi	r31, 0x04	; 4
    264e:	9f 2e       	mov	r9, r31
    2650:	f0 2d       	mov	r31, r0
    2652:	9f 92       	push	r9
    2654:	8f 92       	push	r8
    2656:	82 e5       	ldi	r24, 0x52	; 82
    2658:	92 e0       	ldi	r25, 0x02	; 2
    265a:	9f 93       	push	r25
    265c:	8f 93       	push	r24
    265e:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				if((int8_t)rTempOutDoorMax < -9)
					printf_P(PSTR("%S%S:%i"),supplyStr,minStr,(int8_t)rTempSupplyMin);
				else
					printf_P(PSTR("\n%S%S:%i"),supplyStr,minStr,(int8_t)rTempSupplyMin);
#else
				printf_P(PSTR("\n%S%S:%i"),outdoorStr,maxStr,(int8_t)rTempOutDoorMax);
    2662:	20 91 7a 03 	lds	r18, 0x037A
    2666:	82 2f       	mov	r24, r18
    2668:	99 27       	eor	r25, r25
    266a:	87 fd       	sbrc	r24, 7
    266c:	90 95       	com	r25
    266e:	9f 93       	push	r25
    2670:	2f 93       	push	r18
    2672:	df 92       	push	r13
    2674:	cf 92       	push	r12
    2676:	9f 92       	push	r9
    2678:	8f 92       	push	r8
    267a:	89 e4       	ldi	r24, 0x49	; 73
    267c:	92 e0       	ldi	r25, 0x02	; 2
    267e:	9f 93       	push	r25
    2680:	8f 93       	push	r24
    2682:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("\n%S%S:%i"),supplyStr,minStr,(int8_t)rTempSupplyMin);
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	20 91 77 03 	lds	r18, 0x0377
    2694:	82 2f       	mov	r24, r18
    2696:	99 27       	eor	r25, r25
    2698:	87 fd       	sbrc	r24, 7
    269a:	90 95       	com	r25
    269c:	9f 93       	push	r25
    269e:	2f 93       	push	r18
    26a0:	bf 92       	push	r11
    26a2:	af 92       	push	r10
    26a4:	0f 2e       	mov	r0, r31
    26a6:	fa eb       	ldi	r31, 0xBA	; 186
    26a8:	8f 2e       	mov	r8, r31
    26aa:	f4 e0       	ldi	r31, 0x04	; 4
    26ac:	9f 2e       	mov	r9, r31
    26ae:	f0 2d       	mov	r31, r0
    26b0:	9f 92       	push	r9
    26b2:	8f 92       	push	r8
    26b4:	80 e4       	ldi	r24, 0x40	; 64
    26b6:	92 e0       	ldi	r25, 0x02	; 2
    26b8:	9f 93       	push	r25
    26ba:	8f 93       	push	r24
    26bc:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
#endif
				printf_P(PSTR("\n%S%S:%i"),supplyStr,maxStr,(int8_t)rTempSupplyMax);
    26c0:	20 91 78 03 	lds	r18, 0x0378
    26c4:	82 2f       	mov	r24, r18
    26c6:	99 27       	eor	r25, r25
    26c8:	87 fd       	sbrc	r24, 7
    26ca:	90 95       	com	r25
    26cc:	9f 93       	push	r25
    26ce:	2f 93       	push	r18
    26d0:	df 92       	push	r13
    26d2:	cf 92       	push	r12
    26d4:	9f 92       	push	r9
    26d6:	8f 92       	push	r8
    26d8:	87 e3       	ldi	r24, 0x37	; 55
    26da:	92 e0       	ldi	r25, 0x02	; 2
    26dc:	9f 93       	push	r25
    26de:	8f 93       	push	r24
    26e0:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
#ifdef N1110_LCD
				printf_P(PSTR("\n%S%S:%i"),diffStr,minStr,(int8_t)rTempDiffSupplyReturnMin);
    26e4:	20 91 79 03 	lds	r18, 0x0379
    26e8:	82 2f       	mov	r24, r18
    26ea:	99 27       	eor	r25, r25
    26ec:	87 fd       	sbrc	r24, 7
    26ee:	90 95       	com	r25
    26f0:	9f 93       	push	r25
    26f2:	2f 93       	push	r18
    26f4:	bf 92       	push	r11
    26f6:	af 92       	push	r10
    26f8:	0f 2e       	mov	r0, r31
    26fa:	f8 e7       	ldi	r31, 0x78	; 120
    26fc:	af 2e       	mov	r10, r31
    26fe:	f4 e0       	ldi	r31, 0x04	; 4
    2700:	bf 2e       	mov	r11, r31
    2702:	f0 2d       	mov	r31, r0
    2704:	bf 92       	push	r11
    2706:	af 92       	push	r10
    2708:	8e e2       	ldi	r24, 0x2E	; 46
    270a:	92 e0       	ldi	r25, 0x02	; 2
    270c:	9f 93       	push	r25
    270e:	8f 93       	push	r24
    2710:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				printf_P(PSTR("\n%S%S:%i"),diffStr,maxStr,(int8_t)rTempDiffSupplyReturnMax);
    2714:	20 91 3d 03 	lds	r18, 0x033D
    2718:	82 2f       	mov	r24, r18
    271a:	99 27       	eor	r25, r25
    271c:	87 fd       	sbrc	r24, 7
    271e:	90 95       	com	r25
    2720:	9f 93       	push	r25
    2722:	2f 93       	push	r18
    2724:	df 92       	push	r13
    2726:	cf 92       	push	r12
    2728:	bf 92       	push	r11
    272a:	af 92       	push	r10
    272c:	85 e2       	ldi	r24, 0x25	; 37
    272e:	92 e0       	ldi	r25, 0x02	; 2
    2730:	9f 93       	push	r25
    2732:	8f 93       	push	r24
    2734:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
#endif

				fl = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	80 93 a4 02 	sts	0x02A4, r24
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	db c3       	rjmp	.+1974   	; 0x2f00 <main+0x16e0>
    274a:	ff ef       	ldi	r31, 0xFF	; 255
    274c:	29 e6       	ldi	r18, 0x69	; 105
    274e:	38 e1       	ldi	r19, 0x18	; 24
    2750:	f1 50       	subi	r31, 0x01	; 1
    2752:	20 40       	sbci	r18, 0x00	; 0
    2754:	30 40       	sbci	r19, 0x00	; 0
    2756:	e1 f7       	brne	.-8      	; 0x2750 <main+0xf30>
    2758:	00 c0       	rjmp	.+0      	; 0x275a <main+0xf3a>
    275a:	00 00       	nop
    275c:	d1 c3       	rjmp	.+1954   	; 0x2f00 <main+0x16e0>
				} else _delay_ms(1000);
				break;
			case MSETTEMP:
				if(fl == 0){
    275e:	80 91 a4 02 	lds	r24, 0x02A4
    2762:	81 11       	cpse	r24, r1
    2764:	04 c0       	rjmp	.+8      	; 0x276e <main+0xf4e>
					ActSN = INDOORTEMPMIN;
					fl = 1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	80 93 a4 02 	sts	0x02A4, r24
    276c:	0c c0       	rjmp	.+24     	; 0x2786 <main+0xf66>
				}

				switch(ActSN){
    276e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2770:	84 2f       	mov	r24, r20
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	8c 30       	cpi	r24, 0x0C	; 12
    2776:	91 05       	cpc	r25, r1
    2778:	08 f0       	brcs	.+2      	; 0x277c <main+0xf5c>
    277a:	c2 c3       	rjmp	.+1924   	; 0x2f00 <main+0x16e0>
    277c:	fc 01       	movw	r30, r24
    277e:	e9 5a       	subi	r30, 0xA9	; 169
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	0c 94 f5 28 	jmp	0x51ea	; 0x51ea <__tablejump2__>
					case INDOORTEMPMIN:
						LCD_CLEAR();
    2786:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    278a:	83 ed       	ldi	r24, 0xD3	; 211
    278c:	94 e0       	ldi	r25, 0x04	; 4
    278e:	9f 93       	push	r25
    2790:	8f 93       	push	r24
    2792:	8a ed       	ldi	r24, 0xDA	; 218
    2794:	94 e0       	ldi	r25, 0x04	; 4
    2796:	9f 93       	push	r25
    2798:	8f 93       	push	r24
    279a:	8e e1       	ldi	r24, 0x1E	; 30
    279c:	92 e0       	ldi	r25, 0x02	; 2
    279e:	9f 93       	push	r25
    27a0:	8f 93       	push	r24
    27a2:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
    27a6:	89 ec       	ldi	r24, 0xC9	; 201
    27a8:	94 e0       	ldi	r25, 0x04	; 4
    27aa:	9f 93       	push	r25
    27ac:	8f 93       	push	r24
    27ae:	8d e7       	ldi	r24, 0x7D	; 125
    27b0:	94 e0       	ldi	r25, 0x04	; 4
    27b2:	9f 93       	push	r25
    27b4:	8f 93       	push	r24
    27b6:	87 e1       	ldi	r24, 0x17	; 23
    27b8:	92 e0       	ldi	r25, 0x02	; 2
    27ba:	9f 93       	push	r25
    27bc:	8f 93       	push	r24
    27be:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S:"),minStr);
    27c2:	86 e8       	ldi	r24, 0x86	; 134
    27c4:	94 e0       	ldi	r25, 0x04	; 4
    27c6:	9f 93       	push	r25
    27c8:	8f 93       	push	r24
    27ca:	82 e1       	ldi	r24, 0x12	; 18
    27cc:	92 e0       	ldi	r25, 0x02	; 2
    27ce:	9f 93       	push	r25
    27d0:	8f 93       	push	r24
    27d2:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ch = 'z';
						n = 0;
						k = 1;
						ActSN_next = INDOORTEMPMAX;
						ActSN = ENTER_TEMP;
						TempAct = &rTempInDoorMin;
    27d6:	8b e3       	ldi	r24, 0x3B	; 59
    27d8:	93 e0       	ldi	r25, 0x03	; 3
    27da:	90 93 a9 02 	sts	0x02A9, r25
    27de:	80 93 a8 02 	sts	0x02A8, r24
						break;
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						n = 0;
						k = 1;
						ActSN_next = INDOORTEMPMAX;
    27ec:	71 e0       	ldi	r23, 0x01	; 1
    27ee:	79 8b       	std	Y+17, r23	; 0x11
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						n = 0;
    27f0:	18 8a       	std	Y+16, r1	; 0x10
						k = 1;
						ActSN_next = INDOORTEMPMAX;
						ActSN = ENTER_TEMP;
    27f2:	89 e0       	ldi	r24, 0x09	; 9
    27f4:	8f 87       	std	Y+15, r24	; 0x0f
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						n = 0;
						k = 1;
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	9e 87       	std	Y+14, r25	; 0x0e
						ActSN_next = INDOORTEMPMAX;
						ActSN = ENTER_TEMP;
						TempAct = &rTempInDoorMin;
						break;
    27fa:	82 c3       	rjmp	.+1796   	; 0x2f00 <main+0x16e0>
					case INDOORTEMPMAX:
						LCD_CLEAR();
    27fc:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2800:	83 ed       	ldi	r24, 0xD3	; 211
    2802:	94 e0       	ldi	r25, 0x04	; 4
    2804:	9f 93       	push	r25
    2806:	8f 93       	push	r24
    2808:	8a ed       	ldi	r24, 0xDA	; 218
    280a:	94 e0       	ldi	r25, 0x04	; 4
    280c:	9f 93       	push	r25
    280e:	8f 93       	push	r24
    2810:	8b e0       	ldi	r24, 0x0B	; 11
    2812:	92 e0       	ldi	r25, 0x02	; 2
    2814:	9f 93       	push	r25
    2816:	8f 93       	push	r24
    2818:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
    281c:	89 ec       	ldi	r24, 0xC9	; 201
    281e:	94 e0       	ldi	r25, 0x04	; 4
    2820:	9f 93       	push	r25
    2822:	8f 93       	push	r24
    2824:	8d e7       	ldi	r24, 0x7D	; 125
    2826:	94 e0       	ldi	r25, 0x04	; 4
    2828:	9f 93       	push	r25
    282a:	8f 93       	push	r24
    282c:	84 e0       	ldi	r24, 0x04	; 4
    282e:	92 e0       	ldi	r25, 0x02	; 2
    2830:	9f 93       	push	r25
    2832:	8f 93       	push	r24
    2834:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S:"),maxStr);
    2838:	82 e8       	ldi	r24, 0x82	; 130
    283a:	94 e0       	ldi	r25, 0x04	; 4
    283c:	9f 93       	push	r25
    283e:	8f 93       	push	r24
    2840:	8f ef       	ldi	r24, 0xFF	; 255
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	9f 93       	push	r25
    2846:	8f 93       	push	r24
    2848:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ch = 'z';
						ActSN_next = OUTDOORTEMPMIN;
						ActSN = ENTER_TEMP;
						TempAct = &rTempInDoorMax;
    284c:	8c e3       	ldi	r24, 0x3C	; 60
    284e:	93 e0       	ldi	r25, 0x03	; 3
    2850:	90 93 a9 02 	sts	0x02A9, r25
    2854:	80 93 a8 02 	sts	0x02A8, r24
						n = 0;
						k = 1;
						break;
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = OUTDOORTEMPMIN;
    2862:	b2 e0       	ldi	r27, 0x02	; 2
    2864:	b9 8b       	std	Y+17, r27	; 0x11
						ActSN = ENTER_TEMP;
						TempAct = &rTempInDoorMax;
						n = 0;
    2866:	18 8a       	std	Y+16, r1	; 0x10
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,indoorStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = OUTDOORTEMPMIN;
						ActSN = ENTER_TEMP;
    2868:	e9 e0       	ldi	r30, 0x09	; 9
    286a:	ef 87       	std	Y+15, r30	; 0x0f
						TempAct = &rTempInDoorMax;
						n = 0;
						k = 1;
    286c:	f1 e0       	ldi	r31, 0x01	; 1
    286e:	fe 87       	std	Y+14, r31	; 0x0e
						break;
    2870:	47 c3       	rjmp	.+1678   	; 0x2f00 <main+0x16e0>
					case OUTDOORTEMPMIN:
						LCD_CLEAR();
    2872:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2876:	83 ed       	ldi	r24, 0xD3	; 211
    2878:	94 e0       	ldi	r25, 0x04	; 4
    287a:	9f 93       	push	r25
    287c:	8f 93       	push	r24
    287e:	8a ed       	ldi	r24, 0xDA	; 218
    2880:	94 e0       	ldi	r25, 0x04	; 4
    2882:	9f 93       	push	r25
    2884:	8f 93       	push	r24
    2886:	88 ef       	ldi	r24, 0xF8	; 248
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	9f 93       	push	r25
    288c:	8f 93       	push	r24
    288e:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
    2892:	81 ec       	ldi	r24, 0xC1	; 193
    2894:	94 e0       	ldi	r25, 0x04	; 4
    2896:	9f 93       	push	r25
    2898:	8f 93       	push	r24
    289a:	8d e7       	ldi	r24, 0x7D	; 125
    289c:	94 e0       	ldi	r25, 0x04	; 4
    289e:	9f 93       	push	r25
    28a0:	8f 93       	push	r24
    28a2:	81 ef       	ldi	r24, 0xF1	; 241
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	9f 93       	push	r25
    28a8:	8f 93       	push	r24
    28aa:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S:"),minStr);
    28ae:	86 e8       	ldi	r24, 0x86	; 134
    28b0:	94 e0       	ldi	r25, 0x04	; 4
    28b2:	9f 93       	push	r25
    28b4:	8f 93       	push	r24
    28b6:	8c ee       	ldi	r24, 0xEC	; 236
    28b8:	91 e0       	ldi	r25, 0x01	; 1
    28ba:	9f 93       	push	r25
    28bc:	8f 93       	push	r24
    28be:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ch = 'z';
						ActSN_next = OUTDOORTEMPMAX;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempOutDoorMin;
    28c2:	83 e6       	ldi	r24, 0x63	; 99
    28c4:	93 e0       	ldi	r25, 0x03	; 3
    28c6:	90 93 a9 02 	sts	0x02A9, r25
    28ca:	80 93 a8 02 	sts	0x02A8, r24
						break;
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = OUTDOORTEMPMAX;
    28d8:	33 e0       	ldi	r19, 0x03	; 3
    28da:	39 8b       	std	Y+17, r19	; 0x11
						ActSN = ENTER_TEMP;
						n = 0;
    28dc:	18 8a       	std	Y+16, r1	; 0x10
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = OUTDOORTEMPMAX;
						ActSN = ENTER_TEMP;
    28de:	49 e0       	ldi	r20, 0x09	; 9
    28e0:	4f 87       	std	Y+15, r20	; 0x0f
						n = 0;
						k = 1;
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	6e 87       	std	Y+14, r22	; 0x0e
						TempAct = &rTempOutDoorMin;
						break;
    28e6:	0c c3       	rjmp	.+1560   	; 0x2f00 <main+0x16e0>
					case OUTDOORTEMPMAX:
						LCD_CLEAR();
    28e8:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    28ec:	83 ed       	ldi	r24, 0xD3	; 211
    28ee:	94 e0       	ldi	r25, 0x04	; 4
    28f0:	9f 93       	push	r25
    28f2:	8f 93       	push	r24
    28f4:	8a ed       	ldi	r24, 0xDA	; 218
    28f6:	94 e0       	ldi	r25, 0x04	; 4
    28f8:	9f 93       	push	r25
    28fa:	8f 93       	push	r24
    28fc:	85 ee       	ldi	r24, 0xE5	; 229
    28fe:	91 e0       	ldi	r25, 0x01	; 1
    2900:	9f 93       	push	r25
    2902:	8f 93       	push	r24
    2904:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
    2908:	81 ec       	ldi	r24, 0xC1	; 193
    290a:	94 e0       	ldi	r25, 0x04	; 4
    290c:	9f 93       	push	r25
    290e:	8f 93       	push	r24
    2910:	8d e7       	ldi	r24, 0x7D	; 125
    2912:	94 e0       	ldi	r25, 0x04	; 4
    2914:	9f 93       	push	r25
    2916:	8f 93       	push	r24
    2918:	8e ed       	ldi	r24, 0xDE	; 222
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	9f 93       	push	r25
    291e:	8f 93       	push	r24
    2920:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S:"),maxStr);
    2924:	82 e8       	ldi	r24, 0x82	; 130
    2926:	94 e0       	ldi	r25, 0x04	; 4
    2928:	9f 93       	push	r25
    292a:	8f 93       	push	r24
    292c:	89 ed       	ldi	r24, 0xD9	; 217
    292e:	91 e0       	ldi	r25, 0x01	; 1
    2930:	9f 93       	push	r25
    2932:	8f 93       	push	r24
    2934:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ch = 'z';
						ActSN_next = SUPPLYTEMPMIN;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempOutDoorMax;
    2938:	8a e7       	ldi	r24, 0x7A	; 122
    293a:	93 e0       	ldi	r25, 0x03	; 3
    293c:	90 93 a9 02 	sts	0x02A9, r25
    2940:	80 93 a8 02 	sts	0x02A8, r24
						break;
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = SUPPLYTEMPMIN;
    294e:	94 e0       	ldi	r25, 0x04	; 4
    2950:	99 8b       	std	Y+17, r25	; 0x11
						ActSN = ENTER_TEMP;
						n = 0;
    2952:	18 8a       	std	Y+16, r1	; 0x10
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,outdoorStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = SUPPLYTEMPMIN;
						ActSN = ENTER_TEMP;
    2954:	a9 e0       	ldi	r26, 0x09	; 9
    2956:	af 87       	std	Y+15, r26	; 0x0f
						n = 0;
						k = 1;
    2958:	b1 e0       	ldi	r27, 0x01	; 1
    295a:	be 87       	std	Y+14, r27	; 0x0e
						TempAct = &rTempOutDoorMax;
						break;
    295c:	d1 c2       	rjmp	.+1442   	; 0x2f00 <main+0x16e0>
					case SUPPLYTEMPMIN:
						LCD_CLEAR();
    295e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2962:	83 ed       	ldi	r24, 0xD3	; 211
    2964:	94 e0       	ldi	r25, 0x04	; 4
    2966:	9f 93       	push	r25
    2968:	8f 93       	push	r24
    296a:	8a ed       	ldi	r24, 0xDA	; 218
    296c:	94 e0       	ldi	r25, 0x04	; 4
    296e:	9f 93       	push	r25
    2970:	8f 93       	push	r24
    2972:	82 ed       	ldi	r24, 0xD2	; 210
    2974:	91 e0       	ldi	r25, 0x01	; 1
    2976:	9f 93       	push	r25
    2978:	8f 93       	push	r24
    297a:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
    297e:	8a eb       	ldi	r24, 0xBA	; 186
    2980:	94 e0       	ldi	r25, 0x04	; 4
    2982:	9f 93       	push	r25
    2984:	8f 93       	push	r24
    2986:	8d e7       	ldi	r24, 0x7D	; 125
    2988:	94 e0       	ldi	r25, 0x04	; 4
    298a:	9f 93       	push	r25
    298c:	8f 93       	push	r24
    298e:	8b ec       	ldi	r24, 0xCB	; 203
    2990:	91 e0       	ldi	r25, 0x01	; 1
    2992:	9f 93       	push	r25
    2994:	8f 93       	push	r24
    2996:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S:"),minStr);
    299a:	86 e8       	ldi	r24, 0x86	; 134
    299c:	94 e0       	ldi	r25, 0x04	; 4
    299e:	9f 93       	push	r25
    29a0:	8f 93       	push	r24
    29a2:	86 ec       	ldi	r24, 0xC6	; 198
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	9f 93       	push	r25
    29a8:	8f 93       	push	r24
    29aa:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ch = 'z';
						ActSN_next = SUPPLYTEMPMAX;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempSupplyMin;
    29ae:	87 e7       	ldi	r24, 0x77	; 119
    29b0:	93 e0       	ldi	r25, 0x03	; 3
    29b2:	90 93 a9 02 	sts	0x02A9, r25
    29b6:	80 93 a8 02 	sts	0x02A8, r24
						break;
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = SUPPLYTEMPMAX;
    29c4:	f5 e0       	ldi	r31, 0x05	; 5
    29c6:	f9 8b       	std	Y+17, r31	; 0x11
						ActSN = ENTER_TEMP;
						n = 0;
    29c8:	18 8a       	std	Y+16, r1	; 0x10
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = SUPPLYTEMPMAX;
						ActSN = ENTER_TEMP;
    29ca:	29 e0       	ldi	r18, 0x09	; 9
    29cc:	2f 87       	std	Y+15, r18	; 0x0f
						n = 0;
						k = 1;
    29ce:	31 e0       	ldi	r19, 0x01	; 1
    29d0:	3e 87       	std	Y+14, r19	; 0x0e
						TempAct = &rTempSupplyMin;
						break;
    29d2:	96 c2       	rjmp	.+1324   	; 0x2f00 <main+0x16e0>
					case SUPPLYTEMPMAX:
						LCD_CLEAR();
    29d4:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    29d8:	83 ed       	ldi	r24, 0xD3	; 211
    29da:	94 e0       	ldi	r25, 0x04	; 4
    29dc:	9f 93       	push	r25
    29de:	8f 93       	push	r24
    29e0:	8a ed       	ldi	r24, 0xDA	; 218
    29e2:	94 e0       	ldi	r25, 0x04	; 4
    29e4:	9f 93       	push	r25
    29e6:	8f 93       	push	r24
    29e8:	8f eb       	ldi	r24, 0xBF	; 191
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	9f 93       	push	r25
    29ee:	8f 93       	push	r24
    29f0:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
    29f4:	8a eb       	ldi	r24, 0xBA	; 186
    29f6:	94 e0       	ldi	r25, 0x04	; 4
    29f8:	9f 93       	push	r25
    29fa:	8f 93       	push	r24
    29fc:	8d e7       	ldi	r24, 0x7D	; 125
    29fe:	94 e0       	ldi	r25, 0x04	; 4
    2a00:	9f 93       	push	r25
    2a02:	8f 93       	push	r24
    2a04:	88 eb       	ldi	r24, 0xB8	; 184
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	9f 93       	push	r25
    2a0a:	8f 93       	push	r24
    2a0c:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S:"),maxStr);
    2a10:	82 e8       	ldi	r24, 0x82	; 130
    2a12:	94 e0       	ldi	r25, 0x04	; 4
    2a14:	9f 93       	push	r25
    2a16:	8f 93       	push	r24
    2a18:	83 eb       	ldi	r24, 0xB3	; 179
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	9f 93       	push	r25
    2a1e:	8f 93       	push	r24
    2a20:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ch = 'z';
						ActSN_next = DIFFTEMPMIN;
						ActSN = ENTER_TEMP;
						TempAct = &rTempSupplyMax;
    2a24:	88 e7       	ldi	r24, 0x78	; 120
    2a26:	93 e0       	ldi	r25, 0x03	; 3
    2a28:	90 93 a9 02 	sts	0x02A9, r25
    2a2c:	80 93 a8 02 	sts	0x02A8, r24
						n = 0;
						k = 1;
						break;
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = DIFFTEMPMIN;
    2a3a:	76 e0       	ldi	r23, 0x06	; 6
    2a3c:	79 8b       	std	Y+17, r23	; 0x11
						ActSN = ENTER_TEMP;
						TempAct = &rTempSupplyMax;
						n = 0;
    2a3e:	18 8a       	std	Y+16, r1	; 0x10
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,supplyStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = DIFFTEMPMIN;
						ActSN = ENTER_TEMP;
    2a40:	89 e0       	ldi	r24, 0x09	; 9
    2a42:	8f 87       	std	Y+15, r24	; 0x0f
						TempAct = &rTempSupplyMax;
						n = 0;
						k = 1;
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	9e 87       	std	Y+14, r25	; 0x0e
						break;
    2a48:	5b c2       	rjmp	.+1206   	; 0x2f00 <main+0x16e0>
					case DIFFTEMPMIN:
						LCD_CLEAR();
    2a4a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2a4e:	83 ed       	ldi	r24, 0xD3	; 211
    2a50:	94 e0       	ldi	r25, 0x04	; 4
    2a52:	9f 93       	push	r25
    2a54:	8f 93       	push	r24
    2a56:	8a ed       	ldi	r24, 0xDA	; 218
    2a58:	94 e0       	ldi	r25, 0x04	; 4
    2a5a:	9f 93       	push	r25
    2a5c:	8f 93       	push	r24
    2a5e:	8c ea       	ldi	r24, 0xAC	; 172
    2a60:	91 e0       	ldi	r25, 0x01	; 1
    2a62:	9f 93       	push	r25
    2a64:	8f 93       	push	r24
    2a66:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
    2a6a:	88 e7       	ldi	r24, 0x78	; 120
    2a6c:	94 e0       	ldi	r25, 0x04	; 4
    2a6e:	9f 93       	push	r25
    2a70:	8f 93       	push	r24
    2a72:	8d e7       	ldi	r24, 0x7D	; 125
    2a74:	94 e0       	ldi	r25, 0x04	; 4
    2a76:	9f 93       	push	r25
    2a78:	8f 93       	push	r24
    2a7a:	85 ea       	ldi	r24, 0xA5	; 165
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	9f 93       	push	r25
    2a80:	8f 93       	push	r24
    2a82:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S:"),minStr);
    2a86:	86 e8       	ldi	r24, 0x86	; 134
    2a88:	94 e0       	ldi	r25, 0x04	; 4
    2a8a:	9f 93       	push	r25
    2a8c:	8f 93       	push	r24
    2a8e:	80 ea       	ldi	r24, 0xA0	; 160
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	9f 93       	push	r25
    2a94:	8f 93       	push	r24
    2a96:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ch = 'z';
						ActSN_next = DIFFTEMPMAX;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempDiffSupplyReturnMin;
    2a9a:	89 e7       	ldi	r24, 0x79	; 121
    2a9c:	93 e0       	ldi	r25, 0x03	; 3
    2a9e:	90 93 a9 02 	sts	0x02A9, r25
    2aa2:	80 93 a8 02 	sts	0x02A8, r24
						break;
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = DIFFTEMPMAX;
    2ab0:	b7 e0       	ldi	r27, 0x07	; 7
    2ab2:	b9 8b       	std	Y+17, r27	; 0x11
						ActSN = ENTER_TEMP;
						n = 0;
    2ab4:	18 8a       	std	Y+16, r1	; 0x10
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
						printf_P(PSTR(" %S:"),minStr);
						ch = 'z';
						ActSN_next = DIFFTEMPMAX;
						ActSN = ENTER_TEMP;
    2ab6:	e9 e0       	ldi	r30, 0x09	; 9
    2ab8:	ef 87       	std	Y+15, r30	; 0x0f
						n = 0;
						k = 1;
    2aba:	f1 e0       	ldi	r31, 0x01	; 1
    2abc:	fe 87       	std	Y+14, r31	; 0x0e
						TempAct = &rTempDiffSupplyReturnMin;
						break;
    2abe:	20 c2       	rjmp	.+1088   	; 0x2f00 <main+0x16e0>
					case DIFFTEMPMAX:
						LCD_CLEAR();
    2ac0:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
    2ac4:	83 ed       	ldi	r24, 0xD3	; 211
    2ac6:	94 e0       	ldi	r25, 0x04	; 4
    2ac8:	9f 93       	push	r25
    2aca:	8f 93       	push	r24
    2acc:	8a ed       	ldi	r24, 0xDA	; 218
    2ace:	94 e0       	ldi	r25, 0x04	; 4
    2ad0:	9f 93       	push	r25
    2ad2:	8f 93       	push	r24
    2ad4:	89 e9       	ldi	r24, 0x99	; 153
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	9f 93       	push	r25
    2ada:	8f 93       	push	r24
    2adc:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
    2ae0:	88 e7       	ldi	r24, 0x78	; 120
    2ae2:	94 e0       	ldi	r25, 0x04	; 4
    2ae4:	9f 93       	push	r25
    2ae6:	8f 93       	push	r24
    2ae8:	8d e7       	ldi	r24, 0x7D	; 125
    2aea:	94 e0       	ldi	r25, 0x04	; 4
    2aec:	9f 93       	push	r25
    2aee:	8f 93       	push	r24
    2af0:	82 e9       	ldi	r24, 0x92	; 146
    2af2:	91 e0       	ldi	r25, 0x01	; 1
    2af4:	9f 93       	push	r25
    2af6:	8f 93       	push	r24
    2af8:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						printf_P(PSTR(" %S:"),maxStr);
    2afc:	82 e8       	ldi	r24, 0x82	; 130
    2afe:	94 e0       	ldi	r25, 0x04	; 4
    2b00:	9f 93       	push	r25
    2b02:	8f 93       	push	r24
    2b04:	8d e8       	ldi	r24, 0x8D	; 141
    2b06:	91 e0       	ldi	r25, 0x01	; 1
    2b08:	9f 93       	push	r25
    2b0a:	8f 93       	push	r24
    2b0c:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ch = 'z';
						ActSN_next = TOEEPROM;
						ActSN = ENTER_TEMP;
						n = 0;
						k = 1;
						TempAct = &rTempDiffSupplyReturnMax;
    2b10:	8d e3       	ldi	r24, 0x3D	; 61
    2b12:	93 e0       	ldi	r25, 0x03	; 3
    2b14:	90 93 a9 02 	sts	0x02A9, r25
    2b18:	80 93 a8 02 	sts	0x02A8, r24
						break;
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = TOEEPROM;
    2b26:	3a e0       	ldi	r19, 0x0A	; 10
    2b28:	39 8b       	std	Y+17, r19	; 0x11
						ActSN = ENTER_TEMP;
						n = 0;
    2b2a:	18 8a       	std	Y+16, r1	; 0x10
						printf_P(PSTR("%S %S\n"),exitStr,nextStr);
						printf_P(PSTR(" %S%S\n"),tempStr,diffStr);
						printf_P(PSTR(" %S:"),maxStr);
						ch = 'z';
						ActSN_next = TOEEPROM;
						ActSN = ENTER_TEMP;
    2b2c:	49 e0       	ldi	r20, 0x09	; 9
    2b2e:	4f 87       	std	Y+15, r20	; 0x0f
						n = 0;
						k = 1;
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	6e 87       	std	Y+14, r22	; 0x0e
						TempAct = &rTempDiffSupplyReturnMax;
						break;
    2b34:	e5 c1       	rjmp	.+970    	; 0x2f00 <main+0x16e0>
					case TOEEPROM:
						LCD_CLEAR();
    2b36:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S?\n"),saveStr, toeepromStr);
    2b3a:	8e e6       	ldi	r24, 0x6E	; 110
    2b3c:	94 e0       	ldi	r25, 0x04	; 4
    2b3e:	9f 93       	push	r25
    2b40:	8f 93       	push	r24
    2b42:	89 e6       	ldi	r24, 0x69	; 105
    2b44:	94 e0       	ldi	r25, 0x04	; 4
    2b46:	9f 93       	push	r25
    2b48:	8f 93       	push	r24
    2b4a:	85 e8       	ldi	r24, 0x85	; 133
    2b4c:	91 e0       	ldi	r25, 0x01	; 1
    2b4e:	9f 93       	push	r25
    2b50:	8f 93       	push	r24
    2b52:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
						ActSN_next = INDOORTEMPMIN;
						ActSN = SAVE_EEPROM;
						break;
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
						break;
					case TOEEPROM:
						LCD_CLEAR();
						//LCD_FIRSTLINE();
						printf_P(PSTR("%S %S?\n"),saveStr, toeepromStr);
						ActSN_next = INDOORTEMPMIN;
    2b62:	19 8a       	std	Y+17, r1	; 0x11
						ActSN = SAVE_EEPROM;
    2b64:	7b e0       	ldi	r23, 0x0B	; 11
    2b66:	7f 87       	std	Y+15, r23	; 0x0f
						break;
    2b68:	cb c1       	rjmp	.+918    	; 0x2f00 <main+0x16e0>
					case SAVE_EEPROM:
						if(ch == '*') {
    2b6a:	8a e2       	ldi	r24, 0x2A	; 42
    2b6c:	b8 12       	cpse	r11, r24
    2b6e:	4f c0       	rjmp	.+158    	; 0x2c0e <main+0x13ee>
							eeprom_update_byte((uint8_t*) &TempInDoorMin,rTempInDoorMin);
    2b70:	60 91 3b 03 	lds	r22, 0x033B
    2b74:	86 e3       	ldi	r24, 0x36	; 54
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__eeupd_byte_m328p>
							eeprom_update_byte((uint8_t*) &TempInDoorMax,rTempInDoorMax);
    2b7c:	60 91 3c 03 	lds	r22, 0x033C
    2b80:	85 e3       	ldi	r24, 0x35	; 53
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__eeupd_byte_m328p>
							eeprom_update_byte((uint8_t*) &TempOutDoorMin,rTempOutDoorMin);
    2b88:	60 91 63 03 	lds	r22, 0x0363
    2b8c:	84 e3       	ldi	r24, 0x34	; 52
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__eeupd_byte_m328p>
							eeprom_update_byte((uint8_t*) &TempOutDoorMax,rTempOutDoorMax);
    2b94:	60 91 7a 03 	lds	r22, 0x037A
    2b98:	83 e3       	ldi	r24, 0x33	; 51
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__eeupd_byte_m328p>
							eeprom_update_byte((uint8_t*) &TempSupplyMin,rTempSupplyMin);
    2ba0:	60 91 77 03 	lds	r22, 0x0377
    2ba4:	82 e3       	ldi	r24, 0x32	; 50
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__eeupd_byte_m328p>
							eeprom_update_byte((uint8_t*) &TempSupplyMax,rTempSupplyMax);
    2bac:	60 91 78 03 	lds	r22, 0x0378
    2bb0:	81 e3       	ldi	r24, 0x31	; 49
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__eeupd_byte_m328p>
							eeprom_update_byte((uint8_t*) &TempDiffSupplyReturnMin,rTempDiffSupplyReturnMin);
    2bb8:	60 91 79 03 	lds	r22, 0x0379
    2bbc:	80 e3       	ldi	r24, 0x30	; 48
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__eeupd_byte_m328p>
							eeprom_update_byte((uint8_t*) &TempDiffSupplyReturnMax,rTempDiffSupplyReturnMax);
    2bc4:	60 91 3d 03 	lds	r22, 0x033D
    2bc8:	8f e2       	ldi	r24, 0x2F	; 47
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__eeupd_byte_m328p>
							eeprom_update_block((void *)gSensorIDs , (void*)eSensorIDs ,MAXSENSORS * OW_ROMCODE_SIZE);
    2bd0:	40 e2       	ldi	r20, 0x20	; 32
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	6f e0       	ldi	r22, 0x0F	; 15
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	8a ea       	ldi	r24, 0xAA	; 170
    2bda:	92 e0       	ldi	r25, 0x02	; 2
    2bdc:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <__eeupd_block_m328p>
							printf_P(PSTR("\n%SD %S!"),saveStr,okStr);
    2be0:	80 ef       	ldi	r24, 0xF0	; 240
    2be2:	94 e0       	ldi	r25, 0x04	; 4
    2be4:	9f 93       	push	r25
    2be6:	8f 93       	push	r24
    2be8:	89 e6       	ldi	r24, 0x69	; 105
    2bea:	94 e0       	ldi	r25, 0x04	; 4
    2bec:	9f 93       	push	r25
    2bee:	8f 93       	push	r24
    2bf0:	8c e7       	ldi	r24, 0x7C	; 124
    2bf2:	91 e0       	ldi	r25, 0x01	; 1
    2bf4:	9f 93       	push	r25
    2bf6:	8f 93       	push	r24
    2bf8:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
							ActSN = TEMP_EXIT;
    2c08:	98 e0       	ldi	r25, 0x08	; 8
    2c0a:	9f 87       	std	Y+15, r25	; 0x0f
    2c0c:	79 c1       	rjmp	.+754    	; 0x2f00 <main+0x16e0>
    2c0e:	af ef       	ldi	r26, 0xFF	; 255
    2c10:	b9 e6       	ldi	r27, 0x69	; 105
    2c12:	e8 e1       	ldi	r30, 0x18	; 24
    2c14:	a1 50       	subi	r26, 0x01	; 1
    2c16:	b0 40       	sbci	r27, 0x00	; 0
    2c18:	e0 40       	sbci	r30, 0x00	; 0
    2c1a:	e1 f7       	brne	.-8      	; 0x2c14 <main+0x13f4>
    2c1c:	00 c0       	rjmp	.+0      	; 0x2c1e <main+0x13fe>
    2c1e:	00 00       	nop
    2c20:	6f c1       	rjmp	.+734    	; 0x2f00 <main+0x16e0>
						} else _delay_ms(1000);
						break;
					case TEMP_EXIT:
						if(ch == '*') ActSN = ActSN_next;
    2c22:	fa e2       	ldi	r31, 0x2A	; 42
    2c24:	bf 12       	cpse	r11, r31
    2c26:	6c c1       	rjmp	.+728    	; 0x2f00 <main+0x16e0>
    2c28:	63 c1       	rjmp	.+710    	; 0x2ef0 <main+0x16d0>

						break;
					case ENTER_TEMP:
						 if(ch >= 0x30 && ch <= 0x39) {
    2c2a:	80 ed       	ldi	r24, 0xD0	; 208
    2c2c:	8b 0d       	add	r24, r11
    2c2e:	8a 30       	cpi	r24, 0x0A	; 10
    2c30:	08 f0       	brcs	.+2      	; 0x2c34 <main+0x1414>
    2c32:	4f c0       	rjmp	.+158    	; 0x2cd2 <main+0x14b2>

							 if(n < k){
    2c34:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c36:	38 89       	ldd	r19, Y+16	; 0x10
    2c38:	32 17       	cp	r19, r18
    2c3a:	f0 f4       	brcc	.+60     	; 0x2c78 <main+0x1458>
								 if(n == 0 && ch == '9'){
    2c3c:	31 11       	cpse	r19, r1
    2c3e:	0c c0       	rjmp	.+24     	; 0x2c58 <main+0x1438>
    2c40:	49 e3       	ldi	r20, 0x39	; 57
    2c42:	b4 12       	cpse	r11, r20
    2c44:	09 c0       	rjmp	.+18     	; 0x2c58 <main+0x1438>
								 	 	 { wStr[n] = '-'; k = 2; printf("-");}
    2c46:	8d e2       	ldi	r24, 0x2D	; 45
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	8d e2       	ldi	r24, 0x2D	; 45
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <putchar>
    2c52:	62 e0       	ldi	r22, 0x02	; 2
    2c54:	6e 87       	std	Y+14, r22	; 0x0e
    2c56:	0c c0       	rjmp	.+24     	; 0x2c70 <main+0x1450>
								 } else { wStr[n] = ch; printf("%c",ch);}
    2c58:	e1 e0       	ldi	r30, 0x01	; 1
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	ec 0f       	add	r30, r28
    2c5e:	fd 1f       	adc	r31, r29
    2c60:	78 89       	ldd	r23, Y+16	; 0x10
    2c62:	e7 0f       	add	r30, r23
    2c64:	f1 1d       	adc	r31, r1
    2c66:	b0 82       	st	Z, r11
    2c68:	8b 2d       	mov	r24, r11
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <putchar>
								 n++;
    2c70:	88 89       	ldd	r24, Y+16	; 0x10
    2c72:	8f 5f       	subi	r24, 0xFF	; 255
    2c74:	88 8b       	std	Y+16, r24	; 0x10
    2c76:	2d c0       	rjmp	.+90     	; 0x2cd2 <main+0x14b2>
							 } else {
								 wStr[n] = ch;
    2c78:	a8 89       	ldd	r26, Y+16	; 0x10
    2c7a:	8a 2f       	mov	r24, r26
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	e1 e0       	ldi	r30, 0x01	; 1
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	ec 0f       	add	r30, r28
    2c84:	fd 1f       	adc	r31, r29
    2c86:	e8 0f       	add	r30, r24
    2c88:	f9 1f       	adc	r31, r25
    2c8a:	b0 82       	st	Z, r11
								 wStr[n+1] = '\0';
    2c8c:	e2 e0       	ldi	r30, 0x02	; 2
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	ec 0f       	add	r30, r28
    2c92:	fd 1f       	adc	r31, r29
    2c94:	e8 0f       	add	r30, r24
    2c96:	f9 1f       	adc	r31, r25
    2c98:	10 82       	st	Z, r1
								 printf("%c",ch);
    2c9a:	8b 2d       	mov	r24, r11
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <putchar>
								 ki = atoi(wStr);
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
								 *TempAct = ki;
    2caa:	e0 91 a8 02 	lds	r30, 0x02A8
    2cae:	f0 91 a9 02 	lds	r31, 0x02A9
    2cb2:	80 83       	st	Z, r24
								 n = 0;
								 printf_P(PSTR("\nValue is:%i"),ki);
    2cb4:	9f 93       	push	r25
    2cb6:	8f 93       	push	r24
    2cb8:	8f e6       	ldi	r24, 0x6F	; 111
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	9f 93       	push	r25
    2cbe:	8f 93       	push	r24
    2cc0:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
								 wStr[n] = ch;
								 wStr[n+1] = '\0';
								 printf("%c",ch);
								 ki = atoi(wStr);
								 *TempAct = ki;
								 n = 0;
    2ccc:	18 8a       	std	Y+16, r1	; 0x10
								 printf_P(PSTR("\nValue is:%i"),ki);
								 ActSN = TEMP_EXIT;
    2cce:	b8 e0       	ldi	r27, 0x08	; 8
    2cd0:	bf 87       	std	Y+15, r27	; 0x0f
							 }
						 }
						 if(ch == '*') ActSN = ActSN_next;
    2cd2:	ea e2       	ldi	r30, 0x2A	; 42
    2cd4:	be 12       	cpse	r11, r30
    2cd6:	14 c1       	rjmp	.+552    	; 0x2f00 <main+0x16e0>
    2cd8:	0e c1       	rjmp	.+540    	; 0x2ef6 <main+0x16d6>
						break;
				}	// switch(ActSN)
				//ch = 'z';
				break;
			case MVIEW_TIME:
				if(fl == 0) {LCD_CLEAR(); fl = 1;}
    2cda:	80 91 a4 02 	lds	r24, 0x02A4
    2cde:	81 11       	cpse	r24, r1
    2ce0:	05 c0       	rjmp	.+10     	; 0x2cec <main+0x14cc>
    2ce2:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	80 93 a4 02 	sts	0x02A4, r24

#ifdef N1110_LCD
				LCD_SETTEXTSIZE(2);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	0e 94 31 21 	call	0x4262	; 0x4262 <LCD_setTextSize>
#endif
				LCD_FIRSTLINE();
    2cf2:	0e 94 69 21 	call	0x42d2	; 0x42d2 <LcdFirstLine>
#ifdef N1110_LCD
				printf_P(PSTR("\n%02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
    2cf6:	80 91 0f 01 	lds	r24, 0x010F
    2cfa:	1f 92       	push	r1
    2cfc:	8f 93       	push	r24
    2cfe:	d1 01       	movw	r26, r2
    2d00:	8c 91       	ld	r24, X
    2d02:	1f 92       	push	r1
    2d04:	8f 93       	push	r24
    2d06:	f2 01       	movw	r30, r4
    2d08:	80 81       	ld	r24, Z
    2d0a:	1f 92       	push	r1
    2d0c:	8f 93       	push	r24
    2d0e:	8f e5       	ldi	r24, 0x5F	; 95
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	9f 93       	push	r25
    2d14:	8f 93       	push	r24
    2d16:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
				LCD_SETTEXTSIZE(1);
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	0e 94 31 21 	call	0x4262	; 0x4262 <LCD_setTextSize>
#else
				printf_P(PSTR("\n  %02d:%02d:%02d"),tAsync.hour,tAsync.minute,tAsync.second);
#endif
				break;
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	ea c0       	rjmp	.+468    	; 0x2f00 <main+0x16e0>
			case MSET_TIME:
				if(fl == 0){
    2d2c:	80 91 a4 02 	lds	r24, 0x02A4
    2d30:	81 11       	cpse	r24, r1
    2d32:	06 c0       	rjmp	.+12     	; 0x2d40 <main+0x1520>
					LCD_CLEAR();
    2d34:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
					ActSN = MSET_HOUR;
					ActSN_next = MSET_MINUTE;
					fl = 1;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	80 93 a4 02 	sts	0x02A4, r24
    2d3e:	12 c0       	rjmp	.+36     	; 0x2d64 <main+0x1544>
				}	// if(fl == 0)

				switch(ActSN){
    2d40:	3f 85       	ldd	r19, Y+15	; 0x0f
    2d42:	32 30       	cpi	r19, 0x02	; 2
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <main+0x1528>
    2d46:	46 c0       	rjmp	.+140    	; 0x2dd4 <main+0x15b4>
    2d48:	28 f4       	brcc	.+10     	; 0x2d54 <main+0x1534>
    2d4a:	33 23       	and	r19, r19
    2d4c:	59 f0       	breq	.+22     	; 0x2d64 <main+0x1544>
    2d4e:	31 30       	cpi	r19, 0x01	; 1
    2d50:	29 f1       	breq	.+74     	; 0x2d9c <main+0x157c>
    2d52:	d6 c0       	rjmp	.+428    	; 0x2f00 <main+0x16e0>
    2d54:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d56:	43 30       	cpi	r20, 0x03	; 3
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <main+0x153c>
    2d5a:	5a c0       	rjmp	.+180    	; 0x2e10 <main+0x15f0>
    2d5c:	44 30       	cpi	r20, 0x04	; 4
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <main+0x1542>
    2d60:	ac c0       	rjmp	.+344    	; 0x2eba <main+0x169a>
    2d62:	ce c0       	rjmp	.+412    	; 0x2f00 <main+0x16e0>
				case MSET_HOUR:
					printf_P(PSTR("\n%S:"),hourStr);
    2d64:	a8 e5       	ldi	r26, 0x58	; 88
    2d66:	b4 e0       	ldi	r27, 0x04	; 4
    2d68:	bf 93       	push	r27
    2d6a:	af 93       	push	r26
    2d6c:	aa e5       	ldi	r26, 0x5A	; 90
    2d6e:	b1 e0       	ldi	r27, 0x01	; 1
    2d70:	bf 93       	push	r27
    2d72:	af 93       	push	r26
    2d74:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
					k = 1;
					n = 0;
					ks = 23;
					TempAct = (int8_t*)&(tAsync.hour);
    2d78:	50 92 a9 02 	sts	0x02A9, r5
    2d7c:	40 92 a8 02 	sts	0x02A8, r4
					ActSN_next = MSET_MINUTE;
					ActSN = ENTER_NUMB;
					break;
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
					printf_P(PSTR("\n%S:"),hourStr);
					k = 1;
					n = 0;
					ks = 23;
					TempAct = (int8_t*)&(tAsync.hour);
					ActSN_next = MSET_MINUTE;
    2d88:	f1 e0       	ldi	r31, 0x01	; 1
    2d8a:	f9 8b       	std	Y+17, r31	; 0x11

				switch(ActSN){
				case MSET_HOUR:
					printf_P(PSTR("\n%S:"),hourStr);
					k = 1;
					n = 0;
    2d8c:	18 8a       	std	Y+16, r1	; 0x10
					ks = 23;
					TempAct = (int8_t*)&(tAsync.hour);
					ActSN_next = MSET_MINUTE;
					ActSN = ENTER_NUMB;
    2d8e:	23 e0       	ldi	r18, 0x03	; 3
    2d90:	2f 87       	std	Y+15, r18	; 0x0f
				switch(ActSN){
				case MSET_HOUR:
					printf_P(PSTR("\n%S:"),hourStr);
					k = 1;
					n = 0;
					ks = 23;
    2d92:	37 e1       	ldi	r19, 0x17	; 23
    2d94:	3c 8b       	std	Y+20, r19	; 0x14
				}	// if(fl == 0)

				switch(ActSN){
				case MSET_HOUR:
					printf_P(PSTR("\n%S:"),hourStr);
					k = 1;
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	4e 87       	std	Y+14, r20	; 0x0e
					n = 0;
					ks = 23;
					TempAct = (int8_t*)&(tAsync.hour);
					ActSN_next = MSET_MINUTE;
					ActSN = ENTER_NUMB;
					break;
    2d9a:	b2 c0       	rjmp	.+356    	; 0x2f00 <main+0x16e0>
				case MSET_MINUTE:
					printf_P(PSTR("\n%S:"),minuteStr);
    2d9c:	8d e5       	ldi	r24, 0x5D	; 93
    2d9e:	94 e0       	ldi	r25, 0x04	; 4
    2da0:	9f 93       	push	r25
    2da2:	8f 93       	push	r24
    2da4:	85 e5       	ldi	r24, 0x55	; 85
    2da6:	91 e0       	ldi	r25, 0x01	; 1
    2da8:	9f 93       	push	r25
    2daa:	8f 93       	push	r24
    2dac:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
					k = 1;
					n = 0;
					ks = 60;
					TempAct = (int8_t*)&(tAsync.minute);
    2db0:	30 92 a9 02 	sts	0x02A9, r3
    2db4:	20 92 a8 02 	sts	0x02A8, r2
					ActSN_next = MSET_SECOND;
					ActSN = ENTER_NUMB;
					break;
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
					printf_P(PSTR("\n%S:"),minuteStr);
					k = 1;
					n = 0;
					ks = 60;
					TempAct = (int8_t*)&(tAsync.minute);
					ActSN_next = MSET_SECOND;
    2dc0:	62 e0       	ldi	r22, 0x02	; 2
    2dc2:	69 8b       	std	Y+17, r22	; 0x11
					ActSN = ENTER_NUMB;
					break;
				case MSET_MINUTE:
					printf_P(PSTR("\n%S:"),minuteStr);
					k = 1;
					n = 0;
    2dc4:	18 8a       	std	Y+16, r1	; 0x10
					ks = 60;
					TempAct = (int8_t*)&(tAsync.minute);
					ActSN_next = MSET_SECOND;
					ActSN = ENTER_NUMB;
    2dc6:	73 e0       	ldi	r23, 0x03	; 3
    2dc8:	7f 87       	std	Y+15, r23	; 0x0f
					break;
				case MSET_MINUTE:
					printf_P(PSTR("\n%S:"),minuteStr);
					k = 1;
					n = 0;
					ks = 60;
    2dca:	8c e3       	ldi	r24, 0x3C	; 60
    2dcc:	8c 8b       	std	Y+20, r24	; 0x14
					ActSN_next = MSET_MINUTE;
					ActSN = ENTER_NUMB;
					break;
				case MSET_MINUTE:
					printf_P(PSTR("\n%S:"),minuteStr);
					k = 1;
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	9e 87       	std	Y+14, r25	; 0x0e
					n = 0;
					ks = 60;
					TempAct = (int8_t*)&(tAsync.minute);
					ActSN_next = MSET_SECOND;
					ActSN = ENTER_NUMB;
					break;
    2dd2:	96 c0       	rjmp	.+300    	; 0x2f00 <main+0x16e0>
				case MSET_SECOND:
					printf_P(PSTR("\n%S:"),secondStr);
    2dd4:	a1 e5       	ldi	r26, 0x51	; 81
    2dd6:	b4 e0       	ldi	r27, 0x04	; 4
    2dd8:	bf 93       	push	r27
    2dda:	af 93       	push	r26
    2ddc:	a0 e5       	ldi	r26, 0x50	; 80
    2dde:	b1 e0       	ldi	r27, 0x01	; 1
    2de0:	bf 93       	push	r27
    2de2:	af 93       	push	r26
    2de4:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
					k = 1;
					n = 0;
					ks = 60;
					TempAct = (int8_t*)&(tAsync.second);
    2de8:	8f e0       	ldi	r24, 0x0F	; 15
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	90 93 a9 02 	sts	0x02A9, r25
    2df0:	80 93 a8 02 	sts	0x02A8, r24
					ActSN_next = MTIME_EXIT;
					ActSN = ENTER_NUMB;
					break;
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
					printf_P(PSTR("\n%S:"),secondStr);
					k = 1;
					n = 0;
					ks = 60;
					TempAct = (int8_t*)&(tAsync.second);
					ActSN_next = MTIME_EXIT;
    2dfc:	f4 e0       	ldi	r31, 0x04	; 4
    2dfe:	f9 8b       	std	Y+17, r31	; 0x11
					ActSN = ENTER_NUMB;
					break;
				case MSET_SECOND:
					printf_P(PSTR("\n%S:"),secondStr);
					k = 1;
					n = 0;
    2e00:	18 8a       	std	Y+16, r1	; 0x10
					ks = 60;
					TempAct = (int8_t*)&(tAsync.second);
					ActSN_next = MTIME_EXIT;
					ActSN = ENTER_NUMB;
    2e02:	23 e0       	ldi	r18, 0x03	; 3
    2e04:	2f 87       	std	Y+15, r18	; 0x0f
					break;
				case MSET_SECOND:
					printf_P(PSTR("\n%S:"),secondStr);
					k = 1;
					n = 0;
					ks = 60;
    2e06:	3c e3       	ldi	r19, 0x3C	; 60
    2e08:	3c 8b       	std	Y+20, r19	; 0x14
					ActSN_next = MSET_SECOND;
					ActSN = ENTER_NUMB;
					break;
				case MSET_SECOND:
					printf_P(PSTR("\n%S:"),secondStr);
					k = 1;
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	4e 87       	std	Y+14, r20	; 0x0e
					n = 0;
					ks = 60;
					TempAct = (int8_t*)&(tAsync.second);
					ActSN_next = MTIME_EXIT;
					ActSN = ENTER_NUMB;
					break;
    2e0e:	78 c0       	rjmp	.+240    	; 0x2f00 <main+0x16e0>

				case ENTER_NUMB:
				 	 if(ch >= 0x30 && ch <= 0x39) {
    2e10:	80 ed       	ldi	r24, 0xD0	; 208
    2e12:	8b 0d       	add	r24, r11
    2e14:	8a 30       	cpi	r24, 0x0A	; 10
    2e16:	08 f0       	brcs	.+2      	; 0x2e1a <main+0x15fa>
    2e18:	4c c0       	rjmp	.+152    	; 0x2eb2 <main+0x1692>

					 	 if(n < k){
    2e1a:	6e 85       	ldd	r22, Y+14	; 0x0e
    2e1c:	78 89       	ldd	r23, Y+16	; 0x10
    2e1e:	76 17       	cp	r23, r22
    2e20:	78 f4       	brcc	.+30     	; 0x2e40 <main+0x1620>
						 	 wStr[n] = ch;
    2e22:	e1 e0       	ldi	r30, 0x01	; 1
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	ec 0f       	add	r30, r28
    2e28:	fd 1f       	adc	r31, r29
    2e2a:	e7 0f       	add	r30, r23
    2e2c:	f1 1d       	adc	r31, r1
    2e2e:	b0 82       	st	Z, r11
						 	 printf("%c",ch);
    2e30:	8b 2d       	mov	r24, r11
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <putchar>
						 	 n++;
    2e38:	98 89       	ldd	r25, Y+16	; 0x10
    2e3a:	9f 5f       	subi	r25, 0xFF	; 255
    2e3c:	98 8b       	std	Y+16, r25	; 0x10
    2e3e:	39 c0       	rjmp	.+114    	; 0x2eb2 <main+0x1692>
					 	 } else {
						 	 wStr[n] = ch;
    2e40:	a8 89       	ldd	r26, Y+16	; 0x10
    2e42:	8a 2f       	mov	r24, r26
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	e1 e0       	ldi	r30, 0x01	; 1
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	ec 0f       	add	r30, r28
    2e4c:	fd 1f       	adc	r31, r29
    2e4e:	e8 0f       	add	r30, r24
    2e50:	f9 1f       	adc	r31, r25
    2e52:	b0 82       	st	Z, r11
						 	 wStr[n+1] = '\0';
    2e54:	e2 e0       	ldi	r30, 0x02	; 2
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	ec 0f       	add	r30, r28
    2e5a:	fd 1f       	adc	r31, r29
    2e5c:	e8 0f       	add	r30, r24
    2e5e:	f9 1f       	adc	r31, r25
    2e60:	10 82       	st	Z, r1
						 	 printf("%c",ch);
    2e62:	8b 2d       	mov	r24, r11
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <putchar>
						 	 ki = atoi(wStr);
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
							 n = 0;
							 if(ki >= 0 && ki <= (int) ks){
    2e72:	99 23       	and	r25, r25
    2e74:	7c f0       	brlt	.+30     	; 0x2e94 <main+0x1674>
    2e76:	bc 89       	ldd	r27, Y+20	; 0x14
    2e78:	2b 2f       	mov	r18, r27
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	28 17       	cp	r18, r24
    2e7e:	39 07       	cpc	r19, r25
    2e80:	4c f0       	brlt	.+18     	; 0x2e94 <main+0x1674>
								*TempAct = ki;
    2e82:	e0 91 a8 02 	lds	r30, 0x02A8
    2e86:	f0 91 a9 02 	lds	r31, 0x02A9
    2e8a:	80 83       	st	Z, r24
								ActSN = ActSN_next;;
    2e8c:	e9 89       	ldd	r30, Y+17	; 0x11
    2e8e:	ef 87       	std	Y+15, r30	; 0x0f
					 	 } else {
						 	 wStr[n] = ch;
						 	 wStr[n+1] = '\0';
						 	 printf("%c",ch);
						 	 ki = atoi(wStr);
							 n = 0;
    2e90:	18 8a       	std	Y+16, r1	; 0x10
							 if(ki >= 0 && ki <= (int) ks){
								*TempAct = ki;
								ActSN = ActSN_next;;
    2e92:	0f c0       	rjmp	.+30     	; 0x2eb2 <main+0x1692>
							 } else {
								ReturnXPos(2); 
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	0e 94 6e 21 	call	0x42dc	; 0x42dc <ReturnXPos>
								printf_P(PSTR("  "));
    2e9a:	8d e4       	ldi	r24, 0x4D	; 77
    2e9c:	91 e0       	ldi	r25, 0x01	; 1
    2e9e:	9f 93       	push	r25
    2ea0:	8f 93       	push	r24
    2ea2:	0e 94 31 2b 	call	0x5662	; 0x5662 <printf_P>
								ReturnXPos(2);
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	0e 94 6e 21 	call	0x42dc	; 0x42dc <ReturnXPos>
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
					 	 } else {
						 	 wStr[n] = ch;
						 	 wStr[n+1] = '\0';
						 	 printf("%c",ch);
						 	 ki = atoi(wStr);
							 n = 0;
    2eb0:	18 8a       	std	Y+16, r1	; 0x10
								printf_P(PSTR("  "));
								ReturnXPos(2);
							 }
					 	 }
				 	 }
				 	 if(ch == '*') ActSN = ActSN_next;
    2eb2:	fa e2       	ldi	r31, 0x2A	; 42
    2eb4:	bf 12       	cpse	r11, r31
    2eb6:	24 c0       	rjmp	.+72     	; 0x2f00 <main+0x16e0>
    2eb8:	21 c0       	rjmp	.+66     	; 0x2efc <main+0x16dc>
				 	 break;
				case MTIME_EXIT:
					if(ch == '*') {MenuPhase = MVIEW_TIME; fl = 0;}
    2eba:	2a e2       	ldi	r18, 0x2A	; 42
    2ebc:	b2 12       	cpse	r11, r18
    2ebe:	20 c0       	rjmp	.+64     	; 0x2f00 <main+0x16e0>
    2ec0:	86 e0       	ldi	r24, 0x06	; 6
    2ec2:	80 93 a5 02 	sts	0x02A5, r24
    2ec6:	10 92 a4 02 	sts	0x02A4, r1
    2eca:	1a c0       	rjmp	.+52     	; 0x2f00 <main+0x16e0>
					break;
				}	// switch(ActSN)
				ch = 'z';
				break;
			case MEXIT:
				LCD_CLEAR();
    2ecc:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
				LastPhase = MainLoopPhase;
    2ed0:	80 91 a7 02 	lds	r24, 0x02A7
    2ed4:	80 93 a6 02 	sts	0x02A6, r24
				MainLoopPhase = DISPLAY_TEMPERATURE;
    2ed8:	10 92 a7 02 	sts	0x02A7, r1
				MenuPhase = MMENU_SHOW;
    2edc:	10 92 a5 02 	sts	0x02A5, r1
				continue;
    2ee0:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <main+0x43c>
						    } else 	ActSN = SN_EXIT;

						}

							if(ch == '*')
								ActSN = ActSN_next;
    2ee4:	39 89       	ldd	r19, Y+17	; 0x11
    2ee6:	3f 87       	std	Y+15, r19	; 0x0f
    2ee8:	0b c0       	rjmp	.+22     	; 0x2f00 <main+0x16e0>

							break;
						case SN_EXIT:
							if(ch == '*')
								ActSN = ActSN_next;
    2eea:	49 89       	ldd	r20, Y+17	; 0x11
    2eec:	4f 87       	std	Y+15, r20	; 0x0f
    2eee:	08 c0       	rjmp	.+16     	; 0x2f00 <main+0x16e0>
							printf_P(PSTR("\n%SD %S!"),saveStr,okStr);
							ActSN = TEMP_EXIT;
						} else _delay_ms(1000);
						break;
					case TEMP_EXIT:
						if(ch == '*') ActSN = ActSN_next;
    2ef0:	69 89       	ldd	r22, Y+17	; 0x11
    2ef2:	6f 87       	std	Y+15, r22	; 0x0f
    2ef4:	05 c0       	rjmp	.+10     	; 0x2f00 <main+0x16e0>
								 n = 0;
								 printf_P(PSTR("\nValue is:%i"),ki);
								 ActSN = TEMP_EXIT;
							 }
						 }
						 if(ch == '*') ActSN = ActSN_next;
    2ef6:	79 89       	ldd	r23, Y+17	; 0x11
    2ef8:	7f 87       	std	Y+15, r23	; 0x0f
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <main+0x16e0>
    2efc:	89 89       	ldd	r24, Y+17	; 0x11
    2efe:	8f 87       	std	Y+15, r24	; 0x0f

			}	// switch(MenuPhase)

		break;
		}	// switch(MainLoopPhase)
		LCD_UPDATE();
    2f00:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <LCD_Update>

	if(MainLoopPhase != ENTER_NEW_SENSOR){
    2f04:	80 91 a7 02 	lds	r24, 0x02A7
    2f08:	83 30       	cpi	r24, 0x03	; 3
    2f0a:	11 f4       	brne	.+4      	; 0x2f10 <main+0x16f0>
    2f0c:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <main+0x43c>
		DO_WATCHDOG();
    2f10:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    2f14:	68 01       	movw	r12, r16
    2f16:	8c 2d       	mov	r24, r12
    2f18:	80 1b       	sub	r24, r16

		for(k = 0;k < MAXSENSORS;k++)
			if(noready_sens[k]) {
    2f1a:	d6 01       	movw	r26, r12
    2f1c:	9d 91       	ld	r25, X+
    2f1e:	6d 01       	movw	r12, r26
    2f20:	91 11       	cpse	r25, r1
				sms_noready_sens(k);
    2f22:	0e 94 3d 0a 	call	0x147a	; 0x147a <sms_noready_sens>
		LCD_UPDATE();

	if(MainLoopPhase != ENTER_NEW_SENSOR){
		DO_WATCHDOG();

		for(k = 0;k < MAXSENSORS;k++)
    2f26:	ce 14       	cp	r12, r14
    2f28:	df 04       	cpc	r13, r15
    2f2a:	a9 f7       	brne	.-22     	; 0x2f16 <main+0x16f6>
			if(noready_sens[k]) {
				sms_noready_sens(k);
			}

		if(MainLoopPhase == DISPLAY_MAINMENU)
    2f2c:	80 91 a7 02 	lds	r24, 0x02A7
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	89 f4       	brne	.+34     	; 0x2f56 <main+0x1736>
			if(TimeKeyPressed > KEYPRESSED_TIMOUT){
    2f34:	80 91 7c 03 	lds	r24, 0x037C
    2f38:	83 30       	cpi	r24, 0x03	; 3
    2f3a:	68 f0       	brcs	.+26     	; 0x2f56 <main+0x1736>
				LastPhase = MainLoopPhase;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	80 93 a6 02 	sts	0x02A6, r24
				MainLoopPhase = DISPLAY_TEMPERATURE;
    2f42:	10 92 a7 02 	sts	0x02A7, r1
				fl = 0;
    2f46:	10 92 a4 02 	sts	0x02A4, r1
				cli();
    2f4a:	f8 94       	cli
				TimeKeyPressed = 0;
    2f4c:	10 92 7c 03 	sts	0x037C, r1
				sei();
    2f50:	78 94       	sei
				LCD_CLEAR();
    2f52:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
			}

		if(extstate != 0){
    2f56:	80 91 38 03 	lds	r24, 0x0338
    2f5a:	88 23       	and	r24, r24
    2f5c:	89 f0       	breq	.+34     	; 0x2f80 <main+0x1760>
			LastPhase = MainLoopPhase;
    2f5e:	80 91 a7 02 	lds	r24, 0x02A7
    2f62:	80 93 a6 02 	sts	0x02A6, r24
			MainLoopPhase = DISPLAY_MAINMENU;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	80 93 a7 02 	sts	0x02A7, r24
			fl = 0;
    2f6c:	10 92 a4 02 	sts	0x02A4, r1
			cli();
    2f70:	f8 94       	cli
			TimeKeyPressed = 0;
    2f72:	10 92 7c 03 	sts	0x037C, r1
			extstate = 0;
    2f76:	10 92 38 03 	sts	0x0338, r1
			sei();
    2f7a:	78 94       	sei
			LCD_CLEAR();
    2f7c:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
		}
	//
			if(tAsync.minute != mtemp_minute){
    2f80:	f1 01       	movw	r30, r2
    2f82:	20 81       	ld	r18, Z
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	86 2d       	mov	r24, r6
    2f88:	99 27       	eor	r25, r25
    2f8a:	87 fd       	sbrc	r24, 7
    2f8c:	90 95       	com	r25
    2f8e:	28 17       	cp	r18, r24
    2f90:	39 07       	cpc	r19, r25
    2f92:	39 f0       	breq	.+14     	; 0x2fa2 <main+0x1782>
				MANAGE_TEMPEVENT();
    2f94:	0e 94 29 07 	call	0xe52	; 0xe52 <manageTemperatureEvent>
				mtemp_minute = tAsync.minute;
    2f98:	d1 01       	movw	r26, r2
    2f9a:	6c 90       	ld	r6, X
				mausure_temperature_ok = TRUE;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	80 93 00 01 	sts	0x0100, r24
					TEST_NOTREADY_SENSORS();
					fl_noready = FALSE;
				}
			} else fl_noready = TRUE;
*/
			if(CheckNoReadySNCounter > CHECKNOREADYSNINTERVAL){
    2fa2:	80 91 7b 03 	lds	r24, 0x037B
    2fa6:	80 31       	cpi	r24, 0x10	; 16
    2fa8:	30 f0       	brcs	.+12     	; 0x2fb6 <main+0x1796>
				TEST_NOTREADY_SENSORS();
    2faa:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <TestNoReadySensors>
				cli();
    2fae:	f8 94       	cli
				CheckNoReadySNCounter = 0;
    2fb0:	10 92 7b 03 	sts	0x037B, r1
				sei();
    2fb4:	78 94       	sei
			}
	//
			if(tAsync.hour != mtemp_hour){
    2fb6:	f2 01       	movw	r30, r4
    2fb8:	20 81       	ld	r18, Z
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	87 2d       	mov	r24, r7
    2fbe:	99 27       	eor	r25, r25
    2fc0:	87 fd       	sbrc	r24, 7
    2fc2:	90 95       	com	r25
    2fc4:	28 17       	cp	r18, r24
    2fc6:	39 07       	cpc	r19, r25
    2fc8:	11 f4       	brne	.+4      	; 0x2fce <main+0x17ae>
    2fca:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <main+0x438>
				MANAGE_OUTDOOR_TEMPEVENT();
    2fce:	0e 94 5f 0b 	call	0x16be	; 0x16be <ManageOutdoorTempEvent>
				mtemp_hour = tAsync.hour;
    2fd2:	d2 01       	movw	r26, r4
    2fd4:	7c 90       	ld	r7, X
		LCD_UPDATE();

	if(MainLoopPhase != ENTER_NEW_SENSOR){
		DO_WATCHDOG();

		for(k = 0;k < MAXSENSORS;k++)
    2fd6:	b4 e0       	ldi	r27, 0x04	; 4
    2fd8:	be 87       	std	Y+14, r27	; 0x0e
    2fda:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <main+0x43c>
//##################################################################
		if(!wait_powergone && powergone){
			wait_powergone = 1;
		}
//
		if(wait_powergone){
    2fde:	90 91 1f 03 	lds	r25, 0x031F
			if(powergone){
    2fe2:	80 91 37 03 	lds	r24, 0x0337
    2fe6:	81 11       	cpse	r24, r1
    2fe8:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <main+0x456>
    2fec:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <main+0x476>

00002ff0 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    2ff0:	1f 92       	push	r1
    2ff2:	0f 92       	push	r0
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	0f 92       	push	r0
    2ff8:	11 24       	eor	r1, r1
    2ffa:	2f 93       	push	r18
    2ffc:	8f 93       	push	r24
    2ffe:	9f 93       	push	r25
    3000:	ef 93       	push	r30
    3002:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    3004:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    3008:	20 91 c6 00 	lds	r18, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    300c:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    300e:	e0 91 dc 02 	lds	r30, 0x02DC
    3012:	ef 5f       	subi	r30, 0xFF	; 255
    3014:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    3016:	90 91 db 02 	lds	r25, 0x02DB
    301a:	e9 17       	cp	r30, r25
    301c:	39 f0       	breq	.+14     	; 0x302c <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    301e:	e0 93 dc 02 	sts	0x02DC, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	e1 52       	subi	r30, 0x21	; 33
    3026:	fd 4f       	sbci	r31, 0xFD	; 253
    3028:	20 83       	st	Z, r18
    302a:	01 c0       	rjmp	.+2      	; 0x302e <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    302c:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    302e:	80 93 da 02 	sts	0x02DA, r24
}
    3032:	ff 91       	pop	r31
    3034:	ef 91       	pop	r30
    3036:	9f 91       	pop	r25
    3038:	8f 91       	pop	r24
    303a:	2f 91       	pop	r18
    303c:	0f 90       	pop	r0
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	0f 90       	pop	r0
    3042:	1f 90       	pop	r1
    3044:	18 95       	reti

00003046 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    3046:	1f 92       	push	r1
    3048:	0f 92       	push	r0
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	0f 92       	push	r0
    304e:	11 24       	eor	r1, r1
    3050:	8f 93       	push	r24
    3052:	9f 93       	push	r25
    3054:	ef 93       	push	r30
    3056:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    3058:	90 91 de 02 	lds	r25, 0x02DE
    305c:	80 91 dd 02 	lds	r24, 0x02DD
    3060:	98 17       	cp	r25, r24
    3062:	69 f0       	breq	.+26     	; 0x307e <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    3064:	e0 91 dd 02 	lds	r30, 0x02DD
    3068:	ef 5f       	subi	r30, 0xFF	; 255
    306a:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    306c:	e0 93 dd 02 	sts	0x02DD, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	e1 50       	subi	r30, 0x01	; 1
    3074:	fd 4f       	sbci	r31, 0xFD	; 253
    3076:	80 81       	ld	r24, Z
    3078:	80 93 c6 00 	sts	0x00C6, r24
    307c:	05 c0       	rjmp	.+10     	; 0x3088 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    307e:	e1 ec       	ldi	r30, 0xC1	; 193
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	8f 7d       	andi	r24, 0xDF	; 223
    3086:	80 83       	st	Z, r24
    }
}
    3088:	ff 91       	pop	r31
    308a:	ef 91       	pop	r30
    308c:	9f 91       	pop	r25
    308e:	8f 91       	pop	r24
    3090:	0f 90       	pop	r0
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	0f 90       	pop	r0
    3096:	1f 90       	pop	r1
    3098:	18 95       	reti

0000309a <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    309a:	10 92 de 02 	sts	0x02DE, r1
    UART_TxTail = 0;
    309e:	10 92 dd 02 	sts	0x02DD, r1
    UART_RxHead = 0;
    30a2:	10 92 dc 02 	sts	0x02DC, r1
    UART_RxTail = 0;
    30a6:	10 92 db 02 	sts	0x02DB, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    30aa:	99 23       	and	r25, r25
    30ac:	24 f4       	brge	.+8      	; 0x30b6 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    30ae:	22 e0       	ldi	r18, 0x02	; 2
    30b0:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
    30b4:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    30b6:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    30ba:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    30be:	88 e9       	ldi	r24, 0x98	; 152
    30c0:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    30c4:	86 e0       	ldi	r24, 0x06	; 6
    30c6:	80 93 c2 00 	sts	0x00C2, r24
    30ca:	08 95       	ret

000030cc <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    30cc:	90 91 dc 02 	lds	r25, 0x02DC
    30d0:	80 91 db 02 	lds	r24, 0x02DB
    30d4:	98 17       	cp	r25, r24
    30d6:	91 f0       	breq	.+36     	; 0x30fc <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    30d8:	e0 91 db 02 	lds	r30, 0x02DB
    30dc:	ef 5f       	subi	r30, 0xFF	; 255
    30de:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
    30e0:	e0 93 db 02 	sts	0x02DB, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	e1 52       	subi	r30, 0x21	; 33
    30e8:	fd 4f       	sbci	r31, 0xFD	; 253
    30ea:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
    30ec:	80 91 da 02 	lds	r24, 0x02DA
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	98 2f       	mov	r25, r24
    30f4:	88 27       	eor	r24, r24
    30f6:	82 0f       	add	r24, r18
    30f8:	91 1d       	adc	r25, r1
    30fa:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    3100:	08 95       	ret

00003102 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    3102:	20 91 de 02 	lds	r18, 0x02DE
    3106:	2f 5f       	subi	r18, 0xFF	; 255
    3108:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    310a:	90 91 dd 02 	lds	r25, 0x02DD
    310e:	29 17       	cp	r18, r25
    3110:	e1 f3       	breq	.-8      	; 0x310a <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    3112:	e2 2f       	mov	r30, r18
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	e1 50       	subi	r30, 0x01	; 1
    3118:	fd 4f       	sbci	r31, 0xFD	; 253
    311a:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    311c:	20 93 de 02 	sts	0x02DE, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    3120:	e1 ec       	ldi	r30, 0xC1	; 193
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	80 62       	ori	r24, 0x20	; 32
    3128:	80 83       	st	Z, r24
    312a:	08 95       	ret

0000312c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	ec 01       	movw	r28, r24
    while (*s) 
    3132:	88 81       	ld	r24, Y
    3134:	88 23       	and	r24, r24
    3136:	31 f0       	breq	.+12     	; 0x3144 <uart_puts+0x18>
    3138:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    313a:	0e 94 81 18 	call	0x3102	; 0x3102 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    313e:	89 91       	ld	r24, Y+
    3140:	81 11       	cpse	r24, r1
    3142:	fb cf       	rjmp	.-10     	; 0x313a <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	08 95       	ret

0000314a <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    314e:	ec 01       	movw	r28, r24
    3150:	21 96       	adiw	r28, 0x01	; 1
    3152:	fc 01       	movw	r30, r24
    3154:	84 91       	lpm	r24, Z
    3156:	88 23       	and	r24, r24
    3158:	39 f0       	breq	.+14     	; 0x3168 <uart_puts_p+0x1e>
      uart_putc(c);
    315a:	0e 94 81 18 	call	0x3102	; 0x3102 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    315e:	fe 01       	movw	r30, r28
    3160:	84 91       	lpm	r24, Z
    3162:	21 96       	adiw	r28, 0x01	; 1
    3164:	81 11       	cpse	r24, r1
    3166:	f9 cf       	rjmp	.-14     	; 0x315a <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	08 95       	ret

0000316e <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
    316e:	80 91 dc 02 	lds	r24, 0x02DC
    3172:	20 91 db 02 	lds	r18, 0x02DB
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	4f 96       	adiw	r24, 0x1f	; 31
    317a:	82 1b       	sub	r24, r18
    317c:	91 09       	sbc	r25, r1
    317e:	6f e1       	ldi	r22, 0x1F	; 31
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <__divmodhi4>
}/* uart_available */
    3186:	08 95       	ret

00003188 <uart_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
    3188:	80 91 db 02 	lds	r24, 0x02DB
    318c:	80 93 dc 02 	sts	0x02DC, r24
    3190:	08 95       	ret

00003192 <uart_put_int>:
Purpose:  transmit integer as ASCII to UART
Input:    integer value
Returns:  none
**************************************************************************/
void uart_put_int( const int val )
{
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	2a 97       	sbiw	r28, 0x0a	; 10
    319c:	0f b6       	in	r0, 0x3f	; 63
    319e:	f8 94       	cli
    31a0:	de bf       	out	0x3e, r29	; 62
    31a2:	0f be       	out	0x3f, r0	; 63
    31a4:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    31a6:	4a e0       	ldi	r20, 0x0A	; 10
    31a8:	be 01       	movw	r22, r28
    31aa:	6f 5f       	subi	r22, 0xFF	; 255
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <__itoa_ncheck>
	char buffer[10];
	uart_puts( itoa( val, buffer, 10 ) );
    31b2:	0e 94 96 18 	call	0x312c	; 0x312c <uart_puts>
} /* uart_puti */
    31b6:	2a 96       	adiw	r28, 0x0a	; 10
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	df 91       	pop	r29
    31c4:	cf 91       	pop	r28
    31c6:	08 95       	ret

000031c8 <WDT_off>:
uint8_t CheckNoReadySNCounter;
char wait_powergone = 0;

void WDT_off(void)
{
	cli();
    31c8:	f8 94       	cli
	wdt_reset();
    31ca:	a8 95       	wdr
/* Clear WDRF in MCUSR */
	MCUSR &= ~(1<<WDRF);
    31cc:	84 b7       	in	r24, 0x34	; 52
    31ce:	87 7f       	andi	r24, 0xF7	; 247
    31d0:	84 bf       	out	0x34, r24	; 52
/* Write logical one to WDCE and WDE */
/* Keep old prescaler setting to prevent unintentional
time-out */
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    31d2:	e0 e6       	ldi	r30, 0x60	; 96
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	88 61       	ori	r24, 0x18	; 24
    31da:	80 83       	st	Z, r24
/* Turn off WDT */
	WDTCSR = 0x00;
    31dc:	10 82       	st	Z, r1
	sei();
    31de:	78 94       	sei
    31e0:	08 95       	ret

000031e2 <__vector_6>:
}

// watchdog interrupt
ISR (WDT_vect)
{
    31e2:	1f 92       	push	r1
    31e4:	0f 92       	push	r0
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	0f 92       	push	r0
    31ea:	11 24       	eor	r1, r1
   cli();
    31ec:	f8 94       	cli
   wdt_reset();
    31ee:	a8 95       	wdr
   sei();
    31f0:	78 94       	sei
}  // end of WDT_vect
    31f2:	0f 90       	pop	r0
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	0f 90       	pop	r0
    31f8:	1f 90       	pop	r1
    31fa:	18 95       	reti

000031fc <WDT_setup>:
//
void WDT_setup()
{

	cli();
    31fc:	f8 94       	cli
	MCUSR &= ~(1 << WDRF);                           // reset status flag
    31fe:	84 b7       	in	r24, 0x34	; 52
    3200:	87 7f       	andi	r24, 0xF7	; 247
    3202:	84 bf       	out	0x34, r24	; 52
	WDTCSR = (1 << WDCE) | (1 << WDE);              // enable configuration changes
    3204:	e0 e6       	ldi	r30, 0x60	; 96
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	88 e1       	ldi	r24, 0x18	; 24
    320a:	80 83       	st	Z, r24
	WDTCSR = (1 << WDIE) | (1<< WDP0) | (1 << WDP3); // set the prescalar  8s
    320c:	81 e6       	ldi	r24, 0x61	; 97
    320e:	80 83       	st	Z, r24
	//WDTCSR = (1<<WDE) | (1<< WDP0) | (1 << WDP3); // set the prescalar  8s
	sei();
    3210:	78 94       	sei
    3212:	08 95       	ret

00003214 <init_clock>:

}
//

void init_clock(void)
{                                   
    3214:	20 e4       	ldi	r18, 0x40	; 64
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	5f ef       	ldi	r21, 0xFF	; 255
    321a:	4f ef       	ldi	r20, 0xFF	; 255
    321c:	08 c0       	rjmp	.+16     	; 0x322e <init_clock+0x1a>
    321e:	01 97       	sbiw	r24, 0x01	; 1
//    init_rtc();   
    int temp0,temp1;      
        
    for(temp0=0;temp0<0x0040;temp0++)   // Wait for external clock crystal to stabilize   
    {   
        for(temp1=0;temp1<0xFFFF;temp1++);   
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	e9 f7       	brne	.-6      	; 0x321e <init_clock+0xa>
    3224:	21 50       	subi	r18, 0x01	; 1
    3226:	31 09       	sbc	r19, r1
void init_clock(void)
{                                   
//    init_rtc();   
    int temp0,temp1;      
        
    for(temp0=0;temp0<0x0040;temp0++)   // Wait for external clock crystal to stabilize   
    3228:	21 15       	cp	r18, r1
    322a:	31 05       	cpc	r19, r1
    322c:	19 f0       	breq	.+6      	; 0x3234 <init_clock+0x20>

}
//

void init_clock(void)
{                                   
    322e:	85 2f       	mov	r24, r21
    3230:	94 2f       	mov	r25, r20
    3232:	f5 cf       	rjmp	.-22     	; 0x321e <init_clock+0xa>
    for(temp0=0;temp0<0x0040;temp0++)   // Wait for external clock crystal to stabilize   
    {   
        for(temp1=0;temp1<0xFFFF;temp1++);   
    }   
//    DDRB=0xFF;
    TIMSK2 &=~((1<<TOIE2)|(1<<OCIE2A)|(1<<OCIE2B));     //Disable TC2 interrupt
    3234:	e0 e7       	ldi	r30, 0x70	; 112
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	88 7f       	andi	r24, 0xF8	; 248
    323c:	80 83       	st	Z, r24
    ASSR |= (1<<AS2);           //set Timer/Counter2 to be asynchronous from the CPU clock
    323e:	e6 eb       	ldi	r30, 0xB6	; 182
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	80 62       	ori	r24, 0x20	; 32
    3246:	80 83       	st	Z, r24
                                //with a second external clock(32,768kHz)driving it.     
    TCNT2 = 0x00;
    3248:	10 92 b2 00 	sts	0x00B2, r1
    TCCR2B = 0x05;                 //prescale the timer to be clock source / 1024 to make it
    324c:	85 e0       	ldi	r24, 0x05	; 5
    324e:	80 93 b1 00 	sts	0x00B1, r24
                                //exactly 1 second for every overflow to occur
    while(ASSR&0x1F);           //Wait until TC2 is updated
    3252:	80 81       	ld	r24, Z
    3254:	8f 71       	andi	r24, 0x1F	; 31
    3256:	e9 f7       	brne	.-6      	; 0x3252 <init_clock+0x3e>
    TIMSK2 |= (1<<TOIE2);        //set 8-bit Timer/Counter2 Overflow Interrupt Enable
    3258:	e0 e7       	ldi	r30, 0x70	; 112
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	81 60       	ori	r24, 0x01	; 1
    3260:	80 83       	st	Z, r24
    sei();                     //set the Global Interrupt Enable Bit
    3262:	78 94       	sei
    3264:	08 95       	ret

00003266 <not_leap>:
   
}     
    
char not_leap(void)      //check for leap year   
{   
    if (!(tAsync.year%100))   
    3266:	40 91 14 01 	lds	r20, 0x0114
    326a:	50 91 15 01 	lds	r21, 0x0115
    326e:	9a 01       	movw	r18, r20
    3270:	36 95       	lsr	r19
    3272:	27 95       	ror	r18
    3274:	36 95       	lsr	r19
    3276:	27 95       	ror	r18
    3278:	ab e7       	ldi	r26, 0x7B	; 123
    327a:	b4 e1       	ldi	r27, 0x14	; 20
    327c:	0e 94 fb 28 	call	0x51f6	; 0x51f6 <__umulhisi3>
    3280:	96 95       	lsr	r25
    3282:	87 95       	ror	r24
    3284:	64 e6       	ldi	r22, 0x64	; 100
    3286:	68 9f       	mul	r22, r24
    3288:	90 01       	movw	r18, r0
    328a:	69 9f       	mul	r22, r25
    328c:	30 0d       	add	r19, r0
    328e:	11 24       	eor	r1, r1
    3290:	42 17       	cp	r20, r18
    3292:	53 07       	cpc	r21, r19
    3294:	91 f4       	brne	.+36     	; 0x32ba <not_leap+0x54>
        return (char)(tAsync.year%400);   
    3296:	9a 01       	movw	r18, r20
    3298:	32 95       	swap	r19
    329a:	22 95       	swap	r18
    329c:	2f 70       	andi	r18, 0x0F	; 15
    329e:	23 27       	eor	r18, r19
    32a0:	3f 70       	andi	r19, 0x0F	; 15
    32a2:	23 27       	eor	r18, r19
    32a4:	ae e3       	ldi	r26, 0x3E	; 62
    32a6:	ba e0       	ldi	r27, 0x0A	; 10
    32a8:	0e 94 fb 28 	call	0x51f6	; 0x51f6 <__umulhisi3>
    32ac:	94 2f       	mov	r25, r20
    32ae:	20 e7       	ldi	r18, 0x70	; 112
    32b0:	82 9f       	mul	r24, r18
    32b2:	90 0d       	add	r25, r0
    32b4:	11 24       	eor	r1, r1
    32b6:	89 2f       	mov	r24, r25
    32b8:	08 95       	ret
    else   
        return (char)(tAsync.year%4);   
    32ba:	84 2f       	mov	r24, r20
    32bc:	83 70       	andi	r24, 0x03	; 3
} 
    32be:	08 95       	ret

000032c0 <__vector_9>:
    TIMSK2 |= (1<<TOIE2);        //set 8-bit Timer/Counter2 Overflow Interrupt Enable
    sei();                     //set the Global Interrupt Enable Bit
}   
   
ISR (TIMER2_OVF_vect) //void counter(void) //overflow interrupt vector
{    
    32c0:	1f 92       	push	r1
    32c2:	0f 92       	push	r0
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	0f 92       	push	r0
    32c8:	11 24       	eor	r1, r1
    32ca:	2f 93       	push	r18
    32cc:	3f 93       	push	r19
    32ce:	4f 93       	push	r20
    32d0:	5f 93       	push	r21
    32d2:	6f 93       	push	r22
    32d4:	7f 93       	push	r23
    32d6:	8f 93       	push	r24
    32d8:	9f 93       	push	r25
    32da:	af 93       	push	r26
    32dc:	bf 93       	push	r27
    32de:	ef 93       	push	r30
    32e0:	ff 93       	push	r31
       
    if (++tAsync.second==60)        //keep track of time, date, month, and year   
    32e2:	80 91 0f 01 	lds	r24, 0x010F
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	8c 33       	cpi	r24, 0x3C	; 60
    32ea:	19 f0       	breq	.+6      	; 0x32f2 <__vector_9+0x32>
    32ec:	80 93 0f 01 	sts	0x010F, r24
    32f0:	73 c0       	rjmp	.+230    	; 0x33d8 <__vector_9+0x118>
    {   
        tAsync.second=0;
    32f2:	10 92 0f 01 	sts	0x010F, r1
        TimeKeyPressed++;
    32f6:	80 91 7c 03 	lds	r24, 0x037C
    32fa:	8f 5f       	subi	r24, 0xFF	; 255
    32fc:	80 93 7c 03 	sts	0x037C, r24
        CheckNoReadySNCounter++;
    3300:	80 91 7b 03 	lds	r24, 0x037B
    3304:	8f 5f       	subi	r24, 0xFF	; 255
    3306:	80 93 7b 03 	sts	0x037B, r24
        if (++tAsync.minute==60)    
    330a:	80 91 10 01 	lds	r24, 0x0110
    330e:	8f 5f       	subi	r24, 0xFF	; 255
    3310:	8c 33       	cpi	r24, 0x3C	; 60
    3312:	19 f0       	breq	.+6      	; 0x331a <__vector_9+0x5a>
    3314:	80 93 10 01 	sts	0x0110, r24
    3318:	58 c0       	rjmp	.+176    	; 0x33ca <__vector_9+0x10a>
        {   
            tAsync.minute=0;   
    331a:	10 92 10 01 	sts	0x0110, r1
            if (++tAsync.hour==24)   
    331e:	80 91 11 01 	lds	r24, 0x0111
    3322:	8f 5f       	subi	r24, 0xFF	; 255
    3324:	88 31       	cpi	r24, 0x18	; 24
    3326:	19 f0       	breq	.+6      	; 0x332e <__vector_9+0x6e>
    3328:	80 93 11 01 	sts	0x0111, r24
    332c:	4e c0       	rjmp	.+156    	; 0x33ca <__vector_9+0x10a>
            {   
                tAsync.hour=0;   
    332e:	10 92 11 01 	sts	0x0111, r1
                if (++tAsync.date==32)   
    3332:	e2 e1       	ldi	r30, 0x12	; 18
    3334:	f1 e0       	ldi	r31, 0x01	; 1
    3336:	80 81       	ld	r24, Z
    3338:	8f 5f       	subi	r24, 0xFF	; 255
    333a:	80 83       	st	Z, r24
    333c:	80 32       	cpi	r24, 0x20	; 32
    333e:	49 f4       	brne	.+18     	; 0x3352 <__vector_9+0x92>
                {   
                    tAsync.month++;   
    3340:	e3 e1       	ldi	r30, 0x13	; 19
    3342:	f1 e0       	ldi	r31, 0x01	; 1
    3344:	80 81       	ld	r24, Z
    3346:	8f 5f       	subi	r24, 0xFF	; 255
    3348:	80 83       	st	Z, r24
                    tAsync.date=1;   
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	80 93 12 01 	sts	0x0112, r24
    3350:	2e c0       	rjmp	.+92     	; 0x33ae <__vector_9+0xee>
                }   
                else if (tAsync.date==31)    
    3352:	8f 31       	cpi	r24, 0x1F	; 31
    3354:	79 f4       	brne	.+30     	; 0x3374 <__vector_9+0xb4>
                {                       
                    if ((tAsync.month==4) || (tAsync.month==6) || (tAsync.month==9) || (tAsync.month==11))    
    3356:	80 91 13 01 	lds	r24, 0x0113
    335a:	98 2f       	mov	r25, r24
    335c:	9d 7f       	andi	r25, 0xFD	; 253
    335e:	94 30       	cpi	r25, 0x04	; 4
    3360:	11 f0       	breq	.+4      	; 0x3366 <__vector_9+0xa6>
    3362:	99 30       	cpi	r25, 0x09	; 9
    3364:	21 f5       	brne	.+72     	; 0x33ae <__vector_9+0xee>
                    {   
                        tAsync.month++;   
    3366:	8f 5f       	subi	r24, 0xFF	; 255
    3368:	80 93 13 01 	sts	0x0113, r24
                        tAsync.date=1;   
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	80 93 12 01 	sts	0x0112, r24
    3372:	1d c0       	rjmp	.+58     	; 0x33ae <__vector_9+0xee>
                    }   
                }   
                else if (tAsync.date==30)   
    3374:	8e 31       	cpi	r24, 0x1E	; 30
    3376:	59 f4       	brne	.+22     	; 0x338e <__vector_9+0xce>
                {   
                    if(tAsync.month==2)   
    3378:	80 91 13 01 	lds	r24, 0x0113
    337c:	82 30       	cpi	r24, 0x02	; 2
    337e:	b9 f4       	brne	.+46     	; 0x33ae <__vector_9+0xee>
                    {   
                       tAsync.month++;   
    3380:	83 e0       	ldi	r24, 0x03	; 3
    3382:	80 93 13 01 	sts	0x0113, r24
                       tAsync.date=1;   
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	80 93 12 01 	sts	0x0112, r24
    338c:	10 c0       	rjmp	.+32     	; 0x33ae <__vector_9+0xee>
                    }   
                }                 
                else if (tAsync.date==29)    
    338e:	8d 31       	cpi	r24, 0x1D	; 29
    3390:	71 f4       	brne	.+28     	; 0x33ae <__vector_9+0xee>
                {   
                    if((tAsync.month==2) && (not_leap()))   
    3392:	80 91 13 01 	lds	r24, 0x0113
    3396:	82 30       	cpi	r24, 0x02	; 2
    3398:	51 f4       	brne	.+20     	; 0x33ae <__vector_9+0xee>
    339a:	0e 94 33 19 	call	0x3266	; 0x3266 <not_leap>
    339e:	88 23       	and	r24, r24
    33a0:	a1 f0       	breq	.+40     	; 0x33ca <__vector_9+0x10a>
                    {   
                        tAsync.month++;   
    33a2:	83 e0       	ldi	r24, 0x03	; 3
    33a4:	80 93 13 01 	sts	0x0113, r24
                        tAsync.date=1;   
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	80 93 12 01 	sts	0x0112, r24
                    }                   
                }                             
                if (tAsync.month==13)   
    33ae:	80 91 13 01 	lds	r24, 0x0113
    33b2:	8d 30       	cpi	r24, 0x0D	; 13
    33b4:	51 f4       	brne	.+20     	; 0x33ca <__vector_9+0x10a>
                {   
                    tAsync.month=1;   
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	80 93 13 01 	sts	0x0113, r24
                    tAsync.year++;   
    33bc:	e4 e1       	ldi	r30, 0x14	; 20
    33be:	f1 e0       	ldi	r31, 0x01	; 1
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	80 83       	st	Z, r24
                }   
            }   
        }   
//wwwwwwwww
        if(wait_powergone) wait_powergone++;
    33ca:	80 91 1f 03 	lds	r24, 0x031F
    33ce:	88 23       	and	r24, r24
    33d0:	19 f0       	breq	.+6      	; 0x33d8 <__vector_9+0x118>
    33d2:	8f 5f       	subi	r24, 0xFF	; 255
    33d4:	80 93 1f 03 	sts	0x031F, r24
//wwwwwwwww
    }     
   
}     
    33d8:	ff 91       	pop	r31
    33da:	ef 91       	pop	r30
    33dc:	bf 91       	pop	r27
    33de:	af 91       	pop	r26
    33e0:	9f 91       	pop	r25
    33e2:	8f 91       	pop	r24
    33e4:	7f 91       	pop	r23
    33e6:	6f 91       	pop	r22
    33e8:	5f 91       	pop	r21
    33ea:	4f 91       	pop	r20
    33ec:	3f 91       	pop	r19
    33ee:	2f 91       	pop	r18
    33f0:	0f 90       	pop	r0
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	0f 90       	pop	r0
    33f6:	1f 90       	pop	r1
    33f8:	18 95       	reti

000033fa <ResetDiscrepancy>:
}

void ResetDiscrepancy()
{
   // reset the search state
   LastDiscrepancy = 0;
    33fa:	10 92 88 03 	sts	0x0388, r1
   LastDeviceFlag = FALSE;
    33fe:	10 92 86 03 	sts	0x0386, r1
   LastFamilyDiscrepancy = 0;
    3402:	10 92 85 03 	sts	0x0385, r1
    3406:	08 95       	ret

00003408 <OWReset>:
{

        uint8_t r;
        uint8_t retries = 125;

        NOINTERRUPT();
    3408:	f8 94       	cli
		OW_DIR_IN();
    340a:	e0 91 8f 03 	lds	r30, 0x038F
    340e:	f0 91 90 03 	lds	r31, 0x0390
    3412:	90 81       	ld	r25, Z
    3414:	80 91 8b 03 	lds	r24, 0x038B
    3418:	80 95       	com	r24
    341a:	89 23       	and	r24, r25
    341c:	80 83       	st	Z, r24
        DOINTERRUPT();
    341e:	78 94       	sei
    3420:	8c e7       	ldi	r24, 0x7C	; 124
    3422:	03 c0       	rjmp	.+6      	; 0x342a <OWReset+0x22>
    3424:	81 50       	subi	r24, 0x01	; 1
        // wait until the wire is high... just in case
        do {
                if (--retries == 0) return 0;
    3426:	09 f4       	brne	.+2      	; 0x342a <OWReset+0x22>
    3428:	49 c0       	rjmp	.+146    	; 0x34bc <OWReset+0xb4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    342a:	95 e0       	ldi	r25, 0x05	; 5
    342c:	9a 95       	dec	r25
    342e:	f1 f7       	brne	.-4      	; 0x342c <OWReset+0x24>
    3430:	00 00       	nop
					_delay_us(2);
                //delayMicroseconds(2);
		} while ( !OW_GET_IN());
    3432:	e0 91 8c 03 	lds	r30, 0x038C
    3436:	f0 91 8d 03 	lds	r31, 0x038D
    343a:	20 81       	ld	r18, Z
    343c:	90 91 8b 03 	lds	r25, 0x038B
    3440:	92 23       	and	r25, r18
    3442:	81 f3       	breq	.-32     	; 0x3424 <OWReset+0x1c>

        NOINTERRUPT();
    3444:	f8 94       	cli
		OW_OUT_LOW();
    3446:	e0 91 89 03 	lds	r30, 0x0389
    344a:	f0 91 8a 03 	lds	r31, 0x038A
    344e:	90 81       	ld	r25, Z
    3450:	80 91 8b 03 	lds	r24, 0x038B
    3454:	80 95       	com	r24
    3456:	89 23       	and	r24, r25
    3458:	80 83       	st	Z, r24
		OW_DIR_OUT();
    345a:	e0 91 8f 03 	lds	r30, 0x038F
    345e:	f0 91 90 03 	lds	r31, 0x0390
    3462:	90 81       	ld	r25, Z
    3464:	80 91 8b 03 	lds	r24, 0x038B
    3468:	89 2b       	or	r24, r25
    346a:	80 83       	st	Z, r24
        DOINTERRUPT();
    346c:	78 94       	sei
    346e:	ef eb       	ldi	r30, 0xBF	; 191
    3470:	f3 e0       	ldi	r31, 0x03	; 3
    3472:	31 97       	sbiw	r30, 0x01	; 1
    3474:	f1 f7       	brne	.-4      	; 0x3472 <OWReset+0x6a>
    3476:	00 c0       	rjmp	.+0      	; 0x3478 <OWReset+0x70>
    3478:	00 00       	nop
		_delay_us(480);
        NOINTERRUPT();
    347a:	f8 94       	cli
		OW_DIR_IN();
    347c:	e0 91 8f 03 	lds	r30, 0x038F
    3480:	f0 91 90 03 	lds	r31, 0x0390
    3484:	90 81       	ld	r25, Z
    3486:	80 91 8b 03 	lds	r24, 0x038B
    348a:	80 95       	com	r24
    348c:	89 23       	and	r24, r25
    348e:	80 83       	st	Z, r24
    3490:	fa eb       	ldi	r31, 0xBA	; 186
    3492:	fa 95       	dec	r31
    3494:	f1 f7       	brne	.-4      	; 0x3492 <OWReset+0x8a>
    3496:	00 c0       	rjmp	.+0      	; 0x3498 <OWReset+0x90>
		_delay_us(70);
		r = !OW_GET_IN();
    3498:	e0 91 8c 03 	lds	r30, 0x038C
    349c:	f0 91 8d 03 	lds	r31, 0x038D
    34a0:	90 81       	ld	r25, Z
    34a2:	80 91 8b 03 	lds	r24, 0x038B
    34a6:	98 23       	and	r25, r24
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	09 f0       	breq	.+2      	; 0x34ae <OWReset+0xa6>
    34ac:	80 e0       	ldi	r24, 0x00	; 0
        DOINTERRUPT();
    34ae:	78 94       	sei
    34b0:	e3 e3       	ldi	r30, 0x33	; 51
    34b2:	f3 e0       	ldi	r31, 0x03	; 3
    34b4:	31 97       	sbiw	r30, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <OWReset+0xac>
    34b8:	00 c0       	rjmp	.+0      	; 0x34ba <OWReset+0xb2>
    34ba:	00 00       	nop
		_delay_us(410);
        return r;
//
}
    34bc:	08 95       	ret

000034be <OWWriteBit>:
//
void OWWriteBit(unsigned char v)
{
   // platform specific

        NOINTERRUPT();
    34be:	f8 94       	cli

		OW_OUT_LOW();
    34c0:	e0 91 89 03 	lds	r30, 0x0389
    34c4:	f0 91 8a 03 	lds	r31, 0x038A
    34c8:	20 81       	ld	r18, Z
    34ca:	90 91 8b 03 	lds	r25, 0x038B
    34ce:	90 95       	com	r25
    34d0:	92 23       	and	r25, r18
    34d2:	90 83       	st	Z, r25
		OW_DIR_OUT();
    34d4:	e0 91 8f 03 	lds	r30, 0x038F
    34d8:	f0 91 90 03 	lds	r31, 0x0390
    34dc:	20 81       	ld	r18, Z
    34de:	90 91 8b 03 	lds	r25, 0x038B
    34e2:	92 2b       	or	r25, r18
    34e4:	90 83       	st	Z, r25

	if (v & 1) {
    34e6:	80 ff       	sbrs	r24, 0
    34e8:	13 c0       	rjmp	.+38     	; 0x3510 <OWWriteBit+0x52>
    34ea:	8a e1       	ldi	r24, 0x1A	; 26
    34ec:	8a 95       	dec	r24
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <OWWriteBit+0x2e>
    34f0:	00 c0       	rjmp	.+0      	; 0x34f2 <OWWriteBit+0x34>
		_delay_us(10);
		OW_OUT_HIGH();
    34f2:	e0 91 89 03 	lds	r30, 0x0389
    34f6:	f0 91 8a 03 	lds	r31, 0x038A
    34fa:	90 81       	ld	r25, Z
    34fc:	80 91 8b 03 	lds	r24, 0x038B
    3500:	89 2b       	or	r24, r25
    3502:	80 83       	st	Z, r24
        DOINTERRUPT();
    3504:	78 94       	sei
    3506:	82 e9       	ldi	r24, 0x92	; 146
    3508:	8a 95       	dec	r24
    350a:	f1 f7       	brne	.-4      	; 0x3508 <OWWriteBit+0x4a>
    350c:	00 c0       	rjmp	.+0      	; 0x350e <OWWriteBit+0x50>
    350e:	08 95       	ret
    3510:	8d ea       	ldi	r24, 0xAD	; 173
    3512:	8a 95       	dec	r24
    3514:	f1 f7       	brne	.-4      	; 0x3512 <OWWriteBit+0x54>
    3516:	00 00       	nop
		_delay_us(55);
	} else {
		_delay_us(65);
		OW_OUT_HIGH();
    3518:	e0 91 89 03 	lds	r30, 0x0389
    351c:	f0 91 8a 03 	lds	r31, 0x038A
    3520:	90 81       	ld	r25, Z
    3522:	80 91 8b 03 	lds	r24, 0x038B
    3526:	89 2b       	or	r24, r25
    3528:	80 83       	st	Z, r24
        DOINTERRUPT();
    352a:	78 94       	sei
    352c:	8d e0       	ldi	r24, 0x0D	; 13
    352e:	8a 95       	dec	r24
    3530:	f1 f7       	brne	.-4      	; 0x352e <OWWriteBit+0x70>
    3532:	00 00       	nop
    3534:	08 95       	ret

00003536 <OWWriteByte>:

//--------------------------------------------------------------------------
// Send 8 bits of data to the 1-Wire bus
//
void OWWriteByte(unsigned char v)
{
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	f8 2e       	mov	r15, r24
    3544:	c8 e0       	ldi	r28, 0x08	; 8
    3546:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
	
	power = 1;


    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    3548:	11 e0       	ldi	r17, 0x01	; 1
        OWWriteBit( (bitMask & v)?1:0);
    354a:	01 e0       	ldi	r16, 0x01	; 1
    354c:	e1 2c       	mov	r14, r1
    354e:	80 2f       	mov	r24, r16
    3550:	91 2f       	mov	r25, r17
    3552:	9f 21       	and	r25, r15
    3554:	09 f4       	brne	.+2      	; 0x3558 <OWWriteByte+0x22>
    3556:	8e 2d       	mov	r24, r14
    3558:	0e 94 5f 1a 	call	0x34be	; 0x34be <OWWriteBit>
    uint8_t bitMask;
	
	power = 1;


    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    355c:	11 0f       	add	r17, r17
    355e:	21 97       	sbiw	r28, 0x01	; 1
    3560:	20 97       	sbiw	r28, 0x00	; 0
    3562:	a9 f7       	brne	.-22     	; 0x354e <OWWriteByte+0x18>
		OW_DIR_IN();
		OW_OUT_LOW();	//Tri-state (Hi-Z)
        DOINTERRUPT();
    }

}
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
    356c:	ff 90       	pop	r15
    356e:	ef 90       	pop	r14
    3570:	08 95       	ret

00003572 <OWReadBit>:
{
//	unsigned char pin_state;
   // platform specific

 uint8_t r;
        NOINTERRUPT();
    3572:	f8 94       	cli
        OW_OUT_LOW();
    3574:	e0 91 89 03 	lds	r30, 0x0389
    3578:	f0 91 8a 03 	lds	r31, 0x038A
    357c:	90 81       	ld	r25, Z
    357e:	80 91 8b 03 	lds	r24, 0x038B
    3582:	80 95       	com	r24
    3584:	89 23       	and	r24, r25
    3586:	80 83       	st	Z, r24
		OW_DIR_OUT();
    3588:	e0 91 8f 03 	lds	r30, 0x038F
    358c:	f0 91 90 03 	lds	r31, 0x0390
    3590:	90 81       	ld	r25, Z
    3592:	80 91 8b 03 	lds	r24, 0x038B
    3596:	89 2b       	or	r24, r25
    3598:	80 83       	st	Z, r24
    359a:	85 e0       	ldi	r24, 0x05	; 5
    359c:	8a 95       	dec	r24
    359e:	f1 f7       	brne	.-4      	; 0x359c <OWReadBit+0x2a>
    35a0:	00 00       	nop
		_delay_us(2);
		OW_DIR_IN();  // let pin float, pull up will raise
    35a2:	e0 91 8f 03 	lds	r30, 0x038F
    35a6:	f0 91 90 03 	lds	r31, 0x0390
    35aa:	90 81       	ld	r25, Z
    35ac:	80 91 8b 03 	lds	r24, 0x038B
    35b0:	80 95       	com	r24
    35b2:	89 23       	and	r24, r25
    35b4:	80 83       	st	Z, r24
    35b6:	8a e1       	ldi	r24, 0x1A	; 26
    35b8:	8a 95       	dec	r24
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <OWReadBit+0x46>
    35bc:	00 c0       	rjmp	.+0      	; 0x35be <OWReadBit+0x4c>
		_delay_us(10);
		r = OW_GET_IN_SHIFT();
    35be:	e0 91 8c 03 	lds	r30, 0x038C
    35c2:	f0 91 8d 03 	lds	r31, 0x038D
    35c6:	20 81       	ld	r18, Z
    35c8:	90 91 8b 03 	lds	r25, 0x038B
		DOINTERRUPT();
    35cc:	78 94       	sei
    35ce:	8d e8       	ldi	r24, 0x8D	; 141
    35d0:	8a 95       	dec	r24
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <OWReadBit+0x5e>
    35d4:	00 00       	nop
        OW_OUT_LOW();
		OW_DIR_OUT();
		_delay_us(2);
		OW_DIR_IN();  // let pin float, pull up will raise
		_delay_us(10);
		r = OW_GET_IN_SHIFT();
    35d6:	29 23       	and	r18, r25
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	92 13       	cpse	r25, r18
    35dc:	80 e0       	ldi	r24, 0x00	; 0
		DOINTERRUPT();
		_delay_us(53);
        return r;
//

}
    35de:	08 95       	ret

000035e0 <OWMatchRom>:
//
void OWMatchRom(unsigned char * romValue)
{
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	8c 01       	movw	r16, r24
    unsigned char bytesLeft = 8;

    // Send the MATCH ROM command.
    OWWriteByte(DS18X20_MATCH_ROM);
    35ea:	85 e5       	ldi	r24, 0x55	; 85
    35ec:	0e 94 9b 1a 	call	0x3536	; 0x3536 <OWWriteByte>
    35f0:	e8 01       	movw	r28, r16
    35f2:	08 5f       	subi	r16, 0xF8	; 248
    35f4:	1f 4f       	sbci	r17, 0xFF	; 255

    // Do once for each byte.
    while (bytesLeft > 0)
    {
        // Transmit 1 byte of the ID to match.
    	OWWriteByte(*romValue++);
    35f6:	89 91       	ld	r24, Y+
    35f8:	0e 94 9b 1a 	call	0x3536	; 0x3536 <OWWriteByte>

    // Send the MATCH ROM command.
    OWWriteByte(DS18X20_MATCH_ROM);

    // Do once for each byte.
    while (bytesLeft > 0)
    35fc:	c0 17       	cp	r28, r16
    35fe:	d1 07       	cpc	r29, r17
    3600:	d1 f7       	brne	.-12     	; 0x35f6 <OWMatchRom+0x16>
    {
        // Transmit 1 byte of the ID to match.
    	OWWriteByte(*romValue++);
        bytesLeft--;
    }
}
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	08 95       	ret

0000360c <docrc8>:
// global 'crc8' value. 
// Returns current global crc8 value
//
unsigned char docrc8(unsigned char value)
{
   crc8m = dscrc_table[crc8m ^ value];
    360c:	e0 91 87 03 	lds	r30, 0x0387
    3610:	8e 27       	eor	r24, r30
    3612:	e8 2f       	mov	r30, r24
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	eb 5d       	subi	r30, 0xDB	; 219
    3618:	fe 4f       	sbci	r31, 0xFE	; 254
    361a:	80 81       	ld	r24, Z
    361c:	80 93 87 03 	sts	0x0387, r24
   return crc8m;
}
    3620:	08 95       	ret

00003622 <OWSearch>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OWSearch()
{
    3622:	df 92       	push	r13
    3624:	ef 92       	push	r14
    3626:	ff 92       	push	r15
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;
   crc8m = 0;
    3630:	10 92 87 03 	sts	0x0387, r1

   // if the last call was not the last one
   if (!LastDeviceFlag)
    3634:	80 91 86 03 	lds	r24, 0x0386
    3638:	81 11       	cpse	r24, r1
    363a:	6e c0       	rjmp	.+220    	; 0x3718 <OWSearch+0xf6>
   {
      // 1-Wire reset
      if (!OWReset())
    363c:	0e 94 04 1a 	call	0x3408	; 0x3408 <OWReset>
    3640:	81 11       	cpse	r24, r1
    3642:	07 c0       	rjmp	.+14     	; 0x3652 <OWSearch+0x30>
      {
         // reset the search
         LastDiscrepancy = 0;
    3644:	10 92 88 03 	sts	0x0388, r1
         LastDeviceFlag = FALSE;
    3648:	10 92 86 03 	sts	0x0386, r1
         LastFamilyDiscrepancy = 0;
    364c:	10 92 85 03 	sts	0x0385, r1
         return FALSE;
    3650:	72 c0       	rjmp	.+228    	; 0x3736 <OWSearch+0x114>
      }

      // issue the search command 
      OWWriteByte(0xF0);  
    3652:	80 ef       	ldi	r24, 0xF0	; 240
    3654:	0e 94 9b 1a 	call	0x3536	; 0x3536 <OWWriteByte>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
    3658:	ee 24       	eor	r14, r14
    365a:	e3 94       	inc	r14
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
    365c:	c0 e0       	ldi	r28, 0x00	; 0
   uint8_t id_bit, cmp_id_bit;
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
    365e:	f1 2c       	mov	r15, r1
   uint8_t last_zero, rom_byte_number, search_result;
   uint8_t id_bit, cmp_id_bit;
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    3660:	d1 e0       	ldi	r29, 0x01	; 1
    3662:	11 e0       	ldi	r17, 0x01	; 1
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    3664:	d1 2c       	mov	r13, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = OWReadBit();
    3666:	0e 94 b9 1a 	call	0x3572	; 0x3572 <OWReadBit>
    366a:	08 2f       	mov	r16, r24
         cmp_id_bit = OWReadBit();
    366c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <OWReadBit>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    3670:	01 30       	cpi	r16, 0x01	; 1
    3672:	19 f4       	brne	.+6      	; 0x367a <OWSearch+0x58>
    3674:	81 30       	cpi	r24, 0x01	; 1
    3676:	f1 f4       	brne	.+60     	; 0x36b4 <OWSearch+0x92>
    3678:	41 c0       	rjmp	.+130    	; 0x36fc <OWSearch+0xda>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    367a:	08 13       	cpse	r16, r24
    367c:	24 c0       	rjmp	.+72     	; 0x36c6 <OWSearch+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    367e:	80 91 88 03 	lds	r24, 0x0388
    3682:	d8 17       	cp	r29, r24
    3684:	50 f4       	brcc	.+20     	; 0x369a <OWSearch+0x78>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    3686:	ec 2f       	mov	r30, r28
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	e3 58       	subi	r30, 0x83	; 131
    368c:	fc 4f       	sbci	r31, 0xFC	; 252
    368e:	80 81       	ld	r24, Z
    3690:	8e 21       	and	r24, r14
    3692:	01 2f       	mov	r16, r17
    3694:	29 f4       	brne	.+10     	; 0x36a0 <OWSearch+0x7e>
    3696:	0d 2d       	mov	r16, r13
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <OWSearch+0x7e>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    369a:	01 2f       	mov	r16, r17
    369c:	d8 13       	cpse	r29, r24
    369e:	0d 2d       	mov	r16, r13

               // if 0 was picked then record its position in LastZero
               if (search_direction == 0)
    36a0:	01 11       	cpse	r16, r1
    36a2:	06 c0       	rjmp	.+12     	; 0x36b0 <OWSearch+0x8e>
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    36a4:	d9 30       	cpi	r29, 0x09	; 9
    36a6:	08 f0       	brcs	.+2      	; 0x36aa <OWSearch+0x88>
    36a8:	3f c0       	rjmp	.+126    	; 0x3728 <OWSearch+0x106>
                     LastFamilyDiscrepancy = last_zero;
    36aa:	d0 93 85 03 	sts	0x0385, r29
    36ae:	3c c0       	rjmp	.+120    	; 0x3728 <OWSearch+0x106>
               }
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
    36b0:	01 30       	cpi	r16, 0x01	; 1
    36b2:	49 f4       	brne	.+18     	; 0x36c6 <OWSearch+0xa4>
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    36b4:	ec 2f       	mov	r30, r28
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	e3 58       	subi	r30, 0x83	; 131
    36ba:	fc 4f       	sbci	r31, 0xFC	; 252
    36bc:	80 81       	ld	r24, Z
    36be:	8e 29       	or	r24, r14
    36c0:	80 83       	st	Z, r24
    36c2:	01 2f       	mov	r16, r17
    36c4:	09 c0       	rjmp	.+18     	; 0x36d8 <OWSearch+0xb6>
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    36c6:	ec 2f       	mov	r30, r28
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	e3 58       	subi	r30, 0x83	; 131
    36cc:	fc 4f       	sbci	r31, 0xFC	; 252
    36ce:	90 81       	ld	r25, Z
    36d0:	8e 2d       	mov	r24, r14
    36d2:	80 95       	com	r24
    36d4:	89 23       	and	r24, r25
    36d6:	80 83       	st	Z, r24

            // serial number search direction write bit
            OWWriteBit(search_direction);
    36d8:	80 2f       	mov	r24, r16
    36da:	0e 94 5f 1a 	call	0x34be	; 0x34be <OWWriteBit>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    36de:	df 5f       	subi	r29, 0xFF	; 255
            rom_byte_mask <<= 1;
    36e0:	ee 0c       	add	r14, r14

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    36e2:	49 f4       	brne	.+18     	; 0x36f6 <OWSearch+0xd4>
            {
                docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
    36e4:	ec 2f       	mov	r30, r28
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	e3 58       	subi	r30, 0x83	; 131
    36ea:	fc 4f       	sbci	r31, 0xFC	; 252
    36ec:	80 81       	ld	r24, Z
    36ee:	0e 94 06 1b 	call	0x360c	; 0x360c <docrc8>
                rom_byte_number++;
    36f2:	cf 5f       	subi	r28, 0xFF	; 255
                rom_byte_mask = 1;
    36f4:	e1 2e       	mov	r14, r17
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    36f6:	c8 30       	cpi	r28, 0x08	; 8
    36f8:	08 f4       	brcc	.+2      	; 0x36fc <OWSearch+0xda>
    36fa:	b5 cf       	rjmp	.-150    	; 0x3666 <OWSearch+0x44>

      // if the search was successful then
      if (!((id_bit_number < 65) || (crc8m != 0)))
    36fc:	d1 34       	cpi	r29, 0x41	; 65
    36fe:	60 f0       	brcs	.+24     	; 0x3718 <OWSearch+0xf6>
    3700:	80 91 87 03 	lds	r24, 0x0387
    3704:	81 11       	cpse	r24, r1
    3706:	08 c0       	rjmp	.+16     	; 0x3718 <OWSearch+0xf6>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    3708:	f0 92 88 03 	sts	0x0388, r15

         // check for last device
         if (LastDiscrepancy == 0)
    370c:	f1 10       	cpse	r15, r1
    370e:	0e c0       	rjmp	.+28     	; 0x372c <OWSearch+0x10a>
            LastDeviceFlag = TRUE;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	80 93 86 03 	sts	0x0386, r24
    3716:	0a c0       	rjmp	.+20     	; 0x372c <OWSearch+0x10a>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    3718:	10 92 88 03 	sts	0x0388, r1
      LastDeviceFlag = FALSE;
    371c:	10 92 86 03 	sts	0x0386, r1
      LastFamilyDiscrepancy = 0;
    3720:	10 92 85 03 	sts	0x0385, r1
      search_result = FALSE;
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	07 c0       	rjmp	.+14     	; 0x3736 <OWSearch+0x114>
   uint8_t last_zero, rom_byte_number, search_result;
   uint8_t id_bit, cmp_id_bit;
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    3728:	fd 2e       	mov	r15, r29
    372a:	cd cf       	rjmp	.-102    	; 0x36c6 <OWSearch+0xa4>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    372c:	80 91 7d 03 	lds	r24, 0x037D
    3730:	88 23       	and	r24, r24
    3732:	91 f3       	breq	.-28     	; 0x3718 <OWSearch+0xf6>
    3734:	81 e0       	ldi	r24, 0x01	; 1
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   }

   return search_result;
}
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	ff 90       	pop	r15
    3740:	ef 90       	pop	r14
    3742:	df 90       	pop	r13
    3744:	08 95       	ret

00003746 <OWFirst>:
//        FALSE : no device present
//
uint8_t OWFirst()
{
   // reset the search state
   LastDiscrepancy = 0;
    3746:	10 92 88 03 	sts	0x0388, r1
   LastDeviceFlag = FALSE;
    374a:	10 92 86 03 	sts	0x0386, r1
   LastFamilyDiscrepancy = 0;
    374e:	10 92 85 03 	sts	0x0385, r1

   return OWSearch();
    3752:	0e 94 11 1b 	call	0x3622	; 0x3622 <OWSearch>
}
    3756:	08 95       	ret

00003758 <OWNext>:
//        FALSE : device not found, end of search
//
uint8_t OWNext()
{
   // leave the search state alone
   return OWSearch();
    3758:	0e 94 11 1b 	call	0x3622	; 0x3622 <OWSearch>
}
    375c:	08 95       	ret

0000375e <OWVerify>:
// Verify the device with the ROM number in ROM_NO buffer is present.
// Return TRUE  : device verified present
//        FALSE : device not present
//
uint8_t OWVerify()
{
    375e:	ff 92       	push	r15
    3760:	0f 93       	push	r16
    3762:	1f 93       	push	r17
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	28 97       	sbiw	r28, 0x08	; 8
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	85 e8       	ldi	r24, 0x85	; 133
    377a:	93 e0       	ldi	r25, 0x03	; 3
    377c:	de 01       	movw	r26, r28
    377e:	11 96       	adiw	r26, 0x01	; 1
    3780:	ed e7       	ldi	r30, 0x7D	; 125
    3782:	f3 e0       	ldi	r31, 0x03	; 3
   unsigned char rom_backup[8];
   uint8_t i,rslt,ld_backup,ldf_backup,lfd_backup;

   // keep a backup copy of the current state
   for (i = 0; i < 8; i++)
      rom_backup[i] = ROM_NO[i];
    3784:	21 91       	ld	r18, Z+
    3786:	2d 93       	st	X+, r18
{
   unsigned char rom_backup[8];
   uint8_t i,rslt,ld_backup,ldf_backup,lfd_backup;

   // keep a backup copy of the current state
   for (i = 0; i < 8; i++)
    3788:	e8 17       	cp	r30, r24
    378a:	f9 07       	cpc	r31, r25
    378c:	d9 f7       	brne	.-10     	; 0x3784 <OWVerify+0x26>
      rom_backup[i] = ROM_NO[i];
   ld_backup = LastDiscrepancy;
    378e:	f0 90 88 03 	lds	r15, 0x0388
   ldf_backup = LastDeviceFlag;
    3792:	00 91 86 03 	lds	r16, 0x0386
   lfd_backup = LastFamilyDiscrepancy;
    3796:	10 91 85 03 	lds	r17, 0x0385

   // set search to find the same device
   LastDiscrepancy = 64;
    379a:	80 e4       	ldi	r24, 0x40	; 64
    379c:	80 93 88 03 	sts	0x0388, r24
   LastDeviceFlag = FALSE;
    37a0:	10 92 86 03 	sts	0x0386, r1

   if (OWSearch())
    37a4:	0e 94 11 1b 	call	0x3622	; 0x3622 <OWSearch>
    37a8:	88 23       	and	r24, r24
    37aa:	99 f0       	breq	.+38     	; 0x37d2 <OWVerify+0x74>
   {
      // check if same device found
      rslt = TRUE;
      for (i = 0; i < 8; i++)
      {
         if (rom_backup[i] != ROM_NO[i])
    37ac:	99 81       	ldd	r25, Y+1	; 0x01
    37ae:	80 91 7d 03 	lds	r24, 0x037D
    37b2:	98 13       	cpse	r25, r24
    37b4:	10 c0       	rjmp	.+32     	; 0x37d6 <OWVerify+0x78>
    37b6:	fe 01       	movw	r30, r28
    37b8:	32 96       	adiw	r30, 0x02	; 2
    37ba:	ae e7       	ldi	r26, 0x7E	; 126
    37bc:	b3 e0       	ldi	r27, 0x03	; 3
    37be:	ce 01       	movw	r24, r28
    37c0:	09 96       	adiw	r24, 0x09	; 9
    37c2:	31 91       	ld	r19, Z+
    37c4:	2d 91       	ld	r18, X+
    37c6:	32 13       	cpse	r19, r18
    37c8:	08 c0       	rjmp	.+16     	; 0x37da <OWVerify+0x7c>

   if (OWSearch())
   {
      // check if same device found
      rslt = TRUE;
      for (i = 0; i < 8; i++)
    37ca:	e8 17       	cp	r30, r24
    37cc:	f9 07       	cpc	r31, r25
    37ce:	c9 f7       	brne	.-14     	; 0x37c2 <OWVerify+0x64>
    37d0:	06 c0       	rjmp	.+12     	; 0x37de <OWVerify+0x80>
            break;
         }
      }
   }
   else
     rslt = FALSE;
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	05 c0       	rjmp	.+10     	; 0x37e0 <OWVerify+0x82>
      rslt = TRUE;
      for (i = 0; i < 8; i++)
      {
         if (rom_backup[i] != ROM_NO[i])
         {
            rslt = FALSE;
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	03 c0       	rjmp	.+6      	; 0x37e0 <OWVerify+0x82>
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <OWVerify+0x82>
   LastDeviceFlag = FALSE;

   if (OWSearch())
   {
      // check if same device found
      rslt = TRUE;
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	9e 01       	movw	r18, r28
    37e2:	27 5f       	subi	r18, 0xF7	; 247
    37e4:	3f 4f       	sbci	r19, 0xFF	; 255
      for (i = 0; i < 8; i++)
      {
         if (rom_backup[i] != ROM_NO[i])
         {
            rslt = FALSE;
    37e6:	ad e7       	ldi	r26, 0x7D	; 125
    37e8:	b3 e0       	ldi	r27, 0x03	; 3
    37ea:	fe 01       	movw	r30, r28
    37ec:	31 96       	adiw	r30, 0x01	; 1
   else
     rslt = FALSE;

   // restore the search state 
   for (i = 0; i < 8; i++)
      ROM_NO[i] = rom_backup[i];
    37ee:	91 91       	ld	r25, Z+
    37f0:	9d 93       	st	X+, r25
   }
   else
     rslt = FALSE;

   // restore the search state 
   for (i = 0; i < 8; i++)
    37f2:	e2 17       	cp	r30, r18
    37f4:	f3 07       	cpc	r31, r19
    37f6:	d9 f7       	brne	.-10     	; 0x37ee <OWVerify+0x90>
      ROM_NO[i] = rom_backup[i];
   LastDiscrepancy = ld_backup;
    37f8:	f0 92 88 03 	sts	0x0388, r15
   LastDeviceFlag = ldf_backup;
    37fc:	00 93 86 03 	sts	0x0386, r16
   LastFamilyDiscrepancy = lfd_backup;
    3800:	10 93 85 03 	sts	0x0385, r17

   // return the result of the verify
   return rslt;
}
    3804:	28 96       	adiw	r28, 0x08	; 8
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	1f 91       	pop	r17
    3816:	0f 91       	pop	r16
    3818:	ff 90       	pop	r15
    381a:	08 95       	ret

0000381c <ow_set_bus>:
void ow_set_bus(volatile uint8_t* in,
	volatile uint8_t* out,
	volatile uint8_t* ddr,
	uint8_t pin)
{
	OW_DDR=ddr;
    381c:	50 93 90 03 	sts	0x0390, r21
    3820:	40 93 8f 03 	sts	0x038F, r20
	OW_OUT=out;
    3824:	70 93 8a 03 	sts	0x038A, r23
    3828:	60 93 89 03 	sts	0x0389, r22
	OW_IN=in;
    382c:	90 93 8d 03 	sts	0x038D, r25
    3830:	80 93 8c 03 	sts	0x038C, r24
	OW_PIN_MASK = (1 << pin);
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	02 2e       	mov	r0, r18
    3838:	01 c0       	rjmp	.+2      	; 0x383c <ow_set_bus+0x20>
    383a:	88 0f       	add	r24, r24
    383c:	0a 94       	dec	r0
    383e:	ea f7       	brpl	.-6      	; 0x383a <ow_set_bus+0x1e>
    3840:	80 93 8b 03 	sts	0x038B, r24
	OW_PIN = pin;
    3844:	20 93 8e 03 	sts	0x038E, r18
    3848:	08 95       	ret

0000384a <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
    384a:	e0 91 8c 03 	lds	r30, 0x038C
    384e:	f0 91 8d 03 	lds	r31, 0x038D
    3852:	90 81       	ld	r25, Z
    3854:	80 91 8b 03 	lds	r24, 0x038B
}
    3858:	89 23       	and	r24, r25
    385a:	08 95       	ret

0000385c <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
    385c:	e0 91 89 03 	lds	r30, 0x0389
    3860:	f0 91 8a 03 	lds	r31, 0x038A
    3864:	90 81       	ld	r25, Z
    3866:	80 91 8b 03 	lds	r24, 0x038B
    386a:	89 2b       	or	r24, r25
    386c:	80 83       	st	Z, r24
	OW_DIR_OUT();
    386e:	e0 91 8f 03 	lds	r30, 0x038F
    3872:	f0 91 90 03 	lds	r31, 0x0390
    3876:	90 81       	ld	r25, Z
    3878:	80 91 8b 03 	lds	r24, 0x038B
    387c:	89 2b       	or	r24, r25
    387e:	80 83       	st	Z, r24
    3880:	08 95       	ret

00003882 <ow_bit_io_intern>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
    3882:	cf 93       	push	r28
    3884:	df 93       	push	r29
    3886:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3888:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    388a:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
    388c:	e0 91 89 03 	lds	r30, 0x0389
    3890:	f0 91 8a 03 	lds	r31, 0x038A
    3894:	90 81       	ld	r25, Z
    3896:	80 91 8b 03 	lds	r24, 0x038B
    389a:	80 95       	com	r24
    389c:	89 23       	and	r24, r25
    389e:	80 83       	st	Z, r24
#endif
		OW_DIR_OUT();    // drive bus low
    38a0:	e0 91 8f 03 	lds	r30, 0x038F
    38a4:	f0 91 90 03 	lds	r31, 0x0390
    38a8:	90 81       	ld	r25, Z
    38aa:	80 91 8b 03 	lds	r24, 0x038B
    38ae:	89 2b       	or	r24, r25
    38b0:	80 83       	st	Z, r24
    38b2:	85 e0       	ldi	r24, 0x05	; 5
    38b4:	8a 95       	dec	r24
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <ow_bit_io_intern+0x32>
    38b8:	00 00       	nop
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
    38ba:	cc 23       	and	r28, r28
    38bc:	99 f0       	breq	.+38     	; 0x38e4 <ow_bit_io_intern+0x62>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
    38be:	e0 91 8f 03 	lds	r30, 0x038F
    38c2:	f0 91 90 03 	lds	r31, 0x0390
    38c6:	90 81       	ld	r25, Z
    38c8:	80 91 8b 03 	lds	r24, 0x038B
    38cc:	80 95       	com	r24
    38ce:	89 23       	and	r24, r25
    38d0:	80 83       	st	Z, r24
#if OW_USE_INTERNAL_PULLUP
			OW_OUT_HIGH();
    38d2:	e0 91 89 03 	lds	r30, 0x0389
    38d6:	f0 91 8a 03 	lds	r31, 0x038A
    38da:	90 81       	ld	r25, Z
    38dc:	80 91 8b 03 	lds	r24, 0x038B
    38e0:	89 2b       	or	r24, r25
    38e2:	80 83       	st	Z, r24
    38e4:	80 e2       	ldi	r24, 0x20	; 32
    38e6:	8a 95       	dec	r24
    38e8:	f1 f7       	brne	.-4      	; 0x38e6 <ow_bit_io_intern+0x64>
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
    38ea:	e0 91 8c 03 	lds	r30, 0x038C
    38ee:	f0 91 8d 03 	lds	r31, 0x038D
    38f2:	90 81       	ld	r25, Z
    38f4:	80 91 8b 03 	lds	r24, 0x038B
    38f8:	89 23       	and	r24, r25
    38fa:	09 f4       	brne	.+2      	; 0x38fe <ow_bit_io_intern+0x7c>
			b = 0;  // sample at end of read-timeslot
    38fc:	c0 e0       	ldi	r28, 0x00	; 0
    38fe:	85 e7       	ldi	r24, 0x75	; 117
    3900:	8a 95       	dec	r24
    3902:	f1 f7       	brne	.-4      	; 0x3900 <ow_bit_io_intern+0x7e>
    3904:	00 00       	nop
		}
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
    3906:	e0 91 89 03 	lds	r30, 0x0389
    390a:	f0 91 8a 03 	lds	r31, 0x038A
    390e:	90 81       	ld	r25, Z
    3910:	80 91 8b 03 	lds	r24, 0x038B
    3914:	89 2b       	or	r24, r25
    3916:	80 83       	st	Z, r24
#endif
		OW_DIR_IN();
    3918:	e0 91 8f 03 	lds	r30, 0x038F
    391c:	f0 91 90 03 	lds	r31, 0x0390
    3920:	20 81       	ld	r18, Z
    3922:	90 91 8b 03 	lds	r25, 0x038B
    3926:	90 95       	com	r25
    3928:	92 23       	and	r25, r18
    392a:	90 83       	st	Z, r25
	
		if ( with_parasite_enable ) {
    392c:	61 11       	cpse	r22, r1
			ow_parasite_enable();
    392e:	0e 94 2e 1c 	call	0x385c	; 0x385c <ow_parasite_enable>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3932:	df bf       	out	0x3f, r29	; 63
    3934:	8a e1       	ldi	r24, 0x1A	; 26
    3936:	8a 95       	dec	r24
    3938:	f1 f7       	brne	.-4      	; 0x3936 <ow_bit_io_intern+0xb4>
    393a:	00 c0       	rjmp	.+0      	; 0x393c <ow_bit_io_intern+0xba>
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
    393c:	8c 2f       	mov	r24, r28
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <ow_parasite_disable>:
	OW_DIR_OUT();
}

void ow_parasite_disable(void)
{
	OW_DIR_IN();
    3944:	e0 91 8f 03 	lds	r30, 0x038F
    3948:	f0 91 90 03 	lds	r31, 0x0390
    394c:	90 81       	ld	r25, Z
    394e:	80 91 8b 03 	lds	r24, 0x038B
    3952:	80 95       	com	r24
    3954:	89 23       	and	r24, r25
    3956:	80 83       	st	Z, r24
    3958:	08 95       	ret

0000395a <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
    395a:	60 e0       	ldi	r22, 0x00	; 0
    395c:	81 70       	andi	r24, 0x01	; 1
    395e:	0e 94 41 1c 	call	0x3882	; 0x3882 <ow_bit_io_intern>
}
    3962:	08 95       	ret

00003964 <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
    3968:	c8 2f       	mov	r28, r24
    396a:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
    396c:	8c 2f       	mov	r24, r28
    396e:	81 70       	andi	r24, 0x01	; 1
    3970:	0e 94 ad 1c 	call	0x395a	; 0x395a <ow_bit_io>
		b >>= 1;
    3974:	c6 95       	lsr	r28
		if( j ) {
    3976:	81 11       	cpse	r24, r1
			b |= 0x80;
    3978:	c0 68       	ori	r28, 0x80	; 128
    397a:	d1 50       	subi	r29, 0x01	; 1
		}
	} while( --i );
    397c:	b9 f7       	brne	.-18     	; 0x396c <ow_byte_wr+0x8>
	
	return b;
}
    397e:	8c 2f       	mov	r24, r28
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	08 95       	ret

00003986 <ow_byte_wr_with_parasite_enable>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
    3986:	cf 93       	push	r28
    3988:	df 93       	push	r29
    398a:	c8 2f       	mov	r28, r24
	uint8_t i = 8, j;
    398c:	d8 e0       	ldi	r29, 0x08	; 8
	
	do {
		if ( i != 1 ) {
    398e:	d1 30       	cpi	r29, 0x01	; 1
    3990:	31 f0       	breq	.+12     	; 0x399e <ow_byte_wr_with_parasite_enable+0x18>
			j = ow_bit_io_intern( b & 1, 0 );
    3992:	60 e0       	ldi	r22, 0x00	; 0
    3994:	8c 2f       	mov	r24, r28
    3996:	81 70       	andi	r24, 0x01	; 1
    3998:	0e 94 41 1c 	call	0x3882	; 0x3882 <ow_bit_io_intern>
    399c:	05 c0       	rjmp	.+10     	; 0x39a8 <ow_byte_wr_with_parasite_enable+0x22>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
    399e:	61 e0       	ldi	r22, 0x01	; 1
    39a0:	8c 2f       	mov	r24, r28
    39a2:	81 70       	andi	r24, 0x01	; 1
    39a4:	0e 94 41 1c 	call	0x3882	; 0x3882 <ow_bit_io_intern>
		}
		b >>= 1;
    39a8:	c6 95       	lsr	r28
		if( j ) {
    39aa:	81 11       	cpse	r24, r1
			b |= 0x80;
    39ac:	c0 68       	ori	r28, 0x80	; 128
		}
	} while( --i );
    39ae:	d1 50       	subi	r29, 0x01	; 1
    39b0:	71 f7       	brne	.-36     	; 0x398e <ow_byte_wr_with_parasite_enable+0x8>
	
	return b;
}
    39b2:	8c 2f       	mov	r24, r28
    39b4:	df 91       	pop	r29
    39b6:	cf 91       	pop	r28
    39b8:	08 95       	ret

000039ba <ow_command_intern>:
	return next_diff;                   // to continue search
}
#endif

static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
    39ba:	ef 92       	push	r14
    39bc:	ff 92       	push	r15
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	e8 2e       	mov	r14, r24
    39c8:	eb 01       	movw	r28, r22
    39ca:	f4 2e       	mov	r15, r20
	uint8_t i;

#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    39cc:	0e 94 04 1a 	call	0x3408	; 0x3408 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();

	if( id ) {
    39d0:	20 97       	sbiw	r28, 0x00	; 0
    39d2:	69 f0       	breq	.+26     	; 0x39ee <ow_command_intern+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
    39d4:	85 e5       	ldi	r24, 0x55	; 85
    39d6:	0e 94 b2 1c 	call	0x3964	; 0x3964 <ow_byte_wr>
    39da:	8e 01       	movw	r16, r28
    39dc:	08 5f       	subi	r16, 0xF8	; 248
    39de:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
    39e0:	89 91       	ld	r24, Y+
    39e2:	0e 94 b2 1c 	call	0x3964	; 0x3964 <ow_byte_wr>
			id++;
		} while( --i );
    39e6:	c0 17       	cp	r28, r16
    39e8:	d1 07       	cpc	r29, r17
    39ea:	d1 f7       	brne	.-12     	; 0x39e0 <ow_command_intern+0x26>
    39ec:	03 c0       	rjmp	.+6      	; 0x39f4 <ow_command_intern+0x3a>
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
    39ee:	8c ec       	ldi	r24, 0xCC	; 204
    39f0:	0e 94 b2 1c 	call	0x3964	; 0x3964 <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
    39f4:	ff 20       	and	r15, r15
    39f6:	21 f0       	breq	.+8      	; 0x3a00 <ow_command_intern+0x46>
		ow_byte_wr_with_parasite_enable( command );
    39f8:	8e 2d       	mov	r24, r14
    39fa:	0e 94 c3 1c 	call	0x3986	; 0x3986 <ow_byte_wr_with_parasite_enable>
    39fe:	03 c0       	rjmp	.+6      	; 0x3a06 <ow_command_intern+0x4c>
	} else {
		ow_byte_wr( command );
    3a00:	8e 2d       	mov	r24, r14
    3a02:	0e 94 b2 1c 	call	0x3964	; 0x3964 <ow_byte_wr>
	}
}
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	ff 90       	pop	r15
    3a10:	ef 90       	pop	r14
    3a12:	08 95       	ret

00003a14 <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
    3a14:	8f ef       	ldi	r24, 0xFF	; 255
    3a16:	0e 94 b2 1c 	call	0x3964	; 0x3964 <ow_byte_wr>
}
    3a1a:	08 95       	ret

00003a1c <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
    3a1c:	40 e0       	ldi	r20, 0x00	; 0
    3a1e:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <ow_command_intern>
    3a22:	08 95       	ret

00003a24 <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
    3a24:	41 e0       	ldi	r20, 0x01	; 1
    3a26:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <ow_command_intern>
    3a2a:	08 95       	ret

00003a2c <LCD_send_bit>:
extern byte LCDCache [Cache_Size];


void LCD_send_bit(uint8_t data)
{
	if (data)
    3a2c:	88 23       	and	r24, r24
    3a2e:	11 f0       	breq	.+4      	; 0x3a34 <LCD_send_bit+0x8>
	{
		sbi(LCD_PORT, LCD_PINSDA);
    3a30:	2b 9a       	sbi	0x05, 3	; 5
    3a32:	01 c0       	rjmp	.+2      	; 0x3a36 <LCD_send_bit+0xa>
	}
	else cbi(LCD_PORT, LCD_PINSDA);
    3a34:	2b 98       	cbi	0x05, 3	; 5
    3a36:	8a e6       	ldi	r24, 0x6A	; 106
    3a38:	8a 95       	dec	r24
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <LCD_send_bit+0xc>
    3a3c:	00 c0       	rjmp	.+0      	; 0x3a3e <LCD_send_bit+0x12>
	_delay_us(40);
	sbi(LCD_PORT, LCD_PINCLC);
    3a3e:	2d 9a       	sbi	0x05, 5	; 5
    3a40:	85 e3       	ldi	r24, 0x35	; 53
    3a42:	8a 95       	dec	r24
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <LCD_send_bit+0x16>
    3a46:	00 00       	nop
	_delay_us(20);
	cbi(LCD_PORT, LCD_PINCLC);
    3a48:	2d 98       	cbi	0x05, 5	; 5
    3a4a:	8a e6       	ldi	r24, 0x6A	; 106
    3a4c:	8a 95       	dec	r24
    3a4e:	f1 f7       	brne	.-4      	; 0x3a4c <LCD_send_bit+0x20>
    3a50:	00 c0       	rjmp	.+0      	; 0x3a52 <LCD_send_bit+0x26>
    3a52:	08 95       	ret

00003a54 <LCD_send_byte>:
	_delay_us(40);
}

void LCD_send_byte(uint8_t data, uint8_t dorc)
{
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	08 2f       	mov	r16, r24
    3a5e:	86 2f       	mov	r24, r22
	cbi(LCD_PORT, LCD_PINCSX);
    3a60:	2a 98       	cbi	0x05, 2	; 5

	LCD_send_bit(dorc);
    3a62:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_send_bit>
    3a66:	c8 e0       	ldi	r28, 0x08	; 8
    3a68:	d0 e0       	ldi	r29, 0x00	; 0

	for (uint8_t m = 0x80; m > 0x00; m >>= 1)
    3a6a:	10 e8       	ldi	r17, 0x80	; 128
	{
		LCD_send_bit(data & m);
    3a6c:	81 2f       	mov	r24, r17
    3a6e:	80 23       	and	r24, r16
    3a70:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <LCD_send_bit>
{
	cbi(LCD_PORT, LCD_PINCSX);

	LCD_send_bit(dorc);

	for (uint8_t m = 0x80; m > 0x00; m >>= 1)
    3a74:	16 95       	lsr	r17
    3a76:	21 97       	sbiw	r28, 0x01	; 1
    3a78:	20 97       	sbiw	r28, 0x00	; 0
    3a7a:	c1 f7       	brne	.-16     	; 0x3a6c <LCD_send_byte+0x18>
	{
		LCD_send_bit(data & m);
	}

	sbi(LCD_PORT, LCD_PINCSX);
    3a7c:	2a 9a       	sbi	0x05, 2	; 5
}
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	1f 91       	pop	r17
    3a84:	0f 91       	pop	r16
    3a86:	08 95       	ret

00003a88 <LCD_send_command>:
}
*/
//
void LCD_send_command(uint8_t data)
{
	LCD_send_byte(data, 0x00);
    3a88:	60 e0       	ldi	r22, 0x00	; 0
    3a8a:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <LCD_send_byte>
    3a8e:	08 95       	ret

00003a90 <LCD_send_data>:
}

void LCD_send_data(uint8_t data)
{
	LCD_send_byte(data, 0x01);
    3a90:	61 e0       	ldi	r22, 0x01	; 1
    3a92:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <LCD_send_byte>
    3a96:	08 95       	ret

00003a98 <LCD_Clear_Screen>:
	LCD_send_command(0xA6); 	//
	_delay_ms(1000);               		// 1 Sec delay
}
//
void LCD_Clear_Screen(void)
{
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
	LCD_send_command(0x40); // Y = 0
    3a9c:	80 e4       	ldi	r24, 0x40	; 64
    3a9e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0xB0);
    3aa2:	80 eb       	ldi	r24, 0xB0	; 176
    3aa4:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0x10); // X = 0
    3aa8:	80 e1       	ldi	r24, 0x10	; 16
    3aaa:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0x00);
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
    3ab4:	c0 e6       	ldi	r28, 0x60	; 96
    3ab6:	d3 e0       	ldi	r29, 0x03	; 3
	//LCD_send_command(0xAE); // disable display;

	for(unsigned int i=0;i<864;i++) LCD_send_data(0x00);
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <LCD_send_data>
    3abe:	21 97       	sbiw	r28, 0x01	; 1
    3ac0:	20 97       	sbiw	r28, 0x00	; 0
    3ac2:	d1 f7       	brne	.-12     	; 0x3ab8 <LCD_Clear_Screen+0x20>

	//LCD_send_command(0x07);
	//LCD_send_command(0xAF); // enable display;
}
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	08 95       	ret

00003aca <LCD_initialize2>:
  // max contract 0
  LCD_send_command(0x90);
}
*/
void LCD_initialize2(){
	LCD_DDRS |= (1<<LCD_PINCLC)|(1<<LCD_PINSDA)|(1<<LCD_PINCSX)|(1<<LCD_PINRST);
    3aca:	84 b1       	in	r24, 0x04	; 4
    3acc:	8c 63       	ori	r24, 0x3C	; 60
    3ace:	84 b9       	out	0x04, r24	; 4

	CS_LCD_RESET;
    3ad0:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ad2:	8f e0       	ldi	r24, 0x0F	; 15
    3ad4:	97 e2       	ldi	r25, 0x27	; 39
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <LCD_initialize2+0xc>
    3ada:	00 c0       	rjmp	.+0      	; 0x3adc <LCD_initialize2+0x12>
    3adc:	00 00       	nop
	_delay_ms(5);
	RST_LCD_RESET;
    3ade:	2c 98       	cbi	0x05, 4	; 5
    3ae0:	8f e1       	ldi	r24, 0x1F	; 31
    3ae2:	9e e4       	ldi	r25, 0x4E	; 78
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <LCD_initialize2+0x1a>
    3ae8:	00 c0       	rjmp	.+0      	; 0x3aea <LCD_initialize2+0x20>
    3aea:	00 00       	nop

	_delay_ms(10);

	RST_LCD_SET;
    3aec:	2c 9a       	sbi	0x05, 4	; 5

	LCD_send_command(0x20); //  Vop
    3aee:	80 e2       	ldi	r24, 0x20	; 32
    3af0:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0x90);
    3af4:	80 e9       	ldi	r24, 0x90	; 144
    3af6:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0xA4); // all on/normal display
    3afa:	84 ea       	ldi	r24, 0xA4	; 164
    3afc:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0x2F); // Power control set(charge pump on/off)
    3b00:	8f e2       	ldi	r24, 0x2F	; 47
    3b02:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0x40); // set start row address = 0
    3b06:	80 e4       	ldi	r24, 0x40	; 64
    3b08:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0xB0); //
    3b0c:	80 eb       	ldi	r24, 0xB0	; 176
    3b0e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0x10); //
    3b12:	80 e1       	ldi	r24, 0x10	; 16
    3b14:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0x0);  //
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	//LCD_send_command(0xC8); // mirror Y axis (about X axis)
#ifdef LCD1100
  // vertical reverse
	LCD_send_command(0xC8);
    3b1e:	88 ec       	ldi	r24, 0xC8	; 200
    3b20:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
#endif
	LCD_send_command(0xA1); //
    3b24:	81 ea       	ldi	r24, 0xA1	; 161
    3b26:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0xAC); // set initial row (R0) of the display
    3b2a:	8c ea       	ldi	r24, 0xAC	; 172
    3b2c:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	LCD_send_command(0x07);
    3b30:	87 e0       	ldi	r24, 0x07	; 7
    3b32:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
	//LCD_send_command(0xF9); //
	LCD_send_command(0xAF); //
    3b36:	8f ea       	ldi	r24, 0xAF	; 175
    3b38:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>

	LCD_Clear_Screen(); // clear LCD
    3b3c:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <LCD_Clear_Screen>

	LCD_send_command(0xA7); 	//
    3b40:	87 ea       	ldi	r24, 0xA7	; 167
    3b42:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
    3b46:	9f ef       	ldi	r25, 0xFF	; 255
    3b48:	24 e3       	ldi	r18, 0x34	; 52
    3b4a:	8c e0       	ldi	r24, 0x0C	; 12
    3b4c:	91 50       	subi	r25, 0x01	; 1
    3b4e:	20 40       	sbci	r18, 0x00	; 0
    3b50:	80 40       	sbci	r24, 0x00	; 0
    3b52:	e1 f7       	brne	.-8      	; 0x3b4c <LCD_initialize2+0x82>
    3b54:	00 c0       	rjmp	.+0      	; 0x3b56 <LCD_initialize2+0x8c>
    3b56:	00 00       	nop
	_delay_ms(500);                		// 1/2 Sec delay
	LCD_send_command(0xA6); 	//
    3b58:	86 ea       	ldi	r24, 0xA6	; 166
    3b5a:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
    3b5e:	9f ef       	ldi	r25, 0xFF	; 255
    3b60:	29 e6       	ldi	r18, 0x69	; 105
    3b62:	88 e1       	ldi	r24, 0x18	; 24
    3b64:	91 50       	subi	r25, 0x01	; 1
    3b66:	20 40       	sbci	r18, 0x00	; 0
    3b68:	80 40       	sbci	r24, 0x00	; 0
    3b6a:	e1 f7       	brne	.-8      	; 0x3b64 <LCD_initialize2+0x9a>
    3b6c:	00 c0       	rjmp	.+0      	; 0x3b6e <LCD_initialize2+0xa4>
    3b6e:	00 00       	nop
    3b70:	08 95       	ret

00003b72 <LCD_Update>:
	//LCD_send_command(0xAF); // enable display;
}

//******************************************************************************

void LCD_Update() {
    3b72:	9f 92       	push	r9
    3b74:	af 92       	push	r10
    3b76:	bf 92       	push	r11
    3b78:	cf 92       	push	r12
    3b7a:	df 92       	push	r13
    3b7c:	ef 92       	push	r14
    3b7e:	ff 92       	push	r15
    3b80:	0f 93       	push	r16
    3b82:	1f 93       	push	r17
    3b84:	cf 93       	push	r28
    3b86:	df 93       	push	r29
    3b88:	a1 2c       	mov	r10, r1
    3b8a:	b1 2c       	mov	r11, r1
    3b8c:	91 2c       	mov	r9, r1
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	6c 01       	movw	r12, r24
    3b94:	28 e0       	ldi	r18, 0x08	; 8
    3b96:	c2 0e       	add	r12, r18
    3b98:	d1 1c       	adc	r13, r1
	for(int p = 0; p < 9; p++){
		if(yUpdateMin >= ((p+1) *8)) {
    3b9a:	20 91 20 03 	lds	r18, 0x0320
    3b9e:	33 27       	eor	r19, r19
    3ba0:	27 fd       	sbrc	r18, 7
    3ba2:	30 95       	com	r19
    3ba4:	2c 15       	cp	r18, r12
    3ba6:	3d 05       	cpc	r19, r13
    3ba8:	c4 f5       	brge	.+112    	; 0x3c1a <LCD_Update+0xa8>
			continue;
		}
		if(yUpdateMax < p*8){
    3baa:	20 91 17 01 	lds	r18, 0x0117
    3bae:	33 27       	eor	r19, r19
    3bb0:	27 fd       	sbrc	r18, 7
    3bb2:	30 95       	com	r19
    3bb4:	28 17       	cp	r18, r24
    3bb6:	39 07       	cpc	r19, r25
    3bb8:	d4 f1       	brlt	.+116    	; 0x3c2e <LCD_Update+0xbc>
				break;
		}
//		LCD_send_command(0x40);
		LCD_send_command(SetYAddr | p);
    3bba:	89 2d       	mov	r24, r9
    3bbc:	80 6b       	ori	r24, 0xB0	; 176
    3bbe:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>

		int col = xUpdateMin;
    3bc2:	10 91 21 03 	lds	r17, 0x0321
    3bc6:	c1 2f       	mov	r28, r17
    3bc8:	dd 27       	eor	r29, r29
    3bca:	c7 fd       	sbrc	r28, 7
    3bcc:	d0 95       	com	r29
		int maxcol = xUpdateMax;
    3bce:	e0 90 18 01 	lds	r14, 0x0118
    3bd2:	ff 24       	eor	r15, r15
    3bd4:	e7 fc       	sbrc	r14, 7
    3bd6:	f0 94       	com	r15

		//LCD_send_command(SetXAddr3 | (col / 16));
		LCD_send_command(SetXAddr3 | (col >> 4));
    3bd8:	ce 01       	movw	r24, r28
    3bda:	95 95       	asr	r25
    3bdc:	87 95       	ror	r24
    3bde:	95 95       	asr	r25
    3be0:	87 95       	ror	r24
    3be2:	95 95       	asr	r25
    3be4:	87 95       	ror	r24
    3be6:	95 95       	asr	r25
    3be8:	87 95       	ror	r24
    3bea:	80 61       	ori	r24, 0x10	; 16
    3bec:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
		//LCD_send_command(SetXAddr4 | (col - (16 * (col/16))));
		LCD_send_command(SetXAddr4 | (col & 0x000f));
    3bf0:	81 2f       	mov	r24, r17
    3bf2:	8f 70       	andi	r24, 0x0F	; 15
    3bf4:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_send_command>
		//LCD_send_command(SetXAddr3 | (col / 16));
//		LCD_send_command(SetXAddr3 | (col >> 4));

		for(; col <= maxcol; col++){
    3bf8:	ec 16       	cp	r14, r28
    3bfa:	fd 06       	cpc	r15, r29
    3bfc:	74 f0       	brlt	.+28     	; 0x3c1a <LCD_Update+0xa8>
			LCD_send_data(LCDCache[(LCD_X * p) + col]);
    3bfe:	8e 01       	movw	r16, r28
    3c00:	0a 0d       	add	r16, r10
    3c02:	1b 1d       	adc	r17, r11
    3c04:	0f 56       	subi	r16, 0x6F	; 111
    3c06:	1c 4f       	sbci	r17, 0xFC	; 252
    3c08:	f8 01       	movw	r30, r16
    3c0a:	81 91       	ld	r24, Z+
    3c0c:	8f 01       	movw	r16, r30
    3c0e:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <LCD_send_data>
		//LCD_send_command(SetXAddr4 | (col - (16 * (col/16))));
		LCD_send_command(SetXAddr4 | (col & 0x000f));
		//LCD_send_command(SetXAddr3 | (col / 16));
//		LCD_send_command(SetXAddr3 | (col >> 4));

		for(; col <= maxcol; col++){
    3c12:	21 96       	adiw	r28, 0x01	; 1
    3c14:	ec 16       	cp	r14, r28
    3c16:	fd 06       	cpc	r15, r29
    3c18:	bc f7       	brge	.-18     	; 0x3c08 <LCD_Update+0x96>
    3c1a:	93 94       	inc	r9
    3c1c:	f0 e6       	ldi	r31, 0x60	; 96
    3c1e:	af 0e       	add	r10, r31
    3c20:	b1 1c       	adc	r11, r1
}

//******************************************************************************

void LCD_Update() {
	for(int p = 0; p < 9; p++){
    3c22:	28 e4       	ldi	r18, 0x48	; 72
    3c24:	c2 16       	cp	r12, r18
    3c26:	d1 04       	cpc	r13, r1
    3c28:	11 f0       	breq	.+4      	; 0x3c2e <LCD_Update+0xbc>
    3c2a:	c6 01       	movw	r24, r12
    3c2c:	b2 cf       	rjmp	.-156    	; 0x3b92 <LCD_Update+0x20>
		for(; col <= maxcol; col++){
			LCD_send_data(LCDCache[(LCD_X * p) + col]);
		}

	}
	xUpdateMin = LCD_X - 1;
    3c2e:	8f e5       	ldi	r24, 0x5F	; 95
    3c30:	80 93 21 03 	sts	0x0321, r24
	xUpdateMax = 0;
    3c34:	10 92 18 01 	sts	0x0118, r1
	yUpdateMin = LCD_Y -1;
    3c38:	80 e4       	ldi	r24, 0x40	; 64
    3c3a:	80 93 20 03 	sts	0x0320, r24
	yUpdateMax = 0;
    3c3e:	10 92 17 01 	sts	0x0117, r1
}
    3c42:	df 91       	pop	r29
    3c44:	cf 91       	pop	r28
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	ff 90       	pop	r15
    3c4c:	ef 90       	pop	r14
    3c4e:	df 90       	pop	r13
    3c50:	cf 90       	pop	r12
    3c52:	bf 90       	pop	r11
    3c54:	af 90       	pop	r10
    3c56:	9f 90       	pop	r9
    3c58:	08 95       	ret

00003c5a <LCD_UpdateBox>:
  x = 0;
  y = 0;
}

void LCD_UpdateBox (int xmin, int ymin, int xmax, int ymax) {
	if (xmin < xUpdateMin) xUpdateMin = xmin;
    3c5a:	e0 91 21 03 	lds	r30, 0x0321
    3c5e:	ff 27       	eor	r31, r31
    3c60:	e7 fd       	sbrc	r30, 7
    3c62:	f0 95       	com	r31
    3c64:	8e 17       	cp	r24, r30
    3c66:	9f 07       	cpc	r25, r31
    3c68:	14 f4       	brge	.+4      	; 0x3c6e <LCD_UpdateBox+0x14>
    3c6a:	80 93 21 03 	sts	0x0321, r24
	if (xmax > xUpdateMax) xUpdateMax = xmax;
    3c6e:	80 91 18 01 	lds	r24, 0x0118
    3c72:	99 27       	eor	r25, r25
    3c74:	87 fd       	sbrc	r24, 7
    3c76:	90 95       	com	r25
    3c78:	84 17       	cp	r24, r20
    3c7a:	95 07       	cpc	r25, r21
    3c7c:	14 f4       	brge	.+4      	; 0x3c82 <LCD_UpdateBox+0x28>
    3c7e:	40 93 18 01 	sts	0x0118, r20
	if (ymin < yUpdateMin) yUpdateMin = ymin;
    3c82:	80 91 20 03 	lds	r24, 0x0320
    3c86:	99 27       	eor	r25, r25
    3c88:	87 fd       	sbrc	r24, 7
    3c8a:	90 95       	com	r25
    3c8c:	68 17       	cp	r22, r24
    3c8e:	79 07       	cpc	r23, r25
    3c90:	14 f4       	brge	.+4      	; 0x3c96 <LCD_UpdateBox+0x3c>
    3c92:	60 93 20 03 	sts	0x0320, r22
	if (ymax > yUpdateMax) yUpdateMax = ymax;
    3c96:	80 91 17 01 	lds	r24, 0x0117
    3c9a:	99 27       	eor	r25, r25
    3c9c:	87 fd       	sbrc	r24, 7
    3c9e:	90 95       	com	r25
    3ca0:	82 17       	cp	r24, r18
    3ca2:	93 07       	cpc	r25, r19
    3ca4:	14 f4       	brge	.+4      	; 0x3caa <LCD_UpdateBox+0x50>
    3ca6:	20 93 17 01 	sts	0x0117, r18
    3caa:	08 95       	ret

00003cac <LCD_Clear>:
//unsigned char wrap = 1;
//uint16_t textcolor = 0xFF, textbgcolor = 0x00;
//uint8_t textsize = 1;

//-----------------------------------
void LCD_Clear() {
    3cac:	e1 e9       	ldi	r30, 0x91	; 145
    3cae:	f3 e0       	ldi	r31, 0x03	; 3
    3cb0:	81 ef       	ldi	r24, 0xF1	; 241
    3cb2:	96 e0       	ldi	r25, 0x06	; 6
	for (int index = 0; index < Cache_Size ; index++)
  {
   LCDCache[index] = (0x00);
    3cb4:	11 92       	st	Z+, r1
//uint16_t textcolor = 0xFF, textbgcolor = 0x00;
//uint8_t textsize = 1;

//-----------------------------------
void LCD_Clear() {
	for (int index = 0; index < Cache_Size ; index++)
    3cb6:	e8 17       	cp	r30, r24
    3cb8:	f9 07       	cpc	r31, r25
    3cba:	e1 f7       	brne	.-8      	; 0x3cb4 <LCD_Clear+0x8>
  {
   LCDCache[index] = (0x00);
  }
  LCD_UpdateBox(0, 0, LCD_X - 1, LCD_Y - 1);
    3cbc:	20 e4       	ldi	r18, 0x40	; 64
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	4f e5       	ldi	r20, 0x5F	; 95
    3cc2:	50 e0       	ldi	r21, 0x00	; 0
    3cc4:	60 e0       	ldi	r22, 0x00	; 0
    3cc6:	70 e0       	ldi	r23, 0x00	; 0
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <LCD_UpdateBox>
  Cursor_X = 0;
    3cd0:	10 92 27 03 	sts	0x0327, r1
  Cursor_Y = 0;
    3cd4:	10 92 26 03 	sts	0x0326, r1
  x = 0;
    3cd8:	10 92 25 03 	sts	0x0325, r1
    3cdc:	10 92 24 03 	sts	0x0324, r1
  y = 0;
    3ce0:	10 92 23 03 	sts	0x0323, r1
    3ce4:	10 92 22 03 	sts	0x0322, r1
    3ce8:	08 95       	ret

00003cea <LCD_drawPixel>:
	if (ymin < yUpdateMin) yUpdateMin = ymin;
	if (ymax > yUpdateMax) yUpdateMax = ymax;
}

void LCD_drawPixel (int16_t xc, int16_t yc, uint16_t color) {
	if ((xc < 0) || (xc >= LCD_X) || (yc < 0) || (yc >= LCD_Y))
    3cea:	80 36       	cpi	r24, 0x60	; 96
    3cec:	91 05       	cpc	r25, r1
    3cee:	08 f0       	brcs	.+2      	; 0x3cf2 <LCD_drawPixel+0x8>
    3cf0:	64 c0       	rjmp	.+200    	; 0x3dba <LCD_drawPixel+0xd0>
    3cf2:	61 34       	cpi	r22, 0x41	; 65
    3cf4:	71 05       	cpc	r23, r1
    3cf6:	08 f0       	brcs	.+2      	; 0x3cfa <LCD_drawPixel+0x10>
    3cf8:	60 c0       	rjmp	.+192    	; 0x3dba <LCD_drawPixel+0xd0>
	return;

	if (color)
    3cfa:	45 2b       	or	r20, r21
    3cfc:	69 f1       	breq	.+90     	; 0x3d58 <LCD_drawPixel+0x6e>
    LCDCache[xc + (yc/8)*LCD_X] |= _BV(yc%8);
    3cfe:	9b 01       	movw	r18, r22
    3d00:	77 23       	and	r23, r23
    3d02:	14 f4       	brge	.+4      	; 0x3d08 <LCD_drawPixel+0x1e>
    3d04:	29 5f       	subi	r18, 0xF9	; 249
    3d06:	3f 4f       	sbci	r19, 0xFF	; 255
    3d08:	35 95       	asr	r19
    3d0a:	27 95       	ror	r18
    3d0c:	35 95       	asr	r19
    3d0e:	27 95       	ror	r18
    3d10:	35 95       	asr	r19
    3d12:	27 95       	ror	r18
    3d14:	40 e6       	ldi	r20, 0x60	; 96
    3d16:	42 9f       	mul	r20, r18
    3d18:	f0 01       	movw	r30, r0
    3d1a:	43 9f       	mul	r20, r19
    3d1c:	f0 0d       	add	r31, r0
    3d1e:	11 24       	eor	r1, r1
    3d20:	e8 0f       	add	r30, r24
    3d22:	f9 1f       	adc	r31, r25
    3d24:	ef 56       	subi	r30, 0x6F	; 111
    3d26:	fc 4f       	sbci	r31, 0xFC	; 252
    3d28:	9b 01       	movw	r18, r22
    3d2a:	27 70       	andi	r18, 0x07	; 7
    3d2c:	30 78       	andi	r19, 0x80	; 128
    3d2e:	33 23       	and	r19, r19
    3d30:	34 f4       	brge	.+12     	; 0x3d3e <LCD_drawPixel+0x54>
    3d32:	21 50       	subi	r18, 0x01	; 1
    3d34:	31 09       	sbc	r19, r1
    3d36:	28 6f       	ori	r18, 0xF8	; 248
    3d38:	3f 6f       	ori	r19, 0xFF	; 255
    3d3a:	2f 5f       	subi	r18, 0xFF	; 255
    3d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3e:	41 e0       	ldi	r20, 0x01	; 1
    3d40:	50 e0       	ldi	r21, 0x00	; 0
    3d42:	da 01       	movw	r26, r20
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <LCD_drawPixel+0x60>
    3d46:	aa 0f       	add	r26, r26
    3d48:	bb 1f       	adc	r27, r27
    3d4a:	2a 95       	dec	r18
    3d4c:	e2 f7       	brpl	.-8      	; 0x3d46 <LCD_drawPixel+0x5c>
    3d4e:	9d 01       	movw	r18, r26
    3d50:	30 81       	ld	r19, Z
    3d52:	23 2b       	or	r18, r19
    3d54:	20 83       	st	Z, r18
    3d56:	2d c0       	rjmp	.+90     	; 0x3db2 <LCD_drawPixel+0xc8>
  else
    LCDCache[xc + (yc/8)*LCD_X] &= ~_BV(yc%8);
    3d58:	9b 01       	movw	r18, r22
    3d5a:	77 23       	and	r23, r23
    3d5c:	14 f4       	brge	.+4      	; 0x3d62 <LCD_drawPixel+0x78>
    3d5e:	29 5f       	subi	r18, 0xF9	; 249
    3d60:	3f 4f       	sbci	r19, 0xFF	; 255
    3d62:	35 95       	asr	r19
    3d64:	27 95       	ror	r18
    3d66:	35 95       	asr	r19
    3d68:	27 95       	ror	r18
    3d6a:	35 95       	asr	r19
    3d6c:	27 95       	ror	r18
    3d6e:	40 e6       	ldi	r20, 0x60	; 96
    3d70:	42 9f       	mul	r20, r18
    3d72:	f0 01       	movw	r30, r0
    3d74:	43 9f       	mul	r20, r19
    3d76:	f0 0d       	add	r31, r0
    3d78:	11 24       	eor	r1, r1
    3d7a:	e8 0f       	add	r30, r24
    3d7c:	f9 1f       	adc	r31, r25
    3d7e:	ef 56       	subi	r30, 0x6F	; 111
    3d80:	fc 4f       	sbci	r31, 0xFC	; 252
    3d82:	9b 01       	movw	r18, r22
    3d84:	27 70       	andi	r18, 0x07	; 7
    3d86:	30 78       	andi	r19, 0x80	; 128
    3d88:	33 23       	and	r19, r19
    3d8a:	34 f4       	brge	.+12     	; 0x3d98 <LCD_drawPixel+0xae>
    3d8c:	21 50       	subi	r18, 0x01	; 1
    3d8e:	31 09       	sbc	r19, r1
    3d90:	28 6f       	ori	r18, 0xF8	; 248
    3d92:	3f 6f       	ori	r19, 0xFF	; 255
    3d94:	2f 5f       	subi	r18, 0xFF	; 255
    3d96:	3f 4f       	sbci	r19, 0xFF	; 255
    3d98:	41 e0       	ldi	r20, 0x01	; 1
    3d9a:	50 e0       	ldi	r21, 0x00	; 0
    3d9c:	da 01       	movw	r26, r20
    3d9e:	02 c0       	rjmp	.+4      	; 0x3da4 <LCD_drawPixel+0xba>
    3da0:	aa 0f       	add	r26, r26
    3da2:	bb 1f       	adc	r27, r27
    3da4:	2a 95       	dec	r18
    3da6:	e2 f7       	brpl	.-8      	; 0x3da0 <LCD_drawPixel+0xb6>
    3da8:	9d 01       	movw	r18, r26
    3daa:	20 95       	com	r18
    3dac:	30 81       	ld	r19, Z
    3dae:	23 23       	and	r18, r19
    3db0:	20 83       	st	Z, r18

	LCD_UpdateBox(xc,yc,xc,yc);
    3db2:	9b 01       	movw	r18, r22
    3db4:	ac 01       	movw	r20, r24
    3db6:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <LCD_UpdateBox>
    3dba:	08 95       	ret

00003dbc <LCD_set_position2>:
}

//;;;;;;;;
void LCD_set_position2(uint8_t xpos, uint8_t ypos)
{
	  x = xpos;
    3dbc:	28 2f       	mov	r18, r24
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	30 93 25 03 	sts	0x0325, r19
    3dc4:	20 93 24 03 	sts	0x0324, r18
	  y = ypos;
    3dc8:	26 2f       	mov	r18, r22
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	30 93 23 03 	sts	0x0323, r19
    3dd0:	20 93 22 03 	sts	0x0322, r18
      Cursor_X = xpos * FONT_WIDTH * textsize;
    3dd4:	90 91 16 01 	lds	r25, 0x0116
    3dd8:	29 2f       	mov	r18, r25
    3dda:	22 0f       	add	r18, r18
    3ddc:	29 0f       	add	r18, r25
    3dde:	22 0f       	add	r18, r18
    3de0:	28 9f       	mul	r18, r24
    3de2:	80 2d       	mov	r24, r0
    3de4:	11 24       	eor	r1, r1
    3de6:	80 93 27 03 	sts	0x0327, r24
      Cursor_Y = ypos * FONT_HEIGHT * textsize;
    3dea:	99 0f       	add	r25, r25
    3dec:	99 0f       	add	r25, r25
    3dee:	99 0f       	add	r25, r25
    3df0:	96 9f       	mul	r25, r22
    3df2:	60 2d       	mov	r22, r0
    3df4:	11 24       	eor	r1, r1
    3df6:	60 93 26 03 	sts	0x0326, r22
    3dfa:	08 95       	ret

00003dfc <LCD_drawLine>:
	LCD_draw_string2(wbuffer);
}
//;;;;;;;;


void LCD_drawLine(int16_t x0, int16_t y0,int16_t x1, int16_t y1, uint16_t color) {
    3dfc:	2f 92       	push	r2
    3dfe:	3f 92       	push	r3
    3e00:	4f 92       	push	r4
    3e02:	5f 92       	push	r5
    3e04:	6f 92       	push	r6
    3e06:	7f 92       	push	r7
    3e08:	8f 92       	push	r8
    3e0a:	9f 92       	push	r9
    3e0c:	af 92       	push	r10
    3e0e:	bf 92       	push	r11
    3e10:	cf 92       	push	r12
    3e12:	df 92       	push	r13
    3e14:	ef 92       	push	r14
    3e16:	ff 92       	push	r15
    3e18:	0f 93       	push	r16
    3e1a:	1f 93       	push	r17
    3e1c:	cf 93       	push	r28
    3e1e:	df 93       	push	r29
    3e20:	ec 01       	movw	r28, r24
    3e22:	7b 01       	movw	r14, r22
    3e24:	6a 01       	movw	r12, r20
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    3e26:	c9 01       	movw	r24, r18
    3e28:	86 1b       	sub	r24, r22
    3e2a:	97 0b       	sbc	r25, r23
    3e2c:	ac 01       	movw	r20, r24
    3e2e:	22 f4       	brpl	.+8      	; 0x3e38 <LCD_drawLine+0x3c>
    3e30:	44 27       	eor	r20, r20
    3e32:	55 27       	eor	r21, r21
    3e34:	48 1b       	sub	r20, r24
    3e36:	59 0b       	sbc	r21, r25
    3e38:	b6 01       	movw	r22, r12
    3e3a:	6c 1b       	sub	r22, r28
    3e3c:	7d 0b       	sbc	r23, r29
    3e3e:	cb 01       	movw	r24, r22
    3e40:	99 23       	and	r25, r25
    3e42:	24 f4       	brge	.+8      	; 0x3e4c <LCD_drawLine+0x50>
    3e44:	88 27       	eor	r24, r24
    3e46:	99 27       	eor	r25, r25
    3e48:	86 1b       	sub	r24, r22
    3e4a:	97 0b       	sbc	r25, r23
    3e4c:	71 e0       	ldi	r23, 0x01	; 1
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	84 17       	cp	r24, r20
    3e52:	95 07       	cpc	r25, r21
    3e54:	0c f0       	brlt	.+2      	; 0x3e58 <LCD_drawLine+0x5c>
    3e56:	70 e0       	ldi	r23, 0x00	; 0
    3e58:	a7 2e       	mov	r10, r23
    3e5a:	b6 2e       	mov	r11, r22
  if (steep) {
    3e5c:	a1 14       	cp	r10, r1
    3e5e:	b1 04       	cpc	r11, r1
    3e60:	51 f0       	breq	.+20     	; 0x3e76 <LCD_drawLine+0x7a>
    3e62:	9c 2d       	mov	r25, r12
    3e64:	8d 2d       	mov	r24, r13
    swap(x0, y0);
    swap(x1, y1);
    3e66:	69 01       	movw	r12, r18
    3e68:	29 2f       	mov	r18, r25
    3e6a:	38 2f       	mov	r19, r24
    3e6c:	9c 2f       	mov	r25, r28
    3e6e:	8d 2f       	mov	r24, r29


void LCD_drawLine(int16_t x0, int16_t y0,int16_t x1, int16_t y1, uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
    swap(x0, y0);
    3e70:	e7 01       	movw	r28, r14
    3e72:	e9 2e       	mov	r14, r25
    3e74:	f8 2e       	mov	r15, r24
    swap(x1, y1);
  }

  if (x0 > x1) {
    3e76:	cc 16       	cp	r12, r28
    3e78:	dd 06       	cpc	r13, r29
    3e7a:	54 f4       	brge	.+20     	; 0x3e90 <LCD_drawLine+0x94>
    3e7c:	9e 2d       	mov	r25, r14
    3e7e:	8f 2d       	mov	r24, r15
    swap(x0, x1);
    swap(y0, y1);
    3e80:	79 01       	movw	r14, r18
    3e82:	29 2f       	mov	r18, r25
    3e84:	38 2f       	mov	r19, r24
    3e86:	9c 2f       	mov	r25, r28
    3e88:	8d 2f       	mov	r24, r29
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
    swap(x0, x1);
    3e8a:	e6 01       	movw	r28, r12
    3e8c:	c9 2e       	mov	r12, r25
    3e8e:	d8 2e       	mov	r13, r24
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
    3e90:	16 01       	movw	r2, r12
    3e92:	2c 1a       	sub	r2, r28
    3e94:	3d 0a       	sbc	r3, r29
  dy = abs(y1 - y0);
    3e96:	c9 01       	movw	r24, r18
    3e98:	8e 19       	sub	r24, r14
    3e9a:	9f 09       	sbc	r25, r15
    3e9c:	3c 01       	movw	r6, r24
    3e9e:	22 f4       	brpl	.+8      	; 0x3ea8 <LCD_drawLine+0xac>
    3ea0:	66 24       	eor	r6, r6
    3ea2:	77 24       	eor	r7, r7
    3ea4:	68 1a       	sub	r6, r24
    3ea6:	79 0a       	sbc	r7, r25

  int16_t err = dx / 2;
    3ea8:	41 01       	movw	r8, r2
    3eaa:	33 20       	and	r3, r3
    3eac:	1c f4       	brge	.+6      	; 0x3eb4 <LCD_drawLine+0xb8>
    3eae:	8f ef       	ldi	r24, 0xFF	; 255
    3eb0:	88 1a       	sub	r8, r24
    3eb2:	98 0a       	sbc	r9, r24
    3eb4:	95 94       	asr	r9
    3eb6:	87 94       	ror	r8
  int16_t ystep;

  if (y0 < y1) {
    3eb8:	e2 16       	cp	r14, r18
    3eba:	f3 06       	cpc	r15, r19
    3ebc:	24 f4       	brge	.+8      	; 0x3ec6 <LCD_drawLine+0xca>
    ystep = 1;
    3ebe:	44 24       	eor	r4, r4
    3ec0:	43 94       	inc	r4
    3ec2:	51 2c       	mov	r5, r1
    3ec4:	03 c0       	rjmp	.+6      	; 0x3ecc <LCD_drawLine+0xd0>
  } else {
    ystep = -1;
    3ec6:	44 24       	eor	r4, r4
    3ec8:	4a 94       	dec	r4
    3eca:	54 2c       	mov	r5, r4
  }

  for (; x0<=x1; x0++) {
    3ecc:	cc 16       	cp	r12, r28
    3ece:	dd 06       	cpc	r13, r29
    3ed0:	cc f0       	brlt	.+50     	; 0x3f04 <LCD_drawLine+0x108>
    if (steep) {
    3ed2:	a1 14       	cp	r10, r1
    3ed4:	b1 04       	cpc	r11, r1
    3ed6:	31 f0       	breq	.+12     	; 0x3ee4 <LCD_drawLine+0xe8>
      LCD_drawPixel(y0, x0, color);
    3ed8:	a8 01       	movw	r20, r16
    3eda:	be 01       	movw	r22, r28
    3edc:	c7 01       	movw	r24, r14
    3ede:	0e 94 75 1e 	call	0x3cea	; 0x3cea <LCD_drawPixel>
    3ee2:	05 c0       	rjmp	.+10     	; 0x3eee <LCD_drawLine+0xf2>
    } else {
      LCD_drawPixel(x0, y0, color);
    3ee4:	a8 01       	movw	r20, r16
    3ee6:	b7 01       	movw	r22, r14
    3ee8:	ce 01       	movw	r24, r28
    3eea:	0e 94 75 1e 	call	0x3cea	; 0x3cea <LCD_drawPixel>
    }
    err -= dy;
    3eee:	86 18       	sub	r8, r6
    3ef0:	97 08       	sbc	r9, r7
    if (err < 0) {
    3ef2:	22 f4       	brpl	.+8      	; 0x3efc <LCD_drawLine+0x100>
      y0 += ystep;
    3ef4:	e4 0c       	add	r14, r4
    3ef6:	f5 1c       	adc	r15, r5
      err += dx;
    3ef8:	82 0c       	add	r8, r2
    3efa:	93 1c       	adc	r9, r3
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    3efc:	21 96       	adiw	r28, 0x01	; 1
    3efe:	cc 16       	cp	r12, r28
    3f00:	dd 06       	cpc	r13, r29
    3f02:	3c f7       	brge	.-50     	; 0x3ed2 <LCD_drawLine+0xd6>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	1f 91       	pop	r17
    3f0a:	0f 91       	pop	r16
    3f0c:	ff 90       	pop	r15
    3f0e:	ef 90       	pop	r14
    3f10:	df 90       	pop	r13
    3f12:	cf 90       	pop	r12
    3f14:	bf 90       	pop	r11
    3f16:	af 90       	pop	r10
    3f18:	9f 90       	pop	r9
    3f1a:	8f 90       	pop	r8
    3f1c:	7f 90       	pop	r7
    3f1e:	6f 90       	pop	r6
    3f20:	5f 90       	pop	r5
    3f22:	4f 90       	pop	r4
    3f24:	3f 90       	pop	r3
    3f26:	2f 90       	pop	r2
    3f28:	08 95       	ret

00003f2a <LCD_drawFastVLine>:
  for (int16_t i=xq; i<xq+w; i++) {
    LCD_drawFastVLine(i, yq, h, color);
  }
}

void LCD_drawFastVLine(int16_t xq, int16_t yq, int16_t h, uint16_t color) {
    3f2a:	0f 93       	push	r16
    3f2c:	1f 93       	push	r17
    3f2e:	89 01       	movw	r16, r18
  LCD_drawLine(xq, yq, xq, yq+h-1, color);
    3f30:	9b 01       	movw	r18, r22
    3f32:	24 0f       	add	r18, r20
    3f34:	35 1f       	adc	r19, r21
    3f36:	21 50       	subi	r18, 0x01	; 1
    3f38:	31 09       	sbc	r19, r1
    3f3a:	ac 01       	movw	r20, r24
    3f3c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_drawLine>
}
    3f40:	1f 91       	pop	r17
    3f42:	0f 91       	pop	r16
    3f44:	08 95       	ret

00003f46 <LCD_fillRect>:
      err += dx;
    }
  }
}

void LCD_fillRect(int16_t xq, int16_t yq, int16_t w, int16_t h, uint16_t color) {
    3f46:	af 92       	push	r10
    3f48:	bf 92       	push	r11
    3f4a:	cf 92       	push	r12
    3f4c:	df 92       	push	r13
    3f4e:	ef 92       	push	r14
    3f50:	ff 92       	push	r15
    3f52:	0f 93       	push	r16
    3f54:	1f 93       	push	r17
    3f56:	cf 93       	push	r28
    3f58:	df 93       	push	r29
    3f5a:	ec 01       	movw	r28, r24
    3f5c:	5b 01       	movw	r10, r22
    3f5e:	69 01       	movw	r12, r18
  for (int16_t i=xq; i<xq+w; i++) {
    3f60:	7c 01       	movw	r14, r24
    3f62:	e4 0e       	add	r14, r20
    3f64:	f5 1e       	adc	r15, r21
    3f66:	8e 15       	cp	r24, r14
    3f68:	9f 05       	cpc	r25, r15
    3f6a:	54 f4       	brge	.+20     	; 0x3f80 <LCD_fillRect+0x3a>
    LCD_drawFastVLine(i, yq, h, color);
    3f6c:	98 01       	movw	r18, r16
    3f6e:	a6 01       	movw	r20, r12
    3f70:	b5 01       	movw	r22, r10
    3f72:	ce 01       	movw	r24, r28
    3f74:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <LCD_drawFastVLine>
    }
  }
}

void LCD_fillRect(int16_t xq, int16_t yq, int16_t w, int16_t h, uint16_t color) {
  for (int16_t i=xq; i<xq+w; i++) {
    3f78:	21 96       	adiw	r28, 0x01	; 1
    3f7a:	ce 15       	cp	r28, r14
    3f7c:	df 05       	cpc	r29, r15
    3f7e:	b4 f3       	brlt	.-20     	; 0x3f6c <LCD_fillRect+0x26>
    LCD_drawFastVLine(i, yq, h, color);
  }
}
    3f80:	df 91       	pop	r29
    3f82:	cf 91       	pop	r28
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
    3f88:	ff 90       	pop	r15
    3f8a:	ef 90       	pop	r14
    3f8c:	df 90       	pop	r13
    3f8e:	cf 90       	pop	r12
    3f90:	bf 90       	pop	r11
    3f92:	af 90       	pop	r10
    3f94:	08 95       	ret

00003f96 <LCD_drawChar>:
	yUpdateMin = LCD_Y -1;
	yUpdateMax = 0;
}
*/

void LCD_drawChar(int16_t xs, int16_t ys, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
    3f96:	2f 92       	push	r2
    3f98:	3f 92       	push	r3
    3f9a:	4f 92       	push	r4
    3f9c:	5f 92       	push	r5
    3f9e:	6f 92       	push	r6
    3fa0:	7f 92       	push	r7
    3fa2:	8f 92       	push	r8
    3fa4:	9f 92       	push	r9
    3fa6:	af 92       	push	r10
    3fa8:	bf 92       	push	r11
    3faa:	cf 92       	push	r12
    3fac:	df 92       	push	r13
    3fae:	ef 92       	push	r14
    3fb0:	ff 92       	push	r15
    3fb2:	0f 93       	push	r16
    3fb4:	1f 93       	push	r17
    3fb6:	cf 93       	push	r28
    3fb8:	df 93       	push	r29
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
    3fbe:	2c 97       	sbiw	r28, 0x0c	; 12
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	f8 94       	cli
    3fc4:	de bf       	out	0x3e, r29	; 62
    3fc6:	0f be       	out	0x3f, r0	; 63
    3fc8:	cd bf       	out	0x3d, r28	; 61
    3fca:	19 01       	movw	r2, r18

  if((xs >= LCD_X) ||(ys >= LCD_Y) || ((xs + 5 * size - 1) < 0) || ((ys + 8 * size - 1) < 0))
    3fcc:	80 36       	cpi	r24, 0x60	; 96
    3fce:	91 05       	cpc	r25, r1
    3fd0:	0c f0       	brlt	.+2      	; 0x3fd4 <LCD_drawChar+0x3e>
    3fd2:	9e c0       	rjmp	.+316    	; 0x4110 <LCD_drawChar+0x17a>
    3fd4:	61 34       	cpi	r22, 0x41	; 65
    3fd6:	71 05       	cpc	r23, r1
    3fd8:	0c f0       	brlt	.+2      	; 0x3fdc <LCD_drawChar+0x46>
    3fda:	9a c0       	rjmp	.+308    	; 0x4110 <LCD_drawChar+0x17a>
    3fdc:	ae 2c       	mov	r10, r14
    3fde:	b1 2c       	mov	r11, r1
    3fe0:	95 01       	movw	r18, r10
    3fe2:	22 0f       	add	r18, r18
    3fe4:	33 1f       	adc	r19, r19
    3fe6:	22 0f       	add	r18, r18
    3fe8:	33 1f       	adc	r19, r19
    3fea:	2a 0d       	add	r18, r10
    3fec:	3b 1d       	adc	r19, r11
    3fee:	28 0f       	add	r18, r24
    3ff0:	39 1f       	adc	r19, r25
    3ff2:	21 50       	subi	r18, 0x01	; 1
    3ff4:	31 09       	sbc	r19, r1
    3ff6:	33 23       	and	r19, r19
    3ff8:	0c f4       	brge	.+2      	; 0x3ffc <LCD_drawChar+0x66>
    3ffa:	8a c0       	rjmp	.+276    	; 0x4110 <LCD_drawChar+0x17a>
    3ffc:	95 01       	movw	r18, r10
    3ffe:	22 0f       	add	r18, r18
    4000:	33 1f       	adc	r19, r19
    4002:	22 0f       	add	r18, r18
    4004:	33 1f       	adc	r19, r19
    4006:	22 0f       	add	r18, r18
    4008:	33 1f       	adc	r19, r19
    400a:	26 0f       	add	r18, r22
    400c:	37 1f       	adc	r19, r23
    400e:	21 50       	subi	r18, 0x01	; 1
    4010:	31 09       	sbc	r19, r1
    4012:	33 23       	and	r19, r19
    4014:	0c f4       	brge	.+2      	; 0x4018 <LCD_drawChar+0x82>
    4016:	7c c0       	rjmp	.+248    	; 0x4110 <LCD_drawChar+0x17a>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    4018:	50 e0       	ldi	r21, 0x00	; 0
    401a:	9a 01       	movw	r18, r20
    401c:	22 0f       	add	r18, r18
    401e:	33 1f       	adc	r19, r19
    4020:	22 0f       	add	r18, r18
    4022:	33 1f       	adc	r19, r19
    4024:	42 0f       	add	r20, r18
    4026:	53 1f       	adc	r21, r19
    4028:	45 01       	movw	r8, r10
    402a:	9b 83       	std	Y+3, r25	; 0x03
    402c:	8a 83       	std	Y+2, r24	; 0x02
    402e:	9d 83       	std	Y+5, r25	; 0x05
    4030:	8c 83       	std	Y+4, r24	; 0x04
    4032:	1e 82       	std	Y+6, r1	; 0x06
    4034:	4d 50       	subi	r20, 0x0D	; 13
    4036:	5b 4f       	sbci	r21, 0xFB	; 251
    4038:	9a 01       	movw	r18, r20
    403a:	28 1b       	sub	r18, r24
    403c:	39 0b       	sbc	r19, r25
    403e:	3a 87       	std	Y+10, r19	; 0x0a
    4040:	29 87       	std	Y+9, r18	; 0x09
    4042:	6f 83       	std	Y+7, r22	; 0x07
    4044:	78 87       	std	Y+8, r23	; 0x08
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          LCD_drawPixel(xs+i, ys+j, color);
        else { // big size
          LCD_fillRect(xs+(i*size), ys+(j*size), size, size, color);
    4046:	28 01       	movw	r4, r16
    4048:	1e 2d       	mov	r17, r14
  if((xs >= LCD_X) ||(ys >= LCD_Y) || ((xs + 5 * size - 1) < 0) || ((ys + 8 * size - 1) < 0))
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5)
    404a:	3e 81       	ldd	r19, Y+6	; 0x06
    404c:	35 30       	cpi	r19, 0x05	; 5
    404e:	09 f4       	brne	.+2      	; 0x4052 <LCD_drawChar+0xbc>
    4050:	51 c0       	rjmp	.+162    	; 0x40f4 <LCD_drawChar+0x15e>
    4052:	e9 85       	ldd	r30, Y+9	; 0x09
    4054:	fa 85       	ldd	r31, Y+10	; 0x0a
    4056:	8a 81       	ldd	r24, Y+2	; 0x02
    4058:	9b 81       	ldd	r25, Y+3	; 0x03
    405a:	e8 0f       	add	r30, r24
    405c:	f9 1f       	adc	r31, r25
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    405e:	04 91       	lpm	r16, Z
    4060:	4a c0       	rjmp	.+148    	; 0x40f6 <LCD_drawChar+0x160>
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
    4062:	9c 85       	ldd	r25, Y+12	; 0x0c
    4064:	90 ff       	sbrs	r25, 0
    4066:	13 c0       	rjmp	.+38     	; 0x408e <LCD_drawChar+0xf8>
        if (size == 1) // default size
    4068:	ab 85       	ldd	r26, Y+11	; 0x0b
    406a:	a1 30       	cpi	r26, 0x01	; 1
    406c:	39 f4       	brne	.+14     	; 0x407c <LCD_drawChar+0xe6>
          LCD_drawPixel(xs+i, ys+j, color);
    406e:	a1 01       	movw	r20, r2
    4070:	b6 01       	movw	r22, r12
    4072:	8a 81       	ldd	r24, Y+2	; 0x02
    4074:	9b 81       	ldd	r25, Y+3	; 0x03
    4076:	0e 94 75 1e 	call	0x3cea	; 0x3cea <LCD_drawPixel>
    407a:	1e c0       	rjmp	.+60     	; 0x40b8 <LCD_drawChar+0x122>
        else { // big size
          LCD_fillRect(xs+(i*size), ys+(j*size), size, size, color);
    407c:	81 01       	movw	r16, r2
    407e:	95 01       	movw	r18, r10
    4080:	a5 01       	movw	r20, r10
    4082:	b7 01       	movw	r22, r14
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	96 2d       	mov	r25, r6
    4088:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <LCD_fillRect>
    408c:	15 c0       	rjmp	.+42     	; 0x40b8 <LCD_drawChar+0x122>
        }
      } else if (bg != color) {
    408e:	42 14       	cp	r4, r2
    4090:	53 04       	cpc	r5, r3
    4092:	91 f0       	breq	.+36     	; 0x40b8 <LCD_drawChar+0x122>
        if (size == 1) // default size
    4094:	bb 85       	ldd	r27, Y+11	; 0x0b
    4096:	b1 30       	cpi	r27, 0x01	; 1
    4098:	39 f4       	brne	.+14     	; 0x40a8 <LCD_drawChar+0x112>
          LCD_drawPixel(xs+i, ys+j, bg);
    409a:	a2 01       	movw	r20, r4
    409c:	b6 01       	movw	r22, r12
    409e:	8a 81       	ldd	r24, Y+2	; 0x02
    40a0:	9b 81       	ldd	r25, Y+3	; 0x03
    40a2:	0e 94 75 1e 	call	0x3cea	; 0x3cea <LCD_drawPixel>
    40a6:	08 c0       	rjmp	.+16     	; 0x40b8 <LCD_drawChar+0x122>
        else { // big size
          LCD_fillRect(xs+i*size, ys+j*size, size, size, bg);
    40a8:	82 01       	movw	r16, r4
    40aa:	95 01       	movw	r18, r10
    40ac:	a5 01       	movw	r20, r10
    40ae:	b7 01       	movw	r22, r14
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	96 2d       	mov	r25, r6
    40b4:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <LCD_fillRect>
        }
      }
      line >>= 1;
    40b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    40ba:	e6 95       	lsr	r30
    40bc:	ec 87       	std	Y+12, r30	; 0x0c
    40be:	7a 94       	dec	r7
    40c0:	e8 0c       	add	r14, r8
    40c2:	f9 1c       	adc	r15, r9
    40c4:	ff ef       	ldi	r31, 0xFF	; 255
    40c6:	cf 1a       	sub	r12, r31
    40c8:	df 0a       	sbc	r13, r31
    uint8_t line;
    if (i == 5)
      line = 0x0;
    else
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
    40ca:	71 10       	cpse	r7, r1
    40cc:	ca cf       	rjmp	.-108    	; 0x4062 <LCD_drawChar+0xcc>
    40ce:	1b 85       	ldd	r17, Y+11	; 0x0b
void LCD_drawChar(int16_t xs, int16_t ys, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {

  if((xs >= LCD_X) ||(ys >= LCD_Y) || ((xs + 5 * size - 1) < 0) || ((ys + 8 * size - 1) < 0))
    return;

  for (int8_t i=0; i<6; i++ ) {
    40d0:	2e 81       	ldd	r18, Y+6	; 0x06
    40d2:	2f 5f       	subi	r18, 0xFF	; 255
    40d4:	2e 83       	std	Y+6, r18	; 0x06
    40d6:	8c 81       	ldd	r24, Y+4	; 0x04
    40d8:	9d 81       	ldd	r25, Y+5	; 0x05
    40da:	88 0d       	add	r24, r8
    40dc:	99 1d       	adc	r25, r9
    40de:	9d 83       	std	Y+5, r25	; 0x05
    40e0:	8c 83       	std	Y+4, r24	; 0x04
    40e2:	aa 81       	ldd	r26, Y+2	; 0x02
    40e4:	bb 81       	ldd	r27, Y+3	; 0x03
    40e6:	11 96       	adiw	r26, 0x01	; 1
    40e8:	bb 83       	std	Y+3, r27	; 0x03
    40ea:	aa 83       	std	Y+2, r26	; 0x02
    40ec:	26 30       	cpi	r18, 0x06	; 6
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <LCD_drawChar+0x15c>
    40f0:	ac cf       	rjmp	.-168    	; 0x404a <LCD_drawChar+0xb4>
    40f2:	0e c0       	rjmp	.+28     	; 0x4110 <LCD_drawChar+0x17a>
    uint8_t line;
    if (i == 5)
      line = 0x0;
    40f4:	00 e0       	ldi	r16, 0x00	; 0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          LCD_drawPixel(xs+i, ys+j, color);
        else { // big size
          LCD_fillRect(xs+(i*size), ys+(j*size), size, size, color);
    40f6:	bc 81       	ldd	r27, Y+4	; 0x04
    40f8:	b9 83       	std	Y+1, r27	; 0x01
    40fa:	6d 80       	ldd	r6, Y+5	; 0x05
    40fc:	ef 80       	ldd	r14, Y+7	; 0x07
    40fe:	f8 84       	ldd	r15, Y+8	; 0x08
    4100:	ce 2c       	mov	r12, r14
    4102:	df 2c       	mov	r13, r15
    4104:	68 94       	set
    4106:	77 24       	eor	r7, r7
    4108:	73 f8       	bld	r7, 3
    410a:	0c 87       	std	Y+12, r16	; 0x0c
    410c:	1b 87       	std	Y+11, r17	; 0x0b
    410e:	a9 cf       	rjmp	.-174    	; 0x4062 <LCD_drawChar+0xcc>
        }
      }
      line >>= 1;
    }
  }
}
    4110:	2c 96       	adiw	r28, 0x0c	; 12
    4112:	0f b6       	in	r0, 0x3f	; 63
    4114:	f8 94       	cli
    4116:	de bf       	out	0x3e, r29	; 62
    4118:	0f be       	out	0x3f, r0	; 63
    411a:	cd bf       	out	0x3d, r28	; 61
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	1f 91       	pop	r17
    4122:	0f 91       	pop	r16
    4124:	ff 90       	pop	r15
    4126:	ef 90       	pop	r14
    4128:	df 90       	pop	r13
    412a:	cf 90       	pop	r12
    412c:	bf 90       	pop	r11
    412e:	af 90       	pop	r10
    4130:	9f 90       	pop	r9
    4132:	8f 90       	pop	r8
    4134:	7f 90       	pop	r7
    4136:	6f 90       	pop	r6
    4138:	5f 90       	pop	r5
    413a:	4f 90       	pop	r4
    413c:	3f 90       	pop	r3
    413e:	2f 90       	pop	r2
    4140:	08 95       	ret

00004142 <LCD_write2>:
	  y = ypos;
      Cursor_X = xpos * FONT_WIDTH * textsize;
      Cursor_Y = ypos * FONT_HEIGHT * textsize;
}

uint8_t LCD_write2(uint8_t c) {
    4142:	ef 92       	push	r14
    4144:	ff 92       	push	r15
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
	int txsize,tysize;
    LCD_drawChar(Cursor_X, Cursor_Y, c, textcolor, textbgcolor, textsize);
    414e:	c0 91 16 01 	lds	r28, 0x0116
    4152:	60 91 26 03 	lds	r22, 0x0326
    4156:	77 27       	eor	r23, r23
    4158:	67 fd       	sbrc	r22, 7
    415a:	70 95       	com	r23
    415c:	90 91 27 03 	lds	r25, 0x0327
    4160:	ec 2e       	mov	r14, r28
    4162:	00 e0       	ldi	r16, 0x00	; 0
    4164:	10 e0       	ldi	r17, 0x00	; 0
    4166:	2f ef       	ldi	r18, 0xFF	; 255
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	48 2f       	mov	r20, r24
    416c:	89 2f       	mov	r24, r25
    416e:	99 27       	eor	r25, r25
    4170:	87 fd       	sbrc	r24, 7
    4172:	90 95       	com	r25
    4174:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <LCD_drawChar>

    txsize = FONT_WIDTH * textsize;
    4178:	ec 2e       	mov	r14, r28
    417a:	f1 2c       	mov	r15, r1
    417c:	e7 01       	movw	r28, r14
    417e:	cc 0f       	add	r28, r28
    4180:	dd 1f       	adc	r29, r29
    4182:	ce 0d       	add	r28, r14
    4184:	df 1d       	adc	r29, r15
    4186:	cc 0f       	add	r28, r28
    4188:	dd 1f       	adc	r29, r29
    tysize = FONT_HEIGHT * textsize;
    418a:	ee 0c       	add	r14, r14
    418c:	ff 1c       	adc	r15, r15
    418e:	ee 0c       	add	r14, r14
    4190:	ff 1c       	adc	r15, r15
    4192:	ee 0c       	add	r14, r14
    4194:	ff 1c       	adc	r15, r15

	if(x + 1 < LCD_COLUMN_NUMBER) x += 1;
    4196:	80 91 24 03 	lds	r24, 0x0324
    419a:	90 91 25 03 	lds	r25, 0x0325
    419e:	01 96       	adiw	r24, 0x01	; 1
    41a0:	80 31       	cpi	r24, 0x10	; 16
    41a2:	91 05       	cpc	r25, r1
    41a4:	28 f4       	brcc	.+10     	; 0x41b0 <LCD_write2+0x6e>
    41a6:	90 93 25 03 	sts	0x0325, r25
    41aa:	80 93 24 03 	sts	0x0324, r24
    41ae:	13 c0       	rjmp	.+38     	; 0x41d6 <LCD_write2+0x94>
	else {	x=0;
    41b0:	10 92 25 03 	sts	0x0325, r1
    41b4:	10 92 24 03 	sts	0x0324, r1
		if (y < LCD_LINE_NUMBER - 1) y += 1;
    41b8:	80 91 22 03 	lds	r24, 0x0322
    41bc:	90 91 23 03 	lds	r25, 0x0323
    41c0:	87 30       	cpi	r24, 0x07	; 7
    41c2:	91 05       	cpc	r25, r1
    41c4:	30 f4       	brcc	.+12     	; 0x41d2 <LCD_write2+0x90>
    41c6:	01 96       	adiw	r24, 0x01	; 1
    41c8:	90 93 23 03 	sts	0x0323, r25
    41cc:	80 93 22 03 	sts	0x0322, r24
    41d0:	02 c0       	rjmp	.+4      	; 0x41d6 <LCD_write2+0x94>
			else LCD_CLEAR();
    41d2:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
	}
	Cursor_X = x * txsize;
    41d6:	80 91 24 03 	lds	r24, 0x0324
    41da:	8c 9f       	mul	r24, r28
    41dc:	c0 2d       	mov	r28, r0
    41de:	11 24       	eor	r1, r1
    41e0:	c0 93 27 03 	sts	0x0327, r28
	Cursor_Y = y * tysize;
    41e4:	80 91 22 03 	lds	r24, 0x0322
    41e8:	8e 9d       	mul	r24, r14
    41ea:	e0 2c       	mov	r14, r0
    41ec:	11 24       	eor	r1, r1
    41ee:	e0 92 26 03 	sts	0x0326, r14
      }
      if(Cursor_Y > LCD_Y - tysize)
    	  Cursor_Y = 0;
*/
  return 0;
}
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	df 91       	pop	r29
    41f6:	cf 91       	pop	r28
    41f8:	1f 91       	pop	r17
    41fa:	0f 91       	pop	r16
    41fc:	ff 90       	pop	r15
    41fe:	ef 90       	pop	r14
    4200:	08 95       	ret

00004202 <LCD_draw_string2>:
		LCD_write2(pgm_read_byte(&text[i]));
	}
}
*/
void LCD_draw_string2(char* text)
{
    4202:	1f 93       	push	r17
    4204:	cf 93       	push	r28
    4206:	df 93       	push	r29
    4208:	ec 01       	movw	r28, r24
	for (unsigned char i = 0; text[i]; i++)
    420a:	88 81       	ld	r24, Y
    420c:	88 23       	and	r24, r24
    420e:	51 f0       	breq	.+20     	; 0x4224 <LCD_draw_string2+0x22>
    4210:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_write2(text[i]);
    4212:	0e 94 a1 20 	call	0x4142	; 0x4142 <LCD_write2>
	}
}
*/
void LCD_draw_string2(char* text)
{
	for (unsigned char i = 0; text[i]; i++)
    4216:	1f 5f       	subi	r17, 0xFF	; 255
    4218:	fe 01       	movw	r30, r28
    421a:	e1 0f       	add	r30, r17
    421c:	f1 1d       	adc	r31, r1
    421e:	80 81       	ld	r24, Z
    4220:	81 11       	cpse	r24, r1
    4222:	f7 cf       	rjmp	.-18     	; 0x4212 <LCD_draw_string2+0x10>
	{
		LCD_write2(text[i]);
	}
}
    4224:	df 91       	pop	r29
    4226:	cf 91       	pop	r28
    4228:	1f 91       	pop	r17
    422a:	08 95       	ret

0000422c <LCD_draw_string3>:

void LCD_draw_string3(const char* text)
{
	strncpy_P(wbuffer,(PGM_P)text,LCD_COLUMN_NUMBER);
    422c:	40 e1       	ldi	r20, 0x10	; 16
    422e:	50 e0       	ldi	r21, 0x00	; 0
    4230:	bc 01       	movw	r22, r24
    4232:	83 e4       	ldi	r24, 0x43	; 67
    4234:	93 e0       	ldi	r25, 0x03	; 3
    4236:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <strncpy_P>
	wbuffer[LCD_COLUMN_NUMBER]='\0';
    423a:	10 92 53 03 	sts	0x0353, r1
	LCD_draw_string2(wbuffer);
    423e:	83 e4       	ldi	r24, 0x43	; 67
    4240:	93 e0       	ldi	r25, 0x03	; 3
    4242:	0e 94 01 21 	call	0x4202	; 0x4202 <LCD_draw_string2>
    4246:	08 95       	ret

00004248 <LCD_drawFastHLine>:

void LCD_drawFastVLine(int16_t xq, int16_t yq, int16_t h, uint16_t color) {
  LCD_drawLine(xq, yq, xq, yq+h-1, color);
}

void LCD_drawFastHLine(int16_t xq, int16_t yq, int16_t w, uint16_t color) {
    4248:	0f 93       	push	r16
    424a:	1f 93       	push	r17
  LCD_drawLine(xq, yq, xq+w-1, yq, color);
    424c:	48 0f       	add	r20, r24
    424e:	59 1f       	adc	r21, r25
    4250:	41 50       	subi	r20, 0x01	; 1
    4252:	51 09       	sbc	r21, r1
    4254:	89 01       	movw	r16, r18
    4256:	9b 01       	movw	r18, r22
    4258:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_drawLine>
}
    425c:	1f 91       	pop	r17
    425e:	0f 91       	pop	r16
    4260:	08 95       	ret

00004262 <LCD_setTextSize>:
    }
  }
}
*/
void LCD_setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
    4262:	81 11       	cpse	r24, r1
    4264:	01 c0       	rjmp	.+2      	; 0x4268 <LCD_setTextSize+0x6>
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	80 93 16 01 	sts	0x0116, r24
    426c:	08 95       	ret

0000426e <NoneFunc>:

*/

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void NoneFunc()
{
    426e:	08 95       	ret

00004270 <LcdPutInt>:
//	_delay_ms(50);
}
//
void LcdPutInt(int i)
{
    4270:	cf 93       	push	r28
    4272:	df 93       	push	r29
    4274:	cd b7       	in	r28, 0x3d	; 61
    4276:	de b7       	in	r29, 0x3e	; 62
    4278:	61 97       	sbiw	r28, 0x11	; 17
    427a:	0f b6       	in	r0, 0x3f	; 63
    427c:	f8 94       	cli
    427e:	de bf       	out	0x3e, r29	; 62
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	cd bf       	out	0x3d, r28	; 61
    4284:	4a e0       	ldi	r20, 0x0A	; 10
    4286:	be 01       	movw	r22, r28
    4288:	6f 5f       	subi	r22, 0xFF	; 255
    428a:	7f 4f       	sbci	r23, 0xFF	; 255
    428c:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <__itoa_ncheck>
//	uint8_t ln, k;
	char printbuff[17];
//	ln = strlen(itoa(i, printbuff, 10));
	itoa(i, printbuff, 10);
	LCD_STR(FONT_1X,printbuff);
    4290:	ce 01       	movw	r24, r28
    4292:	01 96       	adiw	r24, 0x01	; 1
    4294:	0e 94 01 21 	call	0x4202	; 0x4202 <LCD_draw_string2>
		if (y < LCD_LINE_NUMBER - 1) y += 1;
			else {y = 0; LCD_CLEAR();}
			x = ln - k;
	}
*/
}
    4298:	61 96       	adiw	r28, 0x11	; 17
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	f8 94       	cli
    429e:	de bf       	out	0x3e, r29	; 62
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	cd bf       	out	0x3d, r28	; 61
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	08 95       	ret

000042aa <LcdNextStr>:
	LCD_STR(FONT_1X,(unsigned char*) printbuff);
}
*/
void LcdNextStr(void)
{
	if (y < LCD_LINE_NUMBER - 1) {
    42aa:	60 91 22 03 	lds	r22, 0x0322
    42ae:	70 91 23 03 	lds	r23, 0x0323
    42b2:	67 30       	cpi	r22, 0x07	; 7
    42b4:	71 05       	cpc	r23, r1
    42b6:	50 f4       	brcc	.+20     	; 0x42cc <LcdNextStr+0x22>
		y += 1;
    42b8:	6f 5f       	subi	r22, 0xFF	; 255
    42ba:	7f 4f       	sbci	r23, 0xFF	; 255
    42bc:	70 93 23 03 	sts	0x0323, r23
    42c0:	60 93 22 03 	sts	0x0322, r22
		LCD_GOTO_XY(0,y);
    42c4:	80 e0       	ldi	r24, 0x00	; 0
    42c6:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <LCD_set_position2>
    42ca:	08 95       	ret
	} else LCD_CLEAR();
    42cc:	0e 94 56 1e 	call	0x3cac	; 0x3cac <LCD_Clear>
    42d0:	08 95       	ret

000042d2 <LcdFirstLine>:
/*
	x=0;
	y=0;
	LCD_GOTO_XY(x,y);
*/
	LCD_GOTO_XY(0,0);
    42d2:	60 e0       	ldi	r22, 0x00	; 0
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <LCD_set_position2>
    42da:	08 95       	ret

000042dc <ReturnXPos>:
	
}

void ReturnXPos(uint8_t ps){
	if (x >= ps) x -= ps;
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	20 91 24 03 	lds	r18, 0x0324
    42e2:	30 91 25 03 	lds	r19, 0x0325
    42e6:	28 17       	cp	r18, r24
    42e8:	39 07       	cpc	r19, r25
    42ea:	38 f0       	brcs	.+14     	; 0x42fa <ReturnXPos+0x1e>
    42ec:	28 1b       	sub	r18, r24
    42ee:	39 0b       	sbc	r19, r25
    42f0:	30 93 25 03 	sts	0x0325, r19
    42f4:	20 93 24 03 	sts	0x0324, r18
    42f8:	15 c0       	rjmp	.+42     	; 0x4324 <ReturnXPos+0x48>
	else {
		if ( y > 0 ) y -= 1;
    42fa:	40 91 22 03 	lds	r20, 0x0322
    42fe:	50 91 23 03 	lds	r21, 0x0323
    4302:	41 15       	cp	r20, r1
    4304:	51 05       	cpc	r21, r1
    4306:	31 f0       	breq	.+12     	; 0x4314 <ReturnXPos+0x38>
    4308:	41 50       	subi	r20, 0x01	; 1
    430a:	51 09       	sbc	r21, r1
    430c:	50 93 23 03 	sts	0x0323, r21
    4310:	40 93 22 03 	sts	0x0322, r20
		  x = LCD_COLUMN_NUMBER - (ps - x);
    4314:	20 5f       	subi	r18, 0xF0	; 240
    4316:	3f 4f       	sbci	r19, 0xFF	; 255
    4318:	28 1b       	sub	r18, r24
    431a:	39 0b       	sbc	r19, r25
    431c:	30 93 25 03 	sts	0x0325, r19
    4320:	20 93 24 03 	sts	0x0324, r18
	}
	LCD_GOTO_XY(x,y);
    4324:	60 91 22 03 	lds	r22, 0x0322
    4328:	80 91 24 03 	lds	r24, 0x0324
    432c:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <LCD_set_position2>
    4330:	08 95       	ret

00004332 <LcdWrite>:
}
//
//FILE lcd_str = FDEV_SETUP_STREAM(LcdWrite, NULL, _FDEV_SETUP_WRITE);
int LcdWrite ( char c, FILE *stream ){
	if (c == 0x0A)
    4332:	8a 30       	cpi	r24, 0x0A	; 10
    4334:	19 f4       	brne	.+6      	; 0x433c <LcdWrite+0xa>
		LCD_NEXTSTR();
    4336:	0e 94 55 21 	call	0x42aa	; 0x42aa <LcdNextStr>
    433a:	04 c0       	rjmp	.+8      	; 0x4344 <LcdWrite+0x12>
	else if (c >= 0x20){
    433c:	80 32       	cpi	r24, 0x20	; 32
    433e:	10 f0       	brcs	.+4      	; 0x4344 <LcdWrite+0x12>
		LCD_PUTCHAR(FONT_1X,c);
    4340:	0e 94 a1 20 	call	0x4142	; 0x4142 <LCD_write2>
		}
*/
	}

	return 0;
}
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	08 95       	ret

0000434a <IntAdc>:
;
.global IntAdc
IntAdc:
;	in rKey,ADCH ; read AD converter MSB

	push	R16
    434a:	0f 93       	push	r16
	push	R15
    434c:	ff 92       	push	r15
	lds	r15,SREG
    434e:	f0 90 5f 00 	lds	r15, 0x005F
	lds R16,_SFR_MEM_ADDR(KeyPressed)
    4352:	00 91 1a 01 	lds	r16, 0x011A
	cli
    4356:	f8 94       	cli
	or	R16,R16
    4358:	00 2b       	or	r16, r16
	brne	IntAdcExit
    435a:	61 f4       	brne	.+24     	; 0x4374 <IntAdcExit>
	lds	R16,ADCH
    435c:	00 91 79 00 	lds	r16, 0x0079
	sts	AdcVal,R16
    4360:	00 93 19 01 	sts	0x0119, r16
	ldi	R16,0x1
    4364:	01 e0       	ldi	r16, 0x01	; 1
	sts _SFR_MEM_ADDR(KeyPressed),R16
    4366:	00 93 1a 01 	sts	0x011A, r16
	cli
    436a:	f8 94       	cli
	eor	R1,R1
    436c:	11 24       	eor	r1, r1
	sts _SFR_MEM_ADDR(TimeKeyPressed),R1
    436e:	10 92 7c 03 	sts	0x037C, r1
	sei
    4372:	78 94       	sei

00004374 <IntAdcExit>:
IntAdcExit:
	ldi R16,0b00000000 ; stop ADC
    4374:	00 e0       	ldi	r16, 0x00	; 0
	sts ADCSRA,R16 ;
    4376:	00 93 7a 00 	sts	0x007A, r16
	sei
    437a:	78 94       	sei
	sts	SREG,R15
    437c:	f0 92 5f 00 	sts	0x005F, r15
	pop	R15
    4380:	ff 90       	pop	r15
	pop	R16
    4382:	0f 91       	pop	r16
	reti ; return from interrupt
    4384:	18 95       	reti

00004386 <IntAnalogComp>:
;
.global IntAnalogComp
IntAnalogComp:
	push	R16
    4386:	0f 93       	push	r16
	push	R17
    4388:	1f 93       	push	r17
	lds	r17,SREG
    438a:	10 91 5f 00 	lds	r17, 0x005F
	cli
    438e:	f8 94       	cli
	ldi R16,0b11110111 ; Start ADC
    4390:	07 ef       	ldi	r16, 0xF7	; 247
	sts ADCSRA,R16
    4392:	00 93 7a 00 	sts	0x007A, r16
	ori	R16,(1<<ADIE)
    4396:	08 60       	ori	r16, 0x08	; 8
	sts ADCSRA,R16 ;  Enable ADC and ADC Interrupt
    4398:	00 93 7a 00 	sts	0x007A, r16
	sei
    439c:	78 94       	sei
	sts	SREG,R17
    439e:	10 93 5f 00 	sts	0x005F, r17
	pop	R17
    43a2:	1f 91       	pop	r17
	pop	R16
    43a4:	0f 91       	pop	r16
	reti
    43a6:	18 95       	reti

000043a8 <InitAnalogComp>:
;
.global InitAnalogComp
InitAnalogComp:
	push	R16
    43a8:	0f 93       	push	r16
;	push	R17
	ldi	R16, (1<<AIN0D) | (1<<AIN1D)			//Disable the digital input on D6 (AIN0), and on D7 (AIN1)
    43aa:	03 e0       	ldi	r16, 0x03	; 3
	sts	DIDR1,R16
    43ac:	00 93 7f 00 	sts	0x007F, r16
	ldi	R16,(1<<ACI) |	(1<<ACIS1) | (1<<ACIS0)
    43b0:	03 e1       	ldi	r16, 0x13	; 19
	sts	ACSR,R16
    43b2:	00 93 50 00 	sts	0x0050, r16
	ori	R16,(1<<ACIE)			//Enable the comparator interrupt and capture on a rising edge
    43b6:	08 60       	ori	r16, 0x08	; 8
	//ldi	R16,(1<<ACIE) |	(1<<ACIS1) | (1<<ACIS0) | (1<<ACBG)	//Enable the comparator interrupt and capture on a rising edge
	sts	ACSR,R16
    43b8:	00 93 50 00 	sts	0x0050, r16
;	pop	R17
	pop	R16
    43bc:	0f 91       	pop	r16
	ret
    43be:	08 95       	ret

000043c0 <InitAdc>:
;
; Start AD converter with interrupt
;

InitAdc:
	push	R16
    43c0:	0f 93       	push	r16
	push	R17
    43c2:	1f 93       	push	r17
	andi r24,0x0F
    43c4:	8f 70       	andi	r24, 0x0F	; 15
	; ADC{R24} is used for the conversion
	; disconnect the PB3 digital driver, saves supply current
	mov R17,R24
    43c6:	18 2f       	mov	r17, r24
	subi R17,0x06
    43c8:	16 50       	subi	r17, 0x06	; 6
	brge	AdcInitSkip
    43ca:	6c f4       	brge	.+26     	; 0x43e6 <AdcInitSkip>
	ldi R17,0b00000000
    43cc:	10 e0       	ldi	r17, 0x00	; 0
	mov	R16,R24
    43ce:	08 2f       	mov	r16, r24

000043d0 <AdcInitLoop>:
AdcInitLoop:
	or	R16,R16
    43d0:	00 2b       	or	r16, r16
	breq	AdcPineDisconnected
    43d2:	21 f0       	breq	.+8      	; 0x43dc <AdcPineDisconnected>
	lsl	R17
    43d4:	11 0f       	add	r17, r17
	dec	R16
    43d6:	0a 95       	dec	r16
	jmp	AdcInitLoop
    43d8:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <AdcInitLoop>

000043dc <AdcPineDisconnected>:
AdcPineDisconnected:
	lds	R16,DIDR0
    43dc:	00 91 7e 00 	lds	r16, 0x007E
	or	R16,R17
    43e0:	01 2b       	or	r16, r17
	sts	DIDR0,R16		; disconnect the digital driver, saves supply current
    43e2:	00 93 7e 00 	sts	0x007E, r16

000043e6 <AdcInitSkip>:
AdcInitSkip:
;
	ldi R16,(1<<REFS0)|(1<<ADLAR) 		; ADMUX channel in com, AREF from AVCC
    43e6:	00 e6       	ldi	r16, 0x60	; 96
										; Reference = supply voltage, Left-adjust the result
	or R16,R24
    43e8:	08 2b       	or	r16, r24
	sts ADMUX,R16
    43ea:	00 93 7c 00 	sts	0x007C, r16
	; select autostart option
	ldi R16,0b00000000 //free-running conversion (autostart)
    43ee:	00 e0       	ldi	r16, 0x00	; 0
	sts ADCSRB,R16
    43f0:	00 93 7b 00 	sts	0x007B, r16
	; ADC, allow interrupt, select clock divider - will bei in IntAnalogComp
	ldi R16,0b01101111 	; ADC, autostart,
    43f4:	0f e6       	ldi	r16, 0x6F	; 111
	sts ADCSRA,R16 		;  Int Enable, clock divider to 128
    43f6:	00 93 7a 00 	sts	0x007A, r16
; initiation complete
	pop	R17
    43fa:	1f 91       	pop	r17
	pop	R16
    43fc:	0f 91       	pop	r16
	ret
    43fe:	08 95       	ret

00004400 <GetKeyCode>:
; Converting a AD result to a key code
;
.global GetKeyCode ;
GetKeyCode:
	; if the AD result can change in between, the result must be copied first
	push	R0
    4400:	0f 92       	push	r0
	push	R1
    4402:	1f 92       	push	r1
	push	ZH
    4404:	ff 93       	push	r31
	push	ZL
    4406:	ef 93       	push	r30
	eor	R24,R24
    4408:	88 27       	eor	r24, r24
	lds	R1,_SFR_MEM_ADDR(KeyPressed)
    440a:	10 90 1a 01 	lds	r1, 0x011A
	or	R1,R1
    440e:	11 28       	or	r1, r1
	breq GetKeyCodeExit		; No key pressed
    4410:	99 f0       	breq	.+38     	; 0x4438 <GetKeyCodeExit>
	lds R1,_SFR_MEM_ADDR(AdcVal) ; copy AD result to R1
    4412:	10 90 19 01 	lds	r1, 0x0119
	ldi ZH,hi8(_SFR_MEM_ADDR(KeyTable)) ; Z points to conversion table
    4416:	f4 e4       	ldi	r31, 0x44	; 68
	ldi ZL,lo8(_SFR_MEM_ADDR(KeyTable))
    4418:	ee e4       	ldi	r30, 0x4E	; 78

0000441a <GetKeyCode1>:
GetKeyCode1:
	lpm ; read one table value from flash ram
    441a:	c8 95       	lpm
	cp R1,R0 ; compare AD result with table value
    441c:	10 14       	cp	r1, r0
	brcs GetKeyCode2 ; less than table value, key identified
    441e:	20 f0       	brcs	.+8      	; 0x4428 <GetKeyCode2>
	inc R0 ; test, if table end is reached
    4420:	03 94       	inc	r0
	breq GetKeyCode2 ; reached end of table
    4422:	11 f0       	breq	.+4      	; 0x4428 <GetKeyCode2>
	adiw ZL,2 ; point to next table entry
    4424:	32 96       	adiw	r30, 0x02	; 2
	rjmp GetKeyCode1 ; go on comparing next entry
    4426:	f9 cf       	rjmp	.-14     	; 0x441a <GetKeyCode1>

00004428 <GetKeyCode2>:
GetKeyCode2:
	adiw ZL,1 ; point to MSB = key code
    4428:	31 96       	adiw	r30, 0x01	; 1
	lpm ; read key code to R0
    442a:	c8 95       	lpm
	mov	R24,R0
    442c:	80 2d       	mov	r24, r0
	eor	R1,R1
    442e:	11 24       	eor	r1, r1
	cli
    4430:	f8 94       	cli
	sts	_SFR_MEM_ADDR(KeyPressed),R1
    4432:	10 92 1a 01 	sts	0x011A, r1
	sei
    4436:	78 94       	sei

00004438 <GetKeyCodeExit>:
GetKeyCodeExit:
	pop	ZL
    4438:	ef 91       	pop	r30
	pop	ZH
    443a:	ff 91       	pop	r31
	pop	R1
    443c:	1f 90       	pop	r1
	pop	R0
    443e:	0f 90       	pop	r0
	ret
    4440:	08 95       	ret

00004442 <resetKbd>:
;
.global resetKbd
resetKbd:
	eor	R1,R1
    4442:	11 24       	eor	r1, r1
	cli
    4444:	f8 94       	cli
	sts	_SFR_MEM_ADDR(KeyPressed),R1
    4446:	10 92 1a 01 	sts	0x011A, r1
	sei
    444a:	78 94       	sei
	ret
    444c:	08 95       	ret

0000444e <KeyTable>:
    444e:	07 00       	.word	0x0007	; ????
    4450:	12 31       	cpi	r17, 0x12	; 18
    4452:	1c 32       	cpi	r17, 0x2C	; 44
    4454:	2a 33       	cpi	r18, 0x3A	; 58
    4456:	40 34       	cpi	r20, 0x40	; 64
    4458:	5b 35       	cpi	r21, 0x5B	; 91
    445a:	79 36       	cpi	r23, 0x69	; 105
    445c:	9c 37       	cpi	r25, 0x7C	; 124
    445e:	b9 38       	cpi	r27, 0x89	; 137
    4460:	cf 39       	cpi	r28, 0x9F	; 159
    4462:	e1 2a       	or	r14, r17
    4464:	ed 30       	cpi	r30, 0x0D	; 13
    4466:	ff 23       	and	r31, r31

00004468 <__vector_21>:
#include <avr/pgmspace.h>
#include "adc.h"

ISR(ADC_vect, ISR_NAKED)
{
    asm volatile(
    4468:	0c 94 a5 21 	jmp	0x434a	; 0x434a <IntAdc>

0000446c <__vector_23>:
    ::);
}
//
ISR(ANALOG_COMP_vect, ISR_NAKED)
{
    asm volatile(
    446c:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <IntAnalogComp>

00004470 <gsm_init>:

extern void DoWatchDog(void);

// gsm_init Doesn't work ?
void gsm_init(void (*sendByte_func)(unsigned char c), int (*getByte_func)(void)){
	gsm_send_byte = sendByte_func;
    4470:	90 93 1c 01 	sts	0x011C, r25
    4474:	80 93 1b 01 	sts	0x011B, r24
	gsm_get_byte = getByte_func;
    4478:	70 93 1e 01 	sts	0x011E, r23
    447c:	60 93 1d 01 	sts	0x011D, r22
    4480:	08 95       	ret

00004482 <gsm_del_sms>:

	return -1;
}

//----------------------------------
int gsm_del_sms( int index ){
    4482:	cf 93       	push	r28
    4484:	df 93       	push	r29
    4486:	ec 01       	movw	r28, r24
	//lcd_clear(); lcd_print("del-1"); _delay_ms(10); lcd_clear();
	//rprintfInit(gsm_send_byte);
	//lcd_clear(); lcd_print("del-2"); _delay_ms(10); lcd_clear();
	//ozh rprintf("AT+CMGD=%d\n", index);

	uart_puts_p(PSTR("AT+CMGD="));
    4488:	8e ee       	ldi	r24, 0xEE	; 238
    448a:	99 e0       	ldi	r25, 0x09	; 9
    448c:	0e 94 a5 18 	call	0x314a	; 0x314a <uart_puts_p>
	uart_put_int(index);
    4490:	ce 01       	movw	r24, r28
    4492:	0e 94 c9 18 	call	0x3192	; 0x3192 <uart_put_int>
	uart_puts_p("\n");
    4496:	89 e4       	ldi	r24, 0x49	; 73
    4498:	92 e0       	ldi	r25, 0x02	; 2
    449a:	0e 94 a5 18 	call	0x314a	; 0x314a <uart_puts_p>

	//lcd_clear(); lcd_print("del-3"); _delay_ms(10); lcd_clear();
	DoWatchDog();
    449e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    44a2:	2f ef       	ldi	r18, 0xFF	; 255
    44a4:	84 e3       	ldi	r24, 0x34	; 52
    44a6:	9c e0       	ldi	r25, 0x0C	; 12
    44a8:	21 50       	subi	r18, 0x01	; 1
    44aa:	80 40       	sbci	r24, 0x00	; 0
    44ac:	90 40       	sbci	r25, 0x00	; 0
    44ae:	e1 f7       	brne	.-8      	; 0x44a8 <gsm_del_sms+0x26>
    44b0:	00 c0       	rjmp	.+0      	; 0x44b2 <gsm_del_sms+0x30>
    44b2:	00 00       	nop
	_delay_ms(500);

	return TRUE;
}
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	df 91       	pop	r29
    44ba:	cf 91       	pop	r28
    44bc:	08 95       	ret

000044be <gsm_read_token>:
}
*/


//-----------------------------------
int gsm_read_token( char *src, char *dest, char lenght, char nToken, char *delimiter ){
    44be:	9f 92       	push	r9
    44c0:	af 92       	push	r10
    44c2:	bf 92       	push	r11
    44c4:	cf 92       	push	r12
    44c6:	df 92       	push	r13
    44c8:	ef 92       	push	r14
    44ca:	ff 92       	push	r15
    44cc:	0f 93       	push	r16
    44ce:	1f 93       	push	r17
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	ec 01       	movw	r28, r24
    44d6:	5b 01       	movw	r10, r22
    44d8:	94 2e       	mov	r9, r20
    44da:	e2 2e       	mov	r14, r18
  int i;
  char *temp_p = malloc( strlen(src) );
    44dc:	fc 01       	movw	r30, r24
    44de:	01 90       	ld	r0, Z+
    44e0:	00 20       	and	r0, r0
    44e2:	e9 f7       	brne	.-6      	; 0x44de <gsm_read_token+0x20>
    44e4:	cf 01       	movw	r24, r30
    44e6:	01 97       	sbiw	r24, 0x01	; 1
    44e8:	8c 1b       	sub	r24, r28
    44ea:	9d 0b       	sbc	r25, r29
    44ec:	0e 94 1e 29 	call	0x523c	; 0x523c <malloc>
    44f0:	6c 01       	movw	r12, r24
  char *token;

  // make backup from src and store in temp_p space
  strcpy( temp_p, src );
    44f2:	be 01       	movw	r22, r28
    44f4:	0e 94 89 2a 	call	0x5512	; 0x5512 <strcpy>
  token = strtok( temp_p, delimiter );
    44f8:	b8 01       	movw	r22, r16
    44fa:	c6 01       	movw	r24, r12
    44fc:	0e 94 77 2a 	call	0x54ee	; 0x54ee <strtok>

  // seek to specified token
  for(i=1; i<=nToken; i++)
    4500:	f1 2c       	mov	r15, r1
    4502:	1e 14       	cp	r1, r14
    4504:	1f 04       	cpc	r1, r15
    4506:	5c f4       	brge	.+22     	; 0x451e <gsm_read_token+0x60>
    4508:	c1 e0       	ldi	r28, 0x01	; 1
    450a:	d0 e0       	ldi	r29, 0x00	; 0
    token = strtok( NULL, delimiter );
    450c:	b8 01       	movw	r22, r16
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	0e 94 77 2a 	call	0x54ee	; 0x54ee <strtok>
  // make backup from src and store in temp_p space
  strcpy( temp_p, src );
  token = strtok( temp_p, delimiter );

  // seek to specified token
  for(i=1; i<=nToken; i++)
    4516:	21 96       	adiw	r28, 0x01	; 1
    4518:	ec 16       	cp	r14, r28
    451a:	fd 06       	cpc	r15, r29
    451c:	bc f7       	brge	.-18     	; 0x450c <gsm_read_token+0x4e>
    token = strtok( NULL, delimiter );

  // return specified token if availabe
  // AND check lenght of this token
  if( token != NULL && strlen(token) < lenght){
    451e:	00 97       	sbiw	r24, 0x00	; 0
    4520:	b1 f0       	breq	.+44     	; 0x454e <gsm_read_token+0x90>
    4522:	fc 01       	movw	r30, r24
    4524:	01 90       	ld	r0, Z+
    4526:	00 20       	and	r0, r0
    4528:	e9 f7       	brne	.-6      	; 0x4524 <gsm_read_token+0x66>
    452a:	31 97       	sbiw	r30, 0x01	; 1
    452c:	e8 1b       	sub	r30, r24
    452e:	f9 0b       	sbc	r31, r25
    4530:	29 2d       	mov	r18, r9
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	e2 17       	cp	r30, r18
    4536:	f3 07       	cpc	r31, r19
    4538:	50 f4       	brcc	.+20     	; 0x454e <gsm_read_token+0x90>
    strcpy(dest, token);
    453a:	bc 01       	movw	r22, r24
    453c:	c5 01       	movw	r24, r10
    453e:	0e 94 89 2a 	call	0x5512	; 0x5512 <strcpy>
    free( temp_p );
    4542:	c6 01       	movw	r24, r12
    4544:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
    return 0;
    4548:	80 e0       	ldi	r24, 0x00	; 0
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	07 c0       	rjmp	.+14     	; 0x455c <gsm_read_token+0x9e>
  }

  // Terminate destination with null and return error code
  *dest = 0;
    454e:	f5 01       	movw	r30, r10
    4550:	10 82       	st	Z, r1
  free( temp_p );
    4552:	c6 01       	movw	r24, r12
    4554:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
  return 1;
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	90 e0       	ldi	r25, 0x00	; 0
}
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	1f 91       	pop	r17
    4562:	0f 91       	pop	r16
    4564:	ff 90       	pop	r15
    4566:	ef 90       	pop	r14
    4568:	df 90       	pop	r13
    456a:	cf 90       	pop	r12
    456c:	bf 90       	pop	r11
    456e:	af 90       	pop	r10
    4570:	9f 90       	pop	r9
    4572:	08 95       	ret

00004574 <gsm_remove_char>:

//-----------------------------------
void gsm_remove_char( char *dest, char *src, char c ){
    4574:	df 92       	push	r13
    4576:	ef 92       	push	r14
    4578:	ff 92       	push	r15
    457a:	0f 93       	push	r16
    457c:	1f 93       	push	r17
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	8c 01       	movw	r16, r24
    4584:	eb 01       	movw	r28, r22
    4586:	f4 2e       	mov	r15, r20
	char *buffer = malloc( strlen(src) );
    4588:	fb 01       	movw	r30, r22
    458a:	01 90       	ld	r0, Z+
    458c:	00 20       	and	r0, r0
    458e:	e9 f7       	brne	.-6      	; 0x458a <gsm_remove_char+0x16>
    4590:	31 97       	sbiw	r30, 0x01	; 1
    4592:	cf 01       	movw	r24, r30
    4594:	86 1b       	sub	r24, r22
    4596:	97 0b       	sbc	r25, r23
    4598:	0e 94 1e 29 	call	0x523c	; 0x523c <malloc>
    459c:	d8 2e       	mov	r13, r24
    459e:	e9 2e       	mov	r14, r25
	char *p = buffer;

	printf("%s\n", src);
    45a0:	ce 01       	movw	r24, r28
    45a2:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <puts>

	for( ; *src != 0; src++ ){
    45a6:	28 81       	ld	r18, Y
    45a8:	22 23       	and	r18, r18
    45aa:	51 f0       	breq	.+20     	; 0x45c0 <gsm_remove_char+0x4c>
    45ac:	fe 01       	movw	r30, r28
    45ae:	31 96       	adiw	r30, 0x01	; 1
}

//-----------------------------------
void gsm_remove_char( char *dest, char *src, char c ){
	char *buffer = malloc( strlen(src) );
	char *p = buffer;
    45b0:	ad 2d       	mov	r26, r13
    45b2:	be 2d       	mov	r27, r14

	printf("%s\n", src);

	for( ; *src != 0; src++ ){
		if( *src != c ){
    45b4:	2f 11       	cpse	r18, r15
			*p = *src;
    45b6:	2d 93       	st	X+, r18
	char *buffer = malloc( strlen(src) );
	char *p = buffer;

	printf("%s\n", src);

	for( ; *src != 0; src++ ){
    45b8:	21 91       	ld	r18, Z+
    45ba:	21 11       	cpse	r18, r1
    45bc:	fb cf       	rjmp	.-10     	; 0x45b4 <gsm_remove_char+0x40>
    45be:	02 c0       	rjmp	.+4      	; 0x45c4 <gsm_remove_char+0x50>
}

//-----------------------------------
void gsm_remove_char( char *dest, char *src, char c ){
	char *buffer = malloc( strlen(src) );
	char *p = buffer;
    45c0:	ad 2d       	mov	r26, r13
    45c2:	be 2d       	mov	r27, r14
			*p = *src;
			p++;
		}
	}

	*p = 0;
    45c4:	1c 92       	st	X, r1
	strcpy(dest, buffer);
    45c6:	6d 2d       	mov	r22, r13
    45c8:	7e 2d       	mov	r23, r14
    45ca:	c8 01       	movw	r24, r16
    45cc:	0e 94 89 2a 	call	0x5512	; 0x5512 <strcpy>
	free( buffer );
    45d0:	8d 2d       	mov	r24, r13
    45d2:	9e 2d       	mov	r25, r14
    45d4:	0e 94 b6 29 	call	0x536c	; 0x536c <free>
}
    45d8:	df 91       	pop	r29
    45da:	cf 91       	pop	r28
    45dc:	1f 91       	pop	r17
    45de:	0f 91       	pop	r16
    45e0:	ff 90       	pop	r15
    45e2:	ef 90       	pop	r14
    45e4:	df 90       	pop	r13
    45e6:	08 95       	ret

000045e8 <gsm_command>:
int gsm_command(char *command ){
	//gsm_rprintf_init();
	//rprintfInit(gsm_send_byte);

	//ozh rprintfStr( command );
	uart_puts(command);
    45e8:	0e 94 96 18 	call	0x312c	; 0x312c <uart_puts>
	//ozh rprintfChar('\n');
	uart_putc('\n');
    45ec:	8a e0       	ldi	r24, 0x0A	; 10
    45ee:	0e 94 81 18 	call	0x3102	; 0x3102 <uart_putc>
	DoWatchDog();
    45f2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    45f6:	2f ef       	ldi	r18, 0xFF	; 255
    45f8:	89 e6       	ldi	r24, 0x69	; 105
    45fa:	98 e1       	ldi	r25, 0x18	; 24
    45fc:	21 50       	subi	r18, 0x01	; 1
    45fe:	80 40       	sbci	r24, 0x00	; 0
    4600:	90 40       	sbci	r25, 0x00	; 0
    4602:	e1 f7       	brne	.-8      	; 0x45fc <gsm_command+0x14>
    4604:	00 c0       	rjmp	.+0      	; 0x4606 <gsm_command+0x1e>
    4606:	00 00       	nop
	_delay_ms(1000);
	DoWatchDog();
    4608:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
	return TRUE;
}
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	08 95       	ret

00004612 <gsm_text_sms>:
// ##################################################################################
// #               SMS FUNCTIONS																								#####
// ##################################################################################

void gsm_text_sms(void){
	gsm_command("AT+CMGF=1");
    4612:	8b e4       	ldi	r24, 0x4B	; 75
    4614:	92 e0       	ldi	r25, 0x02	; 2
    4616:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <gsm_command>
    461a:	08 95       	ret

0000461c <gsm_flush_buffer>:
//-----------------------------------
void gsm_flush_buffer( void ){
	int i;
	// Read uart buffer until no byte available
	do{
		i = gsm_get_byte();
    461c:	e0 91 1d 01 	lds	r30, 0x011D
    4620:	f0 91 1e 01 	lds	r31, 0x011E
    4624:	09 95       	icall
	//}while( i != -1UART_NO_DATA );
	}while( i != UART_NO_DATA );
    4626:	81 15       	cp	r24, r1
    4628:	91 40       	sbci	r25, 0x01	; 1
    462a:	c1 f7       	brne	.-16     	; 0x461c <gsm_flush_buffer>
}
    462c:	08 95       	ret

0000462e <gsm_readline>:

// ##################################################################################
// #               LOW LEVEL FUNCTIONS                                              #
// ##################################################################################
int gsm_readline( char *str, int lenght ){
    462e:	cf 92       	push	r12
    4630:	df 92       	push	r13
    4632:	ef 92       	push	r14
    4634:	ff 92       	push	r15
    4636:	0f 93       	push	r16
    4638:	1f 93       	push	r17
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    463e:	6c 01       	movw	r12, r24
    4640:	7b 01       	movw	r14, r22
	int count=0;
	// make a backup from str pointer
	char *p = str;

	// Terminate string with null
	*str = 0;
    4642:	dc 01       	movw	r26, r24
    4644:	1c 92       	st	X, r1
    4646:	8c 01       	movw	r16, r24
// ##################################################################################
// #               LOW LEVEL FUNCTIONS                                              #
// ##################################################################################
int gsm_readline( char *str, int lenght ){
	int i;
	int count=0;
    4648:	c0 e0       	ldi	r28, 0x00	; 0
    464a:	d0 e0       	ldi	r29, 0x00	; 0
	// Terminate string with null
	*str = 0;

	while(1){
		// Read serial input buffer
		i = gsm_get_byte();
    464c:	e0 91 1d 01 	lds	r30, 0x011D
    4650:	f0 91 1e 01 	lds	r31, 0x011E
    4654:	09 95       	icall

		// break from while if no byte available
		//ozh if( i == -1 ) break;
		if( i == UART_NO_DATA ) break;
    4656:	81 15       	cp	r24, r1
    4658:	b1 e0       	ldi	r27, 0x01	; 1
    465a:	9b 07       	cpc	r25, r27
    465c:	b1 f0       	breq	.+44     	; 0x468a <gsm_readline+0x5c>

		// check for ascii characters
		if( i >= 0x20 && i <= 0x7F ){
    465e:	9c 01       	movw	r18, r24
    4660:	20 52       	subi	r18, 0x20	; 32
    4662:	31 09       	sbc	r19, r1
    4664:	20 36       	cpi	r18, 0x60	; 96
    4666:	31 05       	cpc	r19, r1
    4668:	58 f4       	brcc	.+22     	; 0x4680 <gsm_readline+0x52>
			if( count < lenght ){
    466a:	ce 15       	cp	r28, r14
    466c:	df 05       	cpc	r29, r15
    466e:	74 f7       	brge	.-36     	; 0x464c <gsm_readline+0x1e>
				*str = i;
    4670:	f8 01       	movw	r30, r16
    4672:	81 93       	st	Z+, r24
				str++; count++;
    4674:	21 96       	adiw	r28, 0x01	; 1
				*str = 0;
    4676:	d8 01       	movw	r26, r16
    4678:	11 96       	adiw	r26, 0x01	; 1
    467a:	1c 92       	st	X, r1

		// check for ascii characters
		if( i >= 0x20 && i <= 0x7F ){
			if( count < lenght ){
				*str = i;
				str++; count++;
    467c:	8f 01       	movw	r16, r30
    467e:	e6 cf       	rjmp	.-52     	; 0x464c <gsm_readline+0x1e>
				*str = 0;
			}
		// check carriage return and line feed characters
		}else if( i == '\r' || i == '\n' ){
    4680:	8d 30       	cpi	r24, 0x0D	; 13
    4682:	91 05       	cpc	r25, r1
    4684:	11 f0       	breq	.+4      	; 0x468a <gsm_readline+0x5c>
    4686:	0a 97       	sbiw	r24, 0x0a	; 10
    4688:	09 f7       	brne	.-62     	; 0x464c <gsm_readline+0x1e>
		}
	}

	// Recover str pointer for check lenght of recieved line
	str = p;
	if( strlen(str) > 0 )
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	f6 01       	movw	r30, r12
    4690:	20 81       	ld	r18, Z
    4692:	21 11       	cpse	r18, r1
    4694:	02 c0       	rjmp	.+4      	; 0x469a <gsm_readline+0x6c>
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	90 e0       	ldi	r25, 0x00	; 0
		return TRUE;
	else
		return FALSE;
}
    469a:	df 91       	pop	r29
    469c:	cf 91       	pop	r28
    469e:	1f 91       	pop	r17
    46a0:	0f 91       	pop	r16
    46a2:	ff 90       	pop	r15
    46a4:	ef 90       	pop	r14
    46a6:	df 90       	pop	r13
    46a8:	cf 90       	pop	r12
    46aa:	08 95       	ret

000046ac <gsm_read_sms>:
	// return 0 if no new sms available
	return 0;
}

//----------------------------------
int gsm_read_sms( int index, SMS *sms ){
    46ac:	cf 92       	push	r12
    46ae:	df 92       	push	r13
    46b0:	ef 92       	push	r14
    46b2:	ff 92       	push	r15
    46b4:	0f 93       	push	r16
    46b6:	1f 93       	push	r17
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	cd b7       	in	r28, 0x3d	; 61
    46be:	de b7       	in	r29, 0x3e	; 62
    46c0:	c0 59       	subi	r28, 0x90	; 144
    46c2:	d1 40       	sbci	r29, 0x01	; 1
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	f8 94       	cli
    46c8:	de bf       	out	0x3e, r29	; 62
    46ca:	0f be       	out	0x3f, r0	; 63
    46cc:	cd bf       	out	0x3d, r28	; 61
    46ce:	8c 01       	movw	r16, r24
    46d0:	6b 01       	movw	r12, r22
	char line[200], token[200];

	//uartFlushReceiveBuffer(gsm_nUart);
	//gsm_rprintf_init();

	gsm_flush_buffer();
    46d2:	0e 94 0e 23 	call	0x461c	; 0x461c <gsm_flush_buffer>
	//ozh rprintfInit(gsm_send_byte);
	//ozh rprintf("AT+CMGR=%d\n", index);
	uart_puts_P("AT+CMGR=");
    46d6:	86 e0       	ldi	r24, 0x06	; 6
    46d8:	9a e0       	ldi	r25, 0x0A	; 10
    46da:	0e 94 a5 18 	call	0x314a	; 0x314a <uart_puts_p>
	uart_put_int(index);
    46de:	c8 01       	movw	r24, r16
    46e0:	0e 94 c9 18 	call	0x3192	; 0x3192 <uart_put_int>
	uart_puts_P("\n");
    46e4:	84 e0       	ldi	r24, 0x04	; 4
    46e6:	9a e0       	ldi	r25, 0x0A	; 10
    46e8:	0e 94 a5 18 	call	0x314a	; 0x314a <uart_puts_p>
	DoWatchDog();
    46ec:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    46f0:	2f ef       	ldi	r18, 0xFF	; 255
    46f2:	89 e6       	ldi	r24, 0x69	; 105
    46f4:	98 e1       	ldi	r25, 0x18	; 24
    46f6:	21 50       	subi	r18, 0x01	; 1
    46f8:	80 40       	sbci	r24, 0x00	; 0
    46fa:	90 40       	sbci	r25, 0x00	; 0
    46fc:	e1 f7       	brne	.-8      	; 0x46f6 <gsm_read_sms+0x4a>
    46fe:	00 c0       	rjmp	.+0      	; 0x4700 <gsm_read_sms+0x54>
    4700:	00 00       	nop
	_delay_ms(1000);
	DoWatchDog();
    4702:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    4706:	08 ec       	ldi	r16, 0xC8	; 200
    4708:	10 e0       	ldi	r17, 0x00	; 0

	// Make a finite loop
	for(i=0; i<200; i++){
		if( gsm_readline(line, sizeof(line)) == TRUE ){
    470a:	68 ec       	ldi	r22, 0xC8	; 200
    470c:	70 e0       	ldi	r23, 0x00	; 0
    470e:	ce 01       	movw	r24, r28
    4710:	01 96       	adiw	r24, 0x01	; 1
    4712:	0e 94 17 23 	call	0x462e	; 0x462e <gsm_readline>
    4716:	7c 01       	movw	r14, r24
    4718:	81 30       	cpi	r24, 0x01	; 1
    471a:	91 05       	cpc	r25, r1
    471c:	09 f0       	breq	.+2      	; 0x4720 <gsm_read_sms+0x74>
    471e:	64 c0       	rjmp	.+200    	; 0x47e8 <gsm_read_sms+0x13c>
			if( strstr(line, "+CMGR") != NULL ){
    4720:	65 e5       	ldi	r22, 0x55	; 85
    4722:	72 e0       	ldi	r23, 0x02	; 2
    4724:	ce 01       	movw	r24, r28
    4726:	01 96       	adiw	r24, 0x01	; 1
    4728:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    472c:	89 2b       	or	r24, r25
    472e:	09 f4       	brne	.+2      	; 0x4732 <gsm_read_sms+0x86>
    4730:	5b c0       	rjmp	.+182    	; 0x47e8 <gsm_read_sms+0x13c>
				// CMGR output format :
				// +CMGR: "REC READ","+989372391694","","2011/08/27 09:10:06+18"
				// Message Body

				if( strstr(line, "REC READ") != NULL )
    4732:	6b e5       	ldi	r22, 0x5B	; 91
    4734:	72 e0       	ldi	r23, 0x02	; 2
    4736:	ce 01       	movw	r24, r28
    4738:	01 96       	adiw	r24, 0x01	; 1
    473a:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    473e:	89 2b       	or	r24, r25
    4740:	31 f0       	breq	.+12     	; 0x474e <gsm_read_sms+0xa2>
					sms->stat = SMS_READ;
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	f6 01       	movw	r30, r12
    4746:	e3 53       	subi	r30, 0x33	; 51
    4748:	ff 4f       	sbci	r31, 0xFF	; 255
    474a:	80 83       	st	Z, r24
    474c:	0c c0       	rjmp	.+24     	; 0x4766 <gsm_read_sms+0xba>
				else if( strstr(line, "REC UNREAD") != NULL )
    474e:	64 e6       	ldi	r22, 0x64	; 100
    4750:	72 e0       	ldi	r23, 0x02	; 2
    4752:	ce 01       	movw	r24, r28
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    475a:	89 2b       	or	r24, r25
    475c:	21 f0       	breq	.+8      	; 0x4766 <gsm_read_sms+0xba>
					sms->stat = SMS_UNREAD;
    475e:	f6 01       	movw	r30, r12
    4760:	e3 53       	subi	r30, 0x33	; 51
    4762:	ff 4f       	sbci	r31, 0xFF	; 255
    4764:	10 82       	st	Z, r1

				// store sms Number in sms->number
				gsm_read_token( line, token, sizeof(token), 1, "," );
    4766:	0f e6       	ldi	r16, 0x6F	; 111
    4768:	12 e0       	ldi	r17, 0x02	; 2
    476a:	21 e0       	ldi	r18, 0x01	; 1
    476c:	48 ec       	ldi	r20, 0xC8	; 200
    476e:	be 01       	movw	r22, r28
    4770:	67 53       	subi	r22, 0x37	; 55
    4772:	7f 4f       	sbci	r23, 0xFF	; 255
    4774:	ce 01       	movw	r24, r28
    4776:	01 96       	adiw	r24, 0x01	; 1
    4778:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
				// Remove " from start and end of token
				gsm_remove_char(token, token, '"');
    477c:	42 e2       	ldi	r20, 0x22	; 34
    477e:	be 01       	movw	r22, r28
    4780:	67 53       	subi	r22, 0x37	; 55
    4782:	7f 4f       	sbci	r23, 0xFF	; 255
    4784:	cb 01       	movw	r24, r22
    4786:	0e 94 ba 22 	call	0x4574	; 0x4574 <gsm_remove_char>
				strcpy(sms->number, token );
    478a:	be 01       	movw	r22, r28
    478c:	67 53       	subi	r22, 0x37	; 55
    478e:	7f 4f       	sbci	r23, 0xFF	; 255
    4790:	c6 01       	movw	r24, r12
    4792:	80 56       	subi	r24, 0x60	; 96
    4794:	9f 4f       	sbci	r25, 0xFF	; 255
    4796:	0e 94 89 2a 	call	0x5512	; 0x5512 <strcpy>

				// store sms Date in sms->date
				gsm_read_token( line, token, sizeof(token), 3, "," );
    479a:	23 e0       	ldi	r18, 0x03	; 3
    479c:	48 ec       	ldi	r20, 0xC8	; 200
    479e:	be 01       	movw	r22, r28
    47a0:	67 53       	subi	r22, 0x37	; 55
    47a2:	7f 4f       	sbci	r23, 0xFF	; 255
    47a4:	ce 01       	movw	r24, r28
    47a6:	01 96       	adiw	r24, 0x01	; 1
    47a8:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
				gsm_remove_char(token, token, '"');
    47ac:	42 e2       	ldi	r20, 0x22	; 34
    47ae:	be 01       	movw	r22, r28
    47b0:	67 53       	subi	r22, 0x37	; 55
    47b2:	7f 4f       	sbci	r23, 0xFF	; 255
    47b4:	cb 01       	movw	r24, r22
    47b6:	0e 94 ba 22 	call	0x4574	; 0x4574 <gsm_remove_char>
				strcpy(sms->date, token );
    47ba:	be 01       	movw	r22, r28
    47bc:	67 53       	subi	r22, 0x37	; 55
    47be:	7f 4f       	sbci	r23, 0xFF	; 255
    47c0:	c6 01       	movw	r24, r12
    47c2:	8c 54       	subi	r24, 0x4C	; 76
    47c4:	9f 4f       	sbci	r25, 0xFF	; 255
    47c6:	0e 94 89 2a 	call	0x5512	; 0x5512 <strcpy>

				while( gsm_readline(line, sizeof(line)) == FALSE );
    47ca:	68 ec       	ldi	r22, 0xC8	; 200
    47cc:	70 e0       	ldi	r23, 0x00	; 0
    47ce:	ce 01       	movw	r24, r28
    47d0:	01 96       	adiw	r24, 0x01	; 1
    47d2:	0e 94 17 23 	call	0x462e	; 0x462e <gsm_readline>
    47d6:	89 2b       	or	r24, r25
    47d8:	c1 f3       	breq	.-16     	; 0x47ca <gsm_read_sms+0x11e>
				strcpy(sms->body, line);
    47da:	be 01       	movw	r22, r28
    47dc:	6f 5f       	subi	r22, 0xFF	; 255
    47de:	7f 4f       	sbci	r23, 0xFF	; 255
    47e0:	c6 01       	movw	r24, r12
    47e2:	0e 94 89 2a 	call	0x5512	; 0x5512 <strcpy>
				return TRUE;
    47e6:	08 c0       	rjmp	.+16     	; 0x47f8 <gsm_read_sms+0x14c>
    47e8:	01 50       	subi	r16, 0x01	; 1
    47ea:	11 09       	sbc	r17, r1
	DoWatchDog();
	_delay_ms(1000);
	DoWatchDog();

	// Make a finite loop
	for(i=0; i<200; i++){
    47ec:	01 15       	cp	r16, r1
    47ee:	11 05       	cpc	r17, r1
    47f0:	09 f0       	breq	.+2      	; 0x47f4 <gsm_read_sms+0x148>
    47f2:	8b cf       	rjmp	.-234    	; 0x470a <gsm_read_sms+0x5e>
				return TRUE;
			}
		}
	}

	return FALSE;
    47f4:	e1 2c       	mov	r14, r1
    47f6:	f1 2c       	mov	r15, r1
}
    47f8:	c7 01       	movw	r24, r14
    47fa:	c0 57       	subi	r28, 0x70	; 112
    47fc:	de 4f       	sbci	r29, 0xFE	; 254
    47fe:	0f b6       	in	r0, 0x3f	; 63
    4800:	f8 94       	cli
    4802:	de bf       	out	0x3e, r29	; 62
    4804:	0f be       	out	0x3f, r0	; 63
    4806:	cd bf       	out	0x3d, r28	; 61
    4808:	df 91       	pop	r29
    480a:	cf 91       	pop	r28
    480c:	1f 91       	pop	r17
    480e:	0f 91       	pop	r16
    4810:	ff 90       	pop	r15
    4812:	ef 90       	pop	r14
    4814:	df 90       	pop	r13
    4816:	cf 90       	pop	r12
    4818:	08 95       	ret

0000481a <gsm_check_new_sms>:
void gsm_text_sms(void){
	gsm_command("AT+CMGF=1");
}

//----------------------------------
int gsm_check_new_sms( SMS *sms ){
    481a:	af 92       	push	r10
    481c:	bf 92       	push	r11
    481e:	cf 92       	push	r12
    4820:	df 92       	push	r13
    4822:	ef 92       	push	r14
    4824:	ff 92       	push	r15
    4826:	0f 93       	push	r16
    4828:	1f 93       	push	r17
    482a:	cf 93       	push	r28
    482c:	df 93       	push	r29
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
    4832:	ce 55       	subi	r28, 0x5E	; 94
    4834:	d1 40       	sbci	r29, 0x01	; 1
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
    4840:	7c 01       	movw	r14, r24
	char *index_p = index;
	char line[300], token[50];

	// Check index for new sms
	for(i=0; i<15; i++){
		if( index[i] != 0 ){
    4842:	80 91 28 03 	lds	r24, 0x0328
    4846:	81 11       	cpse	r24, r1
    4848:	08 c0       	rjmp	.+16     	; 0x485a <gsm_check_new_sms+0x40>
    484a:	e9 e2       	ldi	r30, 0x29	; 41
    484c:	f3 e0       	ldi	r31, 0x03	; 3
	static char index[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char *index_p = index;
	char line[300], token[50];

	// Check index for new sms
	for(i=0; i<15; i++){
    484e:	01 e0       	ldi	r16, 0x01	; 1
    4850:	10 e0       	ldi	r17, 0x00	; 0
		if( index[i] != 0 ){
    4852:	81 91       	ld	r24, Z+
    4854:	88 23       	and	r24, r24
    4856:	71 f0       	breq	.+28     	; 0x4874 <gsm_check_new_sms+0x5a>
    4858:	02 c0       	rjmp	.+4      	; 0x485e <gsm_check_new_sms+0x44>
	static char index[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char *index_p = index;
	char line[300], token[50];

	// Check index for new sms
	for(i=0; i<15; i++){
    485a:	00 e0       	ldi	r16, 0x00	; 0
    485c:	10 e0       	ldi	r17, 0x00	; 0
		if( index[i] != 0 ){
			gsm_read_sms( index[i], sms );
    485e:	b7 01       	movw	r22, r14
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	0e 94 56 23 	call	0x46ac	; 0x46ac <gsm_read_sms>
			location = index[i];
    4866:	f8 01       	movw	r30, r16
    4868:	e8 5d       	subi	r30, 0xD8	; 216
    486a:	fc 4f       	sbci	r31, 0xFC	; 252
    486c:	80 81       	ld	r24, Z
			index[i] = 0;
    486e:	10 82       	st	Z, r1
			return location;
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	76 c0       	rjmp	.+236    	; 0x4960 <gsm_check_new_sms+0x146>
	static char index[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char *index_p = index;
	char line[300], token[50];

	// Check index for new sms
	for(i=0; i<15; i++){
    4874:	0f 5f       	subi	r16, 0xFF	; 255
    4876:	1f 4f       	sbci	r17, 0xFF	; 255
    4878:	0f 30       	cpi	r16, 0x0F	; 15
    487a:	11 05       	cpc	r17, r1
    487c:	51 f7       	brne	.-44     	; 0x4852 <gsm_check_new_sms+0x38>
		}
	}


	//gsm_flush_buffer();
	gsm_command("AT+CMGL");
    487e:	81 e7       	ldi	r24, 0x71	; 113
    4880:	92 e0       	ldi	r25, 0x02	; 2
    4882:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <gsm_command>
	DoWatchDog();
    4886:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    488a:	2f ef       	ldi	r18, 0xFF	; 255
    488c:	89 e6       	ldi	r24, 0x69	; 105
    488e:	98 e1       	ldi	r25, 0x18	; 24
    4890:	21 50       	subi	r18, 0x01	; 1
    4892:	80 40       	sbci	r24, 0x00	; 0
    4894:	90 40       	sbci	r25, 0x00	; 0
    4896:	e1 f7       	brne	.-8      	; 0x4890 <gsm_check_new_sms+0x76>
    4898:	00 c0       	rjmp	.+0      	; 0x489a <gsm_check_new_sms+0x80>
    489a:	00 00       	nop
	_delay_ms(1000);
	DoWatchDog();
    489c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>

//----------------------------------
int gsm_check_new_sms( SMS *sms ){
	int i, location;
	static char index[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	char *index_p = index;
    48a0:	0f 2e       	mov	r0, r31
    48a2:	f8 e2       	ldi	r31, 0x28	; 40
    48a4:	cf 2e       	mov	r12, r31
    48a6:	f3 e0       	ldi	r31, 0x03	; 3
    48a8:	df 2e       	mov	r13, r31
    48aa:	f0 2d       	mov	r31, r0
	DoWatchDog();
	_delay_ms(1000);
	DoWatchDog();

	// Make a finite loop
	for(i=0; i<200; i++){
    48ac:	00 e0       	ldi	r16, 0x00	; 0
    48ae:	10 e0       	ldi	r17, 0x00	; 0
    48b0:	aa 24       	eor	r10, r10
    48b2:	a3 94       	inc	r10
    48b4:	b1 2c       	mov	r11, r1
		if( gsm_readline(line, sizeof(line)) == TRUE ){
    48b6:	6c e2       	ldi	r22, 0x2C	; 44
    48b8:	71 e0       	ldi	r23, 0x01	; 1
    48ba:	ce 01       	movw	r24, r28
    48bc:	01 96       	adiw	r24, 0x01	; 1
    48be:	0e 94 17 23 	call	0x462e	; 0x462e <gsm_readline>
    48c2:	01 97       	sbiw	r24, 0x01	; 1
    48c4:	41 f5       	brne	.+80     	; 0x4916 <gsm_check_new_sms+0xfc>
			if( strstr(line, "REC UNREAD") != NULL ){
    48c6:	64 e6       	ldi	r22, 0x64	; 100
    48c8:	72 e0       	ldi	r23, 0x02	; 2
    48ca:	ce 01       	movw	r24, r28
    48cc:	01 96       	adiw	r24, 0x01	; 1
    48ce:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    48d2:	89 2b       	or	r24, r25
    48d4:	01 f1       	breq	.+64     	; 0x4916 <gsm_check_new_sms+0xfc>
				// CMGL output format :
				// +CMGL: 3,"REC UNREAD","+989372391694","","2011/08/27 09:12:04+18"
				gsm_read_token( line, token, sizeof(token), 0, "," );
    48d6:	0f e6       	ldi	r16, 0x6F	; 111
    48d8:	12 e0       	ldi	r17, 0x02	; 2
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	42 e3       	ldi	r20, 0x32	; 50
    48de:	be 01       	movw	r22, r28
    48e0:	63 5d       	subi	r22, 0xD3	; 211
    48e2:	7e 4f       	sbci	r23, 0xFE	; 254
    48e4:	ce 01       	movw	r24, r28
    48e6:	01 96       	adiw	r24, 0x01	; 1
    48e8:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
				gsm_read_token( token,token, sizeof(token), 1, ":" );
    48ec:	09 e7       	ldi	r16, 0x79	; 121
    48ee:	12 e0       	ldi	r17, 0x02	; 2
    48f0:	21 e0       	ldi	r18, 0x01	; 1
    48f2:	42 e3       	ldi	r20, 0x32	; 50
    48f4:	be 01       	movw	r22, r28
    48f6:	63 5d       	subi	r22, 0xD3	; 211
    48f8:	7e 4f       	sbci	r23, 0xFE	; 254
    48fa:	cb 01       	movw	r24, r22
    48fc:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
				// store unread SMS index
				*index_p = atoi( token );
    4900:	ce 01       	movw	r24, r28
    4902:	83 5d       	subi	r24, 0xD3	; 211
    4904:	9e 4f       	sbci	r25, 0xFE	; 254
    4906:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
    490a:	f6 01       	movw	r30, r12
    490c:	81 93       	st	Z+, r24
    490e:	6f 01       	movw	r12, r30
	DoWatchDog();
	_delay_ms(1000);
	DoWatchDog();

	// Make a finite loop
	for(i=0; i<200; i++){
    4910:	0a 2d       	mov	r16, r10
    4912:	1b 2d       	mov	r17, r11
    4914:	d0 cf       	rjmp	.-96     	; 0x48b6 <gsm_check_new_sms+0x9c>
    4916:	0f 5f       	subi	r16, 0xFF	; 255
    4918:	1f 4f       	sbci	r17, 0xFF	; 255
    491a:	08 3c       	cpi	r16, 0xC8	; 200
    491c:	11 05       	cpc	r17, r1
    491e:	5c f2       	brlt	.-106    	; 0x48b6 <gsm_check_new_sms+0x9c>
		}
	}

	// Check index for new sms
	for(i=0; i<15; i++){
		if( index[i] != 0 ){
    4920:	80 91 28 03 	lds	r24, 0x0328
    4924:	81 11       	cpse	r24, r1
    4926:	08 c0       	rjmp	.+16     	; 0x4938 <gsm_check_new_sms+0x11e>
    4928:	e9 e2       	ldi	r30, 0x29	; 41
    492a:	f3 e0       	ldi	r31, 0x03	; 3
			}
		}
	}

	// Check index for new sms
	for(i=0; i<15; i++){
    492c:	01 e0       	ldi	r16, 0x01	; 1
    492e:	10 e0       	ldi	r17, 0x00	; 0
		if( index[i] != 0 ){
    4930:	81 91       	ld	r24, Z+
    4932:	88 23       	and	r24, r24
    4934:	71 f0       	breq	.+28     	; 0x4952 <gsm_check_new_sms+0x138>
    4936:	02 c0       	rjmp	.+4      	; 0x493c <gsm_check_new_sms+0x122>
    4938:	00 e0       	ldi	r16, 0x00	; 0
    493a:	10 e0       	ldi	r17, 0x00	; 0
			//lcd_clear(); rprintfInit(lcd_putchar); rprintf("Rindex=%d", index[i]); _delay_ms(1000);
			gsm_read_sms( index[i], sms );
    493c:	b7 01       	movw	r22, r14
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	0e 94 56 23 	call	0x46ac	; 0x46ac <gsm_read_sms>
			location = index[i];
    4944:	f8 01       	movw	r30, r16
    4946:	e8 5d       	subi	r30, 0xD8	; 216
    4948:	fc 4f       	sbci	r31, 0xFC	; 252
    494a:	80 81       	ld	r24, Z
			index[i] = 0;
    494c:	10 82       	st	Z, r1
			return location;
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	07 c0       	rjmp	.+14     	; 0x4960 <gsm_check_new_sms+0x146>
			}
		}
	}

	// Check index for new sms
	for(i=0; i<15; i++){
    4952:	0f 5f       	subi	r16, 0xFF	; 255
    4954:	1f 4f       	sbci	r17, 0xFF	; 255
    4956:	0f 30       	cpi	r16, 0x0F	; 15
    4958:	11 05       	cpc	r17, r1
    495a:	51 f7       	brne	.-44     	; 0x4930 <gsm_check_new_sms+0x116>
			return location;
		}
	}

	// return 0 if no new sms available
	return 0;
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	90 e0       	ldi	r25, 0x00	; 0
}
    4960:	c2 5a       	subi	r28, 0xA2	; 162
    4962:	de 4f       	sbci	r29, 0xFE	; 254
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	f8 94       	cli
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	0f be       	out	0x3f, r0	; 63
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	df 91       	pop	r29
    4970:	cf 91       	pop	r28
    4972:	1f 91       	pop	r17
    4974:	0f 91       	pop	r16
    4976:	ff 90       	pop	r15
    4978:	ef 90       	pop	r14
    497a:	df 90       	pop	r13
    497c:	cf 90       	pop	r12
    497e:	bf 90       	pop	r11
    4980:	af 90       	pop	r10
    4982:	08 95       	ret

00004984 <gsm_send_sms>:

	return FALSE;
}

//----------------------------------
int gsm_send_sms( char *number, char *text, int try_num ){
    4984:	2f 92       	push	r2
    4986:	3f 92       	push	r3
    4988:	4f 92       	push	r4
    498a:	5f 92       	push	r5
    498c:	6f 92       	push	r6
    498e:	7f 92       	push	r7
    4990:	8f 92       	push	r8
    4992:	9f 92       	push	r9
    4994:	af 92       	push	r10
    4996:	bf 92       	push	r11
    4998:	cf 92       	push	r12
    499a:	df 92       	push	r13
    499c:	ef 92       	push	r14
    499e:	ff 92       	push	r15
    49a0:	0f 93       	push	r16
    49a2:	1f 93       	push	r17
    49a4:	cf 93       	push	r28
    49a6:	df 93       	push	r29
    49a8:	cd b7       	in	r28, 0x3d	; 61
    49aa:	de b7       	in	r29, 0x3e	; 62
    49ac:	c6 59       	subi	r28, 0x96	; 150
    49ae:	d1 09       	sbc	r29, r1
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	f8 94       	cli
    49b4:	de bf       	out	0x3e, r29	; 62
    49b6:	0f be       	out	0x3f, r0	; 63
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	3c 01       	movw	r6, r24
    49bc:	1b 01       	movw	r2, r22
    49be:	2a 01       	movw	r4, r20
	int try, i;
	int refnum=0;
	char line[100], token[50];

	for( try=0; try<=try_num; try++ ){
    49c0:	55 23       	and	r21, r21
    49c2:	0c f4       	brge	.+2      	; 0x49c6 <gsm_send_sms+0x42>
    49c4:	ee c0       	rjmp	.+476    	; 0x4ba2 <gsm_send_sms+0x21e>
}

//----------------------------------
int gsm_send_sms( char *number, char *text, int try_num ){
	int try, i;
	int refnum=0;
    49c6:	a1 2c       	mov	r10, r1
    49c8:	b1 2c       	mov	r11, r1
	char line[100], token[50];

	for( try=0; try<=try_num; try++ ){
    49ca:	81 2c       	mov	r8, r1
    49cc:	91 2c       	mov	r9, r1
		//lcd_clear(); rprintfInit(lcd_putchar); rprintf("Try%d", try); _delay_ms(1000);
		// Send sms ------------------
		gsm_flush_buffer();
    49ce:	0e 94 0e 23 	call	0x461c	; 0x461c <gsm_flush_buffer>

		//ozh rprintfInit(gsm_send_byte);
		//ozh rprintf("AT+CMGS=\"");
		uart_puts_p(PSTR("AT+CMGS=\""));
    49d2:	8a ef       	ldi	r24, 0xFA	; 250
    49d4:	99 e0       	ldi	r25, 0x09	; 9
    49d6:	0e 94 a5 18 	call	0x314a	; 0x314a <uart_puts_p>

		//ozh rprintfStr(number);
		uart_puts(number);
    49da:	c3 01       	movw	r24, r6
    49dc:	0e 94 96 18 	call	0x312c	; 0x312c <uart_puts>
		//ozh rprintf("\"\n");
		uart_puts_p(PSTR("\"\n"));
    49e0:	87 ef       	ldi	r24, 0xF7	; 247
    49e2:	99 e0       	ldi	r25, 0x09	; 9
    49e4:	0e 94 a5 18 	call	0x314a	; 0x314a <uart_puts_p>
		//ozh rprintfStr(text);
		uart_puts(text);
    49e8:	c1 01       	movw	r24, r2
    49ea:	0e 94 96 18 	call	0x312c	; 0x312c <uart_puts>

		gsm_send_byte(26);
    49ee:	e0 91 1b 01 	lds	r30, 0x011B
    49f2:	f0 91 1c 01 	lds	r31, 0x011C
    49f6:	8a e1       	ldi	r24, 0x1A	; 26
    49f8:	09 95       	icall
		//uart_putc(0x1A);
		DoWatchDog();
    49fa:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    49fe:	2f ef       	ldi	r18, 0xFF	; 255
    4a00:	89 e6       	ldi	r24, 0x69	; 105
    4a02:	98 e1       	ldi	r25, 0x18	; 24
    4a04:	21 50       	subi	r18, 0x01	; 1
    4a06:	80 40       	sbci	r24, 0x00	; 0
    4a08:	90 40       	sbci	r25, 0x00	; 0
    4a0a:	e1 f7       	brne	.-8      	; 0x4a04 <gsm_send_sms+0x80>
    4a0c:	00 c0       	rjmp	.+0      	; 0x4a0e <gsm_send_sms+0x8a>
    4a0e:	00 00       	nop
		_delay_ms(1000);
		DoWatchDog();
    4a10:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    4a14:	2f ef       	ldi	r18, 0xFF	; 255
    4a16:	89 e6       	ldi	r24, 0x69	; 105
    4a18:	98 e1       	ldi	r25, 0x18	; 24
    4a1a:	21 50       	subi	r18, 0x01	; 1
    4a1c:	80 40       	sbci	r24, 0x00	; 0
    4a1e:	90 40       	sbci	r25, 0x00	; 0
    4a20:	e1 f7       	brne	.-8      	; 0x4a1a <gsm_send_sms+0x96>
    4a22:	00 c0       	rjmp	.+0      	; 0x4a24 <gsm_send_sms+0xa0>
    4a24:	00 00       	nop
		_delay_ms(1000);
		DoWatchDog();
    4a26:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    4a2a:	2f ef       	ldi	r18, 0xFF	; 255
    4a2c:	89 e6       	ldi	r24, 0x69	; 105
    4a2e:	98 e1       	ldi	r25, 0x18	; 24
    4a30:	21 50       	subi	r18, 0x01	; 1
    4a32:	80 40       	sbci	r24, 0x00	; 0
    4a34:	90 40       	sbci	r25, 0x00	; 0
    4a36:	e1 f7       	brne	.-8      	; 0x4a30 <gsm_send_sms+0xac>
    4a38:	00 c0       	rjmp	.+0      	; 0x4a3a <gsm_send_sms+0xb6>
    4a3a:	00 00       	nop
		_delay_ms(1000);
		DoWatchDog();
    4a3c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    4a40:	02 e3       	ldi	r16, 0x32	; 50
    4a42:	10 e0       	ldi	r17, 0x00	; 0
		// wait for getting SMS refnum
		for(i=0; i<50; i++){
			// wait for new line
			DoWatchDog();
    4a44:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    4a48:	2f ef       	ldi	r18, 0xFF	; 255
    4a4a:	80 e7       	ldi	r24, 0x70	; 112
    4a4c:	92 e0       	ldi	r25, 0x02	; 2
    4a4e:	21 50       	subi	r18, 0x01	; 1
    4a50:	80 40       	sbci	r24, 0x00	; 0
    4a52:	90 40       	sbci	r25, 0x00	; 0
    4a54:	e1 f7       	brne	.-8      	; 0x4a4e <gsm_send_sms+0xca>
    4a56:	00 c0       	rjmp	.+0      	; 0x4a58 <gsm_send_sms+0xd4>
    4a58:	00 00       	nop
			_delay_ms(100);
			if( gsm_readline(line, sizeof(line)) != TRUE ) continue;
    4a5a:	64 e6       	ldi	r22, 0x64	; 100
    4a5c:	70 e0       	ldi	r23, 0x00	; 0
    4a5e:	ce 01       	movw	r24, r28
    4a60:	01 96       	adiw	r24, 0x01	; 1
    4a62:	0e 94 17 23 	call	0x462e	; 0x462e <gsm_readline>
    4a66:	01 97       	sbiw	r24, 0x01	; 1
    4a68:	31 f5       	brne	.+76     	; 0x4ab6 <gsm_send_sms+0x132>
			// AT+CMGS="09372391694"
			// > SMS Body...
			// +CMGS: 157

			// check for error
			if( strstr(line, "ERROR") != NULL ) return FALSE;
    4a6a:	6b e7       	ldi	r22, 0x7B	; 123
    4a6c:	72 e0       	ldi	r23, 0x02	; 2
    4a6e:	ce 01       	movw	r24, r28
    4a70:	01 96       	adiw	r24, 0x01	; 1
    4a72:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    4a76:	89 2b       	or	r24, r25
    4a78:	09 f0       	breq	.+2      	; 0x4a7c <gsm_send_sms+0xf8>
    4a7a:	96 c0       	rjmp	.+300    	; 0x4ba8 <gsm_send_sms+0x224>
			// check +CMGS for refnum
			if( strstr(line, "+CMGS") != NULL ){
    4a7c:	61 e8       	ldi	r22, 0x81	; 129
    4a7e:	72 e0       	ldi	r23, 0x02	; 2
    4a80:	ce 01       	movw	r24, r28
    4a82:	01 96       	adiw	r24, 0x01	; 1
    4a84:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    4a88:	89 2b       	or	r24, r25
    4a8a:	a9 f0       	breq	.+42     	; 0x4ab6 <gsm_send_sms+0x132>
				gsm_read_token(line, token, sizeof(token), 1, ":");
    4a8c:	09 e7       	ldi	r16, 0x79	; 121
    4a8e:	12 e0       	ldi	r17, 0x02	; 2
    4a90:	21 e0       	ldi	r18, 0x01	; 1
    4a92:	42 e3       	ldi	r20, 0x32	; 50
    4a94:	be 01       	movw	r22, r28
    4a96:	6b 59       	subi	r22, 0x9B	; 155
    4a98:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9a:	ce 01       	movw	r24, r28
    4a9c:	01 96       	adiw	r24, 0x01	; 1
    4a9e:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
				refnum = atoi(token);
    4aa2:	ce 01       	movw	r24, r28
    4aa4:	8b 59       	subi	r24, 0x9B	; 155
    4aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa8:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
    4aac:	5c 01       	movw	r10, r24
				if( try_num == 0 )
    4aae:	41 14       	cp	r4, r1
    4ab0:	51 04       	cpc	r5, r1
    4ab2:	31 f4       	brne	.+12     	; 0x4ac0 <gsm_send_sms+0x13c>
    4ab4:	7c c0       	rjmp	.+248    	; 0x4bae <gsm_send_sms+0x22a>
    4ab6:	01 50       	subi	r16, 0x01	; 1
    4ab8:	11 09       	sbc	r17, r1
		_delay_ms(1000);
		DoWatchDog();
		_delay_ms(1000);
		DoWatchDog();
		// wait for getting SMS refnum
		for(i=0; i<50; i++){
    4aba:	01 15       	cp	r16, r1
    4abc:	11 05       	cpc	r17, r1
    4abe:	11 f6       	brne	.-124    	; 0x4a44 <gsm_send_sms+0xc0>
					break;
			}
		}

		// check refnum
		if( refnum <= 0 ) return FALSE;
    4ac0:	1a 14       	cp	r1, r10
    4ac2:	1b 04       	cpc	r1, r11
    4ac4:	0c f0       	brlt	.+2      	; 0x4ac8 <gsm_send_sms+0x144>
    4ac6:	75 c0       	rjmp	.+234    	; 0x4bb2 <gsm_send_sms+0x22e>
    4ac8:	0f 2e       	mov	r0, r31
    4aca:	f8 e2       	ldi	r31, 0x28	; 40
    4acc:	ef 2e       	mov	r14, r31
    4ace:	f1 2c       	mov	r15, r1
    4ad0:	f0 2d       	mov	r31, r0

		// Check delivery phase ---------------
    for(i=0; i<40; i++){
			// Wait for new line
    		DoWatchDog();
    4ad2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <DoWatchDog>
    4ad6:	2f ef       	ldi	r18, 0xFF	; 255
    4ad8:	84 e3       	ldi	r24, 0x34	; 52
    4ada:	9c e0       	ldi	r25, 0x0C	; 12
    4adc:	21 50       	subi	r18, 0x01	; 1
    4ade:	80 40       	sbci	r24, 0x00	; 0
    4ae0:	90 40       	sbci	r25, 0x00	; 0
    4ae2:	e1 f7       	brne	.-8      	; 0x4adc <gsm_send_sms+0x158>
    4ae4:	00 c0       	rjmp	.+0      	; 0x4ae6 <gsm_send_sms+0x162>
    4ae6:	00 00       	nop
			_delay_ms(500);
			if( gsm_readline(line, sizeof(line)) != TRUE ) continue;
    4ae8:	64 e6       	ldi	r22, 0x64	; 100
    4aea:	70 e0       	ldi	r23, 0x00	; 0
    4aec:	ce 01       	movw	r24, r28
    4aee:	01 96       	adiw	r24, 0x01	; 1
    4af0:	0e 94 17 23 	call	0x462e	; 0x462e <gsm_readline>
    4af4:	6c 01       	movw	r12, r24
    4af6:	81 30       	cpi	r24, 0x01	; 1
    4af8:	91 05       	cpc	r25, r1
    4afa:	09 f0       	breq	.+2      	; 0x4afe <gsm_send_sms+0x17a>
    4afc:	43 c0       	rjmp	.+134    	; 0x4b84 <gsm_send_sms+0x200>

			// check +CDS in new line
			if( strstr(line, "+CDS: 6") == NULL ) continue;
    4afe:	67 e8       	ldi	r22, 0x87	; 135
    4b00:	72 e0       	ldi	r23, 0x02	; 2
    4b02:	ce 01       	movw	r24, r28
    4b04:	01 96       	adiw	r24, 0x01	; 1
    4b06:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    4b0a:	89 2b       	or	r24, r25
    4b0c:	d9 f1       	breq	.+118    	; 0x4b84 <gsm_send_sms+0x200>

			// read second field of +CDS line as delivery ref number
			if( gsm_read_token(line, token, sizeof(token), 1, ",") != 0 ) continue;
    4b0e:	0f e6       	ldi	r16, 0x6F	; 111
    4b10:	12 e0       	ldi	r17, 0x02	; 2
    4b12:	21 e0       	ldi	r18, 0x01	; 1
    4b14:	42 e3       	ldi	r20, 0x32	; 50
    4b16:	be 01       	movw	r22, r28
    4b18:	6b 59       	subi	r22, 0x9B	; 155
    4b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1c:	ce 01       	movw	r24, r28
    4b1e:	01 96       	adiw	r24, 0x01	; 1
    4b20:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
    4b24:	89 2b       	or	r24, r25
    4b26:	71 f5       	brne	.+92     	; 0x4b84 <gsm_send_sms+0x200>

			// Compare delivery refnum with given refnum
			if( atoi(token) != refnum ) continue;
    4b28:	ce 01       	movw	r24, r28
    4b2a:	8b 59       	subi	r24, 0x9B	; 155
    4b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b2e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
    4b32:	8a 15       	cp	r24, r10
    4b34:	9b 05       	cpc	r25, r11
    4b36:	31 f5       	brne	.+76     	; 0x4b84 <gsm_send_sms+0x200>

			// check delivery report value (for Operators that that contain , in date like Irancell)
			// Example: +CDS: 6,46,"+989372391694",145,"11/10/13,11:22:45+14","11/10/13,11:22:50+14",0
			if( gsm_read_token(line, token, sizeof(token), 8, ",") == 0 )
    4b38:	28 e0       	ldi	r18, 0x08	; 8
    4b3a:	42 e3       	ldi	r20, 0x32	; 50
    4b3c:	be 01       	movw	r22, r28
    4b3e:	6b 59       	subi	r22, 0x9B	; 155
    4b40:	7f 4f       	sbci	r23, 0xFF	; 255
    4b42:	ce 01       	movw	r24, r28
    4b44:	01 96       	adiw	r24, 0x01	; 1
    4b46:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
    4b4a:	89 2b       	or	r24, r25
    4b4c:	39 f4       	brne	.+14     	; 0x4b5c <gsm_send_sms+0x1d8>
				if( atoi(token) == 0 ) return TRUE;
    4b4e:	ce 01       	movw	r24, r28
    4b50:	8b 59       	subi	r24, 0x9B	; 155
    4b52:	9f 4f       	sbci	r25, 0xFF	; 255
    4b54:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
    4b58:	89 2b       	or	r24, r25
    4b5a:	81 f1       	breq	.+96     	; 0x4bbc <gsm_send_sms+0x238>

			// check delivery report value (for Operators that that contain / in date like MCI)
			// Example: +CDS: 6,26,"+099372391694",129,"2011/10/13 13:08:35+14","2011/10/13 13:08:39+14",0
			if( gsm_read_token(line, token, sizeof(token), 6, ",") == 0 )
    4b5c:	0f e6       	ldi	r16, 0x6F	; 111
    4b5e:	12 e0       	ldi	r17, 0x02	; 2
    4b60:	26 e0       	ldi	r18, 0x06	; 6
    4b62:	42 e3       	ldi	r20, 0x32	; 50
    4b64:	be 01       	movw	r22, r28
    4b66:	6b 59       	subi	r22, 0x9B	; 155
    4b68:	7f 4f       	sbci	r23, 0xFF	; 255
    4b6a:	ce 01       	movw	r24, r28
    4b6c:	01 96       	adiw	r24, 0x01	; 1
    4b6e:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
    4b72:	89 2b       	or	r24, r25
    4b74:	39 f4       	brne	.+14     	; 0x4b84 <gsm_send_sms+0x200>
				if( atoi(token) == 0 ) return TRUE;
    4b76:	ce 01       	movw	r24, r28
    4b78:	8b 59       	subi	r24, 0x9B	; 155
    4b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b7c:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
    4b80:	89 2b       	or	r24, r25
    4b82:	e1 f0       	breq	.+56     	; 0x4bbc <gsm_send_sms+0x238>
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	e8 1a       	sub	r14, r24
    4b88:	f1 08       	sbc	r15, r1

		// check refnum
		if( refnum <= 0 ) return FALSE;

		// Check delivery phase ---------------
    for(i=0; i<40; i++){
    4b8a:	e1 14       	cp	r14, r1
    4b8c:	f1 04       	cpc	r15, r1
    4b8e:	09 f0       	breq	.+2      	; 0x4b92 <gsm_send_sms+0x20e>
    4b90:	a0 cf       	rjmp	.-192    	; 0x4ad2 <gsm_send_sms+0x14e>
int gsm_send_sms( char *number, char *text, int try_num ){
	int try, i;
	int refnum=0;
	char line[100], token[50];

	for( try=0; try<=try_num; try++ ){
    4b92:	9f ef       	ldi	r25, 0xFF	; 255
    4b94:	89 1a       	sub	r8, r25
    4b96:	99 0a       	sbc	r9, r25
    4b98:	48 14       	cp	r4, r8
    4b9a:	59 04       	cpc	r5, r9
    4b9c:	0c f0       	brlt	.+2      	; 0x4ba0 <gsm_send_sms+0x21c>
    4b9e:	17 cf       	rjmp	.-466    	; 0x49ce <gsm_send_sms+0x4a>
    4ba0:	0b c0       	rjmp	.+22     	; 0x4bb8 <gsm_send_sms+0x234>
			if( gsm_read_token(line, token, sizeof(token), 6, ",") == 0 )
				if( atoi(token) == 0 ) return TRUE;
		}
	}

	return FALSE;
    4ba2:	c1 2c       	mov	r12, r1
    4ba4:	d1 2c       	mov	r13, r1
    4ba6:	0a c0       	rjmp	.+20     	; 0x4bbc <gsm_send_sms+0x238>
			// AT+CMGS="09372391694"
			// > SMS Body...
			// +CMGS: 157

			// check for error
			if( strstr(line, "ERROR") != NULL ) return FALSE;
    4ba8:	c1 2c       	mov	r12, r1
    4baa:	d1 2c       	mov	r13, r1
    4bac:	07 c0       	rjmp	.+14     	; 0x4bbc <gsm_send_sms+0x238>
			// check +CMGS for refnum
			if( strstr(line, "+CMGS") != NULL ){
				gsm_read_token(line, token, sizeof(token), 1, ":");
				refnum = atoi(token);
    4bae:	6c 01       	movw	r12, r24
    4bb0:	05 c0       	rjmp	.+10     	; 0x4bbc <gsm_send_sms+0x238>
					break;
			}
		}

		// check refnum
		if( refnum <= 0 ) return FALSE;
    4bb2:	c1 2c       	mov	r12, r1
    4bb4:	d1 2c       	mov	r13, r1
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <gsm_send_sms+0x238>
			if( gsm_read_token(line, token, sizeof(token), 6, ",") == 0 )
				if( atoi(token) == 0 ) return TRUE;
		}
	}

	return FALSE;
    4bb8:	c1 2c       	mov	r12, r1
    4bba:	d1 2c       	mov	r13, r1
}
    4bbc:	c6 01       	movw	r24, r12
    4bbe:	ca 56       	subi	r28, 0x6A	; 106
    4bc0:	df 4f       	sbci	r29, 0xFF	; 255
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	df 91       	pop	r29
    4bce:	cf 91       	pop	r28
    4bd0:	1f 91       	pop	r17
    4bd2:	0f 91       	pop	r16
    4bd4:	ff 90       	pop	r15
    4bd6:	ef 90       	pop	r14
    4bd8:	df 90       	pop	r13
    4bda:	cf 90       	pop	r12
    4bdc:	bf 90       	pop	r11
    4bde:	af 90       	pop	r10
    4be0:	9f 90       	pop	r9
    4be2:	8f 90       	pop	r8
    4be4:	7f 90       	pop	r7
    4be6:	6f 90       	pop	r6
    4be8:	5f 90       	pop	r5
    4bea:	4f 90       	pop	r4
    4bec:	3f 90       	pop	r3
    4bee:	2f 90       	pop	r2
    4bf0:	08 95       	ret

00004bf2 <gsm_SIM_mem_used>:

//----------------------------------
int gsm_SIM_mem_used( int *total_mem ){
    4bf2:	af 92       	push	r10
    4bf4:	bf 92       	push	r11
    4bf6:	cf 92       	push	r12
    4bf8:	df 92       	push	r13
    4bfa:	ef 92       	push	r14
    4bfc:	ff 92       	push	r15
    4bfe:	0f 93       	push	r16
    4c00:	1f 93       	push	r17
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	cd b7       	in	r28, 0x3d	; 61
    4c08:	de b7       	in	r29, 0x3e	; 62
    4c0a:	c6 59       	subi	r28, 0x96	; 150
    4c0c:	d1 09       	sbc	r29, r1
    4c0e:	0f b6       	in	r0, 0x3f	; 63
    4c10:	f8 94       	cli
    4c12:	de bf       	out	0x3e, r29	; 62
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	cd bf       	out	0x3d, r28	; 61
    4c18:	6c 01       	movw	r12, r24
	int i, used, total;
	char line[100], token[50], *p;

	gsm_command("AT+CPMS?");
    4c1a:	8f e8       	ldi	r24, 0x8F	; 143
    4c1c:	92 e0       	ldi	r25, 0x02	; 2
    4c1e:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <gsm_command>
    4c22:	08 ec       	ldi	r16, 0xC8	; 200
    4c24:	10 e0       	ldi	r17, 0x00	; 0

	// Make a finite loop
	for(i=0; i<200; i++){
		if( gsm_readline(line, sizeof(line)) == TRUE ){
    4c26:	64 e6       	ldi	r22, 0x64	; 100
    4c28:	70 e0       	ldi	r23, 0x00	; 0
    4c2a:	ce 01       	movw	r24, r28
    4c2c:	01 96       	adiw	r24, 0x01	; 1
    4c2e:	0e 94 17 23 	call	0x462e	; 0x462e <gsm_readline>
    4c32:	01 97       	sbiw	r24, 0x01	; 1
    4c34:	09 f0       	breq	.+2      	; 0x4c38 <gsm_SIM_mem_used+0x46>
    4c36:	3f c0       	rjmp	.+126    	; 0x4cb6 <gsm_SIM_mem_used+0xc4>
			if( strstr(line, "+CPMS") != NULL ){
    4c38:	68 e9       	ldi	r22, 0x98	; 152
    4c3a:	72 e0       	ldi	r23, 0x02	; 2
    4c3c:	ce 01       	movw	r24, r28
    4c3e:	01 96       	adiw	r24, 0x01	; 1
    4c40:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    4c44:	89 2b       	or	r24, r25
    4c46:	b9 f1       	breq	.+110    	; 0x4cb6 <gsm_SIM_mem_used+0xc4>
				// +CPMS output format :
				// +CPMS: "SM",used,total,"SM",used,total,"SM",used,total

				p = strstr(line, "SM");		// Find SIM storage location
    4c48:	6e e9       	ldi	r22, 0x9E	; 158
    4c4a:	72 e0       	ldi	r23, 0x02	; 2
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	01 96       	adiw	r24, 0x01	; 1
    4c50:	0e 94 af 2a 	call	0x555e	; 0x555e <strstr>
    4c54:	7c 01       	movw	r14, r24
				if( gsm_read_token( p, token, sizeof(token), 1, "," ) != 0 ) return -1;
    4c56:	0f e6       	ldi	r16, 0x6F	; 111
    4c58:	12 e0       	ldi	r17, 0x02	; 2
    4c5a:	21 e0       	ldi	r18, 0x01	; 1
    4c5c:	42 e3       	ldi	r20, 0x32	; 50
    4c5e:	be 01       	movw	r22, r28
    4c60:	6b 59       	subi	r22, 0x9B	; 155
    4c62:	7f 4f       	sbci	r23, 0xFF	; 255
    4c64:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
    4c68:	89 2b       	or	r24, r25
    4c6a:	61 f5       	brne	.+88     	; 0x4cc4 <gsm_SIM_mem_used+0xd2>
				used = atoi(token);
    4c6c:	ce 01       	movw	r24, r28
    4c6e:	8b 59       	subi	r24, 0x9B	; 155
    4c70:	9f 4f       	sbci	r25, 0xFF	; 255
    4c72:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
    4c76:	5c 01       	movw	r10, r24

				if( gsm_read_token( p, token, sizeof(token), 2, "," ) != 0 ) return -1;
    4c78:	22 e0       	ldi	r18, 0x02	; 2
    4c7a:	42 e3       	ldi	r20, 0x32	; 50
    4c7c:	be 01       	movw	r22, r28
    4c7e:	6b 59       	subi	r22, 0x9B	; 155
    4c80:	7f 4f       	sbci	r23, 0xFF	; 255
    4c82:	c7 01       	movw	r24, r14
    4c84:	0e 94 5f 22 	call	0x44be	; 0x44be <gsm_read_token>
    4c88:	89 2b       	or	r24, r25
    4c8a:	f9 f4       	brne	.+62     	; 0x4cca <gsm_SIM_mem_used+0xd8>
				total = atoi(token);
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	8b 59       	subi	r24, 0x9B	; 155
    4c90:	9f 4f       	sbci	r25, 0xFF	; 255
    4c92:	0e 94 4a 2a 	call	0x5494	; 0x5494 <atoi>
    4c96:	bc 01       	movw	r22, r24
				if( total == 0 ) return -1;
    4c98:	00 97       	sbiw	r24, 0x00	; 0
    4c9a:	d1 f0       	breq	.+52     	; 0x4cd0 <gsm_SIM_mem_used+0xde>

				*total_mem = total;
    4c9c:	f6 01       	movw	r30, r12
    4c9e:	91 83       	std	Z+1, r25	; 0x01
    4ca0:	80 83       	st	Z, r24
				return used * 100 / total;		// Return used memory in percent
    4ca2:	24 e6       	ldi	r18, 0x64	; 100
    4ca4:	2a 9d       	mul	r18, r10
    4ca6:	c0 01       	movw	r24, r0
    4ca8:	2b 9d       	mul	r18, r11
    4caa:	90 0d       	add	r25, r0
    4cac:	11 24       	eor	r1, r1
    4cae:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <__divmodhi4>
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	12 c0       	rjmp	.+36     	; 0x4cda <gsm_SIM_mem_used+0xe8>
    4cb6:	01 50       	subi	r16, 0x01	; 1
    4cb8:	11 09       	sbc	r17, r1
	char line[100], token[50], *p;

	gsm_command("AT+CPMS?");

	// Make a finite loop
	for(i=0; i<200; i++){
    4cba:	01 15       	cp	r16, r1
    4cbc:	11 05       	cpc	r17, r1
    4cbe:	09 f0       	breq	.+2      	; 0x4cc2 <gsm_SIM_mem_used+0xd0>
    4cc0:	b2 cf       	rjmp	.-156    	; 0x4c26 <gsm_SIM_mem_used+0x34>
    4cc2:	09 c0       	rjmp	.+18     	; 0x4cd6 <gsm_SIM_mem_used+0xe4>
			if( strstr(line, "+CPMS") != NULL ){
				// +CPMS output format :
				// +CPMS: "SM",used,total,"SM",used,total,"SM",used,total

				p = strstr(line, "SM");		// Find SIM storage location
				if( gsm_read_token( p, token, sizeof(token), 1, "," ) != 0 ) return -1;
    4cc4:	8f ef       	ldi	r24, 0xFF	; 255
    4cc6:	9f ef       	ldi	r25, 0xFF	; 255
    4cc8:	08 c0       	rjmp	.+16     	; 0x4cda <gsm_SIM_mem_used+0xe8>
				used = atoi(token);

				if( gsm_read_token( p, token, sizeof(token), 2, "," ) != 0 ) return -1;
    4cca:	8f ef       	ldi	r24, 0xFF	; 255
    4ccc:	9f ef       	ldi	r25, 0xFF	; 255
    4cce:	05 c0       	rjmp	.+10     	; 0x4cda <gsm_SIM_mem_used+0xe8>
				total = atoi(token);
				if( total == 0 ) return -1;
    4cd0:	8f ef       	ldi	r24, 0xFF	; 255
    4cd2:	9f ef       	ldi	r25, 0xFF	; 255
    4cd4:	02 c0       	rjmp	.+4      	; 0x4cda <gsm_SIM_mem_used+0xe8>
				return used * 100 / total;		// Return used memory in percent
			}
		}
	}

	return -1;
    4cd6:	8f ef       	ldi	r24, 0xFF	; 255
    4cd8:	9f ef       	ldi	r25, 0xFF	; 255
}
    4cda:	ca 56       	subi	r28, 0x6A	; 106
    4cdc:	df 4f       	sbci	r29, 0xFF	; 255
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	f8 94       	cli
    4ce2:	de bf       	out	0x3e, r29	; 62
    4ce4:	0f be       	out	0x3f, r0	; 63
    4ce6:	cd bf       	out	0x3d, r28	; 61
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	1f 91       	pop	r17
    4cee:	0f 91       	pop	r16
    4cf0:	ff 90       	pop	r15
    4cf2:	ef 90       	pop	r14
    4cf4:	df 90       	pop	r13
    4cf6:	cf 90       	pop	r12
    4cf8:	bf 90       	pop	r11
    4cfa:	af 90       	pop	r10
    4cfc:	08 95       	ret

00004cfe <ExtInt0Enable>:
uint8_t extstate = 0;
uint8_t powergone = 0;
extern char wait_powergone;

void ExtInt0Enable(){
		EIMSK &= ~(1 << INT0); 						// DISABLE INT0
    4cfe:	e8 98       	cbi	0x1d, 0	; 29
//	    EICRA |= ( (1 << ISC01) | (1 << ISC00) );	// INTERRUPT ON RISING EDGE
//		EICRA |= (1 << ISC00);		// Any logical change on INT0 generates an interrupt request.
		EICRA &= ~( (1 << ISC01) | (1 << ISC00) );	// Low Level on INT0 generates an interrupt request.
    4d00:	e9 e6       	ldi	r30, 0x69	; 105
    4d02:	f0 e0       	ldi	r31, 0x00	; 0
    4d04:	80 81       	ld	r24, Z
    4d06:	8c 7f       	andi	r24, 0xFC	; 252
    4d08:	80 83       	st	Z, r24
//		EICRA |= (1 << ISC00);		// Any logical change on INT0 generates an interrupt request.
//	    DDRD &= ~(1 << PD2);						// PD2 as input
		INT0_DDR &= ~(1 << INT0_DDR_PIN);				// INT0_PIN as input
    4d0a:	52 98       	cbi	0x0a, 2	; 10
	    EIFR |= (1 << INTF0);
    4d0c:	e0 9a       	sbi	0x1c, 0	; 28
	    EIMSK |= (1 << INT0); 						// ENABLE INT0
    4d0e:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
    4d10:	78 94       	sei
    4d12:	08 95       	ret

00004d14 <ExtInt0Disable>:
}
//
void ExtInt0Disable(){
	//PCMSK0 &= 0x00;			// DISABLE PCINT7-0
	EIMSK &= ~(1 << INT0); 	//DISABLE INT0
    4d14:	e8 98       	cbi	0x1d, 0	; 29
	EIFR |= (1 << INTF0);
    4d16:	e0 9a       	sbi	0x1c, 0	; 28
    4d18:	08 95       	ret

00004d1a <__vector_1>:
}
//

ISR(INT0_vect) {
    4d1a:	1f 92       	push	r1
    4d1c:	0f 92       	push	r0
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	0f 92       	push	r0
    4d22:	11 24       	eor	r1, r1
    4d24:	8f 93       	push	r24
	if(extstate >= EXT_STATE_COUNT)
    4d26:	80 91 38 03 	lds	r24, 0x0338
    4d2a:	83 30       	cpi	r24, 0x03	; 3
    4d2c:	18 f0       	brcs	.+6      	; 0x4d34 <__vector_1+0x1a>
		extstate=0;
    4d2e:	10 92 38 03 	sts	0x0338, r1
    4d32:	03 c0       	rjmp	.+6      	; 0x4d3a <__vector_1+0x20>
	else
		extstate++;
    4d34:	8f 5f       	subi	r24, 0xFF	; 255
    4d36:	80 93 38 03 	sts	0x0338, r24

}
    4d3a:	8f 91       	pop	r24
    4d3c:	0f 90       	pop	r0
    4d3e:	0f be       	out	0x3f, r0	; 63
    4d40:	0f 90       	pop	r0
    4d42:	1f 90       	pop	r1
    4d44:	18 95       	reti

00004d46 <ExtInt1Enable>:
//
void ExtInt1Enable(){
		EIMSK &= ~(1 << INT1); 						// DISABLE INT1
    4d46:	e9 98       	cbi	0x1d, 1	; 29
//	    EICRA |= ( (1 << ISC01) | (1 << ISC00) );	// INTERRUPT ON RISING EDGE
//		EICRA |= (1 << ISC00);		// Any logical change on INT0 generates an interrupt request.
//		EICRA &= ~( (1 << ISC11) | (1 << ISC10) );	// Low Level on INT1 generates an interrupt request.
		EICRA &= ~( (1 << ISC11)); EICRA |= (1 << ISC10);//Any logical change on INT1 generates an interrupt request.
    4d48:	e9 e6       	ldi	r30, 0x69	; 105
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	80 81       	ld	r24, Z
    4d4e:	87 7f       	andi	r24, 0xF7	; 247
    4d50:	80 83       	st	Z, r24
    4d52:	80 81       	ld	r24, Z
    4d54:	84 60       	ori	r24, 0x04	; 4
    4d56:	80 83       	st	Z, r24
//	    DDRD &= ~(1 << PD3);						// PD3 as input
		INT1_DDR &= ~(1 << INT1_DDR_PIN);				// INT1_PIN as input
    4d58:	53 98       	cbi	0x0a, 3	; 10
	    // PD1 (PCINT0 pin) is now an input
	    //PORTD |= (1 << PORTD3);    // turn On the Pull-up
				// PD3 is now an input with pull-up enabled
	    INT1_PORT |= (1 << INT1_PORT_PIN);    // turn On the Pull-up
    4d5a:	5b 9a       	sbi	0x0b, 3	; 11
	        	// INT1_PIN is now an input with pull-up enabled
	    EIFR |= (1 << INTF1);
    4d5c:	e1 9a       	sbi	0x1c, 1	; 28
	    EIMSK |= (1 << INT1); 						// ENABLE INT1
    4d5e:	e9 9a       	sbi	0x1d, 1	; 29
	sei();
    4d60:	78 94       	sei
    4d62:	08 95       	ret

00004d64 <ExtInt1Disable>:
}
//
void ExtInt1Disable(){
	EIMSK &= ~(1 << INT1); 	//DISABLE INT1
    4d64:	e9 98       	cbi	0x1d, 1	; 29
	EIFR |= (1 << INTF1);
    4d66:	e1 9a       	sbi	0x1c, 1	; 28
    4d68:	08 95       	ret

00004d6a <__vector_2>:
}
//
ISR(INT1_vect) {
    4d6a:	1f 92       	push	r1
    4d6c:	0f 92       	push	r0
    4d6e:	0f b6       	in	r0, 0x3f	; 63
    4d70:	0f 92       	push	r0
    4d72:	11 24       	eor	r1, r1
    4d74:	8f 93       	push	r24
	//if(PORTD & (1 << PD3)){ // rising edge Power Phase Gone!
	if(INT1_PIN & (1 << INT1_PIN_PIN)){ // rising edge Power Phase Gone!
    4d76:	4b 9b       	sbis	0x09, 3	; 9
    4d78:	0c c0       	rjmp	.+24     	; 0x4d92 <__vector_2+0x28>
		if(powergone >= POWERGONE_STATE_COUNT)
    4d7a:	80 91 37 03 	lds	r24, 0x0337
    4d7e:	84 36       	cpi	r24, 0x64	; 100
    4d80:	20 f0       	brcs	.+8      	; 0x4d8a <__vector_2+0x20>
			powergone=1;
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	80 93 37 03 	sts	0x0337, r24
    4d88:	08 c0       	rjmp	.+16     	; 0x4d9a <__vector_2+0x30>
		else
			powergone++;
    4d8a:	8f 5f       	subi	r24, 0xFF	; 255
    4d8c:	80 93 37 03 	sts	0x0337, r24
    4d90:	04 c0       	rjmp	.+8      	; 0x4d9a <__vector_2+0x30>
	} else {wait_powergone = 0; powergone=0;}	// falling edge Power Power Phase OK !
    4d92:	10 92 1f 03 	sts	0x031F, r1
    4d96:	10 92 37 03 	sts	0x0337, r1

}
    4d9a:	8f 91       	pop	r24
    4d9c:	0f 90       	pop	r0
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	0f 90       	pop	r0
    4da2:	1f 90       	pop	r1
    4da4:	18 95       	reti

00004da6 <crc8>:
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
    4da6:	61 15       	cp	r22, r1
    4da8:	71 05       	cpc	r23, r1
    4daa:	b1 f0       	breq	.+44     	; 0x4dd8 <crc8+0x32>
    4dac:	fc 01       	movw	r30, r24
    4dae:	68 0f       	add	r22, r24
    4db0:	79 1f       	adc	r23, r25
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
    4db2:	80 e0       	ldi	r24, 0x00	; 0

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
    4db4:	58 e0       	ldi	r21, 0x08	; 8
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
    4db6:	48 e1       	ldi	r20, 0x18	; 24
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
	{
		b = data[loop_count];
    4db8:	21 91       	ld	r18, Z+
    4dba:	95 2f       	mov	r25, r21
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ b) & 0x01;
    4dbc:	32 2f       	mov	r19, r18
    4dbe:	38 27       	eor	r19, r24
	
			if ( feedback_bit == 0x01 ) {
    4dc0:	30 ff       	sbrs	r19, 0
    4dc2:	0c c0       	rjmp	.+24     	; 0x4ddc <crc8+0x36>
				crc = crc ^ CRC8POLY;
    4dc4:	84 27       	eor	r24, r20
			}
			crc = (crc >> 1) & 0x7F;
    4dc6:	86 95       	lsr	r24
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
    4dc8:	80 68       	ori	r24, 0x80	; 128
			}
		
			b = b >> 1;
    4dca:	26 95       	lsr	r18
    4dcc:	91 50       	subi	r25, 0x01	; 1
			bit_counter--;
		
		} while (bit_counter > 0);
    4dce:	b1 f7       	brne	.-20     	; 0x4dbc <crc8+0x16>
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for (loop_count = 0; loop_count != number_of_bytes_in_data; loop_count++)
    4dd0:	e6 17       	cp	r30, r22
    4dd2:	f7 07       	cpc	r31, r23
    4dd4:	89 f7       	brne	.-30     	; 0x4db8 <crc8+0x12>
    4dd6:	08 95       	ret
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  b;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	08 95       	ret
			feedback_bit = (crc ^ b) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
    4ddc:	86 95       	lsr	r24
    4dde:	f5 cf       	rjmp	.-22     	; 0x4dca <crc8+0x24>

00004de0 <DS18X20_raw_to_decicelsius>:

#if DS18X20_DECICELSIUS

/* convert scratchpad data to physical value in unit decicelsius */
static int16_t DS18X20_raw_to_decicelsius( uint8_t familycode, uint8_t sp[] )
{
    4de0:	fb 01       	movw	r30, r22
	uint16_t measure;
	uint8_t  negative;
	int16_t  decicelsius;
	uint16_t fract;

	measure = sp[0] | (sp[1] << 8);
    4de2:	21 81       	ldd	r18, Z+1	; 0x01
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    4de6:	32 2f       	mov	r19, r18
    4de8:	22 27       	eor	r18, r18
    4dea:	90 81       	ld	r25, Z
    4dec:	29 2b       	or	r18, r25
	//measure = 0xFF5E; // test -10.125
	//measure = 0xFE6F; // test -25.0625

	if( familycode == DS18S20_FAMILY_CODE ) {   // 9 -> 12 bit if 18S20
    4dee:	80 31       	cpi	r24, 0x10	; 16
    4df0:	79 f4       	brne	.+30     	; 0x4e10 <DS18X20_raw_to_decicelsius+0x30>
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		measure &= (uint16_t)0xfffe;   // Discard LSB, needed for later extended precicion calc
    4df2:	2e 7f       	andi	r18, 0xFE	; 254
		measure <<= 3;                 // Convert to 12-bit, now degrees are in 1/16 degrees units
    4df4:	a9 01       	movw	r20, r18
    4df6:	44 0f       	add	r20, r20
    4df8:	55 1f       	adc	r21, r21
    4dfa:	44 0f       	add	r20, r20
    4dfc:	55 1f       	adc	r21, r21
    4dfe:	44 0f       	add	r20, r20
    4e00:	55 1f       	adc	r21, r21
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
    4e02:	96 81       	ldd	r25, Z+6	; 0x06
    4e04:	2c e0       	ldi	r18, 0x0C	; 12
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	29 1b       	sub	r18, r25
    4e0a:	31 09       	sbc	r19, r1
    4e0c:	24 0f       	add	r18, r20
    4e0e:	35 1f       	adc	r19, r21
	}

	// check for negative 
	if ( measure & 0x8000 )  {
    4e10:	33 23       	and	r19, r19
    4e12:	2c f4       	brge	.+10     	; 0x4e1e <DS18X20_raw_to_decicelsius+0x3e>
		negative = 1;       // mark negative
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
    4e14:	31 95       	neg	r19
    4e16:	21 95       	neg	r18
    4e18:	31 09       	sbc	r19, r1
		measure += (16 - sp[6]) - 4;   // Add the compensation and remember to subtract 0.25 degree (4/16)
	}

	// check for negative 
	if ( measure & 0x8000 )  {
		negative = 1;       // mark negative
    4e1a:	61 e0       	ldi	r22, 0x01	; 1
    4e1c:	01 c0       	rjmp	.+2      	; 0x4e20 <DS18X20_raw_to_decicelsius+0x40>
		measure ^= 0xffff;  // convert to positive => (twos complement)++
		measure++;
	}
	else {
		negative = 0;
    4e1e:	60 e0       	ldi	r22, 0x00	; 0
	}

	// clear undefined bits for DS18B20 != 12bit resolution
	if ( familycode == DS18B20_FAMILY_CODE || familycode == DS1822_FAMILY_CODE ) {
    4e20:	88 32       	cpi	r24, 0x28	; 40
    4e22:	11 f0       	breq	.+4      	; 0x4e28 <DS18X20_raw_to_decicelsius+0x48>
    4e24:	82 32       	cpi	r24, 0x22	; 34
    4e26:	69 f4       	brne	.+26     	; 0x4e42 <DS18X20_raw_to_decicelsius+0x62>
		switch( sp[DS18B20_CONF_REG] & DS18B20_RES_MASK ) {
    4e28:	84 81       	ldd	r24, Z+4	; 0x04
    4e2a:	80 76       	andi	r24, 0x60	; 96
    4e2c:	80 32       	cpi	r24, 0x20	; 32
    4e2e:	31 f0       	breq	.+12     	; 0x4e3c <DS18X20_raw_to_decicelsius+0x5c>
    4e30:	80 34       	cpi	r24, 0x40	; 64
    4e32:	31 f0       	breq	.+12     	; 0x4e40 <DS18X20_raw_to_decicelsius+0x60>
    4e34:	81 11       	cpse	r24, r1
    4e36:	05 c0       	rjmp	.+10     	; 0x4e42 <DS18X20_raw_to_decicelsius+0x62>
		case DS18B20_9_BIT:
			measure &= ~(DS18B20_9_BIT_UNDF);
    4e38:	28 7f       	andi	r18, 0xF8	; 248
			break;
    4e3a:	03 c0       	rjmp	.+6      	; 0x4e42 <DS18X20_raw_to_decicelsius+0x62>
		case DS18B20_10_BIT:
			measure &= ~(DS18B20_10_BIT_UNDF);
    4e3c:	2c 7f       	andi	r18, 0xFC	; 252
			break;
    4e3e:	01 c0       	rjmp	.+2      	; 0x4e42 <DS18X20_raw_to_decicelsius+0x62>
		case DS18B20_11_BIT:
			measure &= ~(DS18B20_11_BIT_UNDF);
    4e40:	2e 7f       	andi	r18, 0xFE	; 254
			// 12 bit - all bits valid
			break;
		}
	}

	decicelsius = (measure >> 4);
    4e42:	c9 01       	movw	r24, r18
    4e44:	92 95       	swap	r25
    4e46:	82 95       	swap	r24
    4e48:	8f 70       	andi	r24, 0x0F	; 15
    4e4a:	89 27       	eor	r24, r25
    4e4c:	9f 70       	andi	r25, 0x0F	; 15
    4e4e:	89 27       	eor	r24, r25
	decicelsius *= 10;
    4e50:	ac 01       	movw	r20, r24
    4e52:	44 0f       	add	r20, r20
    4e54:	55 1f       	adc	r21, r21
    4e56:	88 0f       	add	r24, r24
    4e58:	99 1f       	adc	r25, r25
    4e5a:	88 0f       	add	r24, r24
    4e5c:	99 1f       	adc	r25, r25
    4e5e:	88 0f       	add	r24, r24
    4e60:	99 1f       	adc	r25, r25
    4e62:	84 0f       	add	r24, r20
    4e64:	95 1f       	adc	r25, r21

	// decicelsius += ((measure & 0x000F) * 640 + 512) / 1024;
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
    4e66:	2f 70       	andi	r18, 0x0F	; 15
    4e68:	33 27       	eor	r19, r19
    4e6a:	a9 01       	movw	r20, r18
    4e6c:	56 95       	lsr	r21
    4e6e:	54 2f       	mov	r21, r20
    4e70:	44 27       	eor	r20, r20
    4e72:	57 95       	ror	r21
    4e74:	47 95       	ror	r20
    4e76:	32 2f       	mov	r19, r18
    4e78:	22 27       	eor	r18, r18
    4e7a:	33 0f       	add	r19, r19
    4e7c:	24 0f       	add	r18, r20
    4e7e:	35 1f       	adc	r19, r21
	if ( !negative ) {
    4e80:	61 11       	cpse	r22, r1
    4e82:	13 c0       	rjmp	.+38     	; 0x4eaa <DS18X20_raw_to_decicelsius+0xca>
		fract += 512;
    4e84:	3e 5f       	subi	r19, 0xFE	; 254
	}
	fract /= 1024;
    4e86:	23 2f       	mov	r18, r19
    4e88:	33 27       	eor	r19, r19
    4e8a:	26 95       	lsr	r18
    4e8c:	26 95       	lsr	r18
	decicelsius += fract;
    4e8e:	28 0f       	add	r18, r24
    4e90:	39 1f       	adc	r19, r25

	if ( negative ) {
		decicelsius = -decicelsius;
	}

	if ( /* decicelsius == 850 || */ decicelsius < -550 || decicelsius > 1250 ) {
    4e92:	c9 01       	movw	r24, r18
    4e94:	8a 5d       	subi	r24, 0xDA	; 218
    4e96:	9d 4f       	sbci	r25, 0xFD	; 253
    4e98:	89 30       	cpi	r24, 0x09	; 9
    4e9a:	97 40       	sbci	r25, 0x07	; 7
    4e9c:	18 f0       	brcs	.+6      	; 0x4ea4 <DS18X20_raw_to_decicelsius+0xc4>
		return DS18X20_INVALID_DECICELSIUS;
    4e9e:	80 ed       	ldi	r24, 0xD0	; 208
    4ea0:	97 e0       	ldi	r25, 0x07	; 7
    4ea2:	08 95       	ret
	} else {
		return decicelsius;
    4ea4:	82 2f       	mov	r24, r18
    4ea6:	93 2f       	mov	r25, r19
    4ea8:	08 95       	ret
	// 625/1000 = 640/1024
	fract = ( measure & 0x000F ) * 640;
	if ( !negative ) {
		fract += 512;
	}
	fract /= 1024;
    4eaa:	23 2f       	mov	r18, r19
    4eac:	33 27       	eor	r19, r19
    4eae:	26 95       	lsr	r18
    4eb0:	26 95       	lsr	r18
	decicelsius += fract;
    4eb2:	82 0f       	add	r24, r18
    4eb4:	93 1f       	adc	r25, r19

	if ( negative ) {
		decicelsius = -decicelsius;
    4eb6:	22 27       	eor	r18, r18
    4eb8:	33 27       	eor	r19, r19
    4eba:	28 1b       	sub	r18, r24
    4ebc:	39 0b       	sbc	r19, r25
    4ebe:	e9 cf       	rjmp	.-46     	; 0x4e92 <DS18X20_raw_to_decicelsius+0xb2>

00004ec0 <read_scratchpad>:
#endif
   return ibit;
}

static uint8_t read_scratchpad( uint8_t id[], uint8_t sp[], uint8_t n )
{
    4ec0:	ef 92       	push	r14
    4ec2:	ff 92       	push	r15
    4ec4:	0f 93       	push	r16
    4ec6:	1f 93       	push	r17
    4ec8:	cf 93       	push	r28
    4eca:	df 93       	push	r29
    4ecc:	e6 2e       	mov	r14, r22
    4ece:	f7 2e       	mov	r15, r23
    4ed0:	04 2f       	mov	r16, r20
	uint8_t i;
	uint8_t ret;
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4ed2:	5d 98       	cbi	0x0b, 5	; 11
    4ed4:	2a e0       	ldi	r18, 0x0A	; 10
    4ed6:	2a 95       	dec	r18
    4ed8:	f1 f7       	brne	.-4      	; 0x4ed6 <read_scratchpad+0x16>
#endif
	ow_command( DS18X20_READ, id );
    4eda:	bc 01       	movw	r22, r24
    4edc:	8e eb       	ldi	r24, 0xBE	; 190
    4ede:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <ow_command>

	for ( i = 0; i < n; i++ ) {
    4ee2:	00 23       	and	r16, r16
    4ee4:	49 f0       	breq	.+18     	; 0x4ef8 <read_scratchpad+0x38>
    4ee6:	ce 2d       	mov	r28, r14
    4ee8:	df 2d       	mov	r29, r15
    4eea:	10 e0       	ldi	r17, 0x00	; 0
		sp[i] = ow_byte_rd();
    4eec:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <ow_byte_rd>
    4ef0:	89 93       	st	Y+, r24
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
#endif
	ow_command( DS18X20_READ, id );

	for ( i = 0; i < n; i++ ) {
    4ef2:	1f 5f       	subi	r17, 0xFF	; 255
    4ef4:	10 13       	cpse	r17, r16
    4ef6:	fa cf       	rjmp	.-12     	; 0x4eec <read_scratchpad+0x2c>
		sp[i] = ow_byte_rd();
	}
	if ( crc8( &sp[0], DS18X20_SP_SIZE ) ) {
    4ef8:	69 e0       	ldi	r22, 0x09	; 9
    4efa:	70 e0       	ldi	r23, 0x00	; 0
    4efc:	8e 2d       	mov	r24, r14
    4efe:	9f 2d       	mov	r25, r15
    4f00:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <crc8>
    4f04:	88 23       	and	r24, r24
    4f06:	11 f0       	breq	.+4      	; 0x4f0c <read_scratchpad+0x4c>
		ret = DS18X20_ERROR_CRC;
    4f08:	83 e0       	ldi	r24, 0x03	; 3
    4f0a:	01 c0       	rjmp	.+2      	; 0x4f0e <read_scratchpad+0x4e>
	} else {
		ret = DS18X20_OK;
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
	}
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_HIGH();
    4f0e:	5d 9a       	sbi	0x0b, 5	; 11
#endif

	return ret;
}
    4f10:	df 91       	pop	r29
    4f12:	cf 91       	pop	r28
    4f14:	1f 91       	pop	r17
    4f16:	0f 91       	pop	r16
    4f18:	ff 90       	pop	r15
    4f1a:	ef 90       	pop	r14
    4f1c:	08 95       	ret

00004f1e <send_power_10ms>:

// About ( 10 miliseconds)

void send_power_10ms() {

	DS_PWR_DIR_OUT();
    4f1e:	55 9a       	sbi	0x0a, 5	; 10
	DS_PWR_OUT_HIGH();
    4f20:	5d 9a       	sbi	0x0b, 5	; 11
    4f22:	8f e4       	ldi	r24, 0x4F	; 79
    4f24:	96 e4       	ldi	r25, 0x46	; 70
    4f26:	01 97       	sbiw	r24, 0x01	; 1
    4f28:	f1 f7       	brne	.-4      	; 0x4f26 <send_power_10ms+0x8>
    4f2a:	00 c0       	rjmp	.+0      	; 0x4f2c <send_power_10ms+0xe>
    4f2c:	00 00       	nop
// Using in _delay_loop_1 function as DS_PWR_TIME_TO_OPEN_FET* F_OSC/1000000
// Need to be about ( 10 miliseconds)

	_delay_ms(DS18X20_COPYSP_DELAY-1); // wait for about 10 ms 
		
	DS_PWR_OUT_LOW();
    4f2e:	5d 98       	cbi	0x0b, 5	; 11
    4f30:	8a e0       	ldi	r24, 0x0A	; 10
    4f32:	8a 95       	dec	r24
    4f34:	f1 f7       	brne	.-4      	; 0x4f32 <send_power_10ms+0x14>
    4f36:	08 95       	ret

00004f38 <DS18X20_get_power_status>:

/* get power status of DS18x20 
   input:   id = rom_code 
   returns: DS18X20_POWER_EXTERN or DS18X20_POWER_PARASITE */
uint8_t DS18X20_get_power_status( uint8_t id[] )
{
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	ec 01       	movw	r28, r24
	uint8_t pstat;
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4f3e:	5d 98       	cbi	0x0b, 5	; 11
    4f40:	8a e0       	ldi	r24, 0x0A	; 10
    4f42:	8a 95       	dec	r24
    4f44:	f1 f7       	brne	.-4      	; 0x4f42 <DS18X20_get_power_status+0xa>
#endif
	NOINTERRUPT();
    4f46:	f8 94       	cli
#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    4f48:	0e 94 04 1a 	call	0x3408	; 0x3408 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();
	ow_command( DS18X20_READ_POWER_SUPPLY, id );
    4f4c:	be 01       	movw	r22, r28
    4f4e:	84 eb       	ldi	r24, 0xB4	; 180
    4f50:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <ow_command>
	pstat = ow_bit_io( 1 );
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	0e 94 ad 1c 	call	0x395a	; 0x395a <ow_bit_io>
    4f5a:	c8 2f       	mov	r28, r24
#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    4f5c:	0e 94 04 1a 	call	0x3408	; 0x3408 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();
	DOINTERRUPT();
    4f60:	78 94       	sei
   //For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
    DS_PWR_OUT_HIGH();
    4f62:	5d 9a       	sbi	0x0b, 5	; 11
#endif

	return ( pstat ) ? DS18X20_POWER_EXTERN : DS18X20_POWER_PARASITE;
    4f64:	81 e0       	ldi	r24, 0x01	; 1
    4f66:	c1 11       	cpse	r28, r1
    4f68:	01 c0       	rjmp	.+2      	; 0x4f6c <DS18X20_get_power_status+0x34>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
}
    4f6c:	df 91       	pop	r29
    4f6e:	cf 91       	pop	r28
    4f70:	08 95       	ret

00004f72 <DS18X20_start_meas>:

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas( uint8_t with_power_extern, uint8_t id[])
{
    4f72:	1f 93       	push	r17
    4f74:	cf 93       	push	r28
    4f76:	df 93       	push	r29
    4f78:	18 2f       	mov	r17, r24
    4f7a:	eb 01       	movw	r28, r22
	uint8_t ret;
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4f7c:	5d 98       	cbi	0x0b, 5	; 11
    4f7e:	9a e0       	ldi	r25, 0x0A	; 10
    4f80:	9a 95       	dec	r25
    4f82:	f1 f7       	brne	.-4      	; 0x4f80 <DS18X20_start_meas+0xe>
#endif
	NOINTERRUPT();
    4f84:	f8 94       	cli
#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    4f86:	0e 94 04 1a 	call	0x3408	; 0x3408 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();
	DOINTERRUPT();
    4f8a:	78 94       	sei
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
    4f8c:	0e 94 25 1c 	call	0x384a	; 0x384a <ow_input_pin_state>
    4f90:	88 23       	and	r24, r24
    4f92:	91 f0       	breq	.+36     	; 0x4fb8 <DS18X20_start_meas+0x46>
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
    4f94:	11 30       	cpi	r17, 0x01	; 1
    4f96:	41 f0       	breq	.+16     	; 0x4fa8 <DS18X20_start_meas+0x36>
			NOINTERRUPT();
    4f98:	f8 94       	cli
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
    4f9a:	be 01       	movw	r22, r28
    4f9c:	84 e4       	ldi	r24, 0x44	; 68
    4f9e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <ow_command_with_parasite_enable>
			DOINTERRUPT();
    4fa2:	78 94       	sei
			NOINTERRUPT();
			ow_command( DS18X20_CONVERT_T, id );
			DOINTERRUPT();
		}
		
		ret = DS18X20_OK;
    4fa4:	80 e0       	ldi	r24, 0x00	; 0
    4fa6:	09 c0       	rjmp	.+18     	; 0x4fba <DS18X20_start_meas+0x48>
			NOINTERRUPT();
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
			DOINTERRUPT();
			/* not longer needed: ow_parasite_enable(); */
		} else {
			NOINTERRUPT();
    4fa8:	f8 94       	cli
			ow_command( DS18X20_CONVERT_T, id );
    4faa:	be 01       	movw	r22, r28
    4fac:	84 e4       	ldi	r24, 0x44	; 68
    4fae:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <ow_command>
			DOINTERRUPT();
    4fb2:	78 94       	sei
		}
		
		ret = DS18X20_OK;
    4fb4:	80 e0       	ldi	r24, 0x00	; 0
    4fb6:	01 c0       	rjmp	.+2      	; 0x4fba <DS18X20_start_meas+0x48>
	} 
	else { 
#ifdef DEBUG
		uart_puts_P_verbose( "DS18X20_start_meas: Short Circuit!\r" );
#endif
		ret = DS18X20_START_FAIL;
    4fb8:	82 e0       	ldi	r24, 0x02	; 2
	}
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
       DS_PWR_OUT_HIGH();
    4fba:	5d 9a       	sbi	0x0b, 5	; 11
#endif

	return ret;
}
    4fbc:	df 91       	pop	r29
    4fbe:	cf 91       	pop	r28
    4fc0:	1f 91       	pop	r17
    4fc2:	08 95       	ret

00004fc4 <DS18X20_conversion_in_progress>:
uint8_t DS18X20_conversion_in_progress(void)
{
   uint8_t ibit;
   //For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    4fc4:	5d 98       	cbi	0x0b, 5	; 11
    4fc6:	8a e0       	ldi	r24, 0x0A	; 10
    4fc8:	8a 95       	dec	r24
    4fca:	f1 f7       	brne	.-4      	; 0x4fc8 <DS18X20_conversion_in_progress+0x4>
#endif
	ibit =  ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	0e 94 ad 1c 	call	0x395a	; 0x395a <ow_bit_io>
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_HIGH();
    4fd2:	5d 9a       	sbi	0x0b, 5	; 11
   uint8_t ibit;
   //For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
#endif
	ibit =  ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
    4fd4:	91 e0       	ldi	r25, 0x01	; 1
    4fd6:	81 11       	cpse	r24, r1
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_HIGH();
#endif
   return ibit;
}
    4fda:	89 2f       	mov	r24, r25
    4fdc:	08 95       	ret

00004fde <DS18X20_format_from_decicelsius>:
/* format decicelsius-value into string, itoa method inspired 
   by code from Chris Takahashi for the MSP430 libc, BSD-license 
   modifications mthomas: variable-types, fixed radix 10, use div(), 
   insert decimal-point */
uint8_t DS18X20_format_from_decicelsius( int16_t decicelsius, char str[], uint8_t n)
{
    4fde:	ef 92       	push	r14
    4fe0:	ff 92       	push	r15
    4fe2:	0f 93       	push	r16
    4fe4:	1f 93       	push	r17
    4fe6:	cf 93       	push	r28
    4fe8:	df 93       	push	r29
    4fea:	cd b7       	in	r28, 0x3d	; 61
    4fec:	de b7       	in	r29, 0x3e	; 62
    4fee:	27 97       	sbiw	r28, 0x07	; 7
    4ff0:	0f b6       	in	r0, 0x3f	; 63
    4ff2:	f8 94       	cli
    4ff4:	de bf       	out	0x3e, r29	; 62
    4ff6:	0f be       	out	0x3f, r0	; 63
    4ff8:	cd bf       	out	0x3d, r28	; 61
    4ffa:	8b 01       	movw	r16, r22
	uint8_t str_loc = 0;
	div_t dt;
	uint8_t ret;

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {
    4ffc:	47 30       	cpi	r20, 0x07	; 7
    4ffe:	08 f4       	brcc	.+2      	; 0x5002 <DS18X20_format_from_decicelsius+0x24>
    5000:	63 c0       	rjmp	.+198    	; 0x50c8 <DS18X20_format_from_decicelsius+0xea>
    5002:	9c 01       	movw	r18, r24
    5004:	29 51       	subi	r18, 0x19	; 25
    5006:	3c 4f       	sbci	r19, 0xFC	; 252
    5008:	27 3f       	cpi	r18, 0xF7	; 247
    500a:	3a 42       	sbci	r19, 0x2A	; 42
    500c:	08 f0       	brcs	.+2      	; 0x5010 <DS18X20_format_from_decicelsius+0x32>
    500e:	5e c0       	rjmp	.+188    	; 0x50cc <DS18X20_format_from_decicelsius+0xee>

		if ( decicelsius < 0) {
    5010:	99 23       	and	r25, r25
    5012:	34 f4       	brge	.+12     	; 0x5020 <DS18X20_format_from_decicelsius+0x42>
			sign = 1;
			decicelsius = -decicelsius;
    5014:	91 95       	neg	r25
    5016:	81 95       	neg	r24
    5018:	91 09       	sbc	r25, r1

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {

		if ( decicelsius < 0) {
			sign = 1;
    501a:	ee 24       	eor	r14, r14
    501c:	e3 94       	inc	r14
    501e:	01 c0       	rjmp	.+2      	; 0x5022 <DS18X20_format_from_decicelsius+0x44>
   by code from Chris Takahashi for the MSP430 libc, BSD-license 
   modifications mthomas: variable-types, fixed radix 10, use div(), 
   insert decimal-point */
uint8_t DS18X20_format_from_decicelsius( int16_t decicelsius, char str[], uint8_t n)
{
	uint8_t sign = 0;
    5020:	e1 2c       	mov	r14, r1

	// range from -550:-55.0�C to 1250:+125.0�C -> min. 6+1 chars
	if ( n >= (6+1) && decicelsius > -1000 && decicelsius < 10000 ) {

		if ( decicelsius < 0) {
			sign = 1;
    5022:	f1 2c       	mov	r15, r1
			decicelsius = -decicelsius;
		}

		// construct a backward string of the number.
		do {
			dt = div(decicelsius,10);
    5024:	6a e0       	ldi	r22, 0x0A	; 10
    5026:	70 e0       	ldi	r23, 0x00	; 0
    5028:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <__divmodhi4>
			temp[temp_loc++] = dt.rem + '0';
    502c:	21 e0       	ldi	r18, 0x01	; 1
    502e:	2f 0d       	add	r18, r15
    5030:	e1 e0       	ldi	r30, 0x01	; 1
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	ec 0f       	add	r30, r28
    5036:	fd 1f       	adc	r31, r29
    5038:	ef 0d       	add	r30, r15
    503a:	f1 1d       	adc	r31, r1
    503c:	f7 fc       	sbrc	r15, 7
    503e:	fa 95       	dec	r31
    5040:	80 5d       	subi	r24, 0xD0	; 208
    5042:	80 83       	st	Z, r24
			decicelsius = dt.quot;
    5044:	86 2f       	mov	r24, r22
    5046:	97 2f       	mov	r25, r23
		} while ( decicelsius > 0 );
    5048:	18 16       	cp	r1, r24
    504a:	19 06       	cpc	r1, r25
    504c:	14 f4       	brge	.+4      	; 0x5052 <DS18X20_format_from_decicelsius+0x74>
		}

		// construct a backward string of the number.
		do {
			dt = div(decicelsius,10);
			temp[temp_loc++] = dt.rem + '0';
    504e:	f2 2e       	mov	r15, r18
    5050:	e9 cf       	rjmp	.-46     	; 0x5024 <DS18X20_format_from_decicelsius+0x46>
    5052:	82 2f       	mov	r24, r18
			decicelsius = dt.quot;
		} while ( decicelsius > 0 );

		if ( sign ) {
    5054:	ee 20       	and	r14, r14
    5056:	59 f0       	breq	.+22     	; 0x506e <DS18X20_format_from_decicelsius+0x90>
			temp[temp_loc] = '-';
    5058:	9d e2       	ldi	r25, 0x2D	; 45
    505a:	fe 01       	movw	r30, r28
    505c:	e2 0f       	add	r30, r18
    505e:	f1 1d       	adc	r31, r1
    5060:	27 fd       	sbrc	r18, 7
    5062:	fa 95       	dec	r31
    5064:	91 83       	std	Z+1, r25	; 0x01
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
    5066:	88 23       	and	r24, r24
    5068:	54 f4       	brge	.+20     	; 0x507e <DS18X20_format_from_decicelsius+0xa0>
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	27 c0       	rjmp	.+78     	; 0x50bc <DS18X20_format_from_decicelsius+0xde>

		if ( sign ) {
			temp[temp_loc] = '-';
		} else {
			///temp_loc--;
			temp[temp_loc] = '+';
    506e:	9b e2       	ldi	r25, 0x2B	; 43
    5070:	fe 01       	movw	r30, r28
    5072:	e2 0f       	add	r30, r18
    5074:	f1 1d       	adc	r31, r1
    5076:	27 fd       	sbrc	r18, 7
    5078:	fa 95       	dec	r31
    507a:	91 83       	std	Z+1, r25	; 0x01
    507c:	f4 cf       	rjmp	.-24     	; 0x5066 <DS18X20_format_from_decicelsius+0x88>
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
    507e:	90 e0       	ldi	r25, 0x00	; 0
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 0 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
    5080:	4e e2       	ldi	r20, 0x2E	; 46
    5082:	02 c0       	rjmp	.+4      	; 0x5088 <DS18X20_format_from_decicelsius+0xaa>
    5084:	93 2f       	mov	r25, r19
    5086:	28 2f       	mov	r18, r24
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
			str[str_loc++] = temp[(uint8_t)temp_loc--];
    5088:	31 e0       	ldi	r19, 0x01	; 1
    508a:	39 0f       	add	r19, r25
    508c:	8f ef       	ldi	r24, 0xFF	; 255
    508e:	82 0f       	add	r24, r18
    5090:	e1 e0       	ldi	r30, 0x01	; 1
    5092:	f0 e0       	ldi	r31, 0x00	; 0
    5094:	ec 0f       	add	r30, r28
    5096:	fd 1f       	adc	r31, r29
    5098:	e2 0f       	add	r30, r18
    509a:	f1 1d       	adc	r31, r1
    509c:	20 81       	ld	r18, Z
    509e:	f8 01       	movw	r30, r16
    50a0:	e9 0f       	add	r30, r25
    50a2:	f1 1d       	adc	r31, r1
    50a4:	20 83       	st	Z, r18
			if ( temp_loc == 0 ) {
    50a6:	81 11       	cpse	r24, r1
    50a8:	07 c0       	rjmp	.+14     	; 0x50b8 <DS18X20_format_from_decicelsius+0xda>
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
    50aa:	f8 01       	movw	r30, r16
    50ac:	e3 0f       	add	r30, r19
    50ae:	f1 1d       	adc	r31, r1
    50b0:	40 83       	st	Z, r20
    50b2:	32 e0       	ldi	r19, 0x02	; 2
    50b4:	39 0f       	add	r19, r25
    50b6:	e6 cf       	rjmp	.-52     	; 0x5084 <DS18X20_format_from_decicelsius+0xa6>
			///temp_loc--;
			temp[temp_loc] = '+';
		}

		// reverse the string.into the output
		while ( temp_loc >=0 ) {
    50b8:	88 23       	and	r24, r24
    50ba:	24 f7       	brge	.-56     	; 0x5084 <DS18X20_format_from_decicelsius+0xa6>
			str[str_loc++] = temp[(uint8_t)temp_loc--];
			if ( temp_loc == 0 ) {
				str[str_loc++] = DS18X20_DECIMAL_CHAR;
			}
		}
		str[str_loc] = '\0';
    50bc:	f8 01       	movw	r30, r16
    50be:	e3 0f       	add	r30, r19
    50c0:	f1 1d       	adc	r31, r1
    50c2:	10 82       	st	Z, r1

		ret = DS18X20_OK;
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	03 c0       	rjmp	.+6      	; 0x50ce <DS18X20_format_from_decicelsius+0xf0>
	} else {
		ret = DS18X20_ERROR;
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	01 c0       	rjmp	.+2      	; 0x50ce <DS18X20_format_from_decicelsius+0xf0>
    50cc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return ret;
}
    50ce:	27 96       	adiw	r28, 0x07	; 7
    50d0:	0f b6       	in	r0, 0x3f	; 63
    50d2:	f8 94       	cli
    50d4:	de bf       	out	0x3e, r29	; 62
    50d6:	0f be       	out	0x3f, r0	; 63
    50d8:	cd bf       	out	0x3d, r28	; 61
    50da:	df 91       	pop	r29
    50dc:	cf 91       	pop	r28
    50de:	1f 91       	pop	r17
    50e0:	0f 91       	pop	r16
    50e2:	ff 90       	pop	r15
    50e4:	ef 90       	pop	r14
    50e6:	08 95       	ret

000050e8 <DS18X20_read_decicelsius>:

/* reads temperature (scratchpad) of sensor with rom-code id
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius( uint8_t id[], int16_t *decicelsius )
{
    50e8:	df 92       	push	r13
    50ea:	ef 92       	push	r14
    50ec:	ff 92       	push	r15
    50ee:	0f 93       	push	r16
    50f0:	1f 93       	push	r17
    50f2:	cf 93       	push	r28
    50f4:	df 93       	push	r29
    50f6:	cd b7       	in	r28, 0x3d	; 61
    50f8:	de b7       	in	r29, 0x3e	; 62
    50fa:	29 97       	sbiw	r28, 0x09	; 9
    50fc:	0f b6       	in	r0, 0x3f	; 63
    50fe:	f8 94       	cli
    5100:	de bf       	out	0x3e, r29	; 62
    5102:	0f be       	out	0x3f, r0	; 63
    5104:	cd bf       	out	0x3d, r28	; 61
    5106:	8c 01       	movw	r16, r24
    5108:	7b 01       	movw	r14, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_LOW();
    510a:	5d 98       	cbi	0x0b, 5	; 11
    510c:	8a e0       	ldi	r24, 0x0A	; 10
    510e:	8a 95       	dec	r24
    5110:	f1 f7       	brne	.-4      	; 0x510e <DS18X20_read_decicelsius+0x26>
#endif
#ifdef MAXIM_SEARCH_ENABLE
	OWReset();
    5112:	0e 94 04 1a 	call	0x3408	; 0x3408 <OWReset>
#else
	ow_reset();
#endif
//	ow_reset();
   
	ret = read_scratchpad( id, sp, DS18X20_SP_SIZE );
    5116:	49 e0       	ldi	r20, 0x09	; 9
    5118:	be 01       	movw	r22, r28
    511a:	6f 5f       	subi	r22, 0xFF	; 255
    511c:	7f 4f       	sbci	r23, 0xFF	; 255
    511e:	c8 01       	movw	r24, r16
    5120:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <read_scratchpad>
    5124:	d8 2e       	mov	r13, r24
	if ( ret == DS18X20_OK ) {
    5126:	81 11       	cpse	r24, r1
    5128:	0a c0       	rjmp	.+20     	; 0x513e <DS18X20_read_decicelsius+0x56>
		*decicelsius = DS18X20_raw_to_decicelsius( id[0], sp );
    512a:	be 01       	movw	r22, r28
    512c:	6f 5f       	subi	r22, 0xFF	; 255
    512e:	7f 4f       	sbci	r23, 0xFF	; 255
    5130:	f8 01       	movw	r30, r16
    5132:	80 81       	ld	r24, Z
    5134:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <DS18X20_raw_to_decicelsius>
    5138:	f7 01       	movw	r30, r14
    513a:	91 83       	std	Z+1, r25	; 0x01
    513c:	80 83       	st	Z, r24
	}
//For Parasite Power Suply Enhancement
#ifdef DS_PWR_PIN
        DS_PWR_OUT_HIGH();
    513e:	5d 9a       	sbi	0x0b, 5	; 11
#endif
	return ret;
}
    5140:	8d 2d       	mov	r24, r13
    5142:	29 96       	adiw	r28, 0x09	; 9
    5144:	0f b6       	in	r0, 0x3f	; 63
    5146:	f8 94       	cli
    5148:	de bf       	out	0x3e, r29	; 62
    514a:	0f be       	out	0x3f, r0	; 63
    514c:	cd bf       	out	0x3d, r28	; 61
    514e:	df 91       	pop	r29
    5150:	cf 91       	pop	r28
    5152:	1f 91       	pop	r17
    5154:	0f 91       	pop	r16
    5156:	ff 90       	pop	r15
    5158:	ef 90       	pop	r14
    515a:	df 90       	pop	r13
    515c:	08 95       	ret

0000515e <DS18X20_read_decicelsius_single>:

/* reads temperature (scratchpad) of sensor without id (single sensor)
   output: decicelsius 
   returns DS18X20_OK on success */
uint8_t DS18X20_read_decicelsius_single( uint8_t familycode, int16_t *decicelsius )
{
    515e:	ef 92       	push	r14
    5160:	ff 92       	push	r15
    5162:	0f 93       	push	r16
    5164:	1f 93       	push	r17
    5166:	cf 93       	push	r28
    5168:	df 93       	push	r29
    516a:	cd b7       	in	r28, 0x3d	; 61
    516c:	de b7       	in	r29, 0x3e	; 62
    516e:	29 97       	sbiw	r28, 0x09	; 9
    5170:	0f b6       	in	r0, 0x3f	; 63
    5172:	f8 94       	cli
    5174:	de bf       	out	0x3e, r29	; 62
    5176:	0f be       	out	0x3f, r0	; 63
    5178:	cd bf       	out	0x3d, r28	; 61
    517a:	e8 2e       	mov	r14, r24
    517c:	8b 01       	movw	r16, r22
	uint8_t sp[DS18X20_SP_SIZE];
	uint8_t ret;

	ret = read_scratchpad( NULL, sp, DS18X20_SP_SIZE );
    517e:	49 e0       	ldi	r20, 0x09	; 9
    5180:	be 01       	movw	r22, r28
    5182:	6f 5f       	subi	r22, 0xFF	; 255
    5184:	7f 4f       	sbci	r23, 0xFF	; 255
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <read_scratchpad>
    518e:	f8 2e       	mov	r15, r24
	if ( ret == DS18X20_OK ) {
    5190:	81 11       	cpse	r24, r1
    5192:	09 c0       	rjmp	.+18     	; 0x51a6 <DS18X20_read_decicelsius_single+0x48>
		*decicelsius = DS18X20_raw_to_decicelsius( familycode, sp );
    5194:	be 01       	movw	r22, r28
    5196:	6f 5f       	subi	r22, 0xFF	; 255
    5198:	7f 4f       	sbci	r23, 0xFF	; 255
    519a:	8e 2d       	mov	r24, r14
    519c:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <DS18X20_raw_to_decicelsius>
    51a0:	f8 01       	movw	r30, r16
    51a2:	91 83       	std	Z+1, r25	; 0x01
    51a4:	80 83       	st	Z, r24
	}
	return ret;
}
    51a6:	8f 2d       	mov	r24, r15
    51a8:	29 96       	adiw	r28, 0x09	; 9
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	f8 94       	cli
    51ae:	de bf       	out	0x3e, r29	; 62
    51b0:	0f be       	out	0x3f, r0	; 63
    51b2:	cd bf       	out	0x3d, r28	; 61
    51b4:	df 91       	pop	r29
    51b6:	cf 91       	pop	r28
    51b8:	1f 91       	pop	r17
    51ba:	0f 91       	pop	r16
    51bc:	ff 90       	pop	r15
    51be:	ef 90       	pop	r14
    51c0:	08 95       	ret

000051c2 <__divmodhi4>:
    51c2:	97 fb       	bst	r25, 7
    51c4:	07 2e       	mov	r0, r23
    51c6:	16 f4       	brtc	.+4      	; 0x51cc <__divmodhi4+0xa>
    51c8:	00 94       	com	r0
    51ca:	07 d0       	rcall	.+14     	; 0x51da <__divmodhi4_neg1>
    51cc:	77 fd       	sbrc	r23, 7
    51ce:	09 d0       	rcall	.+18     	; 0x51e2 <__divmodhi4_neg2>
    51d0:	0e 94 0a 29 	call	0x5214	; 0x5214 <__udivmodhi4>
    51d4:	07 fc       	sbrc	r0, 7
    51d6:	05 d0       	rcall	.+10     	; 0x51e2 <__divmodhi4_neg2>
    51d8:	3e f4       	brtc	.+14     	; 0x51e8 <__divmodhi4_exit>

000051da <__divmodhi4_neg1>:
    51da:	90 95       	com	r25
    51dc:	81 95       	neg	r24
    51de:	9f 4f       	sbci	r25, 0xFF	; 255
    51e0:	08 95       	ret

000051e2 <__divmodhi4_neg2>:
    51e2:	70 95       	com	r23
    51e4:	61 95       	neg	r22
    51e6:	7f 4f       	sbci	r23, 0xFF	; 255

000051e8 <__divmodhi4_exit>:
    51e8:	08 95       	ret

000051ea <__tablejump2__>:
    51ea:	ee 0f       	add	r30, r30
    51ec:	ff 1f       	adc	r31, r31

000051ee <__tablejump__>:
    51ee:	05 90       	lpm	r0, Z+
    51f0:	f4 91       	lpm	r31, Z
    51f2:	e0 2d       	mov	r30, r0
    51f4:	09 94       	ijmp

000051f6 <__umulhisi3>:
    51f6:	a2 9f       	mul	r26, r18
    51f8:	b0 01       	movw	r22, r0
    51fa:	b3 9f       	mul	r27, r19
    51fc:	c0 01       	movw	r24, r0
    51fe:	a3 9f       	mul	r26, r19
    5200:	70 0d       	add	r23, r0
    5202:	81 1d       	adc	r24, r1
    5204:	11 24       	eor	r1, r1
    5206:	91 1d       	adc	r25, r1
    5208:	b2 9f       	mul	r27, r18
    520a:	70 0d       	add	r23, r0
    520c:	81 1d       	adc	r24, r1
    520e:	11 24       	eor	r1, r1
    5210:	91 1d       	adc	r25, r1
    5212:	08 95       	ret

00005214 <__udivmodhi4>:
    5214:	aa 1b       	sub	r26, r26
    5216:	bb 1b       	sub	r27, r27
    5218:	51 e1       	ldi	r21, 0x11	; 17
    521a:	07 c0       	rjmp	.+14     	; 0x522a <__udivmodhi4_ep>

0000521c <__udivmodhi4_loop>:
    521c:	aa 1f       	adc	r26, r26
    521e:	bb 1f       	adc	r27, r27
    5220:	a6 17       	cp	r26, r22
    5222:	b7 07       	cpc	r27, r23
    5224:	10 f0       	brcs	.+4      	; 0x522a <__udivmodhi4_ep>
    5226:	a6 1b       	sub	r26, r22
    5228:	b7 0b       	sbc	r27, r23

0000522a <__udivmodhi4_ep>:
    522a:	88 1f       	adc	r24, r24
    522c:	99 1f       	adc	r25, r25
    522e:	5a 95       	dec	r21
    5230:	a9 f7       	brne	.-22     	; 0x521c <__udivmodhi4_loop>
    5232:	80 95       	com	r24
    5234:	90 95       	com	r25
    5236:	bc 01       	movw	r22, r24
    5238:	cd 01       	movw	r24, r26
    523a:	08 95       	ret

0000523c <malloc>:
    523c:	cf 93       	push	r28
    523e:	df 93       	push	r29
    5240:	82 30       	cpi	r24, 0x02	; 2
    5242:	91 05       	cpc	r25, r1
    5244:	10 f4       	brcc	.+4      	; 0x524a <malloc+0xe>
    5246:	82 e0       	ldi	r24, 0x02	; 2
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	e0 91 f3 06 	lds	r30, 0x06F3
    524e:	f0 91 f4 06 	lds	r31, 0x06F4
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	a0 e0       	ldi	r26, 0x00	; 0
    5258:	b0 e0       	ldi	r27, 0x00	; 0
    525a:	30 97       	sbiw	r30, 0x00	; 0
    525c:	39 f1       	breq	.+78     	; 0x52ac <malloc+0x70>
    525e:	40 81       	ld	r20, Z
    5260:	51 81       	ldd	r21, Z+1	; 0x01
    5262:	48 17       	cp	r20, r24
    5264:	59 07       	cpc	r21, r25
    5266:	b8 f0       	brcs	.+46     	; 0x5296 <malloc+0x5a>
    5268:	48 17       	cp	r20, r24
    526a:	59 07       	cpc	r21, r25
    526c:	71 f4       	brne	.+28     	; 0x528a <malloc+0x4e>
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	93 81       	ldd	r25, Z+3	; 0x03
    5272:	10 97       	sbiw	r26, 0x00	; 0
    5274:	29 f0       	breq	.+10     	; 0x5280 <malloc+0x44>
    5276:	13 96       	adiw	r26, 0x03	; 3
    5278:	9c 93       	st	X, r25
    527a:	8e 93       	st	-X, r24
    527c:	12 97       	sbiw	r26, 0x02	; 2
    527e:	2c c0       	rjmp	.+88     	; 0x52d8 <malloc+0x9c>
    5280:	90 93 f4 06 	sts	0x06F4, r25
    5284:	80 93 f3 06 	sts	0x06F3, r24
    5288:	27 c0       	rjmp	.+78     	; 0x52d8 <malloc+0x9c>
    528a:	21 15       	cp	r18, r1
    528c:	31 05       	cpc	r19, r1
    528e:	31 f0       	breq	.+12     	; 0x529c <malloc+0x60>
    5290:	42 17       	cp	r20, r18
    5292:	53 07       	cpc	r21, r19
    5294:	18 f0       	brcs	.+6      	; 0x529c <malloc+0x60>
    5296:	a9 01       	movw	r20, r18
    5298:	db 01       	movw	r26, r22
    529a:	01 c0       	rjmp	.+2      	; 0x529e <malloc+0x62>
    529c:	ef 01       	movw	r28, r30
    529e:	9a 01       	movw	r18, r20
    52a0:	bd 01       	movw	r22, r26
    52a2:	df 01       	movw	r26, r30
    52a4:	02 80       	ldd	r0, Z+2	; 0x02
    52a6:	f3 81       	ldd	r31, Z+3	; 0x03
    52a8:	e0 2d       	mov	r30, r0
    52aa:	d7 cf       	rjmp	.-82     	; 0x525a <malloc+0x1e>
    52ac:	21 15       	cp	r18, r1
    52ae:	31 05       	cpc	r19, r1
    52b0:	f9 f0       	breq	.+62     	; 0x52f0 <malloc+0xb4>
    52b2:	28 1b       	sub	r18, r24
    52b4:	39 0b       	sbc	r19, r25
    52b6:	24 30       	cpi	r18, 0x04	; 4
    52b8:	31 05       	cpc	r19, r1
    52ba:	80 f4       	brcc	.+32     	; 0x52dc <malloc+0xa0>
    52bc:	8a 81       	ldd	r24, Y+2	; 0x02
    52be:	9b 81       	ldd	r25, Y+3	; 0x03
    52c0:	61 15       	cp	r22, r1
    52c2:	71 05       	cpc	r23, r1
    52c4:	21 f0       	breq	.+8      	; 0x52ce <malloc+0x92>
    52c6:	fb 01       	movw	r30, r22
    52c8:	93 83       	std	Z+3, r25	; 0x03
    52ca:	82 83       	std	Z+2, r24	; 0x02
    52cc:	04 c0       	rjmp	.+8      	; 0x52d6 <malloc+0x9a>
    52ce:	90 93 f4 06 	sts	0x06F4, r25
    52d2:	80 93 f3 06 	sts	0x06F3, r24
    52d6:	fe 01       	movw	r30, r28
    52d8:	32 96       	adiw	r30, 0x02	; 2
    52da:	44 c0       	rjmp	.+136    	; 0x5364 <malloc+0x128>
    52dc:	fe 01       	movw	r30, r28
    52de:	e2 0f       	add	r30, r18
    52e0:	f3 1f       	adc	r31, r19
    52e2:	81 93       	st	Z+, r24
    52e4:	91 93       	st	Z+, r25
    52e6:	22 50       	subi	r18, 0x02	; 2
    52e8:	31 09       	sbc	r19, r1
    52ea:	39 83       	std	Y+1, r19	; 0x01
    52ec:	28 83       	st	Y, r18
    52ee:	3a c0       	rjmp	.+116    	; 0x5364 <malloc+0x128>
    52f0:	20 91 f1 06 	lds	r18, 0x06F1
    52f4:	30 91 f2 06 	lds	r19, 0x06F2
    52f8:	23 2b       	or	r18, r19
    52fa:	41 f4       	brne	.+16     	; 0x530c <malloc+0xd0>
    52fc:	20 91 21 01 	lds	r18, 0x0121
    5300:	30 91 22 01 	lds	r19, 0x0122
    5304:	30 93 f2 06 	sts	0x06F2, r19
    5308:	20 93 f1 06 	sts	0x06F1, r18
    530c:	20 91 1f 01 	lds	r18, 0x011F
    5310:	30 91 20 01 	lds	r19, 0x0120
    5314:	21 15       	cp	r18, r1
    5316:	31 05       	cpc	r19, r1
    5318:	41 f4       	brne	.+16     	; 0x532a <malloc+0xee>
    531a:	2d b7       	in	r18, 0x3d	; 61
    531c:	3e b7       	in	r19, 0x3e	; 62
    531e:	40 91 23 01 	lds	r20, 0x0123
    5322:	50 91 24 01 	lds	r21, 0x0124
    5326:	24 1b       	sub	r18, r20
    5328:	35 0b       	sbc	r19, r21
    532a:	e0 91 f1 06 	lds	r30, 0x06F1
    532e:	f0 91 f2 06 	lds	r31, 0x06F2
    5332:	e2 17       	cp	r30, r18
    5334:	f3 07       	cpc	r31, r19
    5336:	a0 f4       	brcc	.+40     	; 0x5360 <malloc+0x124>
    5338:	2e 1b       	sub	r18, r30
    533a:	3f 0b       	sbc	r19, r31
    533c:	28 17       	cp	r18, r24
    533e:	39 07       	cpc	r19, r25
    5340:	78 f0       	brcs	.+30     	; 0x5360 <malloc+0x124>
    5342:	ac 01       	movw	r20, r24
    5344:	4e 5f       	subi	r20, 0xFE	; 254
    5346:	5f 4f       	sbci	r21, 0xFF	; 255
    5348:	24 17       	cp	r18, r20
    534a:	35 07       	cpc	r19, r21
    534c:	48 f0       	brcs	.+18     	; 0x5360 <malloc+0x124>
    534e:	4e 0f       	add	r20, r30
    5350:	5f 1f       	adc	r21, r31
    5352:	50 93 f2 06 	sts	0x06F2, r21
    5356:	40 93 f1 06 	sts	0x06F1, r20
    535a:	81 93       	st	Z+, r24
    535c:	91 93       	st	Z+, r25
    535e:	02 c0       	rjmp	.+4      	; 0x5364 <malloc+0x128>
    5360:	e0 e0       	ldi	r30, 0x00	; 0
    5362:	f0 e0       	ldi	r31, 0x00	; 0
    5364:	cf 01       	movw	r24, r30
    5366:	df 91       	pop	r29
    5368:	cf 91       	pop	r28
    536a:	08 95       	ret

0000536c <free>:
    536c:	cf 93       	push	r28
    536e:	df 93       	push	r29
    5370:	00 97       	sbiw	r24, 0x00	; 0
    5372:	09 f4       	brne	.+2      	; 0x5376 <free+0xa>
    5374:	87 c0       	rjmp	.+270    	; 0x5484 <free+0x118>
    5376:	fc 01       	movw	r30, r24
    5378:	32 97       	sbiw	r30, 0x02	; 2
    537a:	13 82       	std	Z+3, r1	; 0x03
    537c:	12 82       	std	Z+2, r1	; 0x02
    537e:	c0 91 f3 06 	lds	r28, 0x06F3
    5382:	d0 91 f4 06 	lds	r29, 0x06F4
    5386:	20 97       	sbiw	r28, 0x00	; 0
    5388:	81 f4       	brne	.+32     	; 0x53aa <free+0x3e>
    538a:	20 81       	ld	r18, Z
    538c:	31 81       	ldd	r19, Z+1	; 0x01
    538e:	28 0f       	add	r18, r24
    5390:	39 1f       	adc	r19, r25
    5392:	80 91 f1 06 	lds	r24, 0x06F1
    5396:	90 91 f2 06 	lds	r25, 0x06F2
    539a:	82 17       	cp	r24, r18
    539c:	93 07       	cpc	r25, r19
    539e:	79 f5       	brne	.+94     	; 0x53fe <free+0x92>
    53a0:	f0 93 f2 06 	sts	0x06F2, r31
    53a4:	e0 93 f1 06 	sts	0x06F1, r30
    53a8:	6d c0       	rjmp	.+218    	; 0x5484 <free+0x118>
    53aa:	de 01       	movw	r26, r28
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	ae 17       	cp	r26, r30
    53b2:	bf 07       	cpc	r27, r31
    53b4:	50 f4       	brcc	.+20     	; 0x53ca <free+0x5e>
    53b6:	12 96       	adiw	r26, 0x02	; 2
    53b8:	4d 91       	ld	r20, X+
    53ba:	5c 91       	ld	r21, X
    53bc:	13 97       	sbiw	r26, 0x03	; 3
    53be:	9d 01       	movw	r18, r26
    53c0:	41 15       	cp	r20, r1
    53c2:	51 05       	cpc	r21, r1
    53c4:	09 f1       	breq	.+66     	; 0x5408 <free+0x9c>
    53c6:	da 01       	movw	r26, r20
    53c8:	f3 cf       	rjmp	.-26     	; 0x53b0 <free+0x44>
    53ca:	b3 83       	std	Z+3, r27	; 0x03
    53cc:	a2 83       	std	Z+2, r26	; 0x02
    53ce:	40 81       	ld	r20, Z
    53d0:	51 81       	ldd	r21, Z+1	; 0x01
    53d2:	84 0f       	add	r24, r20
    53d4:	95 1f       	adc	r25, r21
    53d6:	8a 17       	cp	r24, r26
    53d8:	9b 07       	cpc	r25, r27
    53da:	71 f4       	brne	.+28     	; 0x53f8 <free+0x8c>
    53dc:	8d 91       	ld	r24, X+
    53de:	9c 91       	ld	r25, X
    53e0:	11 97       	sbiw	r26, 0x01	; 1
    53e2:	84 0f       	add	r24, r20
    53e4:	95 1f       	adc	r25, r21
    53e6:	02 96       	adiw	r24, 0x02	; 2
    53e8:	91 83       	std	Z+1, r25	; 0x01
    53ea:	80 83       	st	Z, r24
    53ec:	12 96       	adiw	r26, 0x02	; 2
    53ee:	8d 91       	ld	r24, X+
    53f0:	9c 91       	ld	r25, X
    53f2:	13 97       	sbiw	r26, 0x03	; 3
    53f4:	93 83       	std	Z+3, r25	; 0x03
    53f6:	82 83       	std	Z+2, r24	; 0x02
    53f8:	21 15       	cp	r18, r1
    53fa:	31 05       	cpc	r19, r1
    53fc:	29 f4       	brne	.+10     	; 0x5408 <free+0x9c>
    53fe:	f0 93 f4 06 	sts	0x06F4, r31
    5402:	e0 93 f3 06 	sts	0x06F3, r30
    5406:	3e c0       	rjmp	.+124    	; 0x5484 <free+0x118>
    5408:	d9 01       	movw	r26, r18
    540a:	13 96       	adiw	r26, 0x03	; 3
    540c:	fc 93       	st	X, r31
    540e:	ee 93       	st	-X, r30
    5410:	12 97       	sbiw	r26, 0x02	; 2
    5412:	4d 91       	ld	r20, X+
    5414:	5d 91       	ld	r21, X+
    5416:	a4 0f       	add	r26, r20
    5418:	b5 1f       	adc	r27, r21
    541a:	ea 17       	cp	r30, r26
    541c:	fb 07       	cpc	r31, r27
    541e:	79 f4       	brne	.+30     	; 0x543e <free+0xd2>
    5420:	80 81       	ld	r24, Z
    5422:	91 81       	ldd	r25, Z+1	; 0x01
    5424:	84 0f       	add	r24, r20
    5426:	95 1f       	adc	r25, r21
    5428:	02 96       	adiw	r24, 0x02	; 2
    542a:	d9 01       	movw	r26, r18
    542c:	11 96       	adiw	r26, 0x01	; 1
    542e:	9c 93       	st	X, r25
    5430:	8e 93       	st	-X, r24
    5432:	82 81       	ldd	r24, Z+2	; 0x02
    5434:	93 81       	ldd	r25, Z+3	; 0x03
    5436:	13 96       	adiw	r26, 0x03	; 3
    5438:	9c 93       	st	X, r25
    543a:	8e 93       	st	-X, r24
    543c:	12 97       	sbiw	r26, 0x02	; 2
    543e:	e0 e0       	ldi	r30, 0x00	; 0
    5440:	f0 e0       	ldi	r31, 0x00	; 0
    5442:	8a 81       	ldd	r24, Y+2	; 0x02
    5444:	9b 81       	ldd	r25, Y+3	; 0x03
    5446:	00 97       	sbiw	r24, 0x00	; 0
    5448:	19 f0       	breq	.+6      	; 0x5450 <free+0xe4>
    544a:	fe 01       	movw	r30, r28
    544c:	ec 01       	movw	r28, r24
    544e:	f9 cf       	rjmp	.-14     	; 0x5442 <free+0xd6>
    5450:	ce 01       	movw	r24, r28
    5452:	02 96       	adiw	r24, 0x02	; 2
    5454:	28 81       	ld	r18, Y
    5456:	39 81       	ldd	r19, Y+1	; 0x01
    5458:	82 0f       	add	r24, r18
    545a:	93 1f       	adc	r25, r19
    545c:	20 91 f1 06 	lds	r18, 0x06F1
    5460:	30 91 f2 06 	lds	r19, 0x06F2
    5464:	28 17       	cp	r18, r24
    5466:	39 07       	cpc	r19, r25
    5468:	69 f4       	brne	.+26     	; 0x5484 <free+0x118>
    546a:	30 97       	sbiw	r30, 0x00	; 0
    546c:	29 f4       	brne	.+10     	; 0x5478 <free+0x10c>
    546e:	10 92 f4 06 	sts	0x06F4, r1
    5472:	10 92 f3 06 	sts	0x06F3, r1
    5476:	02 c0       	rjmp	.+4      	; 0x547c <free+0x110>
    5478:	13 82       	std	Z+3, r1	; 0x03
    547a:	12 82       	std	Z+2, r1	; 0x02
    547c:	d0 93 f2 06 	sts	0x06F2, r29
    5480:	c0 93 f1 06 	sts	0x06F1, r28
    5484:	df 91       	pop	r29
    5486:	cf 91       	pop	r28
    5488:	08 95       	ret

0000548a <abort>:
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	f8 94       	cli
    5490:	0c 94 ba 2e 	jmp	0x5d74	; 0x5d74 <_exit>

00005494 <atoi>:
    5494:	fc 01       	movw	r30, r24
    5496:	88 27       	eor	r24, r24
    5498:	99 27       	eor	r25, r25
    549a:	e8 94       	clt
    549c:	21 91       	ld	r18, Z+
    549e:	20 32       	cpi	r18, 0x20	; 32
    54a0:	e9 f3       	breq	.-6      	; 0x549c <atoi+0x8>
    54a2:	29 30       	cpi	r18, 0x09	; 9
    54a4:	10 f0       	brcs	.+4      	; 0x54aa <atoi+0x16>
    54a6:	2e 30       	cpi	r18, 0x0E	; 14
    54a8:	c8 f3       	brcs	.-14     	; 0x549c <atoi+0x8>
    54aa:	2b 32       	cpi	r18, 0x2B	; 43
    54ac:	41 f0       	breq	.+16     	; 0x54be <atoi+0x2a>
    54ae:	2d 32       	cpi	r18, 0x2D	; 45
    54b0:	39 f4       	brne	.+14     	; 0x54c0 <atoi+0x2c>
    54b2:	68 94       	set
    54b4:	04 c0       	rjmp	.+8      	; 0x54be <atoi+0x2a>
    54b6:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <__mulhi_const_10>
    54ba:	82 0f       	add	r24, r18
    54bc:	91 1d       	adc	r25, r1
    54be:	21 91       	ld	r18, Z+
    54c0:	20 53       	subi	r18, 0x30	; 48
    54c2:	2a 30       	cpi	r18, 0x0A	; 10
    54c4:	c0 f3       	brcs	.-16     	; 0x54b6 <atoi+0x22>
    54c6:	1e f4       	brtc	.+6      	; 0x54ce <atoi+0x3a>
    54c8:	90 95       	com	r25
    54ca:	81 95       	neg	r24
    54cc:	9f 4f       	sbci	r25, 0xFF	; 255
    54ce:	08 95       	ret

000054d0 <strncpy_P>:
    54d0:	fb 01       	movw	r30, r22
    54d2:	dc 01       	movw	r26, r24
    54d4:	41 50       	subi	r20, 0x01	; 1
    54d6:	50 40       	sbci	r21, 0x00	; 0
    54d8:	48 f0       	brcs	.+18     	; 0x54ec <strncpy_P+0x1c>
    54da:	05 90       	lpm	r0, Z+
    54dc:	0d 92       	st	X+, r0
    54de:	00 20       	and	r0, r0
    54e0:	c9 f7       	brne	.-14     	; 0x54d4 <strncpy_P+0x4>
    54e2:	01 c0       	rjmp	.+2      	; 0x54e6 <strncpy_P+0x16>
    54e4:	1d 92       	st	X+, r1
    54e6:	41 50       	subi	r20, 0x01	; 1
    54e8:	50 40       	sbci	r21, 0x00	; 0
    54ea:	e0 f7       	brcc	.-8      	; 0x54e4 <strncpy_P+0x14>
    54ec:	08 95       	ret

000054ee <strtok>:
    54ee:	49 e3       	ldi	r20, 0x39	; 57
    54f0:	53 e0       	ldi	r21, 0x03	; 3
    54f2:	0e 94 c9 2a 	call	0x5592	; 0x5592 <strtok_r>
    54f6:	08 95       	ret

000054f8 <memcmp>:
    54f8:	fb 01       	movw	r30, r22
    54fa:	dc 01       	movw	r26, r24
    54fc:	04 c0       	rjmp	.+8      	; 0x5506 <memcmp+0xe>
    54fe:	8d 91       	ld	r24, X+
    5500:	01 90       	ld	r0, Z+
    5502:	80 19       	sub	r24, r0
    5504:	21 f4       	brne	.+8      	; 0x550e <memcmp+0x16>
    5506:	41 50       	subi	r20, 0x01	; 1
    5508:	50 40       	sbci	r21, 0x00	; 0
    550a:	c8 f7       	brcc	.-14     	; 0x54fe <memcmp+0x6>
    550c:	88 1b       	sub	r24, r24
    550e:	99 0b       	sbc	r25, r25
    5510:	08 95       	ret

00005512 <strcpy>:
    5512:	fb 01       	movw	r30, r22
    5514:	dc 01       	movw	r26, r24
    5516:	01 90       	ld	r0, Z+
    5518:	0d 92       	st	X+, r0
    551a:	00 20       	and	r0, r0
    551c:	e1 f7       	brne	.-8      	; 0x5516 <strcpy+0x4>
    551e:	08 95       	ret

00005520 <strncat>:
    5520:	fb 01       	movw	r30, r22
    5522:	dc 01       	movw	r26, r24
    5524:	0d 90       	ld	r0, X+
    5526:	00 20       	and	r0, r0
    5528:	e9 f7       	brne	.-6      	; 0x5524 <strncat+0x4>
    552a:	11 97       	sbiw	r26, 0x01	; 1
    552c:	41 50       	subi	r20, 0x01	; 1
    552e:	50 40       	sbci	r21, 0x00	; 0
    5530:	28 f0       	brcs	.+10     	; 0x553c <strncat+0x1c>
    5532:	01 90       	ld	r0, Z+
    5534:	00 20       	and	r0, r0
    5536:	0d 92       	st	X+, r0
    5538:	c9 f7       	brne	.-14     	; 0x552c <strncat+0xc>
    553a:	08 95       	ret
    553c:	1c 92       	st	X, r1
    553e:	08 95       	ret

00005540 <strncpy>:
    5540:	fb 01       	movw	r30, r22
    5542:	dc 01       	movw	r26, r24
    5544:	41 50       	subi	r20, 0x01	; 1
    5546:	50 40       	sbci	r21, 0x00	; 0
    5548:	48 f0       	brcs	.+18     	; 0x555c <strncpy+0x1c>
    554a:	01 90       	ld	r0, Z+
    554c:	0d 92       	st	X+, r0
    554e:	00 20       	and	r0, r0
    5550:	c9 f7       	brne	.-14     	; 0x5544 <strncpy+0x4>
    5552:	01 c0       	rjmp	.+2      	; 0x5556 <strncpy+0x16>
    5554:	1d 92       	st	X+, r1
    5556:	41 50       	subi	r20, 0x01	; 1
    5558:	50 40       	sbci	r21, 0x00	; 0
    555a:	e0 f7       	brcc	.-8      	; 0x5554 <strncpy+0x14>
    555c:	08 95       	ret

0000555e <strstr>:
    555e:	fb 01       	movw	r30, r22
    5560:	51 91       	ld	r21, Z+
    5562:	55 23       	and	r21, r21
    5564:	a9 f0       	breq	.+42     	; 0x5590 <strstr+0x32>
    5566:	bf 01       	movw	r22, r30
    5568:	dc 01       	movw	r26, r24
    556a:	4d 91       	ld	r20, X+
    556c:	45 17       	cp	r20, r21
    556e:	41 11       	cpse	r20, r1
    5570:	e1 f7       	brne	.-8      	; 0x556a <strstr+0xc>
    5572:	59 f4       	brne	.+22     	; 0x558a <strstr+0x2c>
    5574:	cd 01       	movw	r24, r26
    5576:	01 90       	ld	r0, Z+
    5578:	00 20       	and	r0, r0
    557a:	49 f0       	breq	.+18     	; 0x558e <strstr+0x30>
    557c:	4d 91       	ld	r20, X+
    557e:	40 15       	cp	r20, r0
    5580:	41 11       	cpse	r20, r1
    5582:	c9 f3       	breq	.-14     	; 0x5576 <strstr+0x18>
    5584:	fb 01       	movw	r30, r22
    5586:	41 11       	cpse	r20, r1
    5588:	ef cf       	rjmp	.-34     	; 0x5568 <strstr+0xa>
    558a:	81 e0       	ldi	r24, 0x01	; 1
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	01 97       	sbiw	r24, 0x01	; 1
    5590:	08 95       	ret

00005592 <strtok_r>:
    5592:	fa 01       	movw	r30, r20
    5594:	a1 91       	ld	r26, Z+
    5596:	b0 81       	ld	r27, Z
    5598:	00 97       	sbiw	r24, 0x00	; 0
    559a:	19 f4       	brne	.+6      	; 0x55a2 <strtok_r+0x10>
    559c:	10 97       	sbiw	r26, 0x00	; 0
    559e:	e1 f0       	breq	.+56     	; 0x55d8 <strtok_r+0x46>
    55a0:	cd 01       	movw	r24, r26
    55a2:	dc 01       	movw	r26, r24
    55a4:	cd 01       	movw	r24, r26
    55a6:	0d 90       	ld	r0, X+
    55a8:	00 20       	and	r0, r0
    55aa:	11 f4       	brne	.+4      	; 0x55b0 <strtok_r+0x1e>
    55ac:	c0 01       	movw	r24, r0
    55ae:	13 c0       	rjmp	.+38     	; 0x55d6 <strtok_r+0x44>
    55b0:	fb 01       	movw	r30, r22
    55b2:	21 91       	ld	r18, Z+
    55b4:	22 23       	and	r18, r18
    55b6:	19 f0       	breq	.+6      	; 0x55be <strtok_r+0x2c>
    55b8:	20 15       	cp	r18, r0
    55ba:	d9 f7       	brne	.-10     	; 0x55b2 <strtok_r+0x20>
    55bc:	f3 cf       	rjmp	.-26     	; 0x55a4 <strtok_r+0x12>
    55be:	fb 01       	movw	r30, r22
    55c0:	21 91       	ld	r18, Z+
    55c2:	20 15       	cp	r18, r0
    55c4:	19 f4       	brne	.+6      	; 0x55cc <strtok_r+0x3a>
    55c6:	1e 92       	st	-X, r1
    55c8:	11 96       	adiw	r26, 0x01	; 1
    55ca:	06 c0       	rjmp	.+12     	; 0x55d8 <strtok_r+0x46>
    55cc:	22 23       	and	r18, r18
    55ce:	c1 f7       	brne	.-16     	; 0x55c0 <strtok_r+0x2e>
    55d0:	0d 90       	ld	r0, X+
    55d2:	00 20       	and	r0, r0
    55d4:	a1 f7       	brne	.-24     	; 0x55be <strtok_r+0x2c>
    55d6:	d0 01       	movw	r26, r0
    55d8:	fa 01       	movw	r30, r20
    55da:	a1 93       	st	Z+, r26
    55dc:	b0 83       	st	Z, r27
    55de:	08 95       	ret

000055e0 <__itoa_ncheck>:
    55e0:	bb 27       	eor	r27, r27
    55e2:	4a 30       	cpi	r20, 0x0A	; 10
    55e4:	31 f4       	brne	.+12     	; 0x55f2 <__itoa_ncheck+0x12>
    55e6:	99 23       	and	r25, r25
    55e8:	22 f4       	brpl	.+8      	; 0x55f2 <__itoa_ncheck+0x12>
    55ea:	bd e2       	ldi	r27, 0x2D	; 45
    55ec:	90 95       	com	r25
    55ee:	81 95       	neg	r24
    55f0:	9f 4f       	sbci	r25, 0xFF	; 255
    55f2:	0c 94 04 2b 	jmp	0x5608	; 0x5608 <__utoa_common>

000055f6 <__mulhi_const_10>:
    55f6:	7a e0       	ldi	r23, 0x0A	; 10
    55f8:	97 9f       	mul	r25, r23
    55fa:	90 2d       	mov	r25, r0
    55fc:	87 9f       	mul	r24, r23
    55fe:	80 2d       	mov	r24, r0
    5600:	91 0d       	add	r25, r1
    5602:	11 24       	eor	r1, r1
    5604:	08 95       	ret

00005606 <__utoa_ncheck>:
    5606:	bb 27       	eor	r27, r27

00005608 <__utoa_common>:
    5608:	fb 01       	movw	r30, r22
    560a:	55 27       	eor	r21, r21
    560c:	aa 27       	eor	r26, r26
    560e:	88 0f       	add	r24, r24
    5610:	99 1f       	adc	r25, r25
    5612:	aa 1f       	adc	r26, r26
    5614:	a4 17       	cp	r26, r20
    5616:	10 f0       	brcs	.+4      	; 0x561c <__utoa_common+0x14>
    5618:	a4 1b       	sub	r26, r20
    561a:	83 95       	inc	r24
    561c:	50 51       	subi	r21, 0x10	; 16
    561e:	b9 f7       	brne	.-18     	; 0x560e <__utoa_common+0x6>
    5620:	a0 5d       	subi	r26, 0xD0	; 208
    5622:	aa 33       	cpi	r26, 0x3A	; 58
    5624:	08 f0       	brcs	.+2      	; 0x5628 <__utoa_common+0x20>
    5626:	a9 5d       	subi	r26, 0xD9	; 217
    5628:	a1 93       	st	Z+, r26
    562a:	00 97       	sbiw	r24, 0x00	; 0
    562c:	79 f7       	brne	.-34     	; 0x560c <__utoa_common+0x4>
    562e:	b1 11       	cpse	r27, r1
    5630:	b1 93       	st	Z+, r27
    5632:	11 92       	st	Z+, r1
    5634:	cb 01       	movw	r24, r22
    5636:	0c 94 e3 2d 	jmp	0x5bc6	; 0x5bc6 <strrev>

0000563a <printf>:
    563a:	a0 e0       	ldi	r26, 0x00	; 0
    563c:	b0 e0       	ldi	r27, 0x00	; 0
    563e:	e3 e2       	ldi	r30, 0x23	; 35
    5640:	fb e2       	ldi	r31, 0x2B	; 43
    5642:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__prologue_saves__+0x20>
    5646:	fe 01       	movw	r30, r28
    5648:	35 96       	adiw	r30, 0x05	; 5
    564a:	61 91       	ld	r22, Z+
    564c:	71 91       	ld	r23, Z+
    564e:	af 01       	movw	r20, r30
    5650:	80 91 f7 06 	lds	r24, 0x06F7
    5654:	90 91 f8 06 	lds	r25, 0x06F8
    5658:	0e 94 a9 2b 	call	0x5752	; 0x5752 <vfprintf>
    565c:	e2 e0       	ldi	r30, 0x02	; 2
    565e:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__epilogue_restores__+0x20>

00005662 <printf_P>:
    5662:	a0 e0       	ldi	r26, 0x00	; 0
    5664:	b0 e0       	ldi	r27, 0x00	; 0
    5666:	e7 e3       	ldi	r30, 0x37	; 55
    5668:	fb e2       	ldi	r31, 0x2B	; 43
    566a:	0c 94 91 2e 	jmp	0x5d22	; 0x5d22 <__prologue_saves__+0x1c>
    566e:	fe 01       	movw	r30, r28
    5670:	37 96       	adiw	r30, 0x07	; 7
    5672:	61 91       	ld	r22, Z+
    5674:	71 91       	ld	r23, Z+
    5676:	07 ef       	ldi	r16, 0xF7	; 247
    5678:	16 e0       	ldi	r17, 0x06	; 6
    567a:	d8 01       	movw	r26, r16
    567c:	8d 91       	ld	r24, X+
    567e:	9c 91       	ld	r25, X
    5680:	dc 01       	movw	r26, r24
    5682:	13 96       	adiw	r26, 0x03	; 3
    5684:	2c 91       	ld	r18, X
    5686:	13 97       	sbiw	r26, 0x03	; 3
    5688:	28 60       	ori	r18, 0x08	; 8
    568a:	13 96       	adiw	r26, 0x03	; 3
    568c:	2c 93       	st	X, r18
    568e:	af 01       	movw	r20, r30
    5690:	0e 94 a9 2b 	call	0x5752	; 0x5752 <vfprintf>
    5694:	d8 01       	movw	r26, r16
    5696:	ed 91       	ld	r30, X+
    5698:	fc 91       	ld	r31, X
    569a:	23 81       	ldd	r18, Z+3	; 0x03
    569c:	27 7f       	andi	r18, 0xF7	; 247
    569e:	23 83       	std	Z+3, r18	; 0x03
    56a0:	e4 e0       	ldi	r30, 0x04	; 4
    56a2:	0c 94 ad 2e 	jmp	0x5d5a	; 0x5d5a <__epilogue_restores__+0x1c>

000056a6 <putchar>:
    56a6:	60 91 f7 06 	lds	r22, 0x06F7
    56aa:	70 91 f8 06 	lds	r23, 0x06F8
    56ae:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    56b2:	08 95       	ret

000056b4 <puts>:
    56b4:	0f 93       	push	r16
    56b6:	1f 93       	push	r17
    56b8:	cf 93       	push	r28
    56ba:	df 93       	push	r29
    56bc:	e0 91 f7 06 	lds	r30, 0x06F7
    56c0:	f0 91 f8 06 	lds	r31, 0x06F8
    56c4:	23 81       	ldd	r18, Z+3	; 0x03
    56c6:	21 ff       	sbrs	r18, 1
    56c8:	1b c0       	rjmp	.+54     	; 0x5700 <puts+0x4c>
    56ca:	ec 01       	movw	r28, r24
    56cc:	00 e0       	ldi	r16, 0x00	; 0
    56ce:	10 e0       	ldi	r17, 0x00	; 0
    56d0:	89 91       	ld	r24, Y+
    56d2:	60 91 f7 06 	lds	r22, 0x06F7
    56d6:	70 91 f8 06 	lds	r23, 0x06F8
    56da:	db 01       	movw	r26, r22
    56dc:	18 96       	adiw	r26, 0x08	; 8
    56de:	ed 91       	ld	r30, X+
    56e0:	fc 91       	ld	r31, X
    56e2:	19 97       	sbiw	r26, 0x09	; 9
    56e4:	88 23       	and	r24, r24
    56e6:	31 f0       	breq	.+12     	; 0x56f4 <puts+0x40>
    56e8:	09 95       	icall
    56ea:	89 2b       	or	r24, r25
    56ec:	89 f3       	breq	.-30     	; 0x56d0 <puts+0x1c>
    56ee:	0f ef       	ldi	r16, 0xFF	; 255
    56f0:	1f ef       	ldi	r17, 0xFF	; 255
    56f2:	ee cf       	rjmp	.-36     	; 0x56d0 <puts+0x1c>
    56f4:	8a e0       	ldi	r24, 0x0A	; 10
    56f6:	09 95       	icall
    56f8:	89 2b       	or	r24, r25
    56fa:	11 f4       	brne	.+4      	; 0x5700 <puts+0x4c>
    56fc:	c8 01       	movw	r24, r16
    56fe:	02 c0       	rjmp	.+4      	; 0x5704 <puts+0x50>
    5700:	8f ef       	ldi	r24, 0xFF	; 255
    5702:	9f ef       	ldi	r25, 0xFF	; 255
    5704:	df 91       	pop	r29
    5706:	cf 91       	pop	r28
    5708:	1f 91       	pop	r17
    570a:	0f 91       	pop	r16
    570c:	08 95       	ret

0000570e <sprintf_P>:
    570e:	ae e0       	ldi	r26, 0x0E	; 14
    5710:	b0 e0       	ldi	r27, 0x00	; 0
    5712:	ed e8       	ldi	r30, 0x8D	; 141
    5714:	fb e2       	ldi	r31, 0x2B	; 43
    5716:	0c 94 91 2e 	jmp	0x5d22	; 0x5d22 <__prologue_saves__+0x1c>
    571a:	0d 89       	ldd	r16, Y+21	; 0x15
    571c:	1e 89       	ldd	r17, Y+22	; 0x16
    571e:	8e e0       	ldi	r24, 0x0E	; 14
    5720:	8c 83       	std	Y+4, r24	; 0x04
    5722:	1a 83       	std	Y+2, r17	; 0x02
    5724:	09 83       	std	Y+1, r16	; 0x01
    5726:	8f ef       	ldi	r24, 0xFF	; 255
    5728:	9f e7       	ldi	r25, 0x7F	; 127
    572a:	9e 83       	std	Y+6, r25	; 0x06
    572c:	8d 83       	std	Y+5, r24	; 0x05
    572e:	ae 01       	movw	r20, r28
    5730:	47 5e       	subi	r20, 0xE7	; 231
    5732:	5f 4f       	sbci	r21, 0xFF	; 255
    5734:	6f 89       	ldd	r22, Y+23	; 0x17
    5736:	78 8d       	ldd	r23, Y+24	; 0x18
    5738:	ce 01       	movw	r24, r28
    573a:	01 96       	adiw	r24, 0x01	; 1
    573c:	0e 94 a9 2b 	call	0x5752	; 0x5752 <vfprintf>
    5740:	ef 81       	ldd	r30, Y+7	; 0x07
    5742:	f8 85       	ldd	r31, Y+8	; 0x08
    5744:	e0 0f       	add	r30, r16
    5746:	f1 1f       	adc	r31, r17
    5748:	10 82       	st	Z, r1
    574a:	2e 96       	adiw	r28, 0x0e	; 14
    574c:	e4 e0       	ldi	r30, 0x04	; 4
    574e:	0c 94 ad 2e 	jmp	0x5d5a	; 0x5d5a <__epilogue_restores__+0x1c>

00005752 <vfprintf>:
    5752:	ac e0       	ldi	r26, 0x0C	; 12
    5754:	b0 e0       	ldi	r27, 0x00	; 0
    5756:	ef ea       	ldi	r30, 0xAF	; 175
    5758:	fb e2       	ldi	r31, 0x2B	; 43
    575a:	0c 94 83 2e 	jmp	0x5d06	; 0x5d06 <__prologue_saves__>
    575e:	7c 01       	movw	r14, r24
    5760:	6b 01       	movw	r12, r22
    5762:	8a 01       	movw	r16, r20
    5764:	fc 01       	movw	r30, r24
    5766:	17 82       	std	Z+7, r1	; 0x07
    5768:	16 82       	std	Z+6, r1	; 0x06
    576a:	83 81       	ldd	r24, Z+3	; 0x03
    576c:	81 ff       	sbrs	r24, 1
    576e:	bd c1       	rjmp	.+890    	; 0x5aea <vfprintf+0x398>
    5770:	ce 01       	movw	r24, r28
    5772:	01 96       	adiw	r24, 0x01	; 1
    5774:	4c 01       	movw	r8, r24
    5776:	f7 01       	movw	r30, r14
    5778:	93 81       	ldd	r25, Z+3	; 0x03
    577a:	f6 01       	movw	r30, r12
    577c:	93 fd       	sbrc	r25, 3
    577e:	85 91       	lpm	r24, Z+
    5780:	93 ff       	sbrs	r25, 3
    5782:	81 91       	ld	r24, Z+
    5784:	6f 01       	movw	r12, r30
    5786:	88 23       	and	r24, r24
    5788:	09 f4       	brne	.+2      	; 0x578c <vfprintf+0x3a>
    578a:	ab c1       	rjmp	.+854    	; 0x5ae2 <vfprintf+0x390>
    578c:	85 32       	cpi	r24, 0x25	; 37
    578e:	39 f4       	brne	.+14     	; 0x579e <vfprintf+0x4c>
    5790:	93 fd       	sbrc	r25, 3
    5792:	85 91       	lpm	r24, Z+
    5794:	93 ff       	sbrs	r25, 3
    5796:	81 91       	ld	r24, Z+
    5798:	6f 01       	movw	r12, r30
    579a:	85 32       	cpi	r24, 0x25	; 37
    579c:	29 f4       	brne	.+10     	; 0x57a8 <vfprintf+0x56>
    579e:	b7 01       	movw	r22, r14
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    57a6:	e7 cf       	rjmp	.-50     	; 0x5776 <vfprintf+0x24>
    57a8:	51 2c       	mov	r5, r1
    57aa:	31 2c       	mov	r3, r1
    57ac:	20 e0       	ldi	r18, 0x00	; 0
    57ae:	20 32       	cpi	r18, 0x20	; 32
    57b0:	a0 f4       	brcc	.+40     	; 0x57da <vfprintf+0x88>
    57b2:	8b 32       	cpi	r24, 0x2B	; 43
    57b4:	69 f0       	breq	.+26     	; 0x57d0 <vfprintf+0x7e>
    57b6:	30 f4       	brcc	.+12     	; 0x57c4 <vfprintf+0x72>
    57b8:	80 32       	cpi	r24, 0x20	; 32
    57ba:	59 f0       	breq	.+22     	; 0x57d2 <vfprintf+0x80>
    57bc:	83 32       	cpi	r24, 0x23	; 35
    57be:	69 f4       	brne	.+26     	; 0x57da <vfprintf+0x88>
    57c0:	20 61       	ori	r18, 0x10	; 16
    57c2:	2c c0       	rjmp	.+88     	; 0x581c <vfprintf+0xca>
    57c4:	8d 32       	cpi	r24, 0x2D	; 45
    57c6:	39 f0       	breq	.+14     	; 0x57d6 <vfprintf+0x84>
    57c8:	80 33       	cpi	r24, 0x30	; 48
    57ca:	39 f4       	brne	.+14     	; 0x57da <vfprintf+0x88>
    57cc:	21 60       	ori	r18, 0x01	; 1
    57ce:	26 c0       	rjmp	.+76     	; 0x581c <vfprintf+0xca>
    57d0:	22 60       	ori	r18, 0x02	; 2
    57d2:	24 60       	ori	r18, 0x04	; 4
    57d4:	23 c0       	rjmp	.+70     	; 0x581c <vfprintf+0xca>
    57d6:	28 60       	ori	r18, 0x08	; 8
    57d8:	21 c0       	rjmp	.+66     	; 0x581c <vfprintf+0xca>
    57da:	27 fd       	sbrc	r18, 7
    57dc:	27 c0       	rjmp	.+78     	; 0x582c <vfprintf+0xda>
    57de:	30 ed       	ldi	r19, 0xD0	; 208
    57e0:	38 0f       	add	r19, r24
    57e2:	3a 30       	cpi	r19, 0x0A	; 10
    57e4:	78 f4       	brcc	.+30     	; 0x5804 <vfprintf+0xb2>
    57e6:	26 ff       	sbrs	r18, 6
    57e8:	06 c0       	rjmp	.+12     	; 0x57f6 <vfprintf+0xa4>
    57ea:	fa e0       	ldi	r31, 0x0A	; 10
    57ec:	5f 9e       	mul	r5, r31
    57ee:	30 0d       	add	r19, r0
    57f0:	11 24       	eor	r1, r1
    57f2:	53 2e       	mov	r5, r19
    57f4:	13 c0       	rjmp	.+38     	; 0x581c <vfprintf+0xca>
    57f6:	8a e0       	ldi	r24, 0x0A	; 10
    57f8:	38 9e       	mul	r3, r24
    57fa:	30 0d       	add	r19, r0
    57fc:	11 24       	eor	r1, r1
    57fe:	33 2e       	mov	r3, r19
    5800:	20 62       	ori	r18, 0x20	; 32
    5802:	0c c0       	rjmp	.+24     	; 0x581c <vfprintf+0xca>
    5804:	8e 32       	cpi	r24, 0x2E	; 46
    5806:	21 f4       	brne	.+8      	; 0x5810 <vfprintf+0xbe>
    5808:	26 fd       	sbrc	r18, 6
    580a:	6b c1       	rjmp	.+726    	; 0x5ae2 <vfprintf+0x390>
    580c:	20 64       	ori	r18, 0x40	; 64
    580e:	06 c0       	rjmp	.+12     	; 0x581c <vfprintf+0xca>
    5810:	8c 36       	cpi	r24, 0x6C	; 108
    5812:	11 f4       	brne	.+4      	; 0x5818 <vfprintf+0xc6>
    5814:	20 68       	ori	r18, 0x80	; 128
    5816:	02 c0       	rjmp	.+4      	; 0x581c <vfprintf+0xca>
    5818:	88 36       	cpi	r24, 0x68	; 104
    581a:	41 f4       	brne	.+16     	; 0x582c <vfprintf+0xda>
    581c:	f6 01       	movw	r30, r12
    581e:	93 fd       	sbrc	r25, 3
    5820:	85 91       	lpm	r24, Z+
    5822:	93 ff       	sbrs	r25, 3
    5824:	81 91       	ld	r24, Z+
    5826:	6f 01       	movw	r12, r30
    5828:	81 11       	cpse	r24, r1
    582a:	c1 cf       	rjmp	.-126    	; 0x57ae <vfprintf+0x5c>
    582c:	98 2f       	mov	r25, r24
    582e:	9f 7d       	andi	r25, 0xDF	; 223
    5830:	95 54       	subi	r25, 0x45	; 69
    5832:	93 30       	cpi	r25, 0x03	; 3
    5834:	28 f4       	brcc	.+10     	; 0x5840 <vfprintf+0xee>
    5836:	0c 5f       	subi	r16, 0xFC	; 252
    5838:	1f 4f       	sbci	r17, 0xFF	; 255
    583a:	ff e3       	ldi	r31, 0x3F	; 63
    583c:	f9 83       	std	Y+1, r31	; 0x01
    583e:	0d c0       	rjmp	.+26     	; 0x585a <vfprintf+0x108>
    5840:	83 36       	cpi	r24, 0x63	; 99
    5842:	31 f0       	breq	.+12     	; 0x5850 <vfprintf+0xfe>
    5844:	83 37       	cpi	r24, 0x73	; 115
    5846:	71 f0       	breq	.+28     	; 0x5864 <vfprintf+0x112>
    5848:	83 35       	cpi	r24, 0x53	; 83
    584a:	09 f0       	breq	.+2      	; 0x584e <vfprintf+0xfc>
    584c:	5b c0       	rjmp	.+182    	; 0x5904 <vfprintf+0x1b2>
    584e:	22 c0       	rjmp	.+68     	; 0x5894 <vfprintf+0x142>
    5850:	f8 01       	movw	r30, r16
    5852:	80 81       	ld	r24, Z
    5854:	89 83       	std	Y+1, r24	; 0x01
    5856:	0e 5f       	subi	r16, 0xFE	; 254
    5858:	1f 4f       	sbci	r17, 0xFF	; 255
    585a:	44 24       	eor	r4, r4
    585c:	43 94       	inc	r4
    585e:	51 2c       	mov	r5, r1
    5860:	54 01       	movw	r10, r8
    5862:	15 c0       	rjmp	.+42     	; 0x588e <vfprintf+0x13c>
    5864:	38 01       	movw	r6, r16
    5866:	f2 e0       	ldi	r31, 0x02	; 2
    5868:	6f 0e       	add	r6, r31
    586a:	71 1c       	adc	r7, r1
    586c:	f8 01       	movw	r30, r16
    586e:	a0 80       	ld	r10, Z
    5870:	b1 80       	ldd	r11, Z+1	; 0x01
    5872:	26 ff       	sbrs	r18, 6
    5874:	03 c0       	rjmp	.+6      	; 0x587c <vfprintf+0x12a>
    5876:	65 2d       	mov	r22, r5
    5878:	70 e0       	ldi	r23, 0x00	; 0
    587a:	02 c0       	rjmp	.+4      	; 0x5880 <vfprintf+0x12e>
    587c:	6f ef       	ldi	r22, 0xFF	; 255
    587e:	7f ef       	ldi	r23, 0xFF	; 255
    5880:	c5 01       	movw	r24, r10
    5882:	2c 87       	std	Y+12, r18	; 0x0c
    5884:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <strnlen>
    5888:	2c 01       	movw	r4, r24
    588a:	83 01       	movw	r16, r6
    588c:	2c 85       	ldd	r18, Y+12	; 0x0c
    588e:	2f 77       	andi	r18, 0x7F	; 127
    5890:	22 2e       	mov	r2, r18
    5892:	17 c0       	rjmp	.+46     	; 0x58c2 <vfprintf+0x170>
    5894:	38 01       	movw	r6, r16
    5896:	f2 e0       	ldi	r31, 0x02	; 2
    5898:	6f 0e       	add	r6, r31
    589a:	71 1c       	adc	r7, r1
    589c:	f8 01       	movw	r30, r16
    589e:	a0 80       	ld	r10, Z
    58a0:	b1 80       	ldd	r11, Z+1	; 0x01
    58a2:	26 ff       	sbrs	r18, 6
    58a4:	03 c0       	rjmp	.+6      	; 0x58ac <vfprintf+0x15a>
    58a6:	65 2d       	mov	r22, r5
    58a8:	70 e0       	ldi	r23, 0x00	; 0
    58aa:	02 c0       	rjmp	.+4      	; 0x58b0 <vfprintf+0x15e>
    58ac:	6f ef       	ldi	r22, 0xFF	; 255
    58ae:	7f ef       	ldi	r23, 0xFF	; 255
    58b0:	c5 01       	movw	r24, r10
    58b2:	2c 87       	std	Y+12, r18	; 0x0c
    58b4:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <strnlen_P>
    58b8:	2c 01       	movw	r4, r24
    58ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    58bc:	20 68       	ori	r18, 0x80	; 128
    58be:	22 2e       	mov	r2, r18
    58c0:	83 01       	movw	r16, r6
    58c2:	23 fc       	sbrc	r2, 3
    58c4:	1b c0       	rjmp	.+54     	; 0x58fc <vfprintf+0x1aa>
    58c6:	83 2d       	mov	r24, r3
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	48 16       	cp	r4, r24
    58cc:	59 06       	cpc	r5, r25
    58ce:	b0 f4       	brcc	.+44     	; 0x58fc <vfprintf+0x1aa>
    58d0:	b7 01       	movw	r22, r14
    58d2:	80 e2       	ldi	r24, 0x20	; 32
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    58da:	3a 94       	dec	r3
    58dc:	f4 cf       	rjmp	.-24     	; 0x58c6 <vfprintf+0x174>
    58de:	f5 01       	movw	r30, r10
    58e0:	27 fc       	sbrc	r2, 7
    58e2:	85 91       	lpm	r24, Z+
    58e4:	27 fe       	sbrs	r2, 7
    58e6:	81 91       	ld	r24, Z+
    58e8:	5f 01       	movw	r10, r30
    58ea:	b7 01       	movw	r22, r14
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    58f2:	31 10       	cpse	r3, r1
    58f4:	3a 94       	dec	r3
    58f6:	f1 e0       	ldi	r31, 0x01	; 1
    58f8:	4f 1a       	sub	r4, r31
    58fa:	51 08       	sbc	r5, r1
    58fc:	41 14       	cp	r4, r1
    58fe:	51 04       	cpc	r5, r1
    5900:	71 f7       	brne	.-36     	; 0x58de <vfprintf+0x18c>
    5902:	e5 c0       	rjmp	.+458    	; 0x5ace <vfprintf+0x37c>
    5904:	84 36       	cpi	r24, 0x64	; 100
    5906:	11 f0       	breq	.+4      	; 0x590c <vfprintf+0x1ba>
    5908:	89 36       	cpi	r24, 0x69	; 105
    590a:	39 f5       	brne	.+78     	; 0x595a <vfprintf+0x208>
    590c:	f8 01       	movw	r30, r16
    590e:	27 ff       	sbrs	r18, 7
    5910:	07 c0       	rjmp	.+14     	; 0x5920 <vfprintf+0x1ce>
    5912:	60 81       	ld	r22, Z
    5914:	71 81       	ldd	r23, Z+1	; 0x01
    5916:	82 81       	ldd	r24, Z+2	; 0x02
    5918:	93 81       	ldd	r25, Z+3	; 0x03
    591a:	0c 5f       	subi	r16, 0xFC	; 252
    591c:	1f 4f       	sbci	r17, 0xFF	; 255
    591e:	08 c0       	rjmp	.+16     	; 0x5930 <vfprintf+0x1de>
    5920:	60 81       	ld	r22, Z
    5922:	71 81       	ldd	r23, Z+1	; 0x01
    5924:	88 27       	eor	r24, r24
    5926:	77 fd       	sbrc	r23, 7
    5928:	80 95       	com	r24
    592a:	98 2f       	mov	r25, r24
    592c:	0e 5f       	subi	r16, 0xFE	; 254
    592e:	1f 4f       	sbci	r17, 0xFF	; 255
    5930:	2f 76       	andi	r18, 0x6F	; 111
    5932:	b2 2e       	mov	r11, r18
    5934:	97 ff       	sbrs	r25, 7
    5936:	09 c0       	rjmp	.+18     	; 0x594a <vfprintf+0x1f8>
    5938:	90 95       	com	r25
    593a:	80 95       	com	r24
    593c:	70 95       	com	r23
    593e:	61 95       	neg	r22
    5940:	7f 4f       	sbci	r23, 0xFF	; 255
    5942:	8f 4f       	sbci	r24, 0xFF	; 255
    5944:	9f 4f       	sbci	r25, 0xFF	; 255
    5946:	20 68       	ori	r18, 0x80	; 128
    5948:	b2 2e       	mov	r11, r18
    594a:	2a e0       	ldi	r18, 0x0A	; 10
    594c:	30 e0       	ldi	r19, 0x00	; 0
    594e:	a4 01       	movw	r20, r8
    5950:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <__ultoa_invert>
    5954:	a8 2e       	mov	r10, r24
    5956:	a8 18       	sub	r10, r8
    5958:	44 c0       	rjmp	.+136    	; 0x59e2 <vfprintf+0x290>
    595a:	85 37       	cpi	r24, 0x75	; 117
    595c:	29 f4       	brne	.+10     	; 0x5968 <vfprintf+0x216>
    595e:	2f 7e       	andi	r18, 0xEF	; 239
    5960:	b2 2e       	mov	r11, r18
    5962:	2a e0       	ldi	r18, 0x0A	; 10
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	25 c0       	rjmp	.+74     	; 0x59b2 <vfprintf+0x260>
    5968:	f2 2f       	mov	r31, r18
    596a:	f9 7f       	andi	r31, 0xF9	; 249
    596c:	bf 2e       	mov	r11, r31
    596e:	8f 36       	cpi	r24, 0x6F	; 111
    5970:	c1 f0       	breq	.+48     	; 0x59a2 <vfprintf+0x250>
    5972:	18 f4       	brcc	.+6      	; 0x597a <vfprintf+0x228>
    5974:	88 35       	cpi	r24, 0x58	; 88
    5976:	79 f0       	breq	.+30     	; 0x5996 <vfprintf+0x244>
    5978:	b4 c0       	rjmp	.+360    	; 0x5ae2 <vfprintf+0x390>
    597a:	80 37       	cpi	r24, 0x70	; 112
    597c:	19 f0       	breq	.+6      	; 0x5984 <vfprintf+0x232>
    597e:	88 37       	cpi	r24, 0x78	; 120
    5980:	21 f0       	breq	.+8      	; 0x598a <vfprintf+0x238>
    5982:	af c0       	rjmp	.+350    	; 0x5ae2 <vfprintf+0x390>
    5984:	2f 2f       	mov	r18, r31
    5986:	20 61       	ori	r18, 0x10	; 16
    5988:	b2 2e       	mov	r11, r18
    598a:	b4 fe       	sbrs	r11, 4
    598c:	0d c0       	rjmp	.+26     	; 0x59a8 <vfprintf+0x256>
    598e:	8b 2d       	mov	r24, r11
    5990:	84 60       	ori	r24, 0x04	; 4
    5992:	b8 2e       	mov	r11, r24
    5994:	09 c0       	rjmp	.+18     	; 0x59a8 <vfprintf+0x256>
    5996:	24 ff       	sbrs	r18, 4
    5998:	0a c0       	rjmp	.+20     	; 0x59ae <vfprintf+0x25c>
    599a:	9f 2f       	mov	r25, r31
    599c:	96 60       	ori	r25, 0x06	; 6
    599e:	b9 2e       	mov	r11, r25
    59a0:	06 c0       	rjmp	.+12     	; 0x59ae <vfprintf+0x25c>
    59a2:	28 e0       	ldi	r18, 0x08	; 8
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	05 c0       	rjmp	.+10     	; 0x59b2 <vfprintf+0x260>
    59a8:	20 e1       	ldi	r18, 0x10	; 16
    59aa:	30 e0       	ldi	r19, 0x00	; 0
    59ac:	02 c0       	rjmp	.+4      	; 0x59b2 <vfprintf+0x260>
    59ae:	20 e1       	ldi	r18, 0x10	; 16
    59b0:	32 e0       	ldi	r19, 0x02	; 2
    59b2:	f8 01       	movw	r30, r16
    59b4:	b7 fe       	sbrs	r11, 7
    59b6:	07 c0       	rjmp	.+14     	; 0x59c6 <vfprintf+0x274>
    59b8:	60 81       	ld	r22, Z
    59ba:	71 81       	ldd	r23, Z+1	; 0x01
    59bc:	82 81       	ldd	r24, Z+2	; 0x02
    59be:	93 81       	ldd	r25, Z+3	; 0x03
    59c0:	0c 5f       	subi	r16, 0xFC	; 252
    59c2:	1f 4f       	sbci	r17, 0xFF	; 255
    59c4:	06 c0       	rjmp	.+12     	; 0x59d2 <vfprintf+0x280>
    59c6:	60 81       	ld	r22, Z
    59c8:	71 81       	ldd	r23, Z+1	; 0x01
    59ca:	80 e0       	ldi	r24, 0x00	; 0
    59cc:	90 e0       	ldi	r25, 0x00	; 0
    59ce:	0e 5f       	subi	r16, 0xFE	; 254
    59d0:	1f 4f       	sbci	r17, 0xFF	; 255
    59d2:	a4 01       	movw	r20, r8
    59d4:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <__ultoa_invert>
    59d8:	a8 2e       	mov	r10, r24
    59da:	a8 18       	sub	r10, r8
    59dc:	fb 2d       	mov	r31, r11
    59de:	ff 77       	andi	r31, 0x7F	; 127
    59e0:	bf 2e       	mov	r11, r31
    59e2:	b6 fe       	sbrs	r11, 6
    59e4:	0b c0       	rjmp	.+22     	; 0x59fc <vfprintf+0x2aa>
    59e6:	2b 2d       	mov	r18, r11
    59e8:	2e 7f       	andi	r18, 0xFE	; 254
    59ea:	a5 14       	cp	r10, r5
    59ec:	50 f4       	brcc	.+20     	; 0x5a02 <vfprintf+0x2b0>
    59ee:	b4 fe       	sbrs	r11, 4
    59f0:	0a c0       	rjmp	.+20     	; 0x5a06 <vfprintf+0x2b4>
    59f2:	b2 fc       	sbrc	r11, 2
    59f4:	08 c0       	rjmp	.+16     	; 0x5a06 <vfprintf+0x2b4>
    59f6:	2b 2d       	mov	r18, r11
    59f8:	2e 7e       	andi	r18, 0xEE	; 238
    59fa:	05 c0       	rjmp	.+10     	; 0x5a06 <vfprintf+0x2b4>
    59fc:	7a 2c       	mov	r7, r10
    59fe:	2b 2d       	mov	r18, r11
    5a00:	03 c0       	rjmp	.+6      	; 0x5a08 <vfprintf+0x2b6>
    5a02:	7a 2c       	mov	r7, r10
    5a04:	01 c0       	rjmp	.+2      	; 0x5a08 <vfprintf+0x2b6>
    5a06:	75 2c       	mov	r7, r5
    5a08:	24 ff       	sbrs	r18, 4
    5a0a:	0d c0       	rjmp	.+26     	; 0x5a26 <vfprintf+0x2d4>
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	ea 0d       	add	r30, r10
    5a10:	f1 1d       	adc	r31, r1
    5a12:	80 81       	ld	r24, Z
    5a14:	80 33       	cpi	r24, 0x30	; 48
    5a16:	11 f4       	brne	.+4      	; 0x5a1c <vfprintf+0x2ca>
    5a18:	29 7e       	andi	r18, 0xE9	; 233
    5a1a:	09 c0       	rjmp	.+18     	; 0x5a2e <vfprintf+0x2dc>
    5a1c:	22 ff       	sbrs	r18, 2
    5a1e:	06 c0       	rjmp	.+12     	; 0x5a2c <vfprintf+0x2da>
    5a20:	73 94       	inc	r7
    5a22:	73 94       	inc	r7
    5a24:	04 c0       	rjmp	.+8      	; 0x5a2e <vfprintf+0x2dc>
    5a26:	82 2f       	mov	r24, r18
    5a28:	86 78       	andi	r24, 0x86	; 134
    5a2a:	09 f0       	breq	.+2      	; 0x5a2e <vfprintf+0x2dc>
    5a2c:	73 94       	inc	r7
    5a2e:	23 fd       	sbrc	r18, 3
    5a30:	13 c0       	rjmp	.+38     	; 0x5a58 <vfprintf+0x306>
    5a32:	20 ff       	sbrs	r18, 0
    5a34:	06 c0       	rjmp	.+12     	; 0x5a42 <vfprintf+0x2f0>
    5a36:	5a 2c       	mov	r5, r10
    5a38:	73 14       	cp	r7, r3
    5a3a:	18 f4       	brcc	.+6      	; 0x5a42 <vfprintf+0x2f0>
    5a3c:	53 0c       	add	r5, r3
    5a3e:	57 18       	sub	r5, r7
    5a40:	73 2c       	mov	r7, r3
    5a42:	73 14       	cp	r7, r3
    5a44:	68 f4       	brcc	.+26     	; 0x5a60 <vfprintf+0x30e>
    5a46:	b7 01       	movw	r22, r14
    5a48:	80 e2       	ldi	r24, 0x20	; 32
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	2c 87       	std	Y+12, r18	; 0x0c
    5a4e:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    5a52:	73 94       	inc	r7
    5a54:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a56:	f5 cf       	rjmp	.-22     	; 0x5a42 <vfprintf+0x2f0>
    5a58:	73 14       	cp	r7, r3
    5a5a:	10 f4       	brcc	.+4      	; 0x5a60 <vfprintf+0x30e>
    5a5c:	37 18       	sub	r3, r7
    5a5e:	01 c0       	rjmp	.+2      	; 0x5a62 <vfprintf+0x310>
    5a60:	31 2c       	mov	r3, r1
    5a62:	24 ff       	sbrs	r18, 4
    5a64:	12 c0       	rjmp	.+36     	; 0x5a8a <vfprintf+0x338>
    5a66:	b7 01       	movw	r22, r14
    5a68:	80 e3       	ldi	r24, 0x30	; 48
    5a6a:	90 e0       	ldi	r25, 0x00	; 0
    5a6c:	2c 87       	std	Y+12, r18	; 0x0c
    5a6e:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    5a72:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a74:	22 ff       	sbrs	r18, 2
    5a76:	17 c0       	rjmp	.+46     	; 0x5aa6 <vfprintf+0x354>
    5a78:	21 ff       	sbrs	r18, 1
    5a7a:	03 c0       	rjmp	.+6      	; 0x5a82 <vfprintf+0x330>
    5a7c:	88 e5       	ldi	r24, 0x58	; 88
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	02 c0       	rjmp	.+4      	; 0x5a86 <vfprintf+0x334>
    5a82:	88 e7       	ldi	r24, 0x78	; 120
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	b7 01       	movw	r22, r14
    5a88:	0c c0       	rjmp	.+24     	; 0x5aa2 <vfprintf+0x350>
    5a8a:	82 2f       	mov	r24, r18
    5a8c:	86 78       	andi	r24, 0x86	; 134
    5a8e:	59 f0       	breq	.+22     	; 0x5aa6 <vfprintf+0x354>
    5a90:	21 fd       	sbrc	r18, 1
    5a92:	02 c0       	rjmp	.+4      	; 0x5a98 <vfprintf+0x346>
    5a94:	80 e2       	ldi	r24, 0x20	; 32
    5a96:	01 c0       	rjmp	.+2      	; 0x5a9a <vfprintf+0x348>
    5a98:	8b e2       	ldi	r24, 0x2B	; 43
    5a9a:	27 fd       	sbrc	r18, 7
    5a9c:	8d e2       	ldi	r24, 0x2D	; 45
    5a9e:	b7 01       	movw	r22, r14
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    5aa6:	a5 14       	cp	r10, r5
    5aa8:	38 f4       	brcc	.+14     	; 0x5ab8 <vfprintf+0x366>
    5aaa:	b7 01       	movw	r22, r14
    5aac:	80 e3       	ldi	r24, 0x30	; 48
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    5ab4:	5a 94       	dec	r5
    5ab6:	f7 cf       	rjmp	.-18     	; 0x5aa6 <vfprintf+0x354>
    5ab8:	aa 94       	dec	r10
    5aba:	f4 01       	movw	r30, r8
    5abc:	ea 0d       	add	r30, r10
    5abe:	f1 1d       	adc	r31, r1
    5ac0:	80 81       	ld	r24, Z
    5ac2:	b7 01       	movw	r22, r14
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    5aca:	a1 10       	cpse	r10, r1
    5acc:	f5 cf       	rjmp	.-22     	; 0x5ab8 <vfprintf+0x366>
    5ace:	33 20       	and	r3, r3
    5ad0:	09 f4       	brne	.+2      	; 0x5ad4 <vfprintf+0x382>
    5ad2:	51 ce       	rjmp	.-862    	; 0x5776 <vfprintf+0x24>
    5ad4:	b7 01       	movw	r22, r14
    5ad6:	80 e2       	ldi	r24, 0x20	; 32
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <fputc>
    5ade:	3a 94       	dec	r3
    5ae0:	f6 cf       	rjmp	.-20     	; 0x5ace <vfprintf+0x37c>
    5ae2:	f7 01       	movw	r30, r14
    5ae4:	86 81       	ldd	r24, Z+6	; 0x06
    5ae6:	97 81       	ldd	r25, Z+7	; 0x07
    5ae8:	02 c0       	rjmp	.+4      	; 0x5aee <vfprintf+0x39c>
    5aea:	8f ef       	ldi	r24, 0xFF	; 255
    5aec:	9f ef       	ldi	r25, 0xFF	; 255
    5aee:	2c 96       	adiw	r28, 0x0c	; 12
    5af0:	e2 e1       	ldi	r30, 0x12	; 18
    5af2:	0c 94 9f 2e 	jmp	0x5d3e	; 0x5d3e <__epilogue_restores__>

00005af6 <__eerd_block_m328p>:
    5af6:	dc 01       	movw	r26, r24
    5af8:	cb 01       	movw	r24, r22

00005afa <__eerd_blraw_m328p>:
    5afa:	fc 01       	movw	r30, r24
    5afc:	f9 99       	sbic	0x1f, 1	; 31
    5afe:	fe cf       	rjmp	.-4      	; 0x5afc <__eerd_blraw_m328p+0x2>
    5b00:	06 c0       	rjmp	.+12     	; 0x5b0e <__eerd_blraw_m328p+0x14>
    5b02:	f2 bd       	out	0x22, r31	; 34
    5b04:	e1 bd       	out	0x21, r30	; 33
    5b06:	f8 9a       	sbi	0x1f, 0	; 31
    5b08:	31 96       	adiw	r30, 0x01	; 1
    5b0a:	00 b4       	in	r0, 0x20	; 32
    5b0c:	0d 92       	st	X+, r0
    5b0e:	41 50       	subi	r20, 0x01	; 1
    5b10:	50 40       	sbci	r21, 0x00	; 0
    5b12:	b8 f7       	brcc	.-18     	; 0x5b02 <__eerd_blraw_m328p+0x8>
    5b14:	08 95       	ret

00005b16 <__eerd_byte_m328p>:
    5b16:	f9 99       	sbic	0x1f, 1	; 31
    5b18:	fe cf       	rjmp	.-4      	; 0x5b16 <__eerd_byte_m328p>
    5b1a:	92 bd       	out	0x22, r25	; 34
    5b1c:	81 bd       	out	0x21, r24	; 33
    5b1e:	f8 9a       	sbi	0x1f, 0	; 31
    5b20:	99 27       	eor	r25, r25
    5b22:	80 b5       	in	r24, 0x20	; 32
    5b24:	08 95       	ret

00005b26 <__eeupd_block_m328p>:
    5b26:	dc 01       	movw	r26, r24
    5b28:	a4 0f       	add	r26, r20
    5b2a:	b5 1f       	adc	r27, r21
    5b2c:	41 50       	subi	r20, 0x01	; 1
    5b2e:	50 40       	sbci	r21, 0x00	; 0
    5b30:	48 f0       	brcs	.+18     	; 0x5b44 <__eeupd_block_m328p+0x1e>
    5b32:	cb 01       	movw	r24, r22
    5b34:	84 0f       	add	r24, r20
    5b36:	95 1f       	adc	r25, r21
    5b38:	2e 91       	ld	r18, -X
    5b3a:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <__eeupd_r18_m328p>
    5b3e:	41 50       	subi	r20, 0x01	; 1
    5b40:	50 40       	sbci	r21, 0x00	; 0
    5b42:	d0 f7       	brcc	.-12     	; 0x5b38 <__eeupd_block_m328p+0x12>
    5b44:	08 95       	ret

00005b46 <__eeupd_byte_m328p>:
    5b46:	26 2f       	mov	r18, r22

00005b48 <__eeupd_r18_m328p>:
    5b48:	f9 99       	sbic	0x1f, 1	; 31
    5b4a:	fe cf       	rjmp	.-4      	; 0x5b48 <__eeupd_r18_m328p>
    5b4c:	92 bd       	out	0x22, r25	; 34
    5b4e:	81 bd       	out	0x21, r24	; 33
    5b50:	f8 9a       	sbi	0x1f, 0	; 31
    5b52:	01 97       	sbiw	r24, 0x01	; 1
    5b54:	00 b4       	in	r0, 0x20	; 32
    5b56:	02 16       	cp	r0, r18
    5b58:	39 f0       	breq	.+14     	; 0x5b68 <__eeupd_r18_m328p+0x20>
    5b5a:	1f ba       	out	0x1f, r1	; 31
    5b5c:	20 bd       	out	0x20, r18	; 32
    5b5e:	0f b6       	in	r0, 0x3f	; 63
    5b60:	f8 94       	cli
    5b62:	fa 9a       	sbi	0x1f, 2	; 31
    5b64:	f9 9a       	sbi	0x1f, 1	; 31
    5b66:	0f be       	out	0x3f, r0	; 63
    5b68:	08 95       	ret

00005b6a <__eewr_block_m328p>:
    5b6a:	dc 01       	movw	r26, r24
    5b6c:	cb 01       	movw	r24, r22
    5b6e:	03 c0       	rjmp	.+6      	; 0x5b76 <__eewr_block_m328p+0xc>
    5b70:	2d 91       	ld	r18, X+
    5b72:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <__eewr_r18_m328p>
    5b76:	41 50       	subi	r20, 0x01	; 1
    5b78:	50 40       	sbci	r21, 0x00	; 0
    5b7a:	d0 f7       	brcc	.-12     	; 0x5b70 <__eewr_block_m328p+0x6>
    5b7c:	08 95       	ret

00005b7e <__eewr_byte_m328p>:
    5b7e:	26 2f       	mov	r18, r22

00005b80 <__eewr_r18_m328p>:
    5b80:	f9 99       	sbic	0x1f, 1	; 31
    5b82:	fe cf       	rjmp	.-4      	; 0x5b80 <__eewr_r18_m328p>
    5b84:	1f ba       	out	0x1f, r1	; 31
    5b86:	92 bd       	out	0x22, r25	; 34
    5b88:	81 bd       	out	0x21, r24	; 33
    5b8a:	20 bd       	out	0x20, r18	; 32
    5b8c:	0f b6       	in	r0, 0x3f	; 63
    5b8e:	f8 94       	cli
    5b90:	fa 9a       	sbi	0x1f, 2	; 31
    5b92:	f9 9a       	sbi	0x1f, 1	; 31
    5b94:	0f be       	out	0x3f, r0	; 63
    5b96:	01 96       	adiw	r24, 0x01	; 1
    5b98:	08 95       	ret

00005b9a <strnlen_P>:
    5b9a:	fc 01       	movw	r30, r24
    5b9c:	05 90       	lpm	r0, Z+
    5b9e:	61 50       	subi	r22, 0x01	; 1
    5ba0:	70 40       	sbci	r23, 0x00	; 0
    5ba2:	01 10       	cpse	r0, r1
    5ba4:	d8 f7       	brcc	.-10     	; 0x5b9c <strnlen_P+0x2>
    5ba6:	80 95       	com	r24
    5ba8:	90 95       	com	r25
    5baa:	8e 0f       	add	r24, r30
    5bac:	9f 1f       	adc	r25, r31
    5bae:	08 95       	ret

00005bb0 <strnlen>:
    5bb0:	fc 01       	movw	r30, r24
    5bb2:	61 50       	subi	r22, 0x01	; 1
    5bb4:	70 40       	sbci	r23, 0x00	; 0
    5bb6:	01 90       	ld	r0, Z+
    5bb8:	01 10       	cpse	r0, r1
    5bba:	d8 f7       	brcc	.-10     	; 0x5bb2 <strnlen+0x2>
    5bbc:	80 95       	com	r24
    5bbe:	90 95       	com	r25
    5bc0:	8e 0f       	add	r24, r30
    5bc2:	9f 1f       	adc	r25, r31
    5bc4:	08 95       	ret

00005bc6 <strrev>:
    5bc6:	dc 01       	movw	r26, r24
    5bc8:	fc 01       	movw	r30, r24
    5bca:	67 2f       	mov	r22, r23
    5bcc:	71 91       	ld	r23, Z+
    5bce:	77 23       	and	r23, r23
    5bd0:	e1 f7       	brne	.-8      	; 0x5bca <strrev+0x4>
    5bd2:	32 97       	sbiw	r30, 0x02	; 2
    5bd4:	04 c0       	rjmp	.+8      	; 0x5bde <strrev+0x18>
    5bd6:	7c 91       	ld	r23, X
    5bd8:	6d 93       	st	X+, r22
    5bda:	70 83       	st	Z, r23
    5bdc:	62 91       	ld	r22, -Z
    5bde:	ae 17       	cp	r26, r30
    5be0:	bf 07       	cpc	r27, r31
    5be2:	c8 f3       	brcs	.-14     	; 0x5bd6 <strrev+0x10>
    5be4:	08 95       	ret

00005be6 <fputc>:
    5be6:	0f 93       	push	r16
    5be8:	1f 93       	push	r17
    5bea:	cf 93       	push	r28
    5bec:	df 93       	push	r29
    5bee:	18 2f       	mov	r17, r24
    5bf0:	09 2f       	mov	r16, r25
    5bf2:	eb 01       	movw	r28, r22
    5bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    5bf6:	81 fd       	sbrc	r24, 1
    5bf8:	03 c0       	rjmp	.+6      	; 0x5c00 <fputc+0x1a>
    5bfa:	8f ef       	ldi	r24, 0xFF	; 255
    5bfc:	9f ef       	ldi	r25, 0xFF	; 255
    5bfe:	20 c0       	rjmp	.+64     	; 0x5c40 <fputc+0x5a>
    5c00:	82 ff       	sbrs	r24, 2
    5c02:	10 c0       	rjmp	.+32     	; 0x5c24 <fputc+0x3e>
    5c04:	4e 81       	ldd	r20, Y+6	; 0x06
    5c06:	5f 81       	ldd	r21, Y+7	; 0x07
    5c08:	2c 81       	ldd	r18, Y+4	; 0x04
    5c0a:	3d 81       	ldd	r19, Y+5	; 0x05
    5c0c:	42 17       	cp	r20, r18
    5c0e:	53 07       	cpc	r21, r19
    5c10:	7c f4       	brge	.+30     	; 0x5c30 <fputc+0x4a>
    5c12:	e8 81       	ld	r30, Y
    5c14:	f9 81       	ldd	r31, Y+1	; 0x01
    5c16:	9f 01       	movw	r18, r30
    5c18:	2f 5f       	subi	r18, 0xFF	; 255
    5c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c1c:	39 83       	std	Y+1, r19	; 0x01
    5c1e:	28 83       	st	Y, r18
    5c20:	10 83       	st	Z, r17
    5c22:	06 c0       	rjmp	.+12     	; 0x5c30 <fputc+0x4a>
    5c24:	e8 85       	ldd	r30, Y+8	; 0x08
    5c26:	f9 85       	ldd	r31, Y+9	; 0x09
    5c28:	81 2f       	mov	r24, r17
    5c2a:	09 95       	icall
    5c2c:	89 2b       	or	r24, r25
    5c2e:	29 f7       	brne	.-54     	; 0x5bfa <fputc+0x14>
    5c30:	2e 81       	ldd	r18, Y+6	; 0x06
    5c32:	3f 81       	ldd	r19, Y+7	; 0x07
    5c34:	2f 5f       	subi	r18, 0xFF	; 255
    5c36:	3f 4f       	sbci	r19, 0xFF	; 255
    5c38:	3f 83       	std	Y+7, r19	; 0x07
    5c3a:	2e 83       	std	Y+6, r18	; 0x06
    5c3c:	81 2f       	mov	r24, r17
    5c3e:	90 2f       	mov	r25, r16
    5c40:	df 91       	pop	r29
    5c42:	cf 91       	pop	r28
    5c44:	1f 91       	pop	r17
    5c46:	0f 91       	pop	r16
    5c48:	08 95       	ret

00005c4a <__ultoa_invert>:
    5c4a:	fa 01       	movw	r30, r20
    5c4c:	aa 27       	eor	r26, r26
    5c4e:	28 30       	cpi	r18, 0x08	; 8
    5c50:	51 f1       	breq	.+84     	; 0x5ca6 <__ultoa_invert+0x5c>
    5c52:	20 31       	cpi	r18, 0x10	; 16
    5c54:	81 f1       	breq	.+96     	; 0x5cb6 <__ultoa_invert+0x6c>
    5c56:	e8 94       	clt
    5c58:	6f 93       	push	r22
    5c5a:	6e 7f       	andi	r22, 0xFE	; 254
    5c5c:	6e 5f       	subi	r22, 0xFE	; 254
    5c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c60:	8f 4f       	sbci	r24, 0xFF	; 255
    5c62:	9f 4f       	sbci	r25, 0xFF	; 255
    5c64:	af 4f       	sbci	r26, 0xFF	; 255
    5c66:	b1 e0       	ldi	r27, 0x01	; 1
    5c68:	3e d0       	rcall	.+124    	; 0x5ce6 <__ultoa_invert+0x9c>
    5c6a:	b4 e0       	ldi	r27, 0x04	; 4
    5c6c:	3c d0       	rcall	.+120    	; 0x5ce6 <__ultoa_invert+0x9c>
    5c6e:	67 0f       	add	r22, r23
    5c70:	78 1f       	adc	r23, r24
    5c72:	89 1f       	adc	r24, r25
    5c74:	9a 1f       	adc	r25, r26
    5c76:	a1 1d       	adc	r26, r1
    5c78:	68 0f       	add	r22, r24
    5c7a:	79 1f       	adc	r23, r25
    5c7c:	8a 1f       	adc	r24, r26
    5c7e:	91 1d       	adc	r25, r1
    5c80:	a1 1d       	adc	r26, r1
    5c82:	6a 0f       	add	r22, r26
    5c84:	71 1d       	adc	r23, r1
    5c86:	81 1d       	adc	r24, r1
    5c88:	91 1d       	adc	r25, r1
    5c8a:	a1 1d       	adc	r26, r1
    5c8c:	20 d0       	rcall	.+64     	; 0x5cce <__ultoa_invert+0x84>
    5c8e:	09 f4       	brne	.+2      	; 0x5c92 <__ultoa_invert+0x48>
    5c90:	68 94       	set
    5c92:	3f 91       	pop	r19
    5c94:	2a e0       	ldi	r18, 0x0A	; 10
    5c96:	26 9f       	mul	r18, r22
    5c98:	11 24       	eor	r1, r1
    5c9a:	30 19       	sub	r19, r0
    5c9c:	30 5d       	subi	r19, 0xD0	; 208
    5c9e:	31 93       	st	Z+, r19
    5ca0:	de f6       	brtc	.-74     	; 0x5c58 <__ultoa_invert+0xe>
    5ca2:	cf 01       	movw	r24, r30
    5ca4:	08 95       	ret
    5ca6:	46 2f       	mov	r20, r22
    5ca8:	47 70       	andi	r20, 0x07	; 7
    5caa:	40 5d       	subi	r20, 0xD0	; 208
    5cac:	41 93       	st	Z+, r20
    5cae:	b3 e0       	ldi	r27, 0x03	; 3
    5cb0:	0f d0       	rcall	.+30     	; 0x5cd0 <__ultoa_invert+0x86>
    5cb2:	c9 f7       	brne	.-14     	; 0x5ca6 <__ultoa_invert+0x5c>
    5cb4:	f6 cf       	rjmp	.-20     	; 0x5ca2 <__ultoa_invert+0x58>
    5cb6:	46 2f       	mov	r20, r22
    5cb8:	4f 70       	andi	r20, 0x0F	; 15
    5cba:	40 5d       	subi	r20, 0xD0	; 208
    5cbc:	4a 33       	cpi	r20, 0x3A	; 58
    5cbe:	18 f0       	brcs	.+6      	; 0x5cc6 <__ultoa_invert+0x7c>
    5cc0:	49 5d       	subi	r20, 0xD9	; 217
    5cc2:	31 fd       	sbrc	r19, 1
    5cc4:	40 52       	subi	r20, 0x20	; 32
    5cc6:	41 93       	st	Z+, r20
    5cc8:	02 d0       	rcall	.+4      	; 0x5cce <__ultoa_invert+0x84>
    5cca:	a9 f7       	brne	.-22     	; 0x5cb6 <__ultoa_invert+0x6c>
    5ccc:	ea cf       	rjmp	.-44     	; 0x5ca2 <__ultoa_invert+0x58>
    5cce:	b4 e0       	ldi	r27, 0x04	; 4
    5cd0:	a6 95       	lsr	r26
    5cd2:	97 95       	ror	r25
    5cd4:	87 95       	ror	r24
    5cd6:	77 95       	ror	r23
    5cd8:	67 95       	ror	r22
    5cda:	ba 95       	dec	r27
    5cdc:	c9 f7       	brne	.-14     	; 0x5cd0 <__ultoa_invert+0x86>
    5cde:	00 97       	sbiw	r24, 0x00	; 0
    5ce0:	61 05       	cpc	r22, r1
    5ce2:	71 05       	cpc	r23, r1
    5ce4:	08 95       	ret
    5ce6:	9b 01       	movw	r18, r22
    5ce8:	ac 01       	movw	r20, r24
    5cea:	0a 2e       	mov	r0, r26
    5cec:	06 94       	lsr	r0
    5cee:	57 95       	ror	r21
    5cf0:	47 95       	ror	r20
    5cf2:	37 95       	ror	r19
    5cf4:	27 95       	ror	r18
    5cf6:	ba 95       	dec	r27
    5cf8:	c9 f7       	brne	.-14     	; 0x5cec <__ultoa_invert+0xa2>
    5cfa:	62 0f       	add	r22, r18
    5cfc:	73 1f       	adc	r23, r19
    5cfe:	84 1f       	adc	r24, r20
    5d00:	95 1f       	adc	r25, r21
    5d02:	a0 1d       	adc	r26, r0
    5d04:	08 95       	ret

00005d06 <__prologue_saves__>:
    5d06:	2f 92       	push	r2
    5d08:	3f 92       	push	r3
    5d0a:	4f 92       	push	r4
    5d0c:	5f 92       	push	r5
    5d0e:	6f 92       	push	r6
    5d10:	7f 92       	push	r7
    5d12:	8f 92       	push	r8
    5d14:	9f 92       	push	r9
    5d16:	af 92       	push	r10
    5d18:	bf 92       	push	r11
    5d1a:	cf 92       	push	r12
    5d1c:	df 92       	push	r13
    5d1e:	ef 92       	push	r14
    5d20:	ff 92       	push	r15
    5d22:	0f 93       	push	r16
    5d24:	1f 93       	push	r17
    5d26:	cf 93       	push	r28
    5d28:	df 93       	push	r29
    5d2a:	cd b7       	in	r28, 0x3d	; 61
    5d2c:	de b7       	in	r29, 0x3e	; 62
    5d2e:	ca 1b       	sub	r28, r26
    5d30:	db 0b       	sbc	r29, r27
    5d32:	0f b6       	in	r0, 0x3f	; 63
    5d34:	f8 94       	cli
    5d36:	de bf       	out	0x3e, r29	; 62
    5d38:	0f be       	out	0x3f, r0	; 63
    5d3a:	cd bf       	out	0x3d, r28	; 61
    5d3c:	09 94       	ijmp

00005d3e <__epilogue_restores__>:
    5d3e:	2a 88       	ldd	r2, Y+18	; 0x12
    5d40:	39 88       	ldd	r3, Y+17	; 0x11
    5d42:	48 88       	ldd	r4, Y+16	; 0x10
    5d44:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d46:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d48:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d50:	b9 84       	ldd	r11, Y+9	; 0x09
    5d52:	c8 84       	ldd	r12, Y+8	; 0x08
    5d54:	df 80       	ldd	r13, Y+7	; 0x07
    5d56:	ee 80       	ldd	r14, Y+6	; 0x06
    5d58:	fd 80       	ldd	r15, Y+5	; 0x05
    5d5a:	0c 81       	ldd	r16, Y+4	; 0x04
    5d5c:	1b 81       	ldd	r17, Y+3	; 0x03
    5d5e:	aa 81       	ldd	r26, Y+2	; 0x02
    5d60:	b9 81       	ldd	r27, Y+1	; 0x01
    5d62:	ce 0f       	add	r28, r30
    5d64:	d1 1d       	adc	r29, r1
    5d66:	0f b6       	in	r0, 0x3f	; 63
    5d68:	f8 94       	cli
    5d6a:	de bf       	out	0x3e, r29	; 62
    5d6c:	0f be       	out	0x3f, r0	; 63
    5d6e:	cd bf       	out	0x3d, r28	; 61
    5d70:	ed 01       	movw	r28, r26
    5d72:	08 95       	ret

00005d74 <_exit>:
    5d74:	f8 94       	cli

00005d76 <__stop_program>:
    5d76:	ff cf       	rjmp	.-2      	; 0x5d76 <__stop_program>
